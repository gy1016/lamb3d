/**
 * Common utility methods for math operations.
 */
class MathUtil {
    /** The value for which all absolute numbers smaller than are considered equal to zero. */
    static zeroTolerance = 1e-6;
    /** The conversion factor that radian to degree. */
    static radToDegreeFactor = 180 / Math.PI;
    /** The conversion factor that degree to radian. */
    static degreeToRadFactor = Math.PI / 180;
    /**
     * Clamps the specified value.
     * @param v - The specified value
     * @param min - The min value
     * @param max - The max value
     * @returns The result of clamping a value between min and max
     */
    static clamp(v, min, max) {
        return Math.max(min, Math.min(max, v));
    }
    /**
     * Checks if a and b are almost equals.
     * The absolute value of the difference between a and b is close to zero.
     * @param a - The left value to compare
     * @param b - The right value to compare
     * @returns True if a almost equal to b, false otherwise
     */
    static equals(a, b) {
        return Math.abs(a - b) <= MathUtil.zeroTolerance;
    }
    /**
     * Determines whether the specified v is pow2.
     * @param v - The specified v
     * @returns True if the specified v is pow2, false otherwise
     */
    static isPowerOf2(v) {
        return (v & (v - 1)) === 0;
    }
    /**
     * Modify the specified r from radian to degree.
     * @param r - The specified r
     * @returns The degree value
     */
    static radianToDegree(r) {
        return r * MathUtil.radToDegreeFactor;
    }
    /**
     * Modify the specified d from degree to radian.
     * @param d - The specified d
     * @returns The radian value
     */
    static degreeToRadian(d) {
        return d * MathUtil.degreeToRadFactor;
    }
}

class Vector2 {
    /** @internal */
    static _zero = new Vector2(0.0, 0.0);
    /** @internal */
    static _one = new Vector2(1.0, 1.0);
    /**
     * Determines the sum of two vectors.
     * @param left - The first vector to add
     * @param right - The second vector to add
     * @param out - The sum of two vectors
     */
    static add(left, right, out) {
        out._x = left._x + right._x;
        out._y = left._y + right._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the difference between two vectors.
     * @param left - The first vector to subtract
     * @param right - The second vector to subtract
     * @param out - The difference between two vectors
     */
    static subtract(left, right, out) {
        out._x = left._x - right._x;
        out._y = left._y - right._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the product of two vectors.
     * @param left - The first vector to multiply
     * @param right - The second vector to multiply
     * @param out - The product of two vectors
     */
    static multiply(left, right, out) {
        out._x = left._x * right._x;
        out._y = left._y * right._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the divisor of two vectors.
     * @param left - The first vector to divide
     * @param right - The second vector to divide
     * @param out - The divisor of two vectors
     */
    static divide(left, right, out) {
        out._x = left._x / right._x;
        out._y = left._y / right._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the dot product of two vectors.
     * @param left - The first vector to dot
     * @param right - The second vector to dot
     * @returns The dot product of two vectors
     */
    static dot(left, right) {
        return left._x * right._x + left._y * right._y;
    }
    /**
     * Determines the distance of two vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @returns The distance of two vectors
     */
    static distance(left, right) {
        const x = right._x - left._x;
        const y = right._y - left._y;
        return Math.sqrt(x * x + y * y);
    }
    /**
     * Determines the squared distance of two vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @returns The squared distance of two vectors
     */
    static distanceSquared(left, right) {
        const x = right._x - left._x;
        const y = right._y - left._y;
        return x * x + y * y;
    }
    /**
     * Determines whether the specified vectors are equals.
     * @param left - The first vector to compare
     * @param right - The second vector to compare
     * @returns True if the specified vectors are equals, false otherwise
     */
    static equals(left, right) {
        return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y);
    }
    /**
     * Performs a linear interpolation between two vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param t - The blend amount where 0 returns left and 1 right
     * @param out - The result of linear blending between two vectors
     */
    static lerp(left, right, t, out) {
        const { _x, _y } = left;
        out._x = _x + (right._x - _x) * t;
        out._y = _y + (right._y - _y) * t;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the largest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the largest components of the specified vectors
     */
    static max(left, right, out) {
        out._x = Math.max(left._x, right._x);
        out._y = Math.max(left._y, right._y);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the smallest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the smallest components of the specified vectors
     */
    static min(left, right, out) {
        out._x = Math.min(left._x, right._x);
        out._y = Math.min(left._y, right._y);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Reverses the direction of a given vector.
     * @param left - The vector to negate
     * @param out - The vector facing in the opposite direction
     */
    static negate(left, out) {
        out._x = -left._x;
        out._y = -left._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Converts the vector into a unit vector.
     * @param left - The vector to normalize
     * @param out - The normalized vector
     */
    static normalize(left, out) {
        const { _x, _y } = left;
        let len = Math.sqrt(_x * _x + _y * _y);
        if (len > MathUtil.zeroTolerance) {
            len = 1 / len;
            out._x = _x * len;
            out._y = _y * len;
            out._onValueChanged && out._onValueChanged();
        }
    }
    /**
     * Scale a vector by the given value.
     * @param left - The vector to scale
     * @param s - The amount by which to scale the vector
     * @param out - The scaled vector
     */
    static scale(left, s, out) {
        out._x = left._x * s;
        out._y = left._y * s;
        out._onValueChanged && out._onValueChanged();
    }
    /** @internal */
    _x;
    /** @internal */
    _y;
    /** @internal */
    _onValueChanged = null;
    /**
     * The x component of the vector.
     */
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The y component of the vector.
     */
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Constructor of Vector2.
     * @param x - The x component of the vector, default 0
     * @param y - The y component of the vector, default 0
     */
    constructor(x = 0, y = 0) {
        this._x = x;
        this._y = y;
    }
    /**
     * Set the value of this vector.
     * @param x - The x component of the vector
     * @param y - The y component of the vector
     * @returns This vector
     */
    setValue(x, y) {
        this._x = x;
        this._y = y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Set the value of this vector by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This vector
     */
    setValueByArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the sum of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    add(right) {
        this._x += right._x;
        this._y += right._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the difference of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    subtract(right) {
        this._x -= right._x;
        this._y -= right._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the product of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    multiply(right) {
        this._x *= right._x;
        this._y *= right._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the divisor of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    divide(right) {
        this._x /= right._x;
        this._y /= right._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Calculate the length of this vector.
     * @returns The length of this vector
     */
    length() {
        const { _x, _y } = this;
        return Math.sqrt(_x * _x + _y * _y);
    }
    /**
     * Calculate the squared length of this vector.
     * @returns The squared length of this vector
     */
    lengthSquared() {
        const { _x, _y } = this;
        return _x * _x + _y * _y;
    }
    /**
     * Reverses the direction of this vector.
     * @returns This vector
     */
    negate() {
        this._x = -this._x;
        this._y = -this._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Converts this vector into a unit vector.
     * @returns This vector
     */
    normalize() {
        Vector2.normalize(this, this);
        return this;
    }
    /**
     * Scale this vector by the given value.
     * @param s - The amount by which to scale the vector
     * @returns This vector
     */
    scale(s) {
        this._x *= s;
        this._y *= s;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Clone the value of this vector to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        out[outOffset] = this._x;
        out[outOffset + 1] = this._y;
    }
    /**
     * Creates a clone of this vector.
     * @returns A clone of this vector
     */
    clone() {
        return new Vector2(this._x, this._y);
    }
    /**
     * Clones this vector to the specified vector.
     * @param out - The specified vector
     * @returns The specified vector
     */
    cloneTo(out) {
        out._x = this._x;
        out._y = this._y;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
}

/**
 * Describes a 3D-vector.
 */
class Vector3 {
    /** @internal */
    static _zero = new Vector3(0.0, 0.0, 0.0);
    /** @internal */
    static _one = new Vector3(1.0, 1.0, 1.0);
    /**
     * Determines the sum of two vectors.
     * @param left - The first vector to add
     * @param right - The second vector to add
     * @param out - The sum of two vectors
     */
    static add(left, right, out) {
        out._x = left._x + right._x;
        out._y = left._y + right._y;
        out._z = left._z + right._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the difference between two vectors.
     * @param left - The first vector to subtract
     * @param right - The second vector to subtract
     * @param out - The difference between two vectors
     */
    static subtract(left, right, out) {
        out._x = left._x - right._x;
        out._y = left._y - right._y;
        out._z = left._z - right._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the product of two vectors.
     * @param left - The first vector to multiply
     * @param right - The second vector to multiply
     * @param out - The product of two vectors
     */
    static multiply(left, right, out) {
        out._x = left._x * right._x;
        out._y = left._y * right._y;
        out._z = left._z * right._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the divisor of two vectors.
     * @param left - The first vector to divide
     * @param right - The second vector to divide
     * @param out - The divisor of two vectors
     */
    static divide(left, right, out) {
        out._x = left._x / right._x;
        out._y = left._y / right._y;
        out._z = left._z / right._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the dot product of two vectors.
     * @param left - The first vector to dot
     * @param right - The second vector to dot
     * @returns The dot product of two vectors
     */
    static dot(left, right) {
        return left._x * right._x + left._y * right._y + left._z * right._z;
    }
    /**
     * Determines the cross product of two vectors.
     * @param left - The first vector to cross
     * @param right - The second vector to cross
     * @param out - The cross product of two vectors
     */
    static cross(left, right, out) {
        const ax = left._x;
        const ay = left._y;
        const az = left._z;
        const bx = right._x;
        const by = right._y;
        const bz = right._z;
        out.setValue(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);
    }
    /**
     * Determines the distance of two vectors.
     * @param a - The first vector
     * @param b - The second vector
     * @returns The distance of two vectors
     */
    static distance(a, b) {
        const x = b._x - a._x;
        const y = b._y - a._y;
        const z = b._z - a._z;
        return Math.sqrt(x * x + y * y + z * z);
    }
    /**
     * Determines the squared distance of two vectors.
     * @param a - The first vector
     * @param b - The second vector
     * @returns The squared distance of two vectors
     */
    static distanceSquared(a, b) {
        const x = b._x - a._x;
        const y = b._y - a._y;
        const z = b._z - a._z;
        return x * x + y * y + z * z;
    }
    /**
     * Determines whether the specified vectors are equals.
     * @param left - The first vector to compare
     * @param right - The second vector to compare
     * @returns True if the specified vectors are equals, false otherwise
     */
    static equals(left, right) {
        return (MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z));
    }
    /**
     * Performs a linear interpolation between two vectors.
     * @param start - The first vector
     * @param end - The second vector
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two vectors
     */
    static lerp(start, end, t, out) {
        const { _x, _y, _z } = start;
        out._x = _x + (end._x - _x) * t;
        out._y = _y + (end._y - _y) * t;
        out._z = _z + (end._z - _z) * t;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the largest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the largest components of the specified vectors
     */
    static max(left, right, out) {
        out._x = Math.max(left._x, right._x);
        out._y = Math.max(left._y, right._y);
        out._z = Math.max(left._z, right._z);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the smallest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the smallest components of the specified vectors
     */
    static min(left, right, out) {
        out._x = Math.min(left._x, right._x);
        out._y = Math.min(left._y, right._y);
        out._z = Math.min(left._z, right._z);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Reverses the direction of a given vector.
     * @param a - The vector to negate
     * @param out - The vector facing in the opposite direction
     */
    static negate(a, out) {
        out._x = -a._x;
        out._y = -a._y;
        out._z = -a._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Converts the vector into a unit vector.
     * @param a - The vector to normalize
     * @param out - The normalized vector
     */
    static normalize(a, out) {
        const { _x, _y, _z } = a;
        let len = Math.sqrt(_x * _x + _y * _y + _z * _z);
        if (len > MathUtil.zeroTolerance) {
            len = 1 / len;
            out.setValue(_x * len, _y * len, _z * len);
        }
    }
    /**
     * Scale a vector by the given value.
     * @param a - The vector to scale
     * @param s - The amount by which to scale the vector
     * @param out - The scaled vector
     */
    static scale(a, s, out) {
        out._x = a._x * s;
        out._y = a._y * s;
        out._z = a._z * s;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a normal transformation using the given 4x4 matrix.
     * @remarks
     * A normal transform performs the transformation with the assumption that the w component
     * is zero. This causes the fourth row and fourth column of the matrix to be unused. The
     * end result is a vector that is not translated, but all other transformation properties
     * apply. This is often preferred for normal vectors as normals purely represent direction
     * rather than location because normal vectors should not be translated.
     * @param v - The normal vector to transform
     * @param m - The transform matrix
     * @param out - The transformed normal
     */
    static transformNormal(v, m, out) {
        const { _x, _y, _z } = v;
        const e = m.elements;
        out._x = _x * e[0] + _y * e[4] + _z * e[8];
        out._y = _x * e[1] + _y * e[5] + _z * e[9];
        out._z = _x * e[2] + _y * e[6] + _z * e[10];
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation using the given 4x4 matrix.
     * @param v - The vector to transform
     * @param m - The transform matrix
     * @param out - The transformed vector3
     */
    static transformToVec3(v, m, out) {
        const { _x, _y, _z } = v;
        const e = m.elements;
        out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];
        out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];
        out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.
     * @param v - The vector to transform
     * @param m - The transform matrix
     * @param out - The transformed vector4
     */
    static transformToVec4(v, m, out) {
        const { _x, _y, _z } = v;
        const e = m.elements;
        out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];
        out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];
        out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];
        out._w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a coordinate transformation using the given 4x4 matrix.
     *
     * @remarks
     * A coordinate transform performs the transformation with the assumption that the w component
     * is one. The four dimensional vector obtained from the transformation operation has each
     * component in the vector divided by the w component. This forces the w-component to be one and
     * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
     * with coordinates as the w component can safely be ignored.
     * @param v - The coordinate vector to transform
     * @param m - The transform matrix
     * @param out - The transformed coordinates
     */
    static transformCoordinate(v, m, out) {
        const { _x, _y, _z } = v;
        const e = m.elements;
        let w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];
        w = 1.0 / w;
        out._x = (_x * e[0] + _y * e[4] + _z * e[8] + e[12]) * w;
        out._y = (_x * e[1] + _y * e[5] + _z * e[9] + e[13]) * w;
        out._z = (_x * e[2] + _y * e[6] + _z * e[10] + e[14]) * w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation using the given quaternion.
     * @param v - The vector to transform
     * @param quaternion - The transform quaternion
     * @param out - The transformed vector
     */
    static transformByQuat(v, quaternion, out) {
        const { _x, _y, _z } = v;
        const { _x: qx, _y: qy, _z: qz, _w: qw } = quaternion;
        // calculate quat * vec
        const ix = qw * _x + qy * _z - qz * _y;
        const iy = qw * _y + qz * _x - qx * _z;
        const iz = qw * _z + qx * _y - qy * _x;
        const iw = -qx * _x - qy * _y - qz * _z;
        // calculate result * inverse quat
        out._x = ix * qw - iw * qx - iy * qz + iz * qy;
        out._y = iy * qw - iw * qy - iz * qx + ix * qz;
        out._z = iz * qw - iw * qz - ix * qy + iy * qx;
        out._onValueChanged && out._onValueChanged();
    }
    /** @internal */
    _x;
    /** @internal */
    _y;
    /** @internal */
    _z;
    /** @internal */
    _onValueChanged = null;
    /**
     * The x component of the vector.
     */
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The y component of the vector.
     */
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The z component of the vector.
     */
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Constructor of Vector3.
     * @param x - The x component of the vector, default 0
     * @param y - The y component of the vector, default 0
     * @param z - The z component of the vector, default 0
     */
    constructor(x = 0, y = 0, z = 0) {
        this._x = x;
        this._y = y;
        this._z = z;
    }
    /**
     * Set the value of this vector.
     * @param x - The x component of the vector
     * @param y - The y component of the vector
     * @param z - The z component of the vector
     * @returns This vector
     */
    setValue(x, y, z) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Set the value of this vector by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This vector
     */
    setValueByArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the sum of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    add(right) {
        this._x += right._x;
        this._y += right._y;
        this._z += right._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the difference of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    subtract(right) {
        this._x -= right._x;
        this._y -= right._y;
        this._z -= right._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the product of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    multiply(right) {
        this._x *= right._x;
        this._y *= right._y;
        this._z *= right._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the divisor of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    divide(right) {
        this._x /= right._x;
        this._y /= right._y;
        this._z /= right._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Calculate the length of this vector.
     * @returns The length of this vector
     */
    length() {
        const { _x, _y, _z } = this;
        return Math.sqrt(_x * _x + _y * _y + _z * _z);
    }
    /**
     * Calculate the squared length of this vector.
     * @returns The squared length of this vector
     */
    lengthSquared() {
        const { _x, _y, _z } = this;
        return _x * _x + _y * _y + _z * _z;
    }
    /**
     * Reverses the direction of this vector.
     * @returns This vector
     */
    negate() {
        this._x = -this._x;
        this._y = -this._y;
        this._z = -this._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Converts this vector into a unit vector.
     * @returns This vector
     */
    normalize() {
        Vector3.normalize(this, this);
        return this;
    }
    /**
     * Scale this vector by the given value.
     * @param s - The amount by which to scale the vector
     * @returns This vector
     */
    scale(s) {
        this._x *= s;
        this._y *= s;
        this._z *= s;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Clone the value of this vector to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        out[outOffset] = this._x;
        out[outOffset + 1] = this._y;
        out[outOffset + 2] = this._z;
    }
    /**
     * Creates a clone of this vector.
     * @returns A clone of this vector
     */
    clone() {
        return new Vector3(this._x, this._y, this._z);
    }
    /**
     * Clones this vector to the specified vector.
     * @param out - The specified vector
     * @returns The specified vector
     */
    cloneTo(out) {
        out._x = this._x;
        out._y = this._y;
        out._z = this._z;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * This vector performs a normal transformation using the given 4x4 matrix.
     * @remarks
     * A normal transform performs the transformation with the assumption that the w component
     * is zero. This causes the fourth row and fourth column of the matrix to be unused. The
     * end result is a vector that is not translated, but all other transformation properties
     * apply. This is often preferred for normal vectors as normals purely represent direction
     * rather than location because normal vectors should not be translated.
     * @param m - The transform matrix
     * @returns This vector
     */
    transformNormal(m) {
        Vector3.transformNormal(this, m, this);
        return this;
    }
    /**
     * This vector performs a transformation using the given 4x4 matrix.
     * @param m - The transform matrix
     * @returns This vector
     */
    transformToVec3(m) {
        Vector3.transformToVec3(this, m, this);
        return this;
    }
    /**
     * This vector performs a coordinate transformation using the given 4x4 matrix.
     * @remarks
     * A coordinate transform performs the transformation with the assumption that the w component
     * is one. The four dimensional vector obtained from the transformation operation has each
     * component in the vector divided by the w component. This forces the w-component to be one and
     * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
     * with coordinates as the w component can safely be ignored.
     * @param m - The transform matrix
     * @returns This vector
     */
    transformCoordinate(m) {
        Vector3.transformCoordinate(this, m, this);
        return this;
    }
    /**
     * This vector performs a transformation using the given quaternion.
     * @param quaternion - The transform quaternion
     * @returns This vector
     */
    transformByQuat(quaternion) {
        Vector3.transformByQuat(this, quaternion, this);
        return this;
    }
}

/**
 * Describes a 4D-vector.
 */
class Vector4 {
    /** @internal */
    static _zero = new Vector4(0.0, 0.0, 0.0, 0.0);
    /** @internal */
    static _one = new Vector4(1.0, 1.0, 1.0, 1.0);
    /**
     * Determines the sum of two vectors.
     * @param left - The first vector to add
     * @param right - The second vector to add
     * @param out - The sum of two vectors
     */
    static add(left, right, out) {
        out._x = left._x + right._x;
        out._y = left._y + right._y;
        out._z = left._z + right._z;
        out._w = left._w + right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the difference between two vectors.
     * @param left - The first vector to subtract
     * @param right - The second vector to subtract
     * @param out - The difference between two vectors
     */
    static subtract(left, right, out) {
        out._x = left._x - right._x;
        out._y = left._y - right._y;
        out._z = left._z - right._z;
        out._w = left._w - right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the product of two vectors.
     * @param left - The first vector to multiply
     * @param right - The second vector to multiply
     * @param out - The product of two vectors
     */
    static multiply(left, right, out) {
        out._x = left._x * right._x;
        out._y = left._y * right._y;
        out._z = left._z * right._z;
        out._w = left._w * right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the divisor of two vectors.
     * @param left - The first vector to divide
     * @param right - The second vector to divide
     * @param out - The divisor of two vectors
     */
    static divide(left, right, out) {
        out._x = left._x / right._x;
        out._y = left._y / right._y;
        out._z = left._z / right._z;
        out._w = left._w / right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the dot product of two vectors.
     * @param left - The first vector to dot
     * @param right - The second vector to dot
     * @returns The dot product of two vectors
     */
    static dot(left, right) {
        return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;
    }
    /**
     * Determines the distance of two vectors.
     * @param a - The first vector
     * @param b - The second vector
     * @returns The distance of two vectors
     */
    static distance(a, b) {
        const x = b._x - a._x;
        const y = b._y - a._y;
        const z = b._z - a._z;
        const w = b._w - a._w;
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    /**
     * Determines the squared distance of two vectors.
     * @param a - The first vector
     * @param b - The second vector
     * @returns The squared distance of two vectors
     */
    static distanceSquared(a, b) {
        const x = b._x - a._x;
        const y = b._y - a._y;
        const z = b._z - a._z;
        const w = b._w - a._w;
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Determines whether the specified vectors are equals.
     * @param left - The first vector to compare
     * @param right - The second vector to compare
     * @returns True if the specified vectors are equals, false otherwise
     */
    static equals(left, right) {
        return (MathUtil.equals(left._x, right._x) &&
            MathUtil.equals(left._y, right._y) &&
            MathUtil.equals(left._z, right._z) &&
            MathUtil.equals(left._w, right._w));
    }
    /**
     * Performs a linear interpolation between two vectors.
     * @param start - The first vector
     * @param end - The second vector
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two vectors
     */
    static lerp(start, end, t, out) {
        const { _x, _y, _z, _w } = start;
        out._x = _x + (end._x - _x) * t;
        out._y = _y + (end._y - _y) * t;
        out._z = _z + (end._z - _z) * t;
        out._w = _w + (end._w - _w) * t;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the largest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the largest components of the specified vectors
     */
    static max(left, right, out) {
        out._x = Math.max(left._x, right._x);
        out._y = Math.max(left._y, right._y);
        out._z = Math.max(left._z, right._z);
        out._w = Math.max(left._w, right._w);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the smallest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the smallest components of the specified vectors
     */
    static min(left, right, out) {
        out._x = Math.min(left._x, right._x);
        out._y = Math.min(left._y, right._y);
        out._z = Math.min(left._z, right._z);
        out._w = Math.min(left._w, right._w);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Reverses the direction of a given vector.
     * @param a - The vector to negate
     * @param out - The vector facing in the opposite direction
     */
    static negate(a, out) {
        out._x = -a._x;
        out._y = -a._y;
        out._z = -a._z;
        out._w = -a._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Converts the vector into a unit vector.
     * @param a - The vector to normalize
     * @param out - The normalized vector
     */
    static normalize(a, out) {
        const { _x, _y, _z, _w } = a;
        let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
        if (len > MathUtil.zeroTolerance) {
            len = 1 / len;
            out._x = _x * len;
            out._y = _y * len;
            out._z = _z * len;
            out._w = _w * len;
            out._onValueChanged && out._onValueChanged();
        }
    }
    /**
     * Scale a vector by the given value.
     * @param a - The vector to scale
     * @param s - The amount by which to scale the vector
     * @param out - The scaled vector
     */
    static scale(a, s, out) {
        out._x = a._x * s;
        out._y = a._y * s;
        out._z = a._z * s;
        out._w = a._w * s;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation using the given 4x4 matrix.
     * @param v - The vector to transform
     * @param m - The transform matrix
     * @param out - The transformed vector3
     */
    static transform(v, m, out) {
        const { _x, _y, _z, _w } = v;
        const e = m.elements;
        out._x = _x * e[0] + _y * e[4] + _z * e[8] + _w * e[12];
        out._y = _x * e[1] + _y * e[5] + _z * e[9] + _w * e[13];
        out._z = _x * e[2] + _y * e[6] + _z * e[10] + _w * e[14];
        out._w = _x * e[3] + _y * e[7] + _z * e[11] + _w * e[15];
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation using the given quaternion.
     * @param v - The vector to transform
     * @param q - The transform quaternion
     * @param out - The transformed vector
     */
    static transformByQuat(v, q, out) {
        const { _x: x, _y: y, _z: z, _w: w } = v;
        const qx = q._x;
        const qy = q._y;
        const qz = q._z;
        const qw = q._w;
        // calculate quat * vec
        const ix = qw * x + qy * z - qz * y;
        const iy = qw * y + qz * x - qx * z;
        const iz = qw * z + qx * y - qy * x;
        const iw = -qx * x - qy * y - qz * z;
        // calculate result * inverse quat
        out._x = ix * qw - iw * qx - iy * qz + iz * qy;
        out._y = iy * qw - iw * qy - iz * qx + ix * qz;
        out._z = iz * qw - iw * qz - ix * qy + iy * qx;
        out._w = w;
        out._onValueChanged && out._onValueChanged();
    }
    /** @internal */
    _x;
    /** @internal */
    _y;
    /** @internal */
    _z;
    /** @internal */
    _w;
    /** @internal */
    _onValueChanged = null;
    /**
     * The x component of the vector.
     */
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The y component of the vector.
     */
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The z component of the vector.
     */
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The w component of the vector.
     */
    get w() {
        return this._w;
    }
    set w(value) {
        this._w = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Constructor of Vector4.
     * @param x - The x component of the vector, default 0
     * @param y - The y component of the vector, default 0
     * @param z - The z component of the vector, default 0
     * @param w - The w component of the vector, default 0
     */
    constructor(x = 0, y = 0, z = 0, w = 0) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
    }
    /**
     * Set the value of this vector.
     * @param x - The x component of the vector
     * @param y - The y component of the vector
     * @param z - The z component of the vector
     * @param w - The w component of the vector
     * @returns This vector
     */
    setValue(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Set the value of this vector by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This vector
     */
    setValueByArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the sum of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    add(right) {
        this._x += right._x;
        this._y += right._y;
        this._z += right._z;
        this._w += right._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the difference of this vector and the specified vector.
     * @param right - the specified vector
     * @returns This vector
     */
    subtract(right) {
        this._x -= right._x;
        this._y -= right._y;
        this._z -= right._z;
        this._w -= right._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the product of this vector and the specified vector.
     * @param right - the specified vector
     * @returns This vector
     */
    multiply(right) {
        this._x *= right._x;
        this._y *= right._y;
        this._z *= right._z;
        this._w *= right._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the divisor of this vector and the specified vector.
     * @param right - the specified vector
     * @returns This vector
     */
    divide(right) {
        this._x /= right._x;
        this._y /= right._y;
        this._z /= right._z;
        this._w /= right._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Calculate the length of this vector.
     * @returns The length of this vector
     */
    length() {
        const { _x, _y, _z, _w } = this;
        return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
    }
    /**
     * Calculate the squared length of this vector.
     * @returns The squared length of this vector
     */
    lengthSquared() {
        const { _x, _y, _z, _w } = this;
        return _x * _x + _y * _y + _z * _z + _w * _w;
    }
    /**
     * Reverses the direction of this vector.
     * @returns This vector
     */
    negate() {
        this._x = -this._x;
        this._y = -this._y;
        this._z = -this._z;
        this._w = -this._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Converts this vector into a unit vector.
     * @returns This vector
     */
    normalize() {
        Vector4.normalize(this, this);
        return this;
    }
    /**
     * Scale this vector by the given value.
     * @param s - The amount by which to scale the vector
     * @returns This vector
     */
    scale(s) {
        this._x *= s;
        this._y *= s;
        this._z *= s;
        this._w *= s;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Clone the value of this vector to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        out[outOffset] = this._x;
        out[outOffset + 1] = this._y;
        out[outOffset + 2] = this._z;
        out[outOffset + 3] = this._w;
    }
    /**
     * Creates a clone of this vector.
     * @returns A clone of this vector
     */
    clone() {
        let ret = new Vector4(this._x, this._y, this._z, this._w);
        return ret;
    }
    /**
     * Clones this vector to the specified vector.
     * @param out - The specified vector
     * @returns The specified vector
     */
    cloneTo(out) {
        out._x = this._x;
        out._y = this._y;
        out._z = this._z;
        out._w = this._w;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
}

/**
 * Represents a 3x3 mathematical matrix.
 */
class Matrix3 {
    /**
     * Determines the sum of two matrices.
     * @param left - The first matrix to add
     * @param right - The second matrix to add
     * @param out - The sum of two matrices
     */
    static add(left, right, out) {
        const le = left.elements;
        const re = right.elements;
        const oe = out.elements;
        oe[0] = le[0] + re[0];
        oe[1] = le[1] + re[1];
        oe[2] = le[2] + re[2];
        oe[3] = le[3] + re[3];
        oe[4] = le[4] + re[4];
        oe[5] = le[5] + re[5];
        oe[6] = le[6] + re[6];
        oe[7] = le[7] + re[7];
        oe[8] = le[8] + re[8];
    }
    /**
     * Determines the difference between two matrices.
     * @param left - The first matrix to subtract
     * @param right - The second matrix to subtract
     * @param out - The difference between two matrices
     */
    static subtract(left, right, out) {
        const le = left.elements;
        const re = right.elements;
        const oe = out.elements;
        oe[0] = le[0] - re[0];
        oe[1] = le[1] - re[1];
        oe[2] = le[2] - re[2];
        oe[3] = le[3] - re[3];
        oe[4] = le[4] - re[4];
        oe[5] = le[5] - re[5];
        oe[6] = le[6] - re[6];
        oe[7] = le[7] - re[7];
        oe[8] = le[8] - re[8];
    }
    /**
     * Determines the product of two matrices.
     * @param left - The first matrix to multiply
     * @param right - The second matrix to multiply
     * @param out - The product of two matrices
     */
    static multiply(left, right, out) {
        const le = left.elements;
        const re = right.elements;
        const oe = out.elements;
        const l11 = le[0], l12 = le[1], l13 = le[2];
        const l21 = le[3], l22 = le[4], l23 = le[5];
        const l31 = le[6], l32 = le[7], l33 = le[8];
        const r11 = re[0], r12 = re[1], r13 = re[2];
        const r21 = re[3], r22 = re[4], r23 = re[5];
        const r31 = re[6], r32 = re[7], r33 = re[8];
        oe[0] = l11 * r11 + l21 * r12 + l31 * r13;
        oe[1] = l12 * r11 + l22 * r12 + l32 * r13;
        oe[2] = l13 * r11 + l23 * r12 + l33 * r13;
        oe[3] = l11 * r21 + l21 * r22 + l31 * r23;
        oe[4] = l12 * r21 + l22 * r22 + l32 * r23;
        oe[5] = l13 * r21 + l23 * r22 + l33 * r23;
        oe[6] = l11 * r31 + l21 * r32 + l31 * r33;
        oe[7] = l12 * r31 + l22 * r32 + l32 * r33;
        oe[8] = l13 * r31 + l23 * r32 + l33 * r33;
    }
    /**
     * Determines whether the specified matrices are equals.
     * @param left - The first matrix to compare
     * @param right - The second matrix to compare
     * @returns True if the specified matrices are equals, false otherwise
     */
    static equals(left, right) {
        const le = left.elements;
        const re = right.elements;
        return (MathUtil.equals(le[0], re[0]) &&
            MathUtil.equals(le[1], re[1]) &&
            MathUtil.equals(le[2], re[2]) &&
            MathUtil.equals(le[3], re[3]) &&
            MathUtil.equals(le[4], re[4]) &&
            MathUtil.equals(le[5], re[5]) &&
            MathUtil.equals(le[6], re[6]) &&
            MathUtil.equals(le[7], re[7]) &&
            MathUtil.equals(le[8], re[8]));
    }
    /**
     * Performs a linear interpolation between two matrices.
     * @param start - The first matrix
     * @param end - The second matrix
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two matrices
     */
    static lerp(start, end, t, out) {
        const se = start.elements;
        const ee = end.elements;
        const oe = out.elements;
        const inv = 1.0 - t;
        oe[0] = se[0] * inv + ee[0] * t;
        oe[1] = se[1] * inv + ee[1] * t;
        oe[2] = se[2] * inv + ee[2] * t;
        oe[3] = se[3] * inv + ee[3] * t;
        oe[4] = se[4] * inv + ee[4] * t;
        oe[5] = se[5] * inv + ee[5] * t;
        oe[6] = se[6] * inv + ee[6] * t;
        oe[7] = se[7] * inv + ee[7] * t;
        oe[8] = se[8] * inv + ee[8] * t;
    }
    /**
     * Calculate a rotation matrix from a quaternion.
     * @param quaternion - The quaternion used to calculate the matrix
     * @param out - The calculated rotation matrix
     */
    static rotationQuaternion(quaternion, out) {
        const oe = out.elements;
        const { _x: x, _y: y, _z: z, _w: w } = quaternion;
        const x2 = x + x;
        const y2 = y + y;
        const z2 = z + z;
        const xx = x * x2;
        const yx = y * x2;
        const yy = y * y2;
        const zx = z * x2;
        const zy = z * y2;
        const zz = z * z2;
        const wx = w * x2;
        const wy = w * y2;
        const wz = w * z2;
        oe[0] = 1 - yy - zz;
        oe[3] = yx - wz;
        oe[6] = zx + wy;
        oe[1] = yx + wz;
        oe[4] = 1 - xx - zz;
        oe[7] = zy - wx;
        oe[2] = zx - wy;
        oe[5] = zy + wx;
        oe[8] = 1 - xx - yy;
    }
    /**
     * Calculate a matrix from scale vector.
     * @param s - The scale vector
     * @param out - The calculated matrix
     */
    static scaling(s, out) {
        const oe = out.elements;
        oe[0] = s._x;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = s._y;
        oe[5] = 0;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 1;
    }
    /**
     * Calculate a matrix from translation vector.
     * @param translation - The translation vector
     * @param out - The calculated matrix
     */
    static translation(translation, out) {
        const oe = out.elements;
        oe[0] = 1;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 1;
        oe[5] = 0;
        oe[6] = translation._x;
        oe[7] = translation._y;
        oe[8] = 1;
    }
    /**
     * Calculate the inverse of the specified matrix.
     * @param a - The matrix whose inverse is to be calculated
     * @param out - The inverse of the specified matrix
     */
    static invert(a, out) {
        const ae = a.elements;
        const oe = out.elements;
        const a11 = ae[0], a12 = ae[1], a13 = ae[2];
        const a21 = ae[3], a22 = ae[4], a23 = ae[5];
        const a31 = ae[6], a32 = ae[7], a33 = ae[8];
        const b12 = a33 * a22 - a23 * a32;
        const b22 = -a33 * a21 + a23 * a31;
        const b32 = a32 * a21 - a22 * a31;
        let det = a11 * b12 + a12 * b22 + a13 * b32;
        if (!det) {
            return;
        }
        det = 1.0 / det;
        oe[0] = b12 * det;
        oe[1] = (-a33 * a12 + a13 * a32) * det;
        oe[2] = (a23 * a12 - a13 * a22) * det;
        oe[3] = b22 * det;
        oe[4] = (a33 * a11 - a13 * a31) * det;
        oe[5] = (-a23 * a11 + a13 * a21) * det;
        oe[6] = b32 * det;
        oe[7] = (-a32 * a11 + a12 * a31) * det;
        oe[8] = (a22 * a11 - a12 * a21) * det;
    }
    /**
     * Calculate a 3x3 normal matrix from a 4x4 matrix.
     * @remarks The calculation process is the transpose matrix of the inverse matrix.
     * @param mat4 - The 4x4 matrix
     * @param out - THe 3x3 normal matrix
     */
    static normalMatrix(mat4, out) {
        const ae = mat4.elements;
        const oe = out.elements;
        const a11 = ae[0], a12 = ae[1], a13 = ae[2], a14 = ae[3];
        const a21 = ae[4], a22 = ae[5], a23 = ae[6], a24 = ae[7];
        const a31 = ae[8], a32 = ae[9], a33 = ae[10], a34 = ae[11];
        const a41 = ae[12], a42 = ae[13], a43 = ae[14], a44 = ae[15];
        const b00 = a11 * a22 - a12 * a21;
        const b01 = a11 * a23 - a13 * a21;
        const b02 = a11 * a24 - a14 * a21;
        const b03 = a12 * a23 - a13 * a22;
        const b04 = a12 * a24 - a14 * a22;
        const b05 = a13 * a24 - a14 * a23;
        const b06 = a31 * a42 - a32 * a41;
        const b07 = a31 * a43 - a33 * a41;
        const b08 = a31 * a44 - a34 * a41;
        const b09 = a32 * a43 - a33 * a42;
        const b10 = a32 * a44 - a34 * a42;
        const b11 = a33 * a44 - a34 * a43;
        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;
        oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;
        oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;
        oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;
        oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;
        oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;
        oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;
        oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;
        oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;
    }
    /**
     * The specified matrix rotates around an angle.
     * @param a - The specified matrix
     * @param r - The rotation angle in radians
     * @param out - The rotated matrix
     */
    static rotate(a, r, out) {
        const ae = a.elements;
        const oe = out.elements;
        const s = Math.sin(r);
        const c = Math.cos(r);
        const a11 = ae[0], a12 = ae[1], a13 = ae[2];
        const a21 = ae[3], a22 = ae[4], a23 = ae[5];
        const a31 = ae[6], a32 = ae[7], a33 = ae[8];
        oe[0] = c * a11 + s * a21;
        oe[1] = c * a12 + s * a22;
        oe[2] = c * a13 + s * a23;
        oe[3] = c * a21 - s * a11;
        oe[4] = c * a22 - s * a12;
        oe[5] = c * a23 - s * a13;
        oe[6] = a31;
        oe[7] = a32;
        oe[8] = a33;
    }
    /**
     * Scale a matrix by a given vector.
     * @param m - The matrix
     * @param s - The given vector
     * @param out - The scaled matrix
     */
    static scale(m, s, out) {
        const { _x: x, _y: y } = s;
        const ae = m.elements;
        const oe = out.elements;
        oe[0] = x * ae[0];
        oe[1] = x * ae[1];
        oe[2] = x * ae[2];
        oe[3] = y * ae[3];
        oe[4] = y * ae[4];
        oe[5] = y * ae[5];
        oe[6] = ae[6];
        oe[7] = ae[7];
        oe[8] = ae[8];
    }
    /**
     * Translate a matrix by a given vector.
     * @param m - The matrix
     * @param translation - The given vector
     * @param out - The translated matrix
     */
    static translate(m, translation, out) {
        const { _x: x, _y: y } = translation;
        const ae = m.elements;
        const oe = out.elements;
        const a11 = ae[0], a12 = ae[1], a13 = ae[2];
        const a21 = ae[3], a22 = ae[4], a23 = ae[5];
        const a31 = ae[6], a32 = ae[7], a33 = ae[8];
        oe[0] = a11;
        oe[1] = a12;
        oe[2] = a13;
        oe[3] = a21;
        oe[4] = a22;
        oe[5] = a23;
        oe[6] = x * a11 + y * a21 + a31;
        oe[7] = x * a12 + y * a22 + a32;
        oe[8] = x * a13 + y * a23 + a33;
    }
    /**
     * Calculate the transpose of the specified matrix.
     * @param a - The specified matrix
     * @param out - The transpose of the specified matrix
     */
    static transpose(a, out) {
        const ae = a.elements;
        const oe = out.elements;
        if (out === a) {
            const a12 = ae[1];
            const a13 = ae[2];
            const a23 = ae[5];
            oe[1] = ae[3];
            oe[2] = ae[6];
            oe[3] = a12;
            oe[5] = ae[7];
            oe[6] = a13;
            oe[7] = a23;
        }
        else {
            oe[0] = ae[0];
            oe[1] = ae[3];
            oe[2] = ae[6];
            oe[3] = ae[1];
            oe[4] = ae[4];
            oe[5] = ae[7];
            oe[6] = ae[2];
            oe[7] = ae[5];
            oe[8] = ae[8];
        }
    }
    /**
     * An array containing the elements of the matrix (column matrix).
     * @remarks
     * elements[0] first column and first row value m11
     * elements[1] first column and second row value m12
     * elements[2] first column and third row value m13
     * elements[3] second column and first row value m21
     * and so on
     */
    elements = new Float32Array(9);
    /**
     * Constructor of 3*3 matrix.
     * @param m11 - Default 1 column 1, row 1
     * @param m12 - Default 0 column 1, row 2
     * @param m13 - Default 0 column 1, row 3
     * @param m21 - Default 0 column 2, row 1
     * @param m22 - Default 1 column 2, row 2
     * @param m23 - Default 0 column 2, row 3
     * @param m31 - Default 0 column 3, row 1
     * @param m32 - Default 0 column 3, row 2
     * @param m33 - Default 1 column 3, row 3
     */
    constructor(m11 = 1, m12 = 0, m13 = 0, m21 = 0, m22 = 1, m23 = 0, m31 = 0, m32 = 0, m33 = 1) {
        const e = this.elements;
        e[0] = m11;
        e[1] = m12;
        e[2] = m13;
        e[3] = m21;
        e[4] = m22;
        e[5] = m23;
        e[6] = m31;
        e[7] = m32;
        e[8] = m33;
    }
    /**
     * Set the value of this matrix, and return this matrix.
     * @param m11
     * @param m12
     * @param m13
     * @param m21
     * @param m22
     * @param m23
     * @param m31
     * @param m32
     * @param m33
     * @returns This matrix
     */
    setValue(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
        const e = this.elements;
        e[0] = m11;
        e[1] = m12;
        e[2] = m13;
        e[3] = m21;
        e[4] = m22;
        e[5] = m23;
        e[6] = m31;
        e[7] = m32;
        e[8] = m33;
        return this;
    }
    /**
     * Set the value of this matrix by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This matrix
     */
    setValueByArray(array, offset = 0) {
        const srce = this.elements;
        for (let i = 0; i < 12; i++) {
            srce[i] = array[i + offset];
        }
        return this;
    }
    /**
     * Set the value of this 3x3 matrix by the specified 4x4 matrix.
     * upper-left principle
     * @param a - The specified 4x4 matrix
     * @returns This 3x3 matrix
     */
    setValueByMatrix(a) {
        const ae = a.elements;
        const e = this.elements;
        e[0] = ae[0];
        e[1] = ae[1];
        e[2] = ae[2];
        e[3] = ae[4];
        e[4] = ae[5];
        e[5] = ae[6];
        e[6] = ae[8];
        e[7] = ae[9];
        e[8] = ae[10];
        return this;
    }
    /**
     * Clone the value of this matrix to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        const e = this.elements;
        out[outOffset] = e[0];
        out[outOffset + 1] = e[1];
        out[outOffset + 2] = e[2];
        out[outOffset + 3] = e[3];
        out[outOffset + 4] = e[4];
        out[outOffset + 5] = e[5];
        out[outOffset + 6] = e[6];
        out[outOffset + 7] = e[7];
        out[outOffset + 8] = e[8];
    }
    /**
     * Creates a clone of this matrix.
     * @returns A clone of this matrix
     */
    clone() {
        const e = this.elements;
        let ret = new Matrix3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);
        return ret;
    }
    /**
     * Clones this matrix to the specified matrix.
     * @param out - The specified matrix
     * @returns The specified matrix
     */
    cloneTo(out) {
        const e = this.elements;
        const oe = out.elements;
        oe[0] = e[0];
        oe[1] = e[1];
        oe[2] = e[2];
        oe[3] = e[3];
        oe[4] = e[4];
        oe[5] = e[5];
        oe[6] = e[6];
        oe[7] = e[7];
        oe[8] = e[8];
        return out;
    }
    /**
     * Determines the sum of this matrix and the specified matrix.
     * @param right - The specified matrix
     * @returns This matrix that store the sum of the two matrices
     */
    add(right) {
        Matrix3.add(this, right, this);
        return this;
    }
    /**
     * Determines the difference between this matrix and the specified matrix.
     * @param right - The specified matrix
     * @returns This matrix that store the difference between the two matrices
     */
    subtract(right) {
        Matrix3.subtract(this, right, this);
        return this;
    }
    /**
     * Determines the product of this matrix and the specified matrix.
     * @param right - The specified matrix
     * @returns This matrix that store the product of the two matrices
     */
    multiply(right) {
        Matrix3.multiply(this, right, this);
        return this;
    }
    /**
     * Calculate a determinant of this matrix.
     * @returns The determinant of this matrix
     */
    determinant() {
        const e = this.elements;
        const a11 = e[0], a12 = e[1], a13 = e[2];
        const a21 = e[3], a22 = e[4], a23 = e[5];
        const a31 = e[6], a32 = e[7], a33 = e[8];
        const b12 = a33 * a22 - a23 * a32;
        const b22 = -a33 * a21 + a23 * a31;
        const b32 = a32 * a21 - a22 * a31;
        return a11 * b12 + a12 * b22 + a13 * b32;
    }
    /**
     * Identity this matrix.
     * @returns This matrix after identity
     */
    identity() {
        const e = this.elements;
        e[0] = 1;
        e[1] = 0;
        e[2] = 0;
        e[3] = 0;
        e[4] = 1;
        e[5] = 0;
        e[6] = 0;
        e[7] = 0;
        e[8] = 1;
        return this;
    }
    /**
     * Invert the matrix.
     * @returns The matrix after invert
     */
    invert() {
        Matrix3.invert(this, this);
        return this;
    }
    /**
     * This matrix rotates around an angle.
     * @param r - The rotation angle in radians
     * @returns This matrix after rotate
     */
    rotate(r) {
        Matrix3.rotate(this, r, this);
        return this;
    }
    /**
     * Scale this matrix by a given vector.
     * @param s - The given vector
     * @returns This matrix after scale
     */
    scale(s) {
        Matrix3.scale(this, s, this);
        return this;
    }
    /**
     * Translate this matrix by a given vector.
     * @param translation - The given vector
     * @returns This matrix after translate
     */
    translate(translation) {
        Matrix3.translate(this, translation, this);
        return this;
    }
    /**
     * Calculate the transpose of this matrix.
     * @returns This matrix after transpose
     */
    transpose() {
        Matrix3.transpose(this, this);
        return this;
    }
}

/**
 * Represents a four dimensional mathematical quaternion.
 */
class Quaternion {
    /** @internal */
    static _tempVector3 = new Vector3();
    /** @internal */
    static _tempQuat1 = new Quaternion();
    /**
     * Determines the sum of two quaternions.
     * @param left - The first quaternion to add
     * @param right - The second quaternion to add
     * @param out - The sum of two quaternions
     */
    static add(left, right, out) {
        out._x = left._x + right._x;
        out._y = left._y + right._y;
        out._z = left._z + right._z;
        out._w = left._w + right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the product of two quaternions.
     * @param left - The first quaternion to multiply
     * @param right - The second quaternion to multiply
     * @param out - The product of two quaternions
     */
    static multiply(left, right, out) {
        const ax = left._x, ay = left._y, az = left._z, aw = left._w;
        const bx = right._x, by = right._y, bz = right._z, bw = right._w;
        out._x = ax * bw + aw * bx + ay * bz - az * by;
        out._y = ay * bw + aw * by + az * bx - ax * bz;
        out._z = az * bw + aw * bz + ax * by - ay * bx;
        out._w = aw * bw - ax * bx - ay * by - az * bz;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate quaternion that contains conjugated version of the specified quaternion.
     * @param a - The specified quaternion
     * @param out - The conjugate version of the specified quaternion
     */
    static conjugate(a, out) {
        out._x = -a._x;
        out._y = -a._y;
        out._z = -a._z;
        out._w = a._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the dot product of two quaternions.
     * @param left - The first quaternion to dot
     * @param right - The second quaternion to dot
     * @returns The dot product of two quaternions
     */
    static dot(left, right) {
        return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;
    }
    /**
     * Determines whether the specified quaternions are equals.
     * @param left - The first quaternion to compare
     * @param right - The second quaternion to compare
     * @returns True if the specified quaternions are equals, false otherwise
     */
    static equals(left, right) {
        return (MathUtil.equals(left._x, right._x) &&
            MathUtil.equals(left._y, right._y) &&
            MathUtil.equals(left._z, right._z) &&
            MathUtil.equals(left._w, right._w));
    }
    /**
     * Calculate a quaternion rotates around an arbitrary axis.
     * @param axis - The axis
     * @param rad - The rotation angle in radians
     * @param out - The quaternion after rotate
     */
    static rotationAxisAngle(axis, rad, out) {
        const normalAxis = Quaternion._tempVector3;
        Vector3.normalize(axis, normalAxis);
        rad *= 0.5;
        const s = Math.sin(rad);
        out._x = normalAxis._x * s;
        out._y = normalAxis._y * s;
        out._z = normalAxis._z * s;
        out._w = Math.cos(rad);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).
     * @param x - The radian of rotation around X (pitch)
     * @param y - The radian of rotation around Y (yaw)
     * @param z - The radian of rotation around Z (roll)
     * @param out - The calculated quaternion
     */
    static rotationEuler(x, y, z, out) {
        Quaternion.rotationYawPitchRoll(y, x, z, out);
    }
    /**
     * Calculate a quaternion from the specified yaw, pitch and roll angles.
     * @param yaw - Yaw around the y axis in radians
     * @param pitch - Pitch around the x axis in radians
     * @param roll - Roll around the z axis in radians
     * @param out - The calculated quaternion
     */
    static rotationYawPitchRoll(yaw, pitch, roll, out) {
        const halfRoll = roll * 0.5;
        const halfPitch = pitch * 0.5;
        const halfYaw = yaw * 0.5;
        const sinRoll = Math.sin(halfRoll);
        const cosRoll = Math.cos(halfRoll);
        const sinPitch = Math.sin(halfPitch);
        const cosPitch = Math.cos(halfPitch);
        const sinYaw = Math.sin(halfYaw);
        const cosYaw = Math.cos(halfYaw);
        const cosYawPitch = cosYaw * cosPitch;
        const sinYawPitch = sinYaw * sinPitch;
        out._x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;
        out._y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;
        out._z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;
        out._w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion from the specified 3x3 matrix.
     * @param m - The specified 3x3 matrix
     * @param out - The calculated quaternion
     */
    static rotationMatrix3x3(m, out) {
        const me = m.elements;
        const m11 = me[0], m12 = me[1], m13 = me[2];
        const m21 = me[3], m22 = me[4], m23 = me[5];
        const m31 = me[6], m32 = me[7], m33 = me[8];
        const scale = m11 + m22 + m33;
        let sqrt, half;
        if (scale > 0) {
            sqrt = Math.sqrt(scale + 1.0);
            out._w = sqrt * 0.5;
            sqrt = 0.5 / sqrt;
            out._x = (m23 - m32) * sqrt;
            out._y = (m31 - m13) * sqrt;
            out._z = (m12 - m21) * sqrt;
        }
        else if (m11 >= m22 && m11 >= m33) {
            sqrt = Math.sqrt(1.0 + m11 - m22 - m33);
            half = 0.5 / sqrt;
            out._x = 0.5 * sqrt;
            out._y = (m12 + m21) * half;
            out._z = (m13 + m31) * half;
            out._w = (m23 - m32) * half;
        }
        else if (m22 > m33) {
            sqrt = Math.sqrt(1.0 + m22 - m11 - m33);
            half = 0.5 / sqrt;
            out._x = (m21 + m12) * half;
            out._y = 0.5 * sqrt;
            out._z = (m32 + m23) * half;
            out._w = (m31 - m13) * half;
        }
        else {
            sqrt = Math.sqrt(1.0 + m33 - m11 - m22);
            half = 0.5 / sqrt;
            out._x = (m13 + m31) * half;
            out._y = (m23 + m32) * half;
            out._z = 0.5 * sqrt;
            out._w = (m12 - m21) * half;
        }
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate the inverse of the specified quaternion.
     * @param a - The quaternion whose inverse is to be calculated
     * @param out - The inverse of the specified quaternion
     */
    static invert(a, out) {
        const { _x: x, _y: y, _z: z, _w: w } = a;
        const dot = x * x + y * y + z * z + w * w;
        if (dot > MathUtil.zeroTolerance) {
            const invDot = 1.0 / dot;
            out._x = -x * invDot;
            out._y = -y * invDot;
            out._z = -z * invDot;
            out._w = w * invDot;
            out._onValueChanged && out._onValueChanged();
        }
    }
    /**
     * Performs a linear blend between two quaternions.
     * @param start - The first quaternion
     * @param end - The second quaternion
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two quaternions
     */
    static lerp(start, end, t, out) {
        const inv = 1.0 - t;
        if (Quaternion.dot(start, end) >= 0) {
            out._x = start._x * inv + end._x * t;
            out._y = start._y * inv + end._y * t;
            out._z = start._z * inv + end._z * t;
            out._w = start._w * inv + end._w * t;
        }
        else {
            out._x = start._x * inv - end._x * t;
            out._y = start._y * inv - end._y * t;
            out._z = start._z * inv - end._z * t;
            out._w = start._w * inv - end._w * t;
        }
        out.normalize();
    }
    /**
     * Performs a spherical linear blend between two quaternions.
     * @param start - The first quaternion
     * @param end - The second quaternion
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of spherical linear blending between two quaternions
     */
    static slerp(start, end, t, out) {
        const ax = start._x;
        const ay = start._y;
        const az = start._z;
        const aw = start._w;
        let bx = end._x;
        let by = end._y;
        let bz = end._z;
        let bw = end._w;
        let scale0, scale1;
        // calc cosine
        let cosom = ax * bx + ay * by + az * bz + aw * bw;
        // adjust signs (if necessary)
        if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        }
        // calculate coefficients
        if (1.0 - cosom > MathUtil.zeroTolerance) {
            // standard case (slerp)
            const omega = Math.acos(cosom);
            const sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        }
        else {
            // "from" and "to" quaternions are very close
            //  ... so we can do a linear interpolation
            scale0 = 1.0 - t;
            scale1 = t;
        }
        // calculate final values
        out._x = scale0 * ax + scale1 * bx;
        out._y = scale0 * ay + scale1 * by;
        out._z = scale0 * az + scale1 * bz;
        out._w = scale0 * aw + scale1 * bw;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Scales the specified quaternion magnitude to unit length.
     * @param a - The specified quaternion
     * @param out - The normalized quaternion
     */
    static normalize(a, out) {
        const { _x, _y, _z, _w } = a;
        let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
        if (len > MathUtil.zeroTolerance) {
            len = 1 / len;
            out._x = _x * len;
            out._y = _y * len;
            out._z = _z * len;
            out._w = _w * len;
            out._onValueChanged && out._onValueChanged();
        }
    }
    /**
     * Calculate a quaternion rotate around X axis.
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotationX(rad, out) {
        rad *= 0.5;
        const s = Math.sin(rad);
        const c = Math.cos(rad);
        out._x = s;
        out._y = 0;
        out._z = 0;
        out._w = c;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion rotate around Y axis.
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotationY(rad, out) {
        rad *= 0.5;
        const s = Math.sin(rad);
        const c = Math.cos(rad);
        out._x = 0;
        out._y = s;
        out._z = 0;
        out._w = c;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion rotate around Z axis.
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotationZ(rad, out) {
        rad *= 0.5;
        const s = Math.sin(rad);
        const c = Math.cos(rad);
        out._x = 0;
        out._y = 0;
        out._z = s;
        out._w = c;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion that the specified quaternion rotate around X axis.
     * @param quaternion - The specified quaternion
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotateX(quaternion, rad, out) {
        const { _x, _y, _z, _w } = quaternion;
        rad *= 0.5;
        const bx = Math.sin(rad);
        const bw = Math.cos(rad);
        out._x = _x * bw + _w * bx;
        out._y = _y * bw + _z * bx;
        out._z = _z * bw - _y * bx;
        out._w = _w * bw - _x * bx;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion that the specified quaternion rotate around Y axis.
     * @param quaternion - The specified quaternion
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotateY(quaternion, rad, out) {
        const { _x, _y, _z, _w } = quaternion;
        rad *= 0.5;
        const by = Math.sin(rad);
        const bw = Math.cos(rad);
        out._x = _x * bw - _z * by;
        out._y = _y * bw + _w * by;
        out._z = _z * bw + _x * by;
        out._w = _w * bw - _y * by;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion that the specified quaternion rotate around Z axis.
     * @param quaternion - The specified quaternion
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotateZ(quaternion, rad, out) {
        const { _x, _y, _z, _w } = quaternion;
        rad *= 0.5;
        const bz = Math.sin(rad);
        const bw = Math.cos(rad);
        out._x = _x * bw + _y * bz;
        out._y = _y * bw - _x * bz;
        out._z = _z * bw + _w * bz;
        out._w = _w * bw - _z * bz;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Scale a quaternion by a given number.
     * @param a - The quaternion
     * @param s - The given number
     * @param out - The scaled quaternion
     */
    static scale(a, s, out) {
        out._x = a._x * s;
        out._y = a._y * s;
        out._z = a._z * s;
        out._w = a._w * s;
        out._onValueChanged && out._onValueChanged();
    }
    /** @internal */
    _x;
    /** @internal */
    _y;
    /** @internal */
    _z;
    /** @internal */
    _w;
    /** @internal */
    _onValueChanged = null;
    /**
     * The x component of the quaternion.
     */
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The y component of the quaternion.
     */
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The z component of the quaternion.
     */
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Indicting whether this instance is normalized.
     */
    get normalized() {
        return (Math.abs(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w - 1) <
            MathUtil.zeroTolerance);
    }
    /**
     * The w component of the quaternion.
     */
    get w() {
        return this._w;
    }
    set w(value) {
        this._w = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Constructor of Quaternion.
     * @param x - The x component of the quaternion, default 0
     * @param y - The y component of the quaternion, default 0
     * @param z - The z component of the quaternion, default 0
     * @param w - The w component of the quaternion, default 1
     */
    constructor(x = 0, y = 0, z = 0, w = 1) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
    }
    /**
     * Set the value of this quaternion, and return this quaternion.
     * @param x - The x component of the quaternion
     * @param y - The y component of the quaternion
     * @param z - The z component of the quaternion
     * @param w - The w component of the quaternion
     * @returns This quaternion
     */
    setValue(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Set the value of this quaternion by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This quaternion
     */
    setValueByArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Transforms this quaternion into its conjugated version.
     * @returns This quaternion
     */
    conjugate() {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Get the rotation axis and rotation angle of the quaternion (unit: radians).
     * @param out - The axis as an output parameter
     * @returns The rotation angle (unit: radians)
     */
    getAxisAngle(out) {
        const { _x, _y, _z } = this;
        const length = _x * _x + _y * _y + _z * _z;
        if (length < MathUtil.zeroTolerance) {
            out._x = 1;
            out._y = 0;
            out._z = 0;
            return 0;
        }
        else {
            const inv = 1.0 / length;
            out._x = this._x * inv;
            out._y = this._y * inv;
            out._z = this._z * inv;
            return Math.acos(this._w) * 2.0;
        }
    }
    /**
     * Identity this quaternion.
     * @returns This quaternion after identity
     */
    identity() {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Calculate the length of this quaternion.
     * @returns The length of this quaternion
     */
    length() {
        const { _x, _y, _z, _w } = this;
        return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
    }
    /**
     * Calculates the squared length of this quaternion.
     * @returns The squared length of this quaternion
     */
    lengthSquared() {
        const { _x, _y, _z, _w } = this;
        return _x * _x + _y * _y + _z * _z + _w * _w;
    }
    /**
     * Converts this quaternion into a unit quaternion.
     * @returns This quaternion
     */
    normalize() {
        Quaternion.normalize(this, this);
        return this;
    }
    /**
     * Get the euler of this quaternion.
     * @param out - The euler (in radians) as an output parameter
     * @returns Euler x->pitch y->yaw z->roll
     */
    toEuler(out) {
        this._toYawPitchRoll(out);
        const t = out._x;
        out._x = out._y;
        out._y = t;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * Get the euler of this quaternion.
     * @param out - The euler (in radians) as an output parameter
     * @returns Euler x->yaw y->pitch z->roll
     */
    toYawPitchRoll(out) {
        this._toYawPitchRoll(out);
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * Clone the value of this quaternion to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        out[outOffset] = this._x;
        out[outOffset + 1] = this._y;
        out[outOffset + 2] = this._z;
        out[outOffset + 3] = this._w;
    }
    /**
     * Creates a clone of this quaternion.
     * @returns A clone of this quaternion
     */
    clone() {
        return new Quaternion(this._x, this._y, this._z, this._w);
    }
    /**
     * Clones this quaternion to the specified quaternion.
     * @param out - The specified quaternion
     * @returns The specified quaternion
     */
    cloneTo(out) {
        out._x = this._x;
        out._y = this._y;
        out._z = this._z;
        out._w = this._w;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * Calculate this quaternion rotate around X axis.
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotateX(rad) {
        Quaternion.rotateX(this, rad, this);
        return this;
    }
    /**
     * Calculate this quaternion rotate around Y axis.
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotateY(rad) {
        Quaternion.rotateY(this, rad, this);
        return this;
    }
    /**
     * Calculate this quaternion rotate around Z axis.
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotateZ(rad) {
        Quaternion.rotateZ(this, rad, this);
        return this;
    }
    /**
     * Calculate this quaternion rotates around an arbitrary axis.
     * @param axis - The axis
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotationAxisAngle(axis, rad) {
        Quaternion.rotationAxisAngle(axis, rad, this);
        return this;
    }
    /**
     * Determines the product of this quaternion and the specified quaternion.
     * @param quat - The specified quaternion
     * @returns The product of the two quaternions
     */
    multiply(quat) {
        Quaternion.multiply(this, quat, this);
        return this;
    }
    /**
     * Invert this quaternion.
     * @returns This quaternion after invert
     */
    invert() {
        Quaternion.invert(this, this);
        return this;
    }
    /**
     * Determines the dot product of this quaternion and the specified quaternion.
     * @param quat - The specified quaternion
     * @returns The dot product of two quaternions
     */
    dot(quat) {
        return Quaternion.dot(this, quat);
    }
    /**
     * Performs a linear blend between this quaternion and the specified quaternion.
     * @param quat - The specified quaternion
     * @param t - The blend amount where 0 returns this and 1 quat
     * @returns - The result of linear blending between two quaternions
     */
    lerp(quat, t) {
        Quaternion.lerp(this, quat, t, this);
        return this;
    }
    /**
     * Calculate this quaternion rotation around an arbitrary axis.
     * @param axis - The axis
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotateAxisAngle(axis, rad) {
        Quaternion._tempQuat1.rotationAxisAngle(axis, rad);
        this.multiply(Quaternion._tempQuat1);
        return this;
    }
    _toYawPitchRoll(out) {
        const { _x, _y, _z, _w } = this;
        const xx = _x * _x;
        const yy = _y * _y;
        const zz = _z * _z;
        const xy = _x * _y;
        const zw = _z * _w;
        const zx = _z * _x;
        const yw = _y * _w;
        const yz = _y * _z;
        const xw = _x * _w;
        out._y = Math.asin(2.0 * (xw - yz));
        if (Math.cos(out.y) > MathUtil.zeroTolerance) {
            out._z = Math.atan2(2.0 * (xy + zw), 1.0 - 2.0 * (zz + xx));
            out._x = Math.atan2(2.0 * (zx + yw), 1.0 - 2.0 * (yy + xx));
        }
        else {
            out._z = Math.atan2(-2.0 * (xy - zw), 1.0 - 2.0 * (yy + zz));
            out._x = 0.0;
        }
        return out;
    }
}

/**
 * Represents a 4x4 mathematical matrix.
 */
class Matrix4 {
    static _tempVec30 = new Vector3();
    static _tempVec31 = new Vector3();
    static _tempVec32 = new Vector3();
    static _tempMat30 = new Matrix3();
    /** @internal Identity matrix. */
    static _identity = new Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
    /**
     * Determines the product of two matrices.
     * @param left - The first matrix to multiply
     * @param right - The second matrix to multiply
     * @param out - The product of the two matrices
     */
    static multiply(left, right, out) {
        const le = left.elements;
        const re = right.elements;
        const oe = out.elements;
        const l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3];
        const l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7];
        const l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11];
        const l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];
        const r11 = re[0], r12 = re[1], r13 = re[2], r14 = re[3];
        const r21 = re[4], r22 = re[5], r23 = re[6], r24 = re[7];
        const r31 = re[8], r32 = re[9], r33 = re[10], r34 = re[11];
        const r41 = re[12], r42 = re[13], r43 = re[14], r44 = re[15];
        oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;
        oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;
        oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;
        oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;
        oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;
        oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;
        oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;
        oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;
        oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;
        oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;
        oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;
        oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;
        oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;
        oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;
        oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;
        oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;
    }
    /**
     * Determines whether the specified matrices are equals.
     * @param left - The first matrix to compare
     * @param right - The second matrix to compare
     * @returns True if the specified matrices are equals, false otherwise
     */
    static equals(left, right) {
        const le = left.elements;
        const re = right.elements;
        return (MathUtil.equals(le[0], re[0]) &&
            MathUtil.equals(le[1], re[1]) &&
            MathUtil.equals(le[2], re[2]) &&
            MathUtil.equals(le[3], re[3]) &&
            MathUtil.equals(le[4], re[4]) &&
            MathUtil.equals(le[5], re[5]) &&
            MathUtil.equals(le[6], re[6]) &&
            MathUtil.equals(le[7], re[7]) &&
            MathUtil.equals(le[8], re[8]) &&
            MathUtil.equals(le[9], re[9]) &&
            MathUtil.equals(le[10], re[10]) &&
            MathUtil.equals(le[11], re[11]) &&
            MathUtil.equals(le[12], re[12]) &&
            MathUtil.equals(le[13], re[13]) &&
            MathUtil.equals(le[14], re[14]) &&
            MathUtil.equals(le[15], re[15]));
    }
    /**
     * Performs a linear interpolation between two matrices.
     * @param start - The first matrix
     * @param end - The second matrix
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two matrices
     */
    static lerp(start, end, t, out) {
        const se = start.elements;
        const ee = end.elements;
        const oe = out.elements;
        const inv = 1.0 - t;
        oe[0] = se[0] * inv + ee[0] * t;
        oe[1] = se[1] * inv + ee[1] * t;
        oe[2] = se[2] * inv + ee[2] * t;
        oe[3] = se[3] * inv + ee[3] * t;
        oe[4] = se[4] * inv + ee[4] * t;
        oe[5] = se[5] * inv + ee[5] * t;
        oe[6] = se[6] * inv + ee[6] * t;
        oe[7] = se[7] * inv + ee[7] * t;
        oe[8] = se[8] * inv + ee[8] * t;
        oe[9] = se[9] * inv + ee[9] * t;
        oe[10] = se[10] * inv + ee[10] * t;
        oe[11] = se[11] * inv + ee[11] * t;
        oe[12] = se[12] * inv + ee[12] * t;
        oe[13] = se[13] * inv + ee[13] * t;
        oe[14] = se[14] * inv + ee[14] * t;
        oe[15] = se[15] * inv + ee[15] * t;
    }
    /**
     * Calculate a rotation matrix from a quaternion.
     * @param quaternion - The quaternion used to calculate the matrix
     * @param out - The calculated rotation matrix
     */
    static rotationQuaternion(quaternion, out) {
        const oe = out.elements;
        const { _x: x, _y: y, _z: z, _w: w } = quaternion;
        let x2 = x + x;
        let y2 = y + y;
        let z2 = z + z;
        let xx = x * x2;
        let yx = y * x2;
        let yy = y * y2;
        let zx = z * x2;
        let zy = z * y2;
        let zz = z * z2;
        let wx = w * x2;
        let wy = w * y2;
        let wz = w * z2;
        oe[0] = 1 - yy - zz;
        oe[1] = yx + wz;
        oe[2] = zx - wy;
        oe[3] = 0;
        oe[4] = yx - wz;
        oe[5] = 1 - xx - zz;
        oe[6] = zy + wx;
        oe[7] = 0;
        oe[8] = zx + wy;
        oe[9] = zy - wx;
        oe[10] = 1 - xx - yy;
        oe[11] = 0;
        oe[12] = 0;
        oe[13] = 0;
        oe[14] = 0;
        oe[15] = 1;
    }
    /**
     * Calculate a matrix rotates around an arbitrary axis.
     * @param axis - The axis
     * @param r - The rotation angle in radians
     * @param out - The matrix after rotate
     */
    static rotationAxisAngle(axis, r, out) {
        const oe = out.elements;
        let { _x: x, _y: y, _z: z } = axis;
        let len = Math.sqrt(x * x + y * y + z * z);
        let s, c, t;
        if (Math.abs(len) < MathUtil.zeroTolerance) {
            return;
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(r);
        c = Math.cos(r);
        t = 1 - c;
        // Perform rotation-specific matrix multiplication
        oe[0] = x * x * t + c;
        oe[1] = y * x * t + z * s;
        oe[2] = z * x * t - y * s;
        oe[3] = 0;
        oe[4] = x * y * t - z * s;
        oe[5] = y * y * t + c;
        oe[6] = z * y * t + x * s;
        oe[7] = 0;
        oe[8] = x * z * t + y * s;
        oe[9] = y * z * t - x * s;
        oe[10] = z * z * t + c;
        oe[11] = 0;
        oe[12] = 0;
        oe[13] = 0;
        oe[14] = 0;
        oe[15] = 1;
    }
    /**
     * Calculate a matrix from a quaternion and a translation.
     * @param quaternion - The quaternion used to calculate the matrix
     * @param translation - The translation used to calculate the matrix
     * @param out - The calculated matrix
     */
    static rotationTranslation(quaternion, translation, out) {
        Matrix4.rotationQuaternion(quaternion, out);
        const oe = out.elements;
        oe[12] = translation._x;
        oe[13] = translation._y;
        oe[14] = translation._z;
    }
    /**
     * Calculate an affine matrix.
     * @param scale - The scale used to calculate matrix
     * @param rotation - The rotation used to calculate matrix
     * @param translation - The translation used to calculate matrix
     * @param out - The calculated matrix
     */
    static affineTransformation(scale, rotation, translation, out) {
        const oe = out.elements;
        const { _x: x, _y: y, _z: z, _w: w } = rotation;
        let x2 = x + x;
        let y2 = y + y;
        let z2 = z + z;
        let xx = x * x2;
        let xy = x * y2;
        let xz = x * z2;
        let yy = y * y2;
        let yz = y * z2;
        let zz = z * z2;
        let wx = w * x2;
        let wy = w * y2;
        let wz = w * z2;
        let sx = scale._x;
        let sy = scale._y;
        let sz = scale._z;
        oe[0] = (1 - (yy + zz)) * sx;
        oe[1] = (xy + wz) * sx;
        oe[2] = (xz - wy) * sx;
        oe[3] = 0;
        oe[4] = (xy - wz) * sy;
        oe[5] = (1 - (xx + zz)) * sy;
        oe[6] = (yz + wx) * sy;
        oe[7] = 0;
        oe[8] = (xz + wy) * sz;
        oe[9] = (yz - wx) * sz;
        oe[10] = (1 - (xx + yy)) * sz;
        oe[11] = 0;
        oe[12] = translation._x;
        oe[13] = translation._y;
        oe[14] = translation._z;
        oe[15] = 1;
    }
    /**
     * Calculate a matrix from scale vector.
     * @param s - The scale vector
     * @param out - The calculated matrix
     */
    static scaling(s, out) {
        const oe = out.elements;
        oe[0] = s._x;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 0;
        oe[5] = s._y;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 0;
        oe[9] = 0;
        oe[10] = s._z;
        oe[11] = 0;
        oe[12] = 0;
        oe[13] = 0;
        oe[14] = 0;
        oe[15] = 1;
    }
    /**
     * Calculate a matrix from translation vector.
     * @param translation - The translation vector
     * @param out - The calculated matrix
     */
    static translation(translation, out) {
        const oe = out.elements;
        oe[0] = 1;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 0;
        oe[5] = 1;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 0;
        oe[9] = 0;
        oe[10] = 1;
        oe[11] = 0;
        oe[12] = translation._x;
        oe[13] = translation._y;
        oe[14] = translation._z;
        oe[15] = 1;
    }
    /**
     * Calculate the inverse of the specified matrix.
     * @param a - The matrix whose inverse is to be calculated
     * @param out - The inverse of the specified matrix
     */
    static invert(a, out) {
        const ae = a.elements;
        const oe = out.elements;
        const a11 = ae[0], a12 = ae[1], a13 = ae[2], a14 = ae[3];
        const a21 = ae[4], a22 = ae[5], a23 = ae[6], a24 = ae[7];
        const a31 = ae[8], a32 = ae[9], a33 = ae[10], a34 = ae[11];
        const a41 = ae[12], a42 = ae[13], a43 = ae[14], a44 = ae[15];
        const b00 = a11 * a22 - a12 * a21;
        const b01 = a11 * a23 - a13 * a21;
        const b02 = a11 * a24 - a14 * a21;
        const b03 = a12 * a23 - a13 * a22;
        const b04 = a12 * a24 - a14 * a22;
        const b05 = a13 * a24 - a14 * a23;
        const b06 = a31 * a42 - a32 * a41;
        const b07 = a31 * a43 - a33 * a41;
        const b08 = a31 * a44 - a34 * a41;
        const b09 = a32 * a43 - a33 * a42;
        const b10 = a32 * a44 - a34 * a42;
        const b11 = a33 * a44 - a34 * a43;
        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;
        oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;
        oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;
        oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;
        oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;
        oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;
        oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;
        oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;
        oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;
        oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;
        oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;
        oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;
        oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;
        oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;
        oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;
        oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;
    }
    /**
     * Calculate a right-handed look-at matrix.
     * @param eye - The position of the viewer's eye
     * @param target - The camera look-at target
     * @param up - The camera's up vector
     * @param out - The calculated look-at matrix
     */
    static lookAt(eye, target, up, out) {
        const oe = out.elements;
        const xAxis = Matrix4._tempVec30;
        const yAxis = Matrix4._tempVec31;
        const zAxis = Matrix4._tempVec32;
        Vector3.subtract(eye, target, zAxis);
        zAxis.normalize();
        Vector3.cross(up, zAxis, xAxis);
        xAxis.normalize();
        Vector3.cross(zAxis, xAxis, yAxis);
        oe[0] = xAxis._x;
        oe[1] = yAxis._x;
        oe[2] = zAxis._x;
        oe[3] = 0;
        oe[4] = xAxis._y;
        oe[5] = yAxis._y;
        oe[6] = zAxis._y;
        oe[7] = 0;
        oe[8] = xAxis._z;
        oe[9] = yAxis._z;
        oe[10] = zAxis._z;
        oe[11] = 0;
        oe[12] = -Vector3.dot(xAxis, eye);
        oe[13] = -Vector3.dot(yAxis, eye);
        oe[14] = -Vector3.dot(zAxis, eye);
        oe[15] = 1;
    }
    /**
     * Calculate an orthographic projection matrix.
     * @param left - The left edge of the viewing
     * @param right - The right edge of the viewing
     * @param bottom - The bottom edge of the viewing
     * @param top - The top edge of the viewing
     * @param near - The depth of the near plane
     * @param far - The depth of the far plane
     * @param out - The calculated orthographic projection matrix
     */
    static ortho(left, right, bottom, top, near, far, out) {
        const oe = out.elements;
        const lr = 1 / (left - right);
        const bt = 1 / (bottom - top);
        const nf = 1 / (near - far);
        oe[0] = -2 * lr;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 0;
        oe[5] = -2 * bt;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 0;
        oe[9] = 0;
        oe[10] = 2 * nf;
        oe[11] = 0;
        oe[12] = (left + right) * lr;
        oe[13] = (top + bottom) * bt;
        oe[14] = (far + near) * nf;
        oe[15] = 1;
    }
    /**
     * Calculate a perspective projection matrix.
     * @param fovY - Field of view in the y direction, in radians
     * @param aspect - Aspect ratio, defined as view space width divided by height
     * @param near - The depth of the near plane
     * @param far - The depth of the far plane
     * @param out - The calculated perspective projection matrix
     */
    static perspective(fovY, aspect, near, far, out) {
        const oe = out.elements;
        const f = 1.0 / Math.tan(fovY / 2);
        const nf = 1 / (near - far);
        oe[0] = f / aspect;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 0;
        oe[5] = f;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 0;
        oe[9] = 0;
        oe[10] = (far + near) * nf;
        oe[11] = -1;
        oe[12] = 0;
        oe[13] = 0;
        oe[14] = 2 * far * near * nf;
        oe[15] = 0;
    }
    /**
     * The specified matrix rotates around an arbitrary axis.
     * @param m - The specified matrix
     * @param axis - The axis
     * @param r - The rotation angle in radians
     * @param out - The rotated matrix
     */
    static rotateAxisAngle(m, axis, r, out) {
        let { _x: x, _y: y, _z: z } = axis;
        let len = Math.sqrt(x * x + y * y + z * z);
        if (Math.abs(len) < MathUtil.zeroTolerance) {
            return;
        }
        const me = m.elements;
        const oe = out.elements;
        let s, c, t;
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(r);
        c = Math.cos(r);
        t = 1 - c;
        let a11 = me[0], a12 = me[1], a13 = me[2], a14 = me[3];
        let a21 = me[4], a22 = me[5], a23 = me[6], a24 = me[7];
        let a31 = me[8], a32 = me[9], a33 = me[10], a34 = me[11];
        // Construct the elements of the rotation matrix
        let b11 = x * x * t + c;
        let b12 = y * x * t + z * s;
        let b13 = z * x * t - y * s;
        let b21 = x * y * t - z * s;
        let b22 = y * y * t + c;
        let b23 = z * y * t + x * s;
        let b31 = x * z * t + y * s;
        let b32 = y * z * t - x * s;
        let b33 = z * z * t + c;
        // Perform rotation-specific matrix multiplication
        oe[0] = a11 * b11 + a21 * b12 + a31 * b13;
        oe[1] = a12 * b11 + a22 * b12 + a32 * b13;
        oe[2] = a13 * b11 + a23 * b12 + a33 * b13;
        oe[3] = a14 * b11 + a24 * b12 + a34 * b13;
        oe[4] = a11 * b21 + a21 * b22 + a31 * b23;
        oe[5] = a12 * b21 + a22 * b22 + a32 * b23;
        oe[6] = a13 * b21 + a23 * b22 + a33 * b23;
        oe[7] = a14 * b21 + a24 * b22 + a34 * b23;
        oe[8] = a11 * b31 + a21 * b32 + a31 * b33;
        oe[9] = a12 * b31 + a22 * b32 + a32 * b33;
        oe[10] = a13 * b31 + a23 * b32 + a33 * b33;
        oe[11] = a14 * b31 + a24 * b32 + a34 * b33;
        if (m !== out) {
            // If the source and destination differ, copy the unchanged last row
            oe[12] = me[12];
            oe[13] = me[13];
            oe[14] = me[14];
            oe[15] = me[15];
        }
    }
    /**
     * Scale a matrix by a given vector.
     * @param m - The matrix
     * @param s - The given vector
     * @param out - The scaled matrix
     */
    static scale(m, s, out) {
        const me = m.elements;
        const oe = out.elements;
        const { _x: x, _y: y, _z: z } = s;
        oe[0] = me[0] * x;
        oe[1] = me[1] * x;
        oe[2] = me[2] * x;
        oe[3] = me[3] * x;
        oe[4] = me[4] * y;
        oe[5] = me[5] * y;
        oe[6] = me[6] * y;
        oe[7] = me[7] * y;
        oe[8] = me[8] * z;
        oe[9] = me[9] * z;
        oe[10] = me[10] * z;
        oe[11] = me[11] * z;
        oe[12] = me[12];
        oe[13] = me[13];
        oe[14] = me[14];
        oe[15] = me[15];
    }
    /**
     * Translate a matrix by a given vector.
     * @param m - The matrix
     * @param v - The given vector
     * @param out - The translated matrix
     */
    static translate(m, v, out) {
        const me = m.elements;
        const oe = out.elements;
        const { _x: x, _y: y, _z: z } = v;
        if (m === out) {
            oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];
            oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];
            oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];
            oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];
        }
        else {
            const a11 = me[0], a12 = me[1], a13 = me[2], a14 = me[3];
            const a21 = me[4], a22 = me[5], a23 = me[6], a24 = me[7];
            const a31 = me[8], a32 = me[9], a33 = me[10], a34 = me[11];
            (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);
            (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);
            (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);
            oe[12] = a11 * x + a21 * y + a31 * z + me[12];
            oe[13] = a12 * x + a22 * y + a32 * z + me[13];
            oe[14] = a13 * x + a23 * y + a33 * z + me[14];
            oe[15] = a14 * x + a24 * y + a34 * z + me[15];
        }
    }
    /**
     * Calculate the transpose of the specified matrix.
     * @param a - The specified matrix
     * @param out - The transpose of the specified matrix
     */
    static transpose(a, out) {
        const ae = a.elements;
        const oe = out.elements;
        if (out === a) {
            const a12 = ae[1];
            const a13 = ae[2];
            const a14 = ae[3];
            const a23 = ae[6];
            const a24 = ae[7];
            const a34 = ae[11];
            oe[1] = ae[4];
            oe[2] = ae[8];
            oe[3] = ae[12];
            oe[4] = a12;
            oe[6] = ae[9];
            oe[7] = ae[13];
            oe[8] = a13;
            oe[9] = a23;
            oe[11] = ae[14];
            oe[12] = a14;
            oe[13] = a24;
            oe[14] = a34;
        }
        else {
            oe[0] = ae[0];
            oe[1] = ae[4];
            oe[2] = ae[8];
            oe[3] = ae[12];
            oe[4] = ae[1];
            oe[5] = ae[5];
            oe[6] = ae[9];
            oe[7] = ae[13];
            oe[8] = ae[2];
            oe[9] = ae[6];
            oe[10] = ae[10];
            oe[11] = ae[14];
            oe[12] = ae[3];
            oe[13] = ae[7];
            oe[14] = ae[11];
            oe[15] = ae[15];
        }
    }
    /**
     * An array containing the elements of the matrix (column matrix).
     * @remarks
     * elements[0] first column and first row value m11
     * elements[1] first column and second row value m12
     * elements[2] first column and third row value m13
     * elements[3] first column and fourth row value m14
     * elements[4] second column and first row value m21
     * and so on
     */
    elements = new Float32Array(16);
    /**
     * Constructor of 4x4 Matrix4.
     * @param m11 - default 1, column 1, row 1
     * @param m12 - default 0, column 1, row 2
     * @param m13 - default 0, column 1, row 3
     * @param m14 - default 0, column 1, row 4
     * @param m21 - default 0, column 2, row 1
     * @param m22 - default 1, column 2, row 2
     * @param m23 - default 0, column 2, row 3
     * @param m24 - default 0, column 2, row 4
     * @param m31 - default 0, column 3, row 1
     * @param m32 - default 0, column 3, row 2
     * @param m33 - default 1, column 3, row 3
     * @param m34 - default 0, column 3, row 4
     * @param m41 - default 0, column 4, row 1
     * @param m42 - default 0, column 4, row 2
     * @param m43 - default 0, column 4, row 3
     * @param m44 - default 1, column 4, row 4
     */
    constructor(m11 = 1, m12 = 0, m13 = 0, m14 = 0, m21 = 0, m22 = 1, m23 = 0, m24 = 0, m31 = 0, m32 = 0, m33 = 1, m34 = 0, m41 = 0, m42 = 0, m43 = 0, m44 = 1) {
        const e = this.elements;
        e[0] = m11;
        e[1] = m12;
        e[2] = m13;
        e[3] = m14;
        e[4] = m21;
        e[5] = m22;
        e[6] = m23;
        e[7] = m24;
        e[8] = m31;
        e[9] = m32;
        e[10] = m33;
        e[11] = m34;
        e[12] = m41;
        e[13] = m42;
        e[14] = m43;
        e[15] = m44;
    }
    /**
     * Set the value of this matrix, and return this matrix.
     * @param m11 - column 1, row 1
     * @param m12 - column 1, row 2
     * @param m13 - column 1, row 3
     * @param m14 - column 1, row 4
     * @param m21 - column 2, row 1
     * @param m22 - column 2, row 2
     * @param m23 - column 2, row 3
     * @param m24 - column 2, row 4
     * @param m31 - column 3, row 1
     * @param m32 - column 3, row 2
     * @param m33 - column 3, row 3
     * @param m34 - column 3, row 4
     * @param m41 - column 4, row 1
     * @param m42 - column 4, row 2
     * @param m43 - column 4, row 3
     * @param m44 - column 4, row 4
     * @returns This matrix
     */
    setValue(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
        const e = this.elements;
        e[0] = m11;
        e[1] = m12;
        e[2] = m13;
        e[3] = m14;
        e[4] = m21;
        e[5] = m22;
        e[6] = m23;
        e[7] = m24;
        e[8] = m31;
        e[9] = m32;
        e[10] = m33;
        e[11] = m34;
        e[12] = m41;
        e[13] = m42;
        e[14] = m43;
        e[15] = m44;
        return this;
    }
    /**
     * Set the value of this matrix by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This matrix
     */
    setValueByArray(array, offset = 0) {
        const srce = this.elements;
        for (let i = 0; i < 16; i++) {
            srce[i] = array[i + offset];
        }
        return this;
    }
    /**
     * Clone the value of this matrix to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        const e = this.elements;
        out[outOffset] = e[0];
        out[outOffset + 1] = e[1];
        out[outOffset + 2] = e[2];
        out[outOffset + 3] = e[3];
        out[outOffset + 4] = e[4];
        out[outOffset + 5] = e[5];
        out[outOffset + 6] = e[6];
        out[outOffset + 7] = e[7];
        out[outOffset + 8] = e[8];
        out[outOffset + 9] = e[9];
        out[outOffset + 10] = e[10];
        out[outOffset + 11] = e[11];
        out[outOffset + 12] = e[12];
        out[outOffset + 13] = e[13];
        out[outOffset + 14] = e[14];
        out[outOffset + 15] = e[15];
    }
    /**
     * Creates a clone of this matrix.
     * @returns A clone of this matrix
     */
    clone() {
        const e = this.elements;
        let ret = new Matrix4(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]);
        return ret;
    }
    /**
     * Clones this matrix to the specified matrix.
     * @param out - The specified matrix
     * @returns The specified matrix
     */
    cloneTo(out) {
        const e = this.elements;
        const oe = out.elements;
        oe[0] = e[0];
        oe[1] = e[1];
        oe[2] = e[2];
        oe[3] = e[3];
        oe[4] = e[4];
        oe[5] = e[5];
        oe[6] = e[6];
        oe[7] = e[7];
        oe[8] = e[8];
        oe[9] = e[9];
        oe[10] = e[10];
        oe[11] = e[11];
        oe[12] = e[12];
        oe[13] = e[13];
        oe[14] = e[14];
        oe[15] = e[15];
        return out;
    }
    /**
     * Determines the product of this matrix and the specified matrix.
     * @param right - The specified matrix
     * @returns This matrix that store the product of the two matrices
     */
    multiply(right) {
        Matrix4.multiply(this, right, this);
        return this;
    }
    /**
     * Calculate a determinant of this matrix.
     * @returns The determinant of this matrix
     */
    determinant() {
        const e = this.elements;
        const a11 = e[0], a12 = e[1], a13 = e[2], a14 = e[3];
        const a21 = e[4], a22 = e[5], a23 = e[6], a24 = e[7];
        const a31 = e[8], a32 = e[9], a33 = e[10], a34 = e[11];
        const a41 = e[12], a42 = e[13], a43 = e[14], a44 = e[15];
        const b00 = a11 * a22 - a12 * a21;
        const b01 = a11 * a23 - a13 * a21;
        const b02 = a11 * a24 - a14 * a21;
        const b03 = a12 * a23 - a13 * a22;
        const b04 = a12 * a24 - a14 * a22;
        const b05 = a13 * a24 - a14 * a23;
        const b06 = a31 * a42 - a32 * a41;
        const b07 = a31 * a43 - a33 * a41;
        const b08 = a31 * a44 - a34 * a41;
        const b09 = a32 * a43 - a33 * a42;
        const b10 = a32 * a44 - a34 * a42;
        const b11 = a33 * a44 - a34 * a43;
        // Calculate the determinant
        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    }
    /**
     * Decompose this matrix to translation, rotation and scale elements.
     * @param translation - Translation vector as an output parameter
     * @param rotation - Rotation quaternion as an output parameter
     * @param scale - Scale vector as an output parameter
     * @returns True if this matrix can be decomposed, false otherwise
     */
    decompose(translation, rotation, scale) {
        const rm = Matrix4._tempMat30;
        const e = this.elements;
        const rme = rm.elements;
        const m11 = e[0];
        const m12 = e[1];
        const m13 = e[2];
        const m14 = e[3];
        const m21 = e[4];
        const m22 = e[5];
        const m23 = e[6];
        const m24 = e[7];
        const m31 = e[8];
        const m32 = e[9];
        const m33 = e[10];
        const m34 = e[11];
        translation.setValue(e[12], e[13], e[14]);
        const xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;
        const ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;
        const zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;
        const sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
        const sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
        const sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
        scale.setValue(sx, sy, sz);
        if (Math.abs(sx) < MathUtil.zeroTolerance ||
            Math.abs(sy) < MathUtil.zeroTolerance ||
            Math.abs(sz) < MathUtil.zeroTolerance) {
            rotation.identity();
            return false;
        }
        else {
            const invSX = 1 / sx;
            const invSY = 1 / sy;
            const invSZ = 1 / sz;
            rme[0] = m11 * invSX;
            rme[1] = m12 * invSX;
            rme[2] = m13 * invSX;
            rme[3] = m21 * invSY;
            rme[4] = m22 * invSY;
            rme[5] = m23 * invSY;
            rme[6] = m31 * invSZ;
            rme[7] = m32 * invSZ;
            rme[8] = m33 * invSZ;
            Quaternion.rotationMatrix3x3(rm, rotation);
            return true;
        }
    }
    /**
     * Get rotation from this matrix.
     * @param out - Rotation quaternion as an output parameter
     * @returns The out
     */
    getRotation(out) {
        const e = this.elements;
        let trace = e[0] + e[5] + e[10];
        if (trace > MathUtil.zeroTolerance) {
            let s = Math.sqrt(trace + 1.0) * 2;
            out._w = 0.25 * s;
            out._x = (e[6] - e[9]) / s;
            out._y = (e[8] - e[2]) / s;
            out._z = (e[1] - e[4]) / s;
        }
        else if (e[0] > e[5] && e[0] > e[10]) {
            let s = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;
            out._w = (e[6] - e[9]) / s;
            out._x = 0.25 * s;
            out._y = (e[1] + e[4]) / s;
            out._z = (e[8] + e[2]) / s;
        }
        else if (e[5] > e[10]) {
            let s = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;
            out._w = (e[8] - e[2]) / s;
            out._x = (e[1] + e[4]) / s;
            out._y = 0.25 * s;
            out._z = (e[6] + e[9]) / s;
        }
        else {
            let s = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;
            out._w = (e[1] - e[4]) / s;
            out._x = (e[8] + e[2]) / s;
            out._y = (e[6] + e[9]) / s;
            out._z = 0.25 * s;
        }
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * Get scale from this matrix.
     * @param out - Scale vector as an output parameter
     * @returns The out
     */
    getScaling(out) {
        //getScale()
        const e = this.elements;
        const m11 = e[0], m12 = e[1], m13 = e[2];
        const m21 = e[4], m22 = e[5], m23 = e[6];
        const m31 = e[8], m32 = e[9], m33 = e[10];
        out.setValue(Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13), Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23), Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33));
        return out;
    }
    /**
     * Get translation from this matrix.
     * @param out - Translation vector as an output parameter
     * @returns The out
     */
    getTranslation(out) {
        const e = this.elements;
        out.setValue(e[12], e[13], e[14]);
        return out;
    }
    /**
     * Identity this matrix.
     * @returns This matrix after identity
     */
    identity() {
        const e = this.elements;
        e[0] = 1;
        e[1] = 0;
        e[2] = 0;
        e[3] = 0;
        e[4] = 0;
        e[5] = 1;
        e[6] = 0;
        e[7] = 0;
        e[8] = 0;
        e[9] = 0;
        e[10] = 1;
        e[11] = 0;
        e[12] = 0;
        e[13] = 0;
        e[14] = 0;
        e[15] = 1;
        return this;
    }
    /**
     * Invert the matrix.
     * @returns The matrix after invert
     */
    invert() {
        Matrix4.invert(this, this);
        return this;
    }
    /**
     * This matrix rotates around an arbitrary axis.
     * @param axis - The axis
     * @param r - The rotation angle in radians
     * @returns This matrix after rotate
     */
    rotateAxisAngle(axis, r) {
        Matrix4.rotateAxisAngle(this, axis, r, this);
        return this;
    }
    /**
     * Scale this matrix by a given vector.
     * @param s - The given vector
     * @returns This matrix after scale
     */
    scale(s) {
        Matrix4.scale(this, s, this);
        return this;
    }
    /**
     * Translate this matrix by a given vector.
     * @param v - The given vector
     * @returns This matrix after translate
     */
    translate(v) {
        Matrix4.translate(this, v, this);
        return this;
    }
    /**
     * Calculate the transpose of this matrix.
     * @returns This matrix after transpose
     */
    transpose() {
        Matrix4.transpose(this, this);
        return this;
    }
}

/**
 * Describes a color in the from of RGBA (in order: R, G, B, A).
 */
class Color {
    /**
     * Modify a value from the gamma space to the linear space.
     * @param value - The value in gamma space
     * @returns The value in linear space
     */
    static gammaToLinearSpace(value) {
        // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt
        // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt
        if (value <= 0.0)
            return 0.0;
        else if (value <= 0.04045)
            return value / 12.92;
        else if (value < 1.0)
            return Math.pow((value + 0.055) / 1.055, 2.4);
        else
            return Math.pow(value, 2.4);
    }
    /**
     * Modify a value from the linear space to the gamma space.
     * @param value - The value in linear space
     * @returns The value in gamma space
     */
    static linearToGammaSpace(value) {
        // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt
        // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt
        if (value <= 0.0)
            return 0.0;
        else if (value < 0.0031308)
            return 12.92 * value;
        else if (value < 1.0)
            return 1.055 * Math.pow(value, 0.41666) - 0.055;
        else
            return Math.pow(value, 0.41666);
    }
    /**
     * Determines whether the specified colors are equals.
     * @param left - The first color to compare
     * @param right - The second color to compare
     * @returns True if the specified colors are equals, false otherwise
     */
    static equals(left, right) {
        return (MathUtil.equals(left.r, right.r) &&
            MathUtil.equals(left.g, right.g) &&
            MathUtil.equals(left.b, right.b) &&
            MathUtil.equals(left.a, right.a));
    }
    /**
     * Determines the sum of two colors.
     * @param left - The first color to add
     * @param right - The second color to add
     * @param out - The sum of two colors
     * @returns The added color
     */
    static add(left, right, out) {
        out.r = left.r + right.r;
        out.g = left.g + right.g;
        out.b = left.b + right.b;
        out.a = left.a + right.a;
        return out;
    }
    /**
     * Scale a color by the given value.
     * @param left - The color to scale
     * @param s - The amount by which to scale the color
     * @param out - The scaled color
     * @returns The scaled color
     */
    static scale(left, s, out) {
        out.r = left.r * s;
        out.g = left.g * s;
        out.b = left.b * s;
        out.a = left.a * s;
        return out;
    }
    /** The red component of the color, 0~1. */
    r;
    /** The green component of the color, 0~1. */
    g;
    /** The blue component of the color, 0~1. */
    b;
    /** The alpha component of the color, 0~1. */
    a;
    /**
     * Constructor of Color.
     * @param r - The red component of the color
     * @param g - The green component of the color
     * @param b - The blue component of the color
     * @param a - The alpha component of the color
     */
    constructor(r = 1, g = 1, b = 1, a = 1) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    /**
     * Set the value of this color.
     * @param r - The red component of the color
     * @param g - The green component of the color
     * @param b - The blue component of the color
     * @param a - The alpha component of the color
     * @returns This color.
     */
    setValue(r, g, b, a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
        return this;
    }
    /**
     * Determines the sum of this color and the specified color.
     * @param color - The specified color
     * @returns The added color
     */
    add(color) {
        this.r += color.r;
        this.g += color.g;
        this.b += color.b;
        this.a += color.a;
        return this;
    }
    /**
     * Scale this color by the given value.
     * @param s - The amount by which to scale the color
     * @returns The scaled color
     */
    scale(s) {
        this.r *= s;
        this.g *= s;
        this.b *= s;
        this.a *= s;
        return this;
    }
    /**
     * Creates a clone of this color.
     * @returns A clone of this color
     */
    clone() {
        const ret = new Color(this.r, this.g, this.b, this.a);
        return ret;
    }
    /**
     * Clones this color to the specified color.
     * @param out - The specified color
     * @returns The specified color
     */
    cloneTo(out) {
        out.r = this.r;
        out.g = this.g;
        out.b = this.b;
        out.a = this.a;
        return out;
    }
    /**
     * Modify components (r, g, b) of this color from gamma space to linear space.
     * @param out - The color in linear space
     * @returns The color in linear space
     */
    toLinear(out) {
        out.r = Color.gammaToLinearSpace(this.r);
        out.g = Color.gammaToLinearSpace(this.g);
        out.b = Color.gammaToLinearSpace(this.b);
        return out;
    }
    /**
     * Modify components (r, g, b) of this color from linear space to gamma space.
     * @param out - The color in gamma space
     * @returns The color in gamma space
     */
    toGamma(out) {
        out.r = Color.linearToGammaSpace(this.r);
        out.g = Color.linearToGammaSpace(this.g);
        out.b = Color.linearToGammaSpace(this.b);
        return out;
    }
}

/**
 * Enum type for background mode.
 */
var BackgroundMode;
(function (BackgroundMode) {
    /* Solid color. */
    BackgroundMode[BackgroundMode["SolidColor"] = 0] = "SolidColor";
    /* Sky. */
    BackgroundMode[BackgroundMode["Sky"] = 1] = "Sky";
    /** Texture */
    BackgroundMode[BackgroundMode["Texture"] = 2] = "Texture";
})(BackgroundMode || (BackgroundMode = {}));

/**
 * Color Space.
 */
var ColorSpace;
(function (ColorSpace) {
    /** Linear color space. */
    ColorSpace[ColorSpace["Linear"] = 0] = "Linear";
    /** Gamma color space. */
    ColorSpace[ColorSpace["Gamma"] = 1] = "Gamma";
})(ColorSpace || (ColorSpace = {}));

/**
 * The encapsulation of each uniform variable, including its cache value, data upload method, and data storage address.
 */
class ShaderUniform {
    name;
    propertyId;
    location;
    applyFunc;
    cacheValue;
    textureIndex;
    textureDefault;
    _gl;
    _colorSpace;
    constructor(gl) {
        this._gl = gl;
    }
    upload1f(shaderUniform, value) {
        if (this.cacheValue !== value) {
            this._gl.uniform1f(shaderUniform.location, value);
            this.cacheValue = value;
        }
    }
    upload1fv(shaderUniform, value) {
        this._gl.uniform1fv(shaderUniform.location, value);
    }
    upload2fv(shaderUniform, value) {
        this._gl.uniform2fv(shaderUniform.location, value);
    }
    upload3f(shaderUniform, value) {
        const cacheValue = this.cacheValue;
        if (value.r !== undefined) {
            if (cacheValue.x !== value.r || cacheValue.y !== value.g || cacheValue.z !== value.b) {
                if (this._colorSpace === ColorSpace.Linear) {
                    this._gl.uniform3f(shaderUniform.location, Color.gammaToLinearSpace(value.r), Color.gammaToLinearSpace(value.g), Color.gammaToLinearSpace(value.b));
                }
                else {
                    this._gl.uniform3f(shaderUniform.location, value.r, value.g, value.b);
                }
                cacheValue.x = value.r;
                cacheValue.y = value.g;
                cacheValue.z = value.b;
            }
        }
        else {
            if (cacheValue.x !== value.x ||
                cacheValue.y !== value.y ||
                cacheValue.z !== value.z) {
                this._gl.uniform3f(shaderUniform.location, value.x, value.y, value.z);
                cacheValue.x = value.x;
                cacheValue.y = value.y;
                cacheValue.z = value.z;
            }
        }
    }
    upload3fv(shaderUniform, value) {
        this._gl.uniform3fv(shaderUniform.location, value);
    }
    upload4f(shaderUniform, value) {
        const cacheValue = this.cacheValue;
        if (value.r !== undefined) {
            if (cacheValue.x !== value.r ||
                cacheValue.y !== value.g ||
                cacheValue.z !== value.b ||
                cacheValue.w !== value.a) {
                if (this._colorSpace === ColorSpace.Linear) {
                    this._gl.uniform4f(shaderUniform.location, Color.gammaToLinearSpace(value.r), Color.gammaToLinearSpace(value.g), Color.gammaToLinearSpace(value.b), value.a);
                }
                else {
                    this._gl.uniform4f(shaderUniform.location, value.r, value.g, value.b, value.a);
                }
                cacheValue.x = value.r;
                cacheValue.y = value.g;
                cacheValue.z = value.b;
                cacheValue.w = value.a;
            }
        }
        else {
            if (cacheValue.x !== value.x ||
                cacheValue.y !== value.y ||
                cacheValue.z !== value.z ||
                cacheValue.w !== value.w) {
                this._gl.uniform4f(shaderUniform.location, value.x, value.y, value.z, value.w);
                cacheValue.x = value.x;
                cacheValue.y = value.y;
                cacheValue.z = value.z;
                cacheValue.w = value.w;
            }
        }
    }
    upload4fv(shaderUniform, value) {
        this._gl.uniform4fv(shaderUniform.location, value);
    }
    upload1i(shaderUniform, value) {
        if (this.cacheValue !== value) {
            this._gl.uniform1i(shaderUniform.location, value);
            this.cacheValue = value;
        }
    }
    upload1iv(shaderUniform, value) {
        this._gl.uniform1iv(shaderUniform.location, value);
    }
    upload2iv(shaderUniform, value) {
        this._gl.uniform2iv(shaderUniform.location, value);
    }
    upload3iv(shaderUniform, value) {
        this._gl.uniform3iv(shaderUniform.location, value);
    }
    upload4iv(shaderUniform, value) {
        this._gl.uniform4iv(shaderUniform.location, value);
    }
    uploadMat4(shaderUniform, value) {
        this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);
    }
    uploadMat4v(shaderUniform, value) {
        this._gl.uniformMatrix4fv(shaderUniform.location, false, value);
    }
    uploadTexture(shaderUniform, value) {
        // 开启第x号纹理单元
        this._gl.activeTexture(shaderUniform.textureIndex);
        // 向target绑定纹理对象
        this._gl.bindTexture(value._glTarget, value._glTexture);
    }
}

/**
 * Shader data grouping.
 */
var ShaderDataGroup;
(function (ShaderDataGroup) {
    /** Scene group. */
    ShaderDataGroup[ShaderDataGroup["Scene"] = 0] = "Scene";
    /** Camera group. */
    ShaderDataGroup[ShaderDataGroup["Camera"] = 1] = "Camera";
    /** Renderer group. */
    ShaderDataGroup[ShaderDataGroup["Renderer"] = 2] = "Renderer";
    /** material group. */
    ShaderDataGroup[ShaderDataGroup["Material"] = 3] = "Material";
    // TODO: Geographic
})(ShaderDataGroup || (ShaderDataGroup = {}));

/**
 * Shader uniform block.
 * @internal
 */
class ShaderUniformBlock {
    constUniforms = [];
    textureUniforms = [];
}

/**
 * Renderer, each Mesh will have a renderer instance.
 */
class Renderer {
    /** Current bind program. */
    static glProgram;
    // TODO: 要接入webgl2, 应该抽出一个类型
    gl;
    /** Array of addresses of attribute variables in shader programs. */
    attribLocArray;
    /** Mesh to be rendered. */
    _primitive;
    /**
     * Render based on rendering context and grid.
     * @param gl WebGL rendering context.
     * @param primitive Mesh to be rendered.
     */
    constructor(gl, primitive) {
        this._primitive = primitive;
        this.gl = gl;
        this.initRenderState();
    }
    /**
     * Bind buffer and attribute.
     */
    bindBufferAndAttrib(shaderProgram) {
        const gl = this.gl;
        const primitive = this._primitive;
        const vertexBufferBindings = primitive._vertexBufferBindings;
        this.attribLocArray = [];
        const attributeLocation = shaderProgram.attributeLocation;
        const attributes = primitive._vertexElementMap;
        let vbo;
        let lastBoundVbo;
        for (const name in attributeLocation) {
            const loc = attributeLocation[name];
            if (loc === -1)
                continue;
            const element = attributes[name];
            if (element) {
                const { buffer, stride } = vertexBufferBindings[element.bindingIndex];
                vbo = buffer._nativeBuffer;
                if (lastBoundVbo !== vbo) {
                    lastBoundVbo = vbo;
                    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
                }
                gl.enableVertexAttribArray(loc);
                const { size, type, normalized } = element._glElementInfo;
                // gl.vertexAttribPointer(loc, size, type, normalized, 0, element.offset);
                gl.vertexAttribPointer(loc, size, type, normalized, stride, element.offset);
                this.attribLocArray.push(loc);
            }
            else {
                console.warn('vertex attribute not found: ' + name);
            }
        }
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
    }
    // TODO: 这个渲染状态是不是应该考虑放到材质里面，并且抽出一个RenderState
    /**
     * Clear depth, color buffer, etc.
     */
    initRenderState() {
        const gl = this.gl;
        gl.clearColor(0, 0, 0, 0);
        gl.enable(gl.DEPTH_TEST);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    }
    /**
     * Draw the primitive.
     */
    draw(shaderProgram, subMesh) {
        const gl = this.gl;
        const primitive = this._primitive;
        this.bindBufferAndAttrib(shaderProgram);
        const { _indexBufferBinding, _instanceCount, _glIndexType, _glIndexByteCount } = primitive;
        const { topology, start, count } = subMesh;
        if (!_instanceCount) {
            if (_indexBufferBinding) {
                const { _nativeBuffer } = _indexBufferBinding.buffer;
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);
                gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
            }
            else {
                gl.drawArrays(topology, start, count);
            }
        }
    }
    testDraw(shaderProgram) {
        const gl = this.gl;
        const position = new Float32Array([
            1.0,
            1.0,
            1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            -1.0,
            -1.0,
            -1.0,
            -1.0,
            1.0,
            -1.0,
            -1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            -1.0,
            -1.0,
            -1.0,
            -1.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            -1.0,
            -1.0,
            -1.0,
            -1.0, //back
        ]);
        var buf = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, buf);
        gl.bufferData(gl.ARRAY_BUFFER, position, gl.STATIC_DRAW);
        var loc = gl.getAttribLocation(shaderProgram.glProgram, 'POSITION');
        gl.vertexAttribPointer(loc, 3, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(loc);
        const indice = new Uint8Array([
            0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21,
            22, 20, 22, 23,
        ]);
        var buf = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buf);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indice, gl.STATIC_DRAW);
        gl.enable(gl.DEPTH_TEST);
        gl.clearColor(1.0, 1.0, 1.0, 1.0);
        gl.drawElements(gl.TRIANGLES, indice.length, gl.UNSIGNED_BYTE, 0);
    }
}

/**
 * Shader program, corresponding to the GPU shader program.
 */
class ShaderProgram {
    /** Shader program counter. */
    static _counter = 0;
    /** Shader program id. */
    id;
    sceneUniformBlock = new ShaderUniformBlock();
    cameraUniformBlock = new ShaderUniformBlock();
    rendererUniformBlock = new ShaderUniformBlock();
    materialUniformBlock = new ShaderUniformBlock();
    otherUniformBlock = new ShaderUniformBlock();
    /** Attribute variable location in webgl. */
    attributeLocation = Object.create(null);
    _isValid;
    _engine;
    _gl;
    _vertexShader;
    _fragmentShader;
    _glProgram;
    // 当前激活的纹理单元
    /** Currently active texture unit. */
    _activeTextureUint = 0;
    /** WebGL program. */
    get glProgram() {
        return this._glProgram;
    }
    /**
     * Whether this shader program is valid.
     */
    get isValid() {
        return this._isValid;
    }
    constructor(engine, vertexSource, fragmentSource) {
        this._engine = engine;
        this._gl = engine.gl;
        this._glProgram = this._createProgram(vertexSource, fragmentSource);
        // ! bind不应该放在constructor里面
        this.bind();
        if (this._glProgram) {
            this._isValid = true;
            this._recordLocation();
        }
        else {
            this._isValid = false;
        }
        this.id = ShaderProgram._counter++;
    }
    /**
     * Create a webgl program instance.
     * @param vertexSource Vertex source code.
     * @param fragmentSource Fragment source code.
     * @returns WebGL program.
     */
    _createProgram(vertexSource, fragmentSource) {
        const gl = this._gl;
        // create and compile shader
        const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);
        if (!vertexShader) {
            return null;
        }
        const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);
        if (!fragmentShader) {
            return null;
        }
        // link program and shader
        const program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        gl.validateProgram(program);
        if (gl.isContextLost()) {
            console.error('Context lost while linking program.');
            gl.deleteShader(vertexShader);
            gl.deleteShader(fragmentShader);
            return null;
        }
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.error('Could not link WebGL program. \n' + gl.getProgramInfoLog(program));
            gl.deleteProgram(program);
            return null;
        }
        this._vertexShader = vertexShader;
        this._fragmentShader = fragmentShader;
        return program;
    }
    /**
     * Create and compile shader.
     * @param shaderType Fragment shader code or vertex shader code.
     * @param shaderSource Fragment shader source code or vertex shader source code.
     * @returns WebGLShader | null
     */
    _createShader(shaderType, shaderSource) {
        const gl = this._gl;
        const shader = gl.createShader(shaderType);
        if (!shader) {
            console.error('Context lost while create shader.');
            return null;
        }
        gl.shaderSource(shader, shaderSource);
        gl.compileShader(shader);
        if (gl.isContextLost()) {
            console.error('Context lost while compiling shader.');
            gl.deleteShader(shader);
            return null;
        }
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.error(`Could not compile WebGL shader.\n${gl.getShaderInfoLog(shader)}`);
            gl.deleteShader(shader);
            return null;
        }
        return shader;
    }
    // 将纹理数据或者uniform数据推入对应组的block
    /**
     * Push texture data or uniform data into the block of the corresponding group.
     * @param uniform Shader uniform.
     * @param group Shader data group: Scene, Camera, Renderer and Material.
     * @param isTexture Is it a texture or a uniform variable.
     */
    _groupingUniform(uniform, group, isTexture) {
        switch (group) {
            case ShaderDataGroup.Scene:
                if (isTexture) {
                    this.sceneUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.sceneUniformBlock.constUniforms.push(uniform);
                }
                break;
            case ShaderDataGroup.Camera:
                if (isTexture) {
                    this.cameraUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.cameraUniformBlock.constUniforms.push(uniform);
                }
                break;
            case ShaderDataGroup.Renderer:
                if (isTexture) {
                    this.rendererUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.rendererUniformBlock.constUniforms.push(uniform);
                }
                break;
            case ShaderDataGroup.Material:
                if (isTexture) {
                    this.materialUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.materialUniformBlock.constUniforms.push(uniform);
                }
                break;
            default:
                if (isTexture) {
                    this.otherUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.otherUniformBlock.constUniforms.push(uniform);
                }
        }
    }
    /**
     * Record the location of uniform/attribute.
     */
    _recordLocation() {
        const gl = this._gl;
        const program = this._glProgram;
        const uniformInfos = this._getUniformInfos();
        const attributeInfos = this._getAttributeInfos();
        uniformInfos.forEach(({ name, size, type }) => {
            const shaderUniform = new ShaderUniform(gl);
            let isArray = false;
            let isTexture = false;
            if (name.indexOf('[0]') > 0) {
                name = name.substr(0, name.length - 3);
                isArray = true;
            }
            const group = Shader._getShaderPropertyGroup(name);
            const location = gl.getUniformLocation(program, name);
            shaderUniform.name = name;
            shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;
            shaderUniform.location = location;
            switch (type) {
                case gl.FLOAT:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload1fv;
                    }
                    else {
                        shaderUniform.applyFunc = shaderUniform.upload1f;
                        shaderUniform.cacheValue = 0;
                    }
                    break;
                case gl.FLOAT_VEC2:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload2fv;
                    }
                    break;
                case gl.FLOAT_VEC3:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload3fv;
                    }
                    else {
                        shaderUniform.applyFunc = shaderUniform.upload3f;
                        shaderUniform.cacheValue = new Vector3(0, 0, 0);
                    }
                    break;
                case gl.FLOAT_VEC4:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload4fv;
                    }
                    else {
                        shaderUniform.applyFunc = shaderUniform.upload4f;
                        shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);
                    }
                    break;
                case gl.INT:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload1iv;
                    }
                    else {
                        shaderUniform.applyFunc = shaderUniform.upload1i;
                        shaderUniform.cacheValue = 0;
                    }
                    break;
                case gl.INT_VEC2:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload2iv;
                    }
                    break;
                case gl.INT_VEC4:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload4iv;
                    }
                    break;
                case gl.FLOAT_MAT4:
                    shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;
                    break;
                case gl.SAMPLER_2D:
                case gl.SAMPLER_CUBE:
                    let defaultTexture;
                    switch (type) {
                        case gl.SAMPLER_2D:
                            defaultTexture = this._engine._whiteTexture2D;
                            break;
                        case gl.SAMPLER_CUBE:
                            defaultTexture = this._engine._whiteTextureCube;
                            break;
                        default:
                            throw new Error('Unsupported texture type.');
                    }
                    isTexture = true;
                    const textureIndex = gl.TEXTURE0 + this._activeTextureUint;
                    shaderUniform.textureDefault = defaultTexture;
                    shaderUniform.textureIndex = textureIndex;
                    shaderUniform.applyFunc = shaderUniform.uploadTexture;
                    gl.uniform1i(location, this._activeTextureUint++);
                    shaderUniform.uploadTexture(shaderUniform, defaultTexture);
            }
            this._groupingUniform(shaderUniform, group, isTexture);
        });
        attributeInfos.forEach(({ name }) => {
            this.attributeLocation[name] = gl.getAttribLocation(program, name);
        });
    }
    /**
     * Get the address of the active uniform variable in the current webgl program.
     * @returns Array of uniform variable addresses.
     */
    _getUniformInfos() {
        const gl = this._gl;
        const program = this._glProgram;
        const uniformInfos = new Array();
        const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for (let i = 0; i < uniformCount; ++i) {
            const info = gl.getActiveUniform(program, i);
            uniformInfos[i] = info;
        }
        return uniformInfos;
    }
    /**
     * Get the address of the active attribute variable in the current webgl program.
     * @returns Array of attribute variable addresses.
     */
    _getAttributeInfos() {
        const gl = this._gl;
        const program = this._glProgram;
        const attributeInfos = new Array();
        const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        for (let i = 0; i < attributeCount; ++i) {
            const info = gl.getActiveAttrib(program, i);
            attributeInfos[i] = info;
        }
        return attributeInfos;
    }
    /**
     * Upload all shader data in shader uniform block.
     * @param uniformBlock - shader Uniform block
     * @param shaderData - shader data
     */
    uploadAll(uniformBlock, shaderData) {
        this.uploadUniforms(uniformBlock, shaderData);
        this.uploadTextures(uniformBlock, shaderData);
    }
    /**
     * Upload constant shader data in shader uniform block.
     * @param uniformBlock - shader Uniform block
     * @param shaderData - shader data
     */
    uploadUniforms(uniformBlock, shaderData) {
        // shaderData._properties是根据shaderproperty的id的值的哈希表
        // 因为以数字为键效率更高
        const properties = shaderData._properties;
        const constUniforms = uniformBlock.constUniforms;
        for (let i = 0, n = constUniforms.length; i < n; i++) {
            const uniform = constUniforms[i];
            const data = properties[uniform.propertyId];
            // ! Highlight: 这里相当于把CPU中的值分配给GPU
            try {
                data != null && uniform.applyFunc(uniform, data);
            }
            catch (err) {
                console.log(err, uniform, data);
            }
        }
    }
    /**
     * Upload texture shader data in shader uniform block.
     * @param uniformBlock - shader Uniform block
     * @param shaderData - shader data
     */
    uploadTextures(uniformBlock, shaderData) {
        const properties = shaderData._properties;
        const textureUniforms = uniformBlock.textureUniforms;
        // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.
        if (textureUniforms) {
            for (let i = 0, n = textureUniforms.length; i < n; i++) {
                const uniform = textureUniforms[i];
                const texture = properties[uniform.propertyId];
                if (texture) {
                    uniform.applyFunc(uniform, texture);
                }
                else {
                    uniform.applyFunc(uniform, uniform.textureDefault);
                }
            }
        }
    }
    /**
     * Bind this shader program.
     * @returns Whether the shader program is switched.
     */
    bind() {
        if (Renderer.glProgram !== this) {
            this._gl.useProgram(this._glProgram);
            Renderer.glProgram = this;
            return true;
        }
        else {
            return false;
        }
    }
    destroy() {
        const gl = this._gl;
        this._vertexShader && gl.deleteShader(this._vertexShader);
        this._fragmentShader && gl.deleteShader(this._fragmentShader);
        this._glProgram && gl.deleteProgram(this._glProgram);
    }
}

/**
 * Shader property.
 */
class ShaderProperty {
    static _propertyNameCounter = 0;
    /** @internal */
    _uniqueId;
    /** @internal */
    _group;
    /** Shader property name. */
    name;
    /**
     * @internal
     */
    constructor(name) {
        this.name = name;
        this._uniqueId = ShaderProperty._propertyNameCounter++;
    }
}

/**
 * Shader containing vertex and fragment source.
 */
class Shader {
    /** Shader counter. */
    static _shaderCounter = 0;
    /** Shader map. */
    static _shaderMap = Object.create(null);
    /** Shader counter. */
    static _propertyNameMap = Object.create(null);
    /** The name of shader. */
    name;
    /** @internal */
    _shaderId = 0;
    /** Vertex shader source. */
    _vertexSource;
    /** Fragment shader source. */
    _fragmentSource;
    constructor(name, vertexSource, fragmentSource) {
        this._shaderId = Shader._shaderCounter++;
        this.name = name;
        this._vertexSource = vertexSource;
        this._fragmentSource = fragmentSource;
    }
    /**
     * @internal
     */
    static _getShaderPropertyGroup(propertyName) {
        const shaderProperty = Shader._propertyNameMap[propertyName];
        return shaderProperty?._group;
    }
    // 不存在就创建一个
    /**
     * Get shader property by name.
     * @param name - Name of the shader property
     * @returns Shader property
     */
    static getPropertyByName(name) {
        const propertyNameMap = Shader._propertyNameMap;
        if (propertyNameMap[name] != null) {
            return propertyNameMap[name];
        }
        else {
            // 实例化的时候并不分配分组，即此时property还没有group属性
            const property = new ShaderProperty(name);
            propertyNameMap[name] = property;
            return property;
        }
    }
    /**
     * Create a shader.
     * @param name - Name of the shader.
     * @param vertexSource - Vertex source code.
     * @param fragmentSource - Fragment source code.
     */
    static create(name, vertexSource, fragmentSource) {
        const shaderMap = Shader._shaderMap;
        if (shaderMap[name]) {
            throw `Shader named "${name}" already exists.`;
        }
        return (shaderMap[name] = new Shader(name, vertexSource, fragmentSource));
    }
    /**
     * Find a shader by name.
     * @param name - Name of the shader
     */
    static find(name) {
        return Shader._shaderMap[name];
    }
    /**
     * Create program based on shader.
     * @param engine
     * @returns Shader program.
     */
    _getShaderProgram(engine) {
        // TODO: 将常量shader拼接到这里
        const vertexSource = this._vertexSource;
        const fragmentSource = this._fragmentSource;
        return new ShaderProgram(engine, vertexSource, fragmentSource);
    }
}

class ShaderData {
    _group;
    _properties = Object.create(null);
    constructor(group) {
        this._group = group;
    }
    getFloat(property) {
        return this._getData(property);
    }
    setFloat(property, value) {
        this._setData(property, value);
    }
    getInt(property) {
        return this._getData(property);
    }
    setInt(property, value) {
        this._setData(property, value);
    }
    getFloatArray(property) {
        return this._getData(property);
    }
    setFloatArray(property, value) {
        this._setData(property, value);
    }
    getIntArray(property) {
        return this._getData(property);
    }
    setIntArray(property, value) {
        this._setData(property, value);
    }
    getVector2(property) {
        return this._getData(property);
    }
    setVector2(property, value) {
        this._setData(property, value);
    }
    getVector3(property) {
        return this._getData(property);
    }
    setVector3(property, value) {
        this._setData(property, value);
    }
    getVector4(property) {
        return this._getData(property);
    }
    setVector4(property, value) {
        this._setData(property, value);
    }
    getMatrix(property) {
        return this._getData(property);
    }
    setMatrix(property, value) {
        this._setData(property, value);
    }
    _getData(property) {
        if (typeof property === 'string') {
            property = Shader.getPropertyByName(property);
        }
        return this._properties[property._uniqueId];
    }
    getTexture(property) {
        return this._getData(property);
    }
    setTexture(property, value) {
        this._setData(property, value);
    }
    // 设置数据的时候顺便指定了分组！！！
    _setData(property, value) {
        if (typeof property === 'string') {
            property = Shader.getPropertyByName(property);
        }
        if (property._group !== this._group) {
            if (property._group === undefined) {
                property._group = this._group;
            }
            else {
                throw `Shader property ${property.name} has been used as ${ShaderDataGroup[property._group]} property.`;
            }
        }
        this._properties[property._uniqueId] = value;
    }
}

/**
 * Material base class.
 */
class Material {
    /** Name. */
    name;
    /** Shader used by the material. */
    shader;
    // TODO: 提升一个RefObject!
    engine;
    /** Shader data. */
    shaderData = new ShaderData(ShaderDataGroup.Material);
    constructor(engine, shader) {
        this.shader = shader;
        this.engine = engine;
    }
}

/**
 * Texture format enumeration.
 */
var TextureFormat;
(function (TextureFormat) {
    /** RGB format,8 bits per channel. */
    TextureFormat[TextureFormat["R8G8B8"] = 0] = "R8G8B8";
    /** RGBA format,8 bits per channel. */
    TextureFormat[TextureFormat["R8G8B8A8"] = 1] = "R8G8B8A8";
    /** RGBA format,4 bits per channel. */
    TextureFormat[TextureFormat["R4G4B4A4"] = 2] = "R4G4B4A4";
    /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */
    TextureFormat[TextureFormat["R5G5B5A1"] = 3] = "R5G5B5A1";
    /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */
    TextureFormat[TextureFormat["R5G6B5"] = 4] = "R5G6B5";
    /** Transparent format,8 bits. */
    TextureFormat[TextureFormat["Alpha8"] = 5] = "Alpha8";
    /** Luminance/alpha in RGB channel, alpha in A channel. */
    TextureFormat[TextureFormat["LuminanceAlpha"] = 6] = "LuminanceAlpha";
    /** RGBA format,16 bits per channel. */
    TextureFormat[TextureFormat["R16G16B16A16"] = 7] = "R16G16B16A16";
    /** RGBA format,32 bits per channel. */
    TextureFormat[TextureFormat["R32G32B32A32"] = 8] = "R32G32B32A32";
    /** RGB compressed format。*/
    TextureFormat[TextureFormat["DXT1"] = 9] = "DXT1";
    /** RGBA compressed format。*/
    TextureFormat[TextureFormat["DXT5"] = 10] = "DXT5";
    /** RGB compressed format,4 bits per pixel。*/
    TextureFormat[TextureFormat["ETC1_RGB"] = 11] = "ETC1_RGB";
    /** RGB compressed format,4 bits per pixel。*/
    TextureFormat[TextureFormat["ETC2_RGB"] = 12] = "ETC2_RGB";
    /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */
    TextureFormat[TextureFormat["ETC2_RGBA5"] = 13] = "ETC2_RGBA5";
    /** RGB compressed format,8 bits per pixel. */
    TextureFormat[TextureFormat["ETC2_RGBA8"] = 14] = "ETC2_RGBA8";
    /** RGB compressed format,2 bits per pixel. */
    TextureFormat[TextureFormat["PVRTC_RGB2"] = 15] = "PVRTC_RGB2";
    /** RGBA compressed format,2 bits per pixel. */
    TextureFormat[TextureFormat["PVRTC_RGBA2"] = 16] = "PVRTC_RGBA2";
    /** RGB compressed format,4 bits per pixel. */
    TextureFormat[TextureFormat["PVRTC_RGB4"] = 17] = "PVRTC_RGB4";
    /** RGBA compressed format,4 bits per pixel. */
    TextureFormat[TextureFormat["PVRTC_RGBA4"] = 18] = "PVRTC_RGBA4";
    /** RGB(A) compressed format,128 bits per 4x4 pixel block. */
    TextureFormat[TextureFormat["ASTC_4x4"] = 19] = "ASTC_4x4";
    /** RGB(A) compressed format,128 bits per 5x5 pixel block. */
    TextureFormat[TextureFormat["ASTC_5x5"] = 20] = "ASTC_5x5";
    /** RGB(A) compressed format,128 bits per 6x6 pixel block. */
    TextureFormat[TextureFormat["ASTC_6x6"] = 21] = "ASTC_6x6";
    /** RGB(A) compressed format,128 bits per 8x8 pixel block. */
    TextureFormat[TextureFormat["ASTC_8x8"] = 22] = "ASTC_8x8";
    /** RGB(A) compressed format,128 bits per 10x10 pixel block. */
    TextureFormat[TextureFormat["ASTC_10x10"] = 23] = "ASTC_10x10";
    /** RGB(A) compressed format,128 bits per 12x12 pixel block. */
    TextureFormat[TextureFormat["ASTC_12x12"] = 24] = "ASTC_12x12";
    /** Render to depth buffer,engine will automatically select the supported precision. */
    TextureFormat[TextureFormat["Depth"] = 25] = "Depth";
    /** Render to depth stencil buffer, engine will automatically select the supported precision. */
    TextureFormat[TextureFormat["DepthStencil"] = 26] = "DepthStencil";
    /** Render to stencil buffer. */
    TextureFormat[TextureFormat["Stencil"] = 27] = "Stencil";
    /** Force 16-bit depth buffer. */
    TextureFormat[TextureFormat["Depth16"] = 28] = "Depth16";
    /** Force 24-bit depth buffer. */
    TextureFormat[TextureFormat["Depth24"] = 29] = "Depth24";
    /** Force 32-bit depth buffer. */
    TextureFormat[TextureFormat["Depth32"] = 30] = "Depth32";
    /** Force 16-bit depth + 8-bit stencil buffer. */
    TextureFormat[TextureFormat["Depth24Stencil8"] = 31] = "Depth24Stencil8";
    /** Force 32-bit depth + 8-bit stencil buffer. */
    TextureFormat[TextureFormat["Depth32Stencil8"] = 32] = "Depth32Stencil8";
})(TextureFormat || (TextureFormat = {}));

/**
 * The base class of texture, contains some common functions of texture-related classes.
 */
class Texture {
    name;
    /** Whether to enable mipmap. */
    _mipmap;
    /** Texture object storage address. */
    _glTexture;
    /** Texture sampler. */
    _glTarget;
    /** Texture format detail. */
    _formatDetail;
    /** Texture format. */
    _format;
    /** Texture width. */
    _width;
    /** Texture height. */
    _height;
    _mipmapCount;
    _gl;
    _wrapModeU;
    _wrapModeV;
    _filterMode;
    get format() {
        return this._format;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    get wrapModeU() {
        return this._wrapModeU;
    }
    set wrapModeU(value) {
        if (value === this._wrapModeU)
            return;
        this._wrapModeU = value;
    }
    get wrapModeV() {
        return this._wrapModeV;
    }
    set wrapModeV(value) {
        if (value === this._wrapModeV)
            return;
        this._wrapModeV = value;
    }
    get mipmapCount() {
        return this._mipmapCount;
    }
    get filterMode() {
        return this._filterMode;
    }
    set filterMode(value) {
        if (value === this._filterMode)
            return;
        this._filterMode = value;
    }
    _getMaxMiplevel(size) {
        return Math.floor(Math.log2(size));
    }
    _getMipmapCount() {
        return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;
    }
    /**
     * Get detailed texture detail information based on texture format.
     * @param format Texture format.
     * @param gl WebGLRenderingContext.
     * @returns Texture format detail.
     */
    static _getFormatDetail(format, gl) {
        switch (format) {
            case TextureFormat.R8G8B8:
                return {
                    internalFormat: gl.RGB,
                    baseFormat: gl.RGB,
                    dataType: gl.UNSIGNED_BYTE,
                    isCompressed: false,
                };
            case TextureFormat.R8G8B8A8:
                return {
                    internalFormat: gl.RGBA,
                    baseFormat: gl.RGBA,
                    dataType: gl.UNSIGNED_BYTE,
                    isCompressed: false,
                };
            case TextureFormat.R4G4B4A4:
                return {
                    internalFormat: gl.RGBA,
                    baseFormat: gl.RGBA,
                    dataType: gl.UNSIGNED_SHORT_4_4_4_4,
                    isCompressed: false,
                };
            case TextureFormat.R5G5B5A1:
                return {
                    internalFormat: gl.RGBA,
                    baseFormat: gl.RGBA,
                    dataType: gl.UNSIGNED_SHORT_5_5_5_1,
                    isCompressed: false,
                };
            case TextureFormat.R5G6B5:
                return {
                    internalFormat: gl.RGB,
                    baseFormat: gl.RGB,
                    dataType: gl.UNSIGNED_SHORT_5_6_5,
                    isCompressed: false,
                };
            case TextureFormat.Alpha8:
                return {
                    internalFormat: gl.ALPHA,
                    baseFormat: gl.ALPHA,
                    dataType: gl.UNSIGNED_BYTE,
                    isCompressed: false,
                };
            case TextureFormat.LuminanceAlpha:
                return {
                    internalFormat: gl.LUMINANCE_ALPHA,
                    baseFormat: gl.LUMINANCE_ALPHA,
                    dataType: gl.UNSIGNED_BYTE,
                    isCompressed: false,
                };
            default:
                throw new Error(`this TextureFormat is not supported in Oasis Engine: ${format}`);
        }
    }
}

/**
 * The filter mode of the texture.
 */
var TextureFilterMode;
(function (TextureFilterMode) {
    /** Point filtering. */
    TextureFilterMode[TextureFilterMode["Point"] = 0] = "Point";
    /** Bilinear filtering. */
    TextureFilterMode[TextureFilterMode["Bilinear"] = 1] = "Bilinear";
    /** Trilinear filtering. */
    TextureFilterMode[TextureFilterMode["Trilinear"] = 2] = "Trilinear";
})(TextureFilterMode || (TextureFilterMode = {}));

/**
 * Wrapping mode of the texture.
 */
var TextureWrapMode;
(function (TextureWrapMode) {
    /** Clamping mode. use the color of edge pixels beyond the texture boundary. */
    TextureWrapMode[TextureWrapMode["Clamp"] = 0] = "Clamp";
    /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */
    TextureWrapMode[TextureWrapMode["Repeat"] = 1] = "Repeat";
    /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */
    TextureWrapMode[TextureWrapMode["Mirror"] = 2] = "Mirror";
})(TextureWrapMode || (TextureWrapMode = {}));

/**
 * Two-dimensional texture.
 */
class Texture2D extends Texture {
    /**
     * Create Texture2D.
     * @param engine Define the engine to use to render this texture.
     * @param width Texture width.
     * @param height Texture height.
     * @param format Texture format. default  `TextureFormat.R8G8B8A8`.
     * @param mipmap Whether to use multi-level texture.
     */
    constructor(engine, width, height, format = TextureFormat.R8G8B8A8, mipmap = true) {
        super();
        this._mipmap = mipmap;
        this._width = width;
        this._height = height;
        this._format = format;
        this._mipmapCount = this._getMipmapCount();
        this.filterMode = TextureFilterMode.Bilinear;
        this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;
        this._gl = engine.gl;
        this._glTexture = this._gl.createTexture();
        this._glTarget = this._gl.TEXTURE_2D;
        this._formatDetail = Texture._getFormatDetail(format, this._gl);
    }
    /**
     * Set texture based on pixel buffer.
     * @param colorBuffer Color buffer array.
     * @param mipLevel Mip level.
     * @param x Starting point x position.
     * @param y Starting point y position.
     * @param width Set width.
     * @param height Set height.
     */
    setPixelBuffer(colorBuffer, mipLevel = 0, x = 0, y = 0, width, height) {
        const gl = this._gl;
        const { internalFormat, baseFormat, dataType } = this._formatDetail;
        const mipWidth = Math.max(1, this._width >> mipLevel);
        const mipHeight = Math.max(1, this.height >> mipLevel);
        width = width || mipWidth - x;
        height = height || mipHeight - y;
        // webgl2 才可以考虑纹理压缩API isCompressed
        gl.bindTexture(this._glTarget, this._glTexture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);
        gl.texParameteri(this._glTarget, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        // gl.texSubImage2D(this._glTarget, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);
        gl.texImage2D(this._glTarget, mipLevel, internalFormat, width, height, 0, baseFormat, dataType, colorBuffer);
    }
    /**
     * Set the texture according to the picture.
     * @param imageSource Image source.
     * @param mipLevel Mip level.
     * @param flipY Y axis reversed.
     */
    setImageSource(imageSource, mipLevel, flipY) {
        const gl = this._gl;
        const { baseFormat, dataType, internalFormat } = this._formatDetail;
        gl.bindTexture(this._glTarget, this._glTexture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);
        // 将Alpha通道乘以其他颜色通道
        // gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);
        // gl.texSubImage2D(this._glTarget, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texImage2D(this._glTarget, mipLevel, internalFormat, baseFormat, dataType, imageSource);
    }
}

/**
 * Define the face of the cube texture.
 */
var TextureCubeFace;
(function (TextureCubeFace) {
    /** Positive X face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["PositiveX"] = 0] = "PositiveX";
    /** Negative X face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["NegativeX"] = 1] = "NegativeX";
    /** Positive Y face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["PositiveY"] = 2] = "PositiveY";
    /** Negative Y face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["NegativeY"] = 3] = "NegativeY";
    /** Positive Z face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["PositiveZ"] = 4] = "PositiveZ";
    /** Negative Z face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["NegativeZ"] = 5] = "NegativeZ";
})(TextureCubeFace || (TextureCubeFace = {}));

/**
 * Image materials using 2D textures to display the earth, raster tiles, etc.
 */
class ImageMaterial extends Material {
    /** The texture used by the image material. */
    texture2d;
    /** The address of the texture sampler in the shader. */
    static _sampleprop = Shader.getPropertyByName('u_sampler');
    // TODO: 应该建立一个shader池，这样就不用再传入shader了
    constructor(engine, shader, url) {
        super(engine, shader);
        const shaderData = this.shaderData;
        this.loadTexture(url)
            .then((image) => {
            this.texture2d = new Texture2D(engine, image.width, image.height, TextureFormat.R8G8B8, false);
            this.texture2d.setImageSource(image, 0, true);
            shaderData.setTexture(ImageMaterial._sampleprop, this.texture2d);
        })
            .catch((error) => {
            throw error;
        });
    }
    /**
     * Load texture image according to url.
     * @param url Texture image url.
     * @returns Promise<HTMLImageElement>
     */
    loadTexture(url) {
        return new Promise((resolve, reject) => {
            let image = new Image();
            image.onload = () => {
                resolve(image);
            };
            image.onerror = (error) => {
                reject(error);
            };
            image.src = url;
            image.crossOrigin = 'anonymous';
        });
    }
}

/**
 * Cube texture.
 */
class TextureCube extends Texture {
    /**
     * Create TextureCube.
     * @param engine Define the engine to use to render this texture.
     * @param size Texture size. texture width must be equal to height in cube texture.
     * @param format Texture format,default TextureFormat.R8G8B8A8.
     * @param mipmap Whether to use multi-level texture.
     */
    constructor(engine, size, format = TextureFormat.R8G8B8A8, mipmap = true) {
        super();
        this._mipmap = mipmap;
        this._width = size;
        this._height = size;
        this._format = format;
        this._mipmapCount = this._getMipmapCount();
        this.filterMode = TextureFilterMode.Bilinear;
        this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;
        this._gl = engine.gl;
        this._glTexture = this._gl.createTexture();
        this._glTarget = this._gl.TEXTURE_CUBE_MAP;
        this._formatDetail = Texture._getFormatDetail(format, this._gl);
    }
    /**
     * Set texture based on pixel buffer.
     * @param face Which side of the cube.
     * @param colorBuffer Color buffer.
     * @param mipLevel Mip level.
     */
    setPixelBuffer(face, colorBuffer, mipLevel = 0) {
        const gl = this._gl;
        const { internalFormat, baseFormat, dataType } = this._formatDetail;
        gl.bindTexture(this._glTarget, this._glTexture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, internalFormat, this._width, this._height, 0, baseFormat, dataType, colorBuffer);
    }
    /**
     * Set the texture according to the picture.
     * @param face Which side of the cube.
     * @param imageSource Image source.
     * @param mipLevel Mip level.
     */
    setImageSource(face, imageSource, mipLevel) {
        const gl = this._gl;
        const { baseFormat, dataType, internalFormat } = this._formatDetail;
        gl.bindTexture(this._glTarget, this._glTexture);
        gl.texImage2D(face, mipLevel, internalFormat, baseFormat, dataType, imageSource);
        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
    }
}

/**
 * A skybox material built with a cube texture, used to display the starry sky, etc.
 */
class SkyBoxMaterial extends Material {
    /** Cube texture. */
    textureCube;
    /** Six sided information array. */
    faceInfoArr;
    /** Get the sampler for the cube texture in the shader. */
    static _skyboxprop = Shader.getPropertyByName('u_Skybox');
    // TODO: 抽RefObject
    constructor(engine, faceInfoArr) {
        super(engine, Shader.find('skybox'));
        const shaderData = this.shaderData;
        this.textureCube = new TextureCube(engine, 1024);
        this.faceInfoArr = faceInfoArr;
        const gl = engine.gl;
        this.faceInfoArr.forEach((faceInfo) => {
            const { target, url } = faceInfo;
            const level = 0;
            const image = new Image();
            image.src = url;
            image.crossOrigin = 'anonymous';
            image.onload = () => {
                this.textureCube.setImageSource(target, image, level);
                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
            };
        });
        shaderData.setTexture(SkyBoxMaterial._skyboxprop, this.textureCube);
    }
}

/**
 * Buffer binding flag.
 */
var BufferBindFlag;
(function (BufferBindFlag) {
    /** Vertex buffer binding flag */
    BufferBindFlag[BufferBindFlag["VertexBuffer"] = 0] = "VertexBuffer";
    /** Index buffer binding flag */
    BufferBindFlag[BufferBindFlag["IndexBuffer"] = 1] = "IndexBuffer";
})(BufferBindFlag || (BufferBindFlag = {}));

/**
 * Buffer usage.
 */
var BufferUsage;
(function (BufferUsage) {
    /** The buffer content are intended to be specified once, and used many times */
    BufferUsage[BufferUsage["Static"] = 0] = "Static";
    /** The buffer contents are intended to be respecified repeatedly, and used many times */
    BufferUsage[BufferUsage["Dynamic"] = 1] = "Dynamic";
    /** The buffer contents are intended to be specified once, and used at most a few times */
    BufferUsage[BufferUsage["Stream"] = 2] = "Stream";
})(BufferUsage || (BufferUsage = {}));

/**
 * Vertex element format.
 */
var VertexElementFormat;
(function (VertexElementFormat) {
    /** 32-bit float */
    VertexElementFormat[VertexElementFormat["Float"] = 0] = "Float";
    /** Two-dimensional 32-bit float */
    VertexElementFormat[VertexElementFormat["Vector2"] = 1] = "Vector2";
    /** Three-dimensional 32-bit float */
    VertexElementFormat[VertexElementFormat["Vector3"] = 2] = "Vector3";
    /** Four-dimensional 32-bit float */
    VertexElementFormat[VertexElementFormat["Vector4"] = 3] = "Vector4";
    /** Four-dimensional 8-bit integer,range is [-128,127] */
    VertexElementFormat[VertexElementFormat["Byte4"] = 4] = "Byte4";
    /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */
    VertexElementFormat[VertexElementFormat["UByte4"] = 5] = "UByte4";
    /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */
    VertexElementFormat[VertexElementFormat["NormalizedByte4"] = 6] = "NormalizedByte4";
    /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */
    VertexElementFormat[VertexElementFormat["NormalizedUByte4"] = 7] = "NormalizedUByte4";
    /** Two-dimensional 16-bit integer, range is[-32768, 32767] */
    VertexElementFormat[VertexElementFormat["Short2"] = 8] = "Short2";
    /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */
    VertexElementFormat[VertexElementFormat["UShort2"] = 9] = "UShort2";
    /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */
    VertexElementFormat[VertexElementFormat["NormalizedShort2"] = 10] = "NormalizedShort2";
    /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */
    VertexElementFormat[VertexElementFormat["NormalizedUShort2"] = 11] = "NormalizedUShort2";
    /** Four-dimensional 16-bit integer, range is [-32768, 32767] */
    VertexElementFormat[VertexElementFormat["Short4"] = 12] = "Short4";
    /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */
    VertexElementFormat[VertexElementFormat["UShort4"] = 13] = "UShort4";
    /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */
    VertexElementFormat[VertexElementFormat["NormalizedShort4"] = 14] = "NormalizedShort4";
    /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */
    VertexElementFormat[VertexElementFormat["NormalizedUShort4"] = 15] = "NormalizedUShort4";
})(VertexElementFormat || (VertexElementFormat = {}));

/**
 * Data type enumeration
 */
var DataType;
(function (DataType) {
    /** Float */
    DataType[DataType["FLOAT"] = 5126] = "FLOAT";
    /** Floating-point two-dimensional vector */
    DataType[DataType["FLOAT_VEC2"] = 35664] = "FLOAT_VEC2";
    /** Floating-point three-dimensional vector */
    DataType[DataType["FLOAT_VEC3"] = 35665] = "FLOAT_VEC3";
    /** Floating-point four-dimensional vector */
    DataType[DataType["FLOAT_VEC4"] = 35666] = "FLOAT_VEC4";
    /** Integer */
    DataType[DataType["INT"] = 5124] = "INT";
    /** Integer two-dimensional vector */
    DataType[DataType["INT_VEC2"] = 35667] = "INT_VEC2";
    /** Integer three-dimensional vector */
    DataType[DataType["INT_VEC3"] = 35668] = "INT_VEC3";
    /** Integer four-dimensional vector */
    DataType[DataType["INT_VEC4"] = 35669] = "INT_VEC4";
    /** Boolean */
    DataType[DataType["BOOL"] = 35670] = "BOOL";
    /** Boolean two-dimensional vector */
    DataType[DataType["BOOL_VEC2"] = 35671] = "BOOL_VEC2";
    /** Boolean three-dimensional vector */
    DataType[DataType["BOOL_VEC3"] = 35672] = "BOOL_VEC3";
    /** Boolean four-dimensional vector */
    DataType[DataType["BOOL_VEC4"] = 35673] = "BOOL_VEC4";
    /** Second-order matrix */
    DataType[DataType["FLOAT_MAT2"] = 35674] = "FLOAT_MAT2";
    /** Third-order matrix */
    DataType[DataType["FLOAT_MAT3"] = 35675] = "FLOAT_MAT3";
    /** Fourth-order matrix */
    DataType[DataType["FLOAT_MAT4"] = 35676] = "FLOAT_MAT4";
    /** Float array */
    DataType[DataType["FLOAT_ARRAY"] = 35677] = "FLOAT_ARRAY";
    /** Floating-point two-dimensional vector array */
    DataType[DataType["FLOAT_VEC2_ARRAY"] = 100000] = "FLOAT_VEC2_ARRAY";
    /** Floating-point three-dimensional vector array */
    DataType[DataType["FLOAT_VEC3_ARRAY"] = 100001] = "FLOAT_VEC3_ARRAY";
    /** Floating-point four-dimensional vector array */
    DataType[DataType["FLOAT_VEC4_ARRAY"] = 100002] = "FLOAT_VEC4_ARRAY";
    /** Integer array */
    DataType[DataType["INT_ARRAY"] = 100003] = "INT_ARRAY";
    /** Integer two-dimensional vector array */
    DataType[DataType["INT_VEC2_ARRAY"] = 100004] = "INT_VEC2_ARRAY";
    /** Integer three-dimensional vector array */
    DataType[DataType["INT_VEC3_ARRAY"] = 100005] = "INT_VEC3_ARRAY";
    /** Integer four-dimensional vector array */
    DataType[DataType["INT_VEC4_ARRAY"] = 100006] = "INT_VEC4_ARRAY";
    /** Second-order matrix array */
    DataType[DataType["FLOAT_MAT2_ARRAY"] = 100007] = "FLOAT_MAT2_ARRAY";
    /** Third-order matrix array */
    DataType[DataType["FLOAT_MAT3_ARRAY"] = 100008] = "FLOAT_MAT3_ARRAY";
    /** Fourth-order matrix array */
    DataType[DataType["FLOAT_MAT4_ARRAY"] = 100009] = "FLOAT_MAT4_ARRAY";
    /** 2D texture sampler array */
    DataType[DataType["SAMPLER_2D_ARRAY"] = 100010] = "SAMPLER_2D_ARRAY";
    /** Cube map texture sampler array */
    DataType[DataType["SAMPLER_CUBE_ARRAY"] = 100011] = "SAMPLER_CUBE_ARRAY";
    /** 2D sampler */
    DataType[DataType["SAMPLER_2D"] = 35678] = "SAMPLER_2D";
    /** Cube map Texture sampler */
    DataType[DataType["SAMPLER_CUBE"] = 35680] = "SAMPLER_CUBE";
    /** Byte */
    DataType[DataType["BYTE"] = 5120] = "BYTE";
    /** Unsigned byte */
    DataType[DataType["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
    /** Short */
    DataType[DataType["SHORT"] = 5122] = "SHORT";
    /** Unsigned short */
    DataType[DataType["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
    /** Unsigned int */
    DataType[DataType["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
    DataType[DataType["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
    DataType[DataType["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
    DataType[DataType["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
    DataType[DataType["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
    DataType[DataType["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
    DataType[DataType["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
})(DataType || (DataType = {}));
/**
 * GL Capabilities
 * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.
 * */
var GLCapabilityType;
(function (GLCapabilityType) {
    GLCapabilityType["shaderVertexID"] = "shaderVertexID";
    GLCapabilityType["standardDerivatives"] = "OES_standard_derivatives";
    GLCapabilityType["shaderTextureLod"] = "EXT_shader_texture_lod";
    GLCapabilityType["elementIndexUint"] = "OES_element_index_uint";
    GLCapabilityType["depthTexture"] = "WEBGL_depth_texture";
    GLCapabilityType["drawBuffers"] = "WEBGL_draw_buffers";
    GLCapabilityType["vertexArrayObject"] = "OES_vertex_array_object";
    GLCapabilityType["instancedArrays"] = "ANGLE_instanced_arrays";
    GLCapabilityType["multipleSample"] = "multipleSampleOnlySupportedInWebGL2";
    GLCapabilityType["textureFloat"] = "OES_texture_float";
    GLCapabilityType["textureFloatLinear"] = "OES_texture_float_linear";
    GLCapabilityType["textureHalfFloat"] = "OES_texture_half_float";
    GLCapabilityType["textureHalfFloatLinear"] = "OES_texture_half_float_linear";
    GLCapabilityType["WEBGL_colorBufferFloat"] = "WEBGL_color_buffer_float";
    GLCapabilityType["colorBufferFloat"] = "EXT_color_buffer_float";
    GLCapabilityType["colorBufferHalfFloat"] = "EXT_color_buffer_half_float";
    GLCapabilityType["textureFilterAnisotropic"] = "EXT_texture_filter_anisotropic";
    GLCapabilityType["blendMinMax"] = "EXT_blend_minmax";
    GLCapabilityType["astc"] = "WEBGL_compressed_texture_astc";
    GLCapabilityType["astc_webkit"] = "WEBKIT_WEBGL_compressed_texture_astc";
    GLCapabilityType["etc"] = "WEBGL_compressed_texture_etc";
    GLCapabilityType["etc_webkit"] = "WEBKIT_WEBGL_compressed_texture_etc";
    GLCapabilityType["etc1"] = "WEBGL_compressed_texture_etc1";
    GLCapabilityType["etc1_webkit"] = "WEBKIT_WEBGL_compressed_texture_etc1";
    GLCapabilityType["pvrtc"] = "WEBGL_compressed_texture_pvrtc";
    GLCapabilityType["pvrtc_webkit"] = "WEBKIT_WEBGL_compressed_texture_pvrtc";
    GLCapabilityType["s3tc"] = "WEBGL_compressed_texture_s3tc";
    GLCapabilityType["s3tc_webkit"] = "WEBKIT_WEBGL_compressed_texture_s3tc";
    // atc = "WEBGL_compressed_texture_atc",
    // s3tc_srgb = "WEBGL_compressed_texture_s3tc_srgb"
})(GLCapabilityType || (GLCapabilityType = {}));

/**
 * Index format.
 */
var IndexFormat;
(function (IndexFormat) {
    /** 8 bit */
    IndexFormat[IndexFormat["UInt8"] = 0] = "UInt8";
    /** 16 bit */
    IndexFormat[IndexFormat["UInt16"] = 1] = "UInt16";
    /** 32 bit */
    IndexFormat[IndexFormat["UInt32"] = 2] = "UInt32";
})(IndexFormat || (IndexFormat = {}));

/**
 * Utility functions for processing Buffers.
 */
class BufferUtil {
    /**
     * Obtain the usage of Buffer according to the incoming enumeration.
     * @param gl WebGL rendering context.
     * @param bufferUsage Buffer usage.
     * @returns The number code used by the internal buffer of gl.
     */
    static _getGLBufferUsage(gl, bufferUsage) {
        switch (bufferUsage) {
            case BufferUsage.Static:
                return gl.STATIC_DRAW;
            case BufferUsage.Dynamic:
                return gl.DYNAMIC_DRAW;
            case BufferUsage.Stream:
                return gl.STREAM_DRAW;
        }
    }
    /**
     * Get index type code.
     * @param indexFormat Index type enumeration.
     * @returns The number code used by the internal type of gl.
     */
    static _getGLIndexType(indexFormat) {
        switch (indexFormat) {
            case IndexFormat.UInt8:
                return DataType.UNSIGNED_BYTE;
            case IndexFormat.UInt16:
                return DataType.UNSIGNED_SHORT;
            case IndexFormat.UInt32:
                return DataType.UNSIGNED_INT;
        }
    }
    /**
     * Get gl index byte count.
     * @param indexFormat Index type enumeration.
     * @returns Index byte count.
     */
    static _getGLIndexByteCount(indexFormat) {
        switch (indexFormat) {
            case IndexFormat.UInt8:
                return 1;
            case IndexFormat.UInt16:
                return 2;
            case IndexFormat.UInt32:
                return 4;
        }
    }
    /**
     * Returns vertex information based on the element's vertex format.
     */
    static _getElementInfo(format) {
        let size;
        let type;
        let normalized = false;
        switch (format) {
            case VertexElementFormat.Float:
                size = 1;
                type = DataType.FLOAT;
                break;
            case VertexElementFormat.Vector2:
                size = 2;
                type = DataType.FLOAT;
                break;
            case VertexElementFormat.Vector3:
                size = 3;
                type = DataType.FLOAT;
                break;
            case VertexElementFormat.Vector4:
                size = 4;
                type = DataType.FLOAT;
                break;
            case VertexElementFormat.Byte4:
                size = 4;
                type = DataType.BYTE;
                break;
            case VertexElementFormat.UByte4:
                size = 4;
                type = DataType.UNSIGNED_BYTE;
                break;
            case VertexElementFormat.NormalizedByte4:
                size = 4;
                type = DataType.BYTE;
                normalized = true;
                break;
            case VertexElementFormat.NormalizedUByte4:
                size = 4;
                type = DataType.UNSIGNED_BYTE;
                normalized = true;
                break;
            case VertexElementFormat.Short2:
                size = 2;
                type = DataType.SHORT;
                break;
            case VertexElementFormat.UShort2:
                size = 2;
                type = DataType.UNSIGNED_SHORT;
                break;
            case VertexElementFormat.NormalizedShort2:
                size = 2;
                type = DataType.SHORT;
                normalized = true;
                break;
            case VertexElementFormat.NormalizedUShort2:
                size = 2;
                type = DataType.UNSIGNED_SHORT;
                normalized = true;
                break;
            case VertexElementFormat.Short4:
                size = 4;
                type = DataType.SHORT;
                break;
            case VertexElementFormat.UShort4:
                size = 4;
                type = DataType.UNSIGNED_SHORT;
                break;
            case VertexElementFormat.NormalizedShort4:
                size = 4;
                type = DataType.SHORT;
                normalized = true;
                break;
            case VertexElementFormat.NormalizedUShort4:
                size = 4;
                type = DataType.UNSIGNED_SHORT;
                normalized = true;
                break;
        }
        return { size, type, normalized };
    }
}

/**
 * Buffer base class,
 * which can be an array of vertex buffers or an array of index buffers.
 */
class Buffer {
    // TODO: 把gl挂载到RefObject
    _gl;
    _glBindTarget;
    _glBufferUsage;
    _nativeBuffer;
    _type;
    _byteLength;
    _bufferUsage;
    /**
     * Buffer binding flag.
     */
    get type() {
        return this._type;
    }
    /**
     * Byte length.
     */
    get byteLength() {
        return this._byteLength;
    }
    /**
     * Buffer usage.
     */
    get bufferUsage() {
        return this._bufferUsage;
    }
    constructor(gl, type, byteLengthOrData, bufferUsage = BufferUsage.Static) {
        this._gl = gl;
        this._type = type;
        this._bufferUsage = bufferUsage;
        const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);
        const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;
        this._nativeBuffer = gl.createBuffer();
        this._glBufferUsage = glBufferUsage;
        this._glBindTarget = glBindTarget;
        this.bind();
        if (typeof byteLengthOrData === 'number') {
            this._byteLength = byteLengthOrData;
            gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);
        }
        else {
            this._byteLength = byteLengthOrData.byteLength;
            gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);
        }
        gl.bindBuffer(glBindTarget, null);
    }
    /**
     * Bind buffer.
     */
    bind() {
        const gl = this._gl;
        gl.bindBuffer(this._glBindTarget, this._nativeBuffer);
    }
    setData(data, bufferByteOffset = 0, dataOffset = 0, dataLength) {
        const gl = this._gl;
        const glBindTarget = this._glBindTarget;
        this.bind();
        // 每个元素所占用的字节数
        const byteSize = data.BYTES_PER_ELEMENT || 1;
        const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;
        if (dataOffset !== 0 || dataByteLength < data.byteLength) {
            const isArrayBufferView = data.byteOffset !== undefined;
            const subData = new Uint8Array(isArrayBufferView ? data.buffer : data, dataOffset * byteSize, dataByteLength);
            gl.bufferSubData(glBindTarget, bufferByteOffset, subData);
        }
        else {
            gl.bufferSubData(glBindTarget, bufferByteOffset, data);
        }
        gl.bindBuffer(glBindTarget, null);
    }
    getData(data, bufferByteOffset = 0, dataOffset = 0, dataLength) {
        throw 'Buffer is write-only on WebGL1.0 platforms.';
    }
}

/**
 * Mesh topology.
 */
var MeshTopology;
(function (MeshTopology) {
    /** Draws a single dot */
    MeshTopology[MeshTopology["Points"] = 0] = "Points";
    /** Draws a line between a pair of vertices */
    MeshTopology[MeshTopology["Lines"] = 1] = "Lines";
    /** Draws a straight line to the next vertex, and connects the last vertex back to the first */
    MeshTopology[MeshTopology["LineLoop"] = 2] = "LineLoop";
    /** Draws a straight line to the next vertex. */
    MeshTopology[MeshTopology["LineStrip"] = 3] = "LineStrip";
    /** Draws a triangle for a group of three vertices */
    MeshTopology[MeshTopology["Triangles"] = 4] = "Triangles";
    /** Draws a triangle strip */
    MeshTopology[MeshTopology["TriangleStrip"] = 5] = "TriangleStrip";
    /** Draws a triangle fan */
    MeshTopology[MeshTopology["TriangleFan"] = 6] = "TriangleFan";
})(MeshTopology || (MeshTopology = {}));

/**
 * Index buffer binding.
 */
class IndexBufferBinding {
    /** Index buffer bound buffer. */
    _buffer;
    /** Index format. */
    _format;
    /**
     * Index buffer.
     */
    get buffer() {
        return this._buffer;
    }
    /**
     * Index buffer format.
     */
    get format() {
        return this._format;
    }
    /**
     * Create index buffer binding.
     * @param buffer - Index buffer
     * @param format - Index buffer format
     */
    constructor(buffer, format) {
        this._buffer = buffer;
        this._format = format;
    }
}

/**
 * Sub-mesh, mainly contains drawing information.
 */
class SubMesh {
    /** Start drawing offset. */
    start;
    /** Drawing count. */
    count;
    /** Drawing topology. */
    topology;
    /**
     * Create a sub-mesh.
     * @param start - Start drawing offset
     * @param count - Drawing count
     * @param topology - Drawing topology
     */
    constructor(start = 0, count = 0, topology = MeshTopology.Triangles) {
        this.start = start;
        this.count = count;
        this.topology = topology;
    }
}

/**
 * Grid abstract class.
 */
class Mesh {
    /** Name. */
    name;
    /** Vertex entity record table, used for caching. */
    _vertexElementMap = {};
    /** The storage type of the index, for example: UInt8. */
    _glIndexType;
    /** Each index occupies several bytes, 8 bits per byte. */
    _glIndexByteCount;
    /** A platform that provides rendering capabilities. */
    _platformPrimitive;
    /** A Mesh may consist of multiple vertex instances. */
    _instanceCount = 0;
    /** The vertex buffer corresponding to the mesh. */
    _vertexBufferBindings = [];
    /** The index buffer corresponding to the mesh */
    _indexBufferBinding = null;
    /** Array of vertex elements. */
    _vertexElements = [];
    gl;
    /** Drawing information for each element. */
    _subMeshes = [];
    /**
     * First sub-mesh. Rendered using the first material.
     */
    get subMesh() {
        return this._subMeshes[0] || null;
    }
    /**
     * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.
     */
    get subMeshes() {
        return this._subMeshes;
    }
    addSubMesh(startOrSubMesh, count, topology = MeshTopology.Triangles) {
        if (typeof startOrSubMesh === 'number') {
            startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);
        }
        this._subMeshes.push(startOrSubMesh);
        return startOrSubMesh;
    }
    /**
     * Remove sub-mesh.
     * @param subMesh - Sub-mesh needs to be removed
     */
    removeSubMesh(subMesh) {
        const subMeshes = this._subMeshes;
        const index = subMeshes.indexOf(subMesh);
        if (index !== -1) {
            subMeshes.splice(index, 1);
        }
    }
    /**
     * Clear all sub-mesh.
     */
    clearSubMesh() {
        this._subMeshes.length = 0;
    }
    constructor(gl, name) {
        this.gl = gl;
        this.name = name;
        this._platformPrimitive = new Renderer(gl, this);
    }
    _clearVertexElements() {
        // 这个清空方法妙啊
        this._vertexElements.length = 0;
        const vertexElementMap = this._vertexElementMap;
        for (const k in vertexElementMap) {
            delete vertexElementMap[k];
        }
    }
    _addVertexElement(element) {
        const { semantic } = element;
        this._vertexElementMap[semantic] = element;
        this._vertexElements.push(element);
    }
    _draw(shaderProgram, subMesh) {
        // this._platformPrimitive.draw(shaderProgram, subMesh);
        this._platformPrimitive.testDraw(shaderProgram);
    }
    _onDestroy() {
        this._vertexBufferBindings = null;
        this._indexBufferBinding = null;
        this._vertexElements = null;
        this._vertexElementMap = null;
    }
    _setVertexElements(elements) {
        this._clearVertexElements();
        for (let i = 0, n = elements.length; i < n; i++) {
            this._addVertexElement(elements[i]);
        }
    }
    _setVertexBufferBinding(index, binding) {
        this._vertexBufferBindings[index] = binding;
    }
    _setIndexBufferBinding(binding) {
        if (binding) {
            this._indexBufferBinding = binding;
            this._glIndexType = BufferUtil._getGLIndexType(binding.format);
            this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);
        }
        else {
            this._indexBufferBinding = null;
            this._glIndexType = undefined;
        }
    }
}

/**
 * Vertex buffer binding.
 */
class VertexBufferBinding {
    /** Buffer to which vertex elements are bound. */
    _buffer;
    /** Span between each vertex. */
    _stride;
    /**
     * Vertex buffer.
     */
    get buffer() {
        return this._buffer;
    }
    /**
     * Vertex buffer stride.
     */
    get stride() {
        return this._stride;
    }
    /**
     * Create vertex buffer.
     * @param buffer - Vertex buffer
     * @param stride - Vertex buffer stride
     */
    constructor(buffer, stride) {
        this._buffer = buffer;
        this._stride = stride;
    }
}

/**
 * Vertex elements contain coordinate information, texture information, normal vector information.
 */
class VertexElement {
    _glElementInfo;
    _semantic;
    _offset;
    _format;
    _bindingIndex;
    _instanceStepRate;
    /**
     * Vertex semantic.
     */
    get semantic() {
        return this._semantic;
    }
    /**
     * Vertex data byte offset.
     */
    get offset() {
        return this._offset;
    }
    /**
     * Vertex data format.
     */
    get format() {
        return this._format;
    }
    /**
     * Vertex buffer binding index.
     */
    get bindingIndex() {
        return this._bindingIndex;
    }
    /**
     * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.
     */
    get instanceStepRate() {
        return this._instanceStepRate;
    }
    /**
     * Create vertex element.
     * @param semantic - Input vertex semantic
     * @param offset - Vertex data byte offset
     * @param format - Vertex data format
     * @param bindingIndex - Vertex buffer binding index
     * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.
     */
    constructor(semantic, offset, format, bindingIndex, instanceStepRate = 0) {
        this._semantic = semantic;
        this._offset = offset;
        this._format = format;
        this._bindingIndex = bindingIndex;
        this._glElementInfo = BufferUtil._getElementInfo(this.format);
        this._instanceStepRate = Math.floor(instanceStepRate);
    }
}

/**
 * Create a model from an array of information such as vertices, indices, normal vectors, etc.
 */
class ModelMesh extends Mesh {
    /** The number of vertices in the model. */
    _vertexCount = 0;
    /** Availability of the model. */
    _accessible = true;
    _verticesFloat32 = null;
    _verticesUint8 = null;
    /** A vertex has several elements, xyz is 3. */
    _elementCount = 0;
    _lastUploadVertexCount = -1;
    /** Index format. */
    _indicesFormat = null;
    /** Index type array. */
    _indices = null;
    /** Array of vertex positions. */
    _positions = [];
    /** Array of normal vectors. */
    _normals = null;
    /** Array of texture coordinates */
    _uv = null;
    /**
     * Whether to access data of the mesh.
     */
    get accessible() {
        return this._accessible;
    }
    /**
     * Vertex count of current mesh.
     */
    get vertexCount() {
        return this._vertexCount;
    }
    // TODO: 这个也应该抽到RefObject.
    constructor(gl, name) {
        super(gl);
        this.name = name;
    }
    /**
     * Set the vertex position information of the model.
     * @param positions Array of model vertex coordinates.
     */
    setPositions(positions) {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        this._positions = positions;
        this._vertexCount = positions.length;
    }
    /**
     * Get the vertex position information of the model.
     * @returns Array of model vertex coordinates.
     */
    getPostions() {
        return this._positions;
    }
    /**
     * Set model normal vector.
     * @param normals Array of normal vectors.
     */
    setNormals(normals) {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        if (normals.length !== this._vertexCount) {
            throw 'The array provided needs to be the same size as vertex count.';
        }
        this._normals = normals;
    }
    /**
     * Get model normal vector.
     * @returns Array of normal vectors.
     */
    getNormals() {
        return this._normals;
    }
    /**
     * Set texture coordinates.
     * @param uv Texture coordinates.
     */
    setUVs(uv) {
        this._uv = uv;
    }
    /**
     * Get texture coordinates.
     * @returns Texture coordinates.
     */
    getUVs() {
        return this._uv;
    }
    /**
     * Set indices for the mesh.
     * @param indices - The indices for the mesh.
     */
    setIndices(indices) {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        if (this._indices !== indices) {
            this._indices = indices;
            if (indices instanceof Uint8Array) {
                this._indicesFormat = IndexFormat.UInt8;
            }
            else if (indices instanceof Uint16Array) {
                this._indicesFormat = IndexFormat.UInt16;
            }
            else if (indices instanceof Uint32Array) {
                this._indicesFormat = IndexFormat.UInt32;
            }
        }
    }
    /**
     * Get indices for the mesh.
     */
    getIndices() {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        return this._indices;
    }
    /**
     * Upload Mesh Data to the graphics API.
     */
    uploadData(noLongerAccessible = true) {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        this._updateVertexElements();
        const gl = this.gl;
        // positions的Vector3的个数
        const { _vertexCount: vertexCount } = this;
        const vertexCountChange = this._lastUploadVertexCount !== vertexCount;
        const vertexBuffer = this._vertexBufferBindings[0]?._buffer;
        if (vertexCountChange) {
            // 一组数据有多少个元素，比如：顶点(3) + 法向量(3) + 纹理(2) = 8
            const elementCount = this._elementCount;
            // Float32Array数组该给多少空间
            const vertexFloatCount = elementCount * vertexCount;
            const vertices = new Float32Array(vertexFloatCount);
            this._verticesFloat32 = vertices;
            // 这个东西有什么用实在搞不明白？
            this._verticesUint8 = new Uint8Array(vertices.buffer);
            this._updateVertices(vertices);
            const newVertexBuffer = new Buffer(gl, BufferBindFlag.VertexBuffer, vertices, noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic);
            // 因为是Float32Array，32位，4个字节，故stride为elementCount * 4
            this._setVertexBufferBinding(0, new VertexBufferBinding(newVertexBuffer, elementCount * 4));
            this._lastUploadVertexCount = vertexCount;
        }
        else {
            const vertices = this._verticesFloat32;
            this._updateVertices(vertices);
            vertexBuffer.setData(vertices);
        }
        const { _indices } = this;
        const indexBuffer = this._indexBufferBinding?._buffer;
        if (_indices) {
            if (!indexBuffer || _indices.byteLength != indexBuffer.byteLength) {
                const newIndexBuffer = new Buffer(gl, BufferBindFlag.IndexBuffer, _indices);
                this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));
            }
        }
        else if (indexBuffer) {
            this._setIndexBufferBinding(null);
        }
    }
    /**
     * Vertex elements are composed of vertex coordinates, texture coordinates, normal vectors and other information.
     */
    _updateVertexElements() {
        this._clearVertexElements();
        // 因为顶点元素是必须有的！
        this._addVertexElement(POSITION_VERTEX_ELEMENT);
        // 3 * 4 = 12
        let offset = 12;
        let elementCount = 3;
        if (this._normals) {
            this._addVertexElement(new VertexElement('NORMAL', offset, VertexElementFormat.Vector3, 0));
            offset += 12;
            elementCount += 3;
        }
        if (this._uv) {
            this._addVertexElement(new VertexElement('TEXCOORD_0', offset, VertexElementFormat.Vector2, 0));
            offset += 8;
            elementCount += 2;
        }
        // ! 索引信息没处理
        this._elementCount = elementCount;
    }
    /**
     * Fill the void Float32Array with postion, normal and uvs.
     * @param vertices void Float32Array
     */
    _updateVertices(vertices) {
        const { _elementCount, _vertexCount, _positions, _normals, _uv } = this;
        for (let i = 0; i < _vertexCount; i++) {
            const start = _elementCount * i;
            const position = _positions[i];
            vertices[start] = position.x;
            vertices[start + 1] = position.y;
            vertices[start + 2] = position.z;
        }
        let offset = 3;
        if (_normals) {
            for (let i = 0; i < _vertexCount; i++) {
                const start = _elementCount * i + offset;
                const normal = _normals[i];
                if (normal) {
                    vertices[start] = normal.x;
                    vertices[start + 1] = normal.y;
                    vertices[start + 2] = normal.z;
                }
            }
            offset += 3;
        }
        if (_uv) {
            for (let i = 0; i < _vertexCount; i++) {
                const start = _elementCount * i + offset;
                const uv = _uv[i];
                if (uv) {
                    vertices[start] = uv.x;
                    vertices[start + 1] = uv.y;
                }
            }
            offset += 2;
        }
    }
}
const POSITION_VERTEX_ELEMENT = new VertexElement('POSITION', 0, VertexElementFormat.Vector3, 0);

/**
 * Create a Mesh of Simple Geometry.
 */
class PrimitiveMesh {
    /**
     * Create a cuboid mesh.
     * @param width - Cuboid width
     * @param height - Cuboid height
     * @param depth - Cuboid depth
     * @returns Cuboid model mesh
     */
    static createCuboid(engine, width = 1, height = 1, depth = 1) {
        const gl = engine.gl;
        const mesh = new ModelMesh(gl, 'Cuboid');
        const halfWidth = width / 2;
        const halfHeight = height / 2;
        const halfDepth = depth / 2;
        const positions = new Array(24);
        const normals = new Array(24);
        const uvs = new Array(24);
        // Up
        positions[0] = new Vector3(-halfWidth, halfHeight, -halfDepth);
        positions[1] = new Vector3(halfWidth, halfHeight, -halfDepth);
        positions[2] = new Vector3(halfWidth, halfHeight, halfDepth);
        positions[3] = new Vector3(-halfWidth, halfHeight, halfDepth);
        normals[0] = new Vector3(0, 1, 0);
        normals[1] = new Vector3(0, 1, 0);
        normals[2] = new Vector3(0, 1, 0);
        normals[3] = new Vector3(0, 1, 0);
        uvs[0] = new Vector2(0, 0);
        uvs[1] = new Vector2(1, 0);
        uvs[2] = new Vector2(1, 1);
        uvs[3] = new Vector2(0, 1);
        // Down
        positions[4] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
        positions[5] = new Vector3(halfWidth, -halfHeight, -halfDepth);
        positions[6] = new Vector3(halfWidth, -halfHeight, halfDepth);
        positions[7] = new Vector3(-halfWidth, -halfHeight, halfDepth);
        normals[4] = new Vector3(0, -1, 0);
        normals[5] = new Vector3(0, -1, 0);
        normals[6] = new Vector3(0, -1, 0);
        normals[7] = new Vector3(0, -1, 0);
        uvs[4] = new Vector2(0, 1);
        uvs[5] = new Vector2(1, 1);
        uvs[6] = new Vector2(1, 0);
        uvs[7] = new Vector2(0, 0);
        // Left
        positions[8] = new Vector3(-halfWidth, halfHeight, -halfDepth);
        positions[9] = new Vector3(-halfWidth, halfHeight, halfDepth);
        positions[10] = new Vector3(-halfWidth, -halfHeight, halfDepth);
        positions[11] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
        normals[8] = new Vector3(-1, 0, 0);
        normals[9] = new Vector3(-1, 0, 0);
        normals[10] = new Vector3(-1, 0, 0);
        normals[11] = new Vector3(-1, 0, 0);
        uvs[8] = new Vector2(0, 0);
        uvs[9] = new Vector2(1, 0);
        uvs[10] = new Vector2(1, 1);
        uvs[11] = new Vector2(0, 1);
        // Right
        positions[12] = new Vector3(halfWidth, halfHeight, -halfDepth);
        positions[13] = new Vector3(halfWidth, halfHeight, halfDepth);
        positions[14] = new Vector3(halfWidth, -halfHeight, halfDepth);
        positions[15] = new Vector3(halfWidth, -halfHeight, -halfDepth);
        normals[12] = new Vector3(1, 0, 0);
        normals[13] = new Vector3(1, 0, 0);
        normals[14] = new Vector3(1, 0, 0);
        normals[15] = new Vector3(1, 0, 0);
        uvs[12] = new Vector2(1, 0);
        uvs[13] = new Vector2(0, 0);
        uvs[14] = new Vector2(0, 1);
        uvs[15] = new Vector2(1, 1);
        // Front
        positions[16] = new Vector3(-halfWidth, halfHeight, halfDepth);
        positions[17] = new Vector3(halfWidth, halfHeight, halfDepth);
        positions[18] = new Vector3(halfWidth, -halfHeight, halfDepth);
        positions[19] = new Vector3(-halfWidth, -halfHeight, halfDepth);
        normals[16] = new Vector3(0, 0, 1);
        normals[17] = new Vector3(0, 0, 1);
        normals[18] = new Vector3(0, 0, 1);
        normals[19] = new Vector3(0, 0, 1);
        uvs[16] = new Vector2(0, 0);
        uvs[17] = new Vector2(1, 0);
        uvs[18] = new Vector2(1, 1);
        uvs[19] = new Vector2(0, 1);
        // Back
        positions[20] = new Vector3(-halfWidth, halfHeight, -halfDepth);
        positions[21] = new Vector3(halfWidth, halfHeight, -halfDepth);
        positions[22] = new Vector3(halfWidth, -halfHeight, -halfDepth);
        positions[23] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
        normals[20] = new Vector3(0, 0, -1);
        normals[21] = new Vector3(0, 0, -1);
        normals[22] = new Vector3(0, 0, -1);
        normals[23] = new Vector3(0, 0, -1);
        uvs[20] = new Vector2(1, 0);
        uvs[21] = new Vector2(0, 0);
        uvs[22] = new Vector2(0, 1);
        uvs[23] = new Vector2(1, 1);
        const indices = new Uint16Array(36);
        // prettier-ignore
        // Up
        indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3,
            // Down
            indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5,
            // Left
            indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11,
            // Right
            indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13,
            // Front
            indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19,
            // Back
            indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;
        PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices);
        return mesh;
    }
    /**
     *
     * @param engine 引擎实例
     * @param level 正四面体递归切分等级
     * @returns 球网格实例
     */
    static createSphereBySliceTetrahedron(engine, level = 0) {
        const gl = engine.gl;
        const mesh = new ModelMesh(gl, 'Sphere');
        const negativeRootTwoOverThree = -Math.sqrt(2.0) / 3.0;
        const negativeOneThird = -1.0 / 3.0;
        const rootSixOverThree = Math.sqrt(6.0) / 3.0;
        const positions = [];
        positions.push(new Vector3(0, 0, 1));
        positions.push(new Vector3(0, (2 * Math.sqrt(2)) / 3, negativeOneThird));
        positions.push(new Vector3(-rootSixOverThree, negativeRootTwoOverThree, negativeOneThird));
        positions.push(new Vector3(rootSixOverThree, negativeRootTwoOverThree, negativeOneThird));
        let indices = [];
        PrimitiveMesh.subdivide(positions, indices, [0, 1, 2], level);
        PrimitiveMesh.subdivide(positions, indices, [0, 2, 3], level);
        PrimitiveMesh.subdivide(positions, indices, [0, 3, 1], level);
        PrimitiveMesh.subdivide(positions, indices, [1, 3, 2], level);
        indices = new Uint16Array(indices);
        PrimitiveMesh._initialize(mesh, positions, null, null, indices);
        return mesh;
    }
    /**
     * Create a sphere mesh.
     * @param engine - Engine
     * @param radius - Sphere radius
     * @param segments - Number of segments
     * @returns Sphere model mesh
     */
    static createSphereByParamEquation(engine, radius = 0.5, segments = 18) {
        const mesh = new ModelMesh(engine.gl);
        segments = Math.max(2, Math.floor(segments));
        const count = segments + 1;
        const vertexCount = count * count;
        const rectangleCount = segments * segments;
        const indices = new Uint16Array(rectangleCount * 6);
        const thetaRange = Math.PI;
        const alphaRange = thetaRange * 2;
        const countReciprocal = 1.0 / count;
        const segmentsReciprocal = 1.0 / segments;
        const positions = new Array(vertexCount);
        const normals = new Array(vertexCount);
        const uvs = new Array(vertexCount);
        for (let i = 0; i < vertexCount; ++i) {
            const x = i % count;
            const y = (i * countReciprocal) | 0;
            const u = x * segmentsReciprocal;
            const v = y * segmentsReciprocal;
            const alphaDelta = u * alphaRange;
            const thetaDelta = v * thetaRange;
            const sinTheta = Math.sin(thetaDelta);
            let posX = -radius * Math.cos(alphaDelta) * sinTheta;
            let posY = radius * Math.cos(thetaDelta);
            let posZ = radius * Math.sin(alphaDelta) * sinTheta;
            // Position
            positions[i] = new Vector3(posX, posY, posZ);
            // Normal
            normals[i] = new Vector3(posX, posY, posZ);
            // Texcoord
            uvs[i] = new Vector2(u, v);
        }
        let offset = 0;
        for (let i = 0; i < rectangleCount; ++i) {
            const x = i % segments;
            const y = (i * segmentsReciprocal) | 0;
            const a = y * count + x;
            const b = a + 1;
            const c = a + count;
            const d = c + 1;
            indices[offset++] = b;
            indices[offset++] = a;
            indices[offset++] = d;
            indices[offset++] = a;
            indices[offset++] = c;
            indices[offset++] = d;
        }
        PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices);
        return mesh;
    }
    /**
     *
     * @param engine - Engine
     * @param width - Plane width
     * @param height - Plane height
     * @param horizontalSegments - Plane horizontal segments
     * @param verticalSegments - Plane vertical segments
     * @param noLongerAccessible - Accessible
     * @returns Plane mesh
     */
    static createPlane(engine, width = 1, height = 1, horizontalSegments = 1, verticalSegments = 1, noLongerAccessible = true) {
        // TODO: 直接传入引擎，不提去gl了
        const mesh = new ModelMesh(engine.gl);
        horizontalSegments = Math.max(1, Math.floor(horizontalSegments));
        verticalSegments = Math.max(1, Math.floor(verticalSegments));
        const horizontalCount = horizontalSegments + 1;
        const verticalCount = verticalSegments + 1;
        const halfWidth = width / 2;
        const halfHeight = height / 2;
        const gridWidth = width / horizontalSegments;
        const gridHeight = height / verticalSegments;
        const vertexCount = horizontalCount * verticalCount;
        const rectangleCount = verticalSegments * horizontalSegments;
        const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);
        const horizontalCountReciprocal = 1.0 / horizontalCount;
        const horizontalSegmentsReciprocal = 1.0 / horizontalSegments;
        const verticalSegmentsReciprocal = 1.0 / verticalSegments;
        const positions = new Array(vertexCount);
        const normals = new Array(vertexCount);
        const uvs = new Array(vertexCount);
        for (let i = 0; i < vertexCount; ++i) {
            const x = i % horizontalCount;
            const z = (i * horizontalCountReciprocal) | 0;
            // Position
            positions[i] = new Vector3(x * gridWidth - halfWidth, 0, z * gridHeight - halfHeight);
            // Normal
            normals[i] = new Vector3(0, 1, 0);
            // Texcoord
            uvs[i] = new Vector2(x * horizontalSegmentsReciprocal, z * verticalSegmentsReciprocal);
        }
        let offset = 0;
        for (let i = 0; i < rectangleCount; ++i) {
            const x = i % horizontalSegments;
            const y = (i * horizontalSegmentsReciprocal) | 0;
            const a = y * horizontalCount + x;
            const b = a + 1;
            const c = a + horizontalCount;
            const d = c + 1;
            indices[offset++] = a;
            indices[offset++] = c;
            indices[offset++] = b;
            indices[offset++] = c;
            indices[offset++] = d;
            indices[offset++] = b;
        }
        // TODO: 加上是否可获取参数！
        PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices);
        return mesh;
    }
    static subdivide(positions, indices, triangle, level = 0) {
        if (level > 0) {
            let tmp1 = new Vector3();
            let tmp2 = new Vector3();
            let tmp3 = new Vector3();
            Vector3.add(positions[triangle[0]], positions[triangle[1]], tmp1);
            Vector3.scale(tmp1, 0.5, tmp1);
            Vector3.add(positions[triangle[1]], positions[triangle[2]], tmp2);
            Vector3.scale(tmp2, 0.5, tmp2);
            Vector3.add(positions[triangle[2]], positions[triangle[0]], tmp3);
            Vector3.scale(tmp3, 0.5, tmp3);
            positions.push(tmp1.normalize(), tmp2.normalize(), tmp3.normalize());
            let i01 = positions.length - 3;
            let i12 = positions.length - 2;
            let i20 = positions.length - 1;
            const newLevel = level - 1;
            PrimitiveMesh.subdivide(positions, indices, [triangle[0], i01, i20], newLevel);
            PrimitiveMesh.subdivide(positions, indices, [i01, triangle[1], i12], newLevel);
            PrimitiveMesh.subdivide(positions, indices, [i01, i12, i20], newLevel);
            PrimitiveMesh.subdivide(positions, indices, [i20, i12, triangle[2]], newLevel);
        }
        else {
            indices.push(...triangle);
        }
    }
    /**
     * According a series of data ti initialize mesh
     * @param mesh object's mesh
     * @param positions object's position array
     * @param normals object's normals array
     * @param uv object's uv array
     * @param indices object's indices array
     */
    static _initialize(mesh, positions, normals, uvs, indices) {
        mesh.setPositions(positions);
        mesh.setIndices(indices);
        // 因为不一定要显示指定法向量和纹理坐标
        if (normals)
            mesh.setNormals(normals);
        if (uvs)
            mesh.setUVs(uvs);
        mesh.uploadData();
        mesh.addSubMesh(0, indices.length);
    }
    // TODO: 对顶点数量有要求，而且还没有兼容WebGL2!
    static _generateIndices(engine, vertexCount, indexCount) {
        let indices = null;
        if (vertexCount > 65535) {
            throw Error('The vertex count is over limit.');
        }
        else {
            indices = new Uint16Array(indexCount);
        }
        return indices;
    }
}

const earthUrl = `http://121.199.160.202/images/earth.jpg`;

const skyStarConfig = [
    {
        target: DataType.TEXTURE_CUBE_MAP_POSITIVE_X,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_mx.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_NEGATIVE_X,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_px.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_POSITIVE_Y,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_py.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_NEGATIVE_Y,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_my.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_POSITIVE_Z,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_mz.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_NEGATIVE_Z,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_pz.jpg',
    },
];

/**
 * Background of the scene.
 */
class Background {
    _engine;
    /**
     * The pattern of the background, which may be a single color, a skybox or a picture texture.
     */
    mode = BackgroundMode.SolidColor;
    /** Grid for background. */
    _mesh;
    /** The material used for the background. */
    _material;
    /** Fixed color before skybox or texture is loaded successfully. */
    solidColor = new Color(0.25, 0.25, 0.25, 1.0);
    constructor(_engine) {
        this._engine = _engine;
        this._mesh = this._createPlane(this._engine);
        this._material = new SkyBoxMaterial(this._engine, skyStarConfig);
    }
    /**
     * Background with flat grid.
     * @param engine Engine instance.
     * @returns Mesh
     */
    _createPlane(engine) {
        const mesh = new ModelMesh(engine.gl);
        // const indices = new Uint8Array([0, 3, 1, 1, 3, 2]);
        const positions = [
            new Vector3(-1, -1, 0),
            new Vector3(1, -1, 0),
            new Vector3(-1, 1, 0),
            new Vector3(-1, 1, 0),
            new Vector3(1, -1, 0),
            new Vector3(1, 1, 0),
        ];
        mesh.setPositions(positions);
        // mesh.setIndices(indices);
        mesh.uploadData(false);
        mesh.addSubMesh(0, 6);
        return mesh;
    }
}

/** Prevent gimbal lock. */
const ESP = MathUtil.zeroTolerance;
/**
 * Spherical.
 */
class Spherical {
    /** Spherical radius. */
    radius;
    /** In the xoy plane, the angle with the x-axis. */
    phi;
    /** Angle with z-axis. */
    theta;
    /**
     * Build the initial state of the sphere.
     * @param radius Spherical radius, default is 1.0.
     * @param phi Angle with the x-axis, default is 0.
     * @param theta Angle with the z-axis, default is 0.
     */
    constructor(radius, phi, theta) {
        this.radius = radius !== undefined ? radius : 1.0;
        this.phi = phi !== undefined ? phi : 0;
        this.theta = theta !== undefined ? theta : 0;
    }
    /**
     * Set spherical state
     * @param radius Spherical radius.
     * @param phi Angle with the x-axis.
     * @param theta Angle with the z-axis.
     * @returns Spherical.
     */
    set(radius, phi, theta) {
        this.radius = radius;
        this.phi = phi;
        this.theta = theta;
        return this;
    }
    makeSafe() {
        this.phi = MathUtil.clamp(this.phi, ESP, Math.PI - ESP);
        return this;
    }
    /**
     * Calculate sphere state from vector.
     * @param v3 Vector3.
     * @returns Spherical.
     */
    setFromVec3(v3) {
        this.radius = v3.length();
        if (this.radius === 0) {
            this.theta = 0;
            this.phi = 0;
        }
        else {
            this.theta = Math.atan2(v3.x, v3.z);
            this.phi = Math.acos(MathUtil.clamp(v3.y / this.radius, -1, 1));
        }
        return this;
    }
    /**
     * Get Vector3 from sphere state.
     * @param v3 Vector3.
     * @returns Spherical.
     */
    setToVec3(v3) {
        const sinPhiRadius = Math.sin(this.phi) * this.radius;
        v3.setValue(sinPhiRadius * Math.sin(this.theta), Math.cos(this.phi) * this.radius, sinPhiRadius * Math.cos(this.theta));
        return this;
    }
}

/**
 * Orbital controls for zooming around a center point.
 */
class OrbitControl {
    /** Camera instance, the essence of orbit control is to change the camera position. */
    camera;
    /** DOM element, mainly used to listen for mouse up events. */
    domElement;
    /** Canvas element, mainly used to monitor mouse movement events. */
    mainElement;
    /** Camera frustum angle. */
    fov;
    /** Where the camera is looking. */
    target;
    /** Camera up. */
    up;
    /** The minimum distance from the camera to the object. */
    minDistance;
    /** The maximum distance from the camera to the object. */
    maxDistance;
    /** The smallest zoom scale of the camera. */
    minZoom;
    /** The maximum zoom scale of the camera. */
    maxZoom;
    /** Scaling factor. */
    zoomFactor;
    /** Min polar angle. */
    minPolarAngle;
    /** Max polar angle. */
    maxPolarAngle;
    /** Min azimuth angle. */
    minAzimuthAngle;
    /** Max azimuth angle. */
    maxAzimuthAngle;
    /** Whether to enable damping. */
    enableDamping;
    /** Whether to enable rotate. */
    enableRotate;
    /** Whether to enable zoom. */
    enableZoom;
    /** Whether to enable pan. */
    enablePan;
    /** Damping factor */
    dampingFactor;
    /** Zoom speed */
    zoomSpeed;
    /** Whether to auto rotate. */
    autoRotate;
    /** Auto rotate speed. */
    autoRotateSpeed = Math.PI;
    /** Rotate speed. */
    rotateSpeed;
    /** Clicking the corresponding key with the mouse is actually the key corresponding to the left button, the scroll wheel and the right button. */
    mouseButtons;
    /** What state is the current controller in. */
    STATE;
    /** Contains mousemove and mouseup. */
    mouseUpEvents;
    /** Contains mousedown and wheel. */
    constEvents;
    _position;
    _offset;
    _spherical;
    _sphericalDelta;
    _sphericalDump;
    _zoomFrag;
    _scale;
    _panOffset;
    _isMouseUp;
    _vPan;
    _state;
    _rotateStart;
    _rotateEnd;
    _rotateDelta;
    _panStart;
    _panEnd;
    _panDelta;
    _zoomStart;
    _zoomEnd;
    _zoomDelta;
    constructor(camera) {
        this.camera = camera;
        this.domElement = document;
        this.mainElement = camera.engine.canvas._canvas;
        this.fov = 45;
        this.target = new Vector3();
        this.up = new Vector3(0, 1, 0);
        this.minDistance = 0.1;
        this.maxDistance = Infinity;
        this.minZoom = 0.0;
        this.maxZoom = Infinity;
        this.minPolarAngle = 0;
        this.maxPolarAngle = Math.PI;
        this.minAzimuthAngle = -Infinity;
        this.maxAzimuthAngle = Infinity;
        this.enableDamping = true;
        this.dampingFactor = 0.1;
        this.zoomFactor = 0.2;
        this.enableZoom = true;
        this.zoomSpeed = 1.0;
        this.enableRotate = true;
        this.rotateSpeed = 1.0;
        this.enablePan = true;
        this.autoRotate = false;
        this.mouseButtons = {
            ORBIT: 0,
            ZOOM: 1,
            PAN: 2,
        };
        // Reuse objects to prevent excessive stack allocation.
        // update
        this._position = new Vector3();
        this._offset = new Vector3();
        this._spherical = new Spherical();
        this._sphericalDelta = new Spherical();
        this._sphericalDump = new Spherical();
        this._zoomFrag = 0;
        this._scale = 1;
        this._panOffset = new Vector3();
        this._isMouseUp = true;
        // pan
        this._vPan = new Vector3();
        // state
        this._rotateStart = new Vector2();
        this._rotateEnd = new Vector2();
        this._rotateDelta = new Vector2();
        this._panStart = new Vector2();
        this._panEnd = new Vector2();
        this._panDelta = new Vector2();
        this._zoomStart = new Vector2();
        this._zoomEnd = new Vector2();
        this._zoomDelta = new Vector2();
        this.STATE = {
            NONE: -1,
            ROTATE: 0,
            ZOOM: 1,
            PAN: 2,
        };
        this._state = this.STATE.NONE;
        this.constEvents = [
            { type: 'mousedown', listener: this.onMouseDown.bind(this) },
            { type: 'wheel', listener: this.onMouseWheel.bind(this) },
        ];
        this.mouseUpEvents = [
            { type: 'mousemove', listener: this.onMouseMove.bind(this) },
            { type: 'mouseup', listener: this.onMouseUp.bind(this) },
        ];
        // onMouseDown里面处理了mousemove和mouseup的事件
        this.constEvents.forEach((ele) => {
            if (ele.element) {
                ele.element.addEventListener(ele.type, ele.listener, false);
            }
            else {
                this.mainElement.addEventListener(ele.type, ele.listener, false);
            }
        });
    }
    /**
     * The life cycle of track control destruction, used to remove listener events.
     */
    onDestory() {
        this.constEvents.forEach((ele) => {
            if (ele.element) {
                ele.element.removeEventListener(ele.type, ele.listener, false);
            }
            else {
                this.mainElement.removeEventListener(ele.type, ele.listener, false);
            }
        });
        const element = this.domElement === document ? this.domElement.body : this.domElement;
        this.mainElement.removeEventListener(this.mouseUpEvents[0].type, this.mouseUpEvents[0].listener, false);
        element.removeEventListener(this.mouseUpEvents[1].type, this.mouseUpEvents[1].listener, false);
    }
    /**
     * The orbit controls the life cycle, updating the view based on the current mouse changes.
     * @param dtime Used to calculate how many degrees to rotate.
     */
    onUpdate(dtime) {
        const position = this.camera.transform.position;
        position.cloneTo(this._offset);
        this._offset.subtract(this.target);
        this._spherical.setFromVec3(this._offset);
        if (this.autoRotate && this._state === this.STATE.NONE) {
            this.rotateLeft(this.getAutoRotationAngle(dtime));
        }
        this._spherical.theta += this._sphericalDelta.theta;
        this._spherical.phi += this._sphericalDelta.phi;
        this._spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, this._spherical.theta));
        this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));
        this._spherical.makeSafe();
        if (this._scale !== 1) {
            this._zoomFrag = this._spherical.radius * (this._scale - 1);
        }
        this._spherical.radius += this._zoomFrag;
        this._spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, this._spherical.radius));
        this.target.add(this._panOffset);
        this._spherical.setToVec3(this._offset);
        this.target.cloneTo(this._position);
        this._position.add(this._offset);
        this.camera.transform.position = this._position;
        this.camera.transform.lookAt(this.target, this.up);
        if (this.enableDamping === true) {
            this._sphericalDump.theta *= 1 - this.dampingFactor;
            this._sphericalDump.phi *= 1 - this.dampingFactor;
            this._zoomFrag *= 1 - this.zoomFactor;
            if (this._isMouseUp) {
                this._sphericalDelta.theta = this._sphericalDump.theta;
                this._sphericalDelta.phi = this._sphericalDump.phi;
            }
            else {
                this._sphericalDelta.set(0, 0, 0);
            }
        }
        else {
            this._sphericalDelta.set(0, 0, 0);
            this._zoomFrag = 0;
        }
        this._scale = 1;
        this._panOffset.setValue(0, 0, 0);
    }
    /**
     * Handle left and right translation.
     * @param distance Camera translation distance.
     * @param worldMatrix Camera's world coordinate matrix.
     */
    panLeft(distance, worldMatrix) {
        const e = worldMatrix.elements;
        this._vPan.setValue(e[0], e[1], e[2]);
        this._vPan.scale(distance);
        this._panOffset.add(this._vPan);
    }
    /**
     * Handle up and down translation.
     * @param distance Camera translation distance.
     * @param worldMatrix Camera's world coordinate matrix.
     */
    panUp(distance, worldMatrix) {
        const e = worldMatrix.elements;
        this._vPan.setValue(e[4], e[5], e[6]);
        this._vPan.scale(distance);
        this._panOffset.add(this._vPan);
    }
    /**
     * Pan according to panLeft and panUp.
     * @param deltaX The difference between the mouse and the x-direction of the previous view.
     * @param deltaY The difference between the mouse and the y-direction of the previous view
     */
    pan(deltaX, deltaY) {
        // perspective only
        const position = this.camera.transform.position;
        position.cloneTo(this._vPan);
        this._vPan.subtract(this.target);
        let targetDistance = this._vPan.length();
        targetDistance *= (this.fov / 2) * (Math.PI / 180);
        // 我们在这里只使用clientHeight，这样纵横比不会扭曲速度
        this.panLeft(-2 * deltaX * (targetDistance / this.mainElement.clientHeight), this.camera.transform.worldMatrix);
        this.panUp(2 * deltaY * (targetDistance / this.mainElement.clientHeight), this.camera.transform.worldMatrix);
    }
    /**
     * Zoom in view.
     * @param zoomScale Zoom scale.
     */
    zoomIn(zoomScale) {
        // perspective only
        this._scale *= zoomScale;
    }
    /**
     * Zoom out view.
     * @param zoomScale Zoom scale.
     */
    zoomOut(zoomScale) {
        // perspective only
        this._scale /= zoomScale;
    }
    /**
     * Get zoom level.
     * @returns Zoom scale.
     */
    getZoomScale() {
        return Math.pow(0.95, this.zoomSpeed);
    }
    /**
     * Rotate left and right.
     * @param radian Rotation angle, radian system.
     */
    rotateLeft(radian) {
        this._sphericalDelta.theta -= radian;
        if (this.enableDamping) {
            this._sphericalDump.theta = -radian;
        }
    }
    /**
     * Rotate up and down.
     * @param radian Rotation angle, radian system.
     */
    rotateUp(radian) {
        this._sphericalDelta.phi -= radian;
        if (this.enableDamping) {
            this._sphericalDump.phi = -radian;
        }
    }
    /**
     * Get auto rotation angle.
     * @param dtime Rendering the time difference between the current frame and the previous frame.
     * @returns Auto rotate speed.
     */
    getAutoRotationAngle(dtime) {
        return (this.autoRotateSpeed / 1000) * dtime;
    }
    /**
     * Set rotate start when state is rotate.
     * @param event Mouse event.
     */
    handleMouseDownRotate(event) {
        this._rotateStart.setValue(event.clientX, event.clientY);
    }
    /**
     * Set zoom start when state is zoom.
     * @param event Mouse event.
     */
    handleMouseDownZoom(event) {
        this._zoomStart.setValue(event.clientX, event.clientY);
    }
    /**
     * Set pan start when state is pan.
     * @param event Mouse event.
     */
    handleMouseDownPan(event) {
        this._panStart.setValue(event.clientX, event.clientY);
    }
    /**
     * Calculate the rotation difference when the mouse is moved.
     * @param event Mouse event.
     */
    handleMouseMoveRotate(event) {
        this._rotateEnd.setValue(event.clientX, event.clientY);
        Vector2.subtract(this._rotateEnd, this._rotateStart, this._rotateDelta);
        // x方向平移的百分比
        this.rotateLeft(2 * Math.PI * (this._rotateDelta.x / this.mainElement.clientWidth) * this.rotateSpeed);
        // y方向平移的百分比
        this.rotateUp(2 * Math.PI * (this._rotateDelta.y / this.mainElement.clientHeight) * this.rotateSpeed);
        // 将end设置为新的start
        this._rotateEnd.cloneTo(this._rotateStart);
    }
    /**
     * Calculate the rotation difference when the mouse is moved.
     * @param event Mouse event.
     */
    handleMouseMoveZoom(event) {
        this._zoomEnd.setValue(event.clientX, event.clientY);
        Vector2.subtract(this._zoomEnd, this._zoomStart, this._zoomDelta);
        if (this._zoomDelta.y > 0) {
            this.zoomOut(this.getZoomScale());
        }
        else if (this._zoomDelta.y < 0) {
            this.zoomIn(this.getZoomScale());
        }
        // 将end复制到新的start
        this._zoomEnd.cloneTo(this._zoomStart);
    }
    /**
     * Calculate the pan difference when the mouse is moved.
     * @param event Mouse event.
     */
    handleMouseMovePan(event) {
        this._panEnd.setValue(event.clientX, event.clientY);
        Vector2.subtract(this._panEnd, this._panStart, this._panDelta);
        this.pan(this._panDelta.x, this._panDelta.y);
        this._panEnd.cloneTo(this._panStart);
    }
    /**
     * Calculate the wheel difference when the mouse is moved.
     * @param event Mouse event.
     */
    handleMouseWheel(event) {
        if (event.deltaY < 0) {
            this.zoomIn(this.getZoomScale());
        }
        else if (event.deltaY > 0) {
            this.zoomOut(this.getZoomScale());
        }
    }
    /**
     * Listen to the mouse click event,
     * and set the context state to the mouse click type according to the click type,
     * and then select the corresponding processing method
     * @param event Mouse event.
     */
    onMouseDown(event) {
        event.preventDefault();
        this._isMouseUp = false;
        switch (event.button) {
            case this.mouseButtons.ORBIT:
                this.handleMouseDownRotate(event);
                this._state = this.STATE.ROTATE;
                break;
            case this.mouseButtons.ZOOM:
                this.handleMouseDownZoom(event);
                this._state = this.STATE.ZOOM;
                break;
            case this.mouseButtons.PAN:
                this.handleMouseDownPan(event);
                this._state = this.STATE.PAN;
                break;
        }
        if (this._state !== this.STATE.NONE) {
            const element = this.domElement === document ? this.domElement.body : this.domElement;
            // canvas元素监听move事件
            // onMouseMove
            this.mainElement.addEventListener(this.mouseUpEvents[0].type, this.mouseUpEvents[0].listener, false);
            // 父级元素监听鼠标up事件
            // onMouseUp
            element.addEventListener(this.mouseUpEvents[1].type, this.mouseUpEvents[1].listener, false);
        }
    }
    /**
     * Monitor mouse movement events,
     * select the corresponding movement processing method for the current context state.
     * @param event Mouse event.
     */
    onMouseMove(event) {
        event.preventDefault();
        switch (this._state) {
            case this.STATE.ROTATE:
                this.handleMouseMoveRotate(event);
                break;
            case this.STATE.ZOOM:
                this.handleMouseMoveZoom(event);
                break;
            case this.STATE.PAN:
                this.handleMouseMovePan(event);
                break;
        }
    }
    /**
     * Listen for the mouse up event,
     * remove the corresponding listener event and set the context state to none.
     */
    onMouseUp() {
        this._isMouseUp = true;
        this.mouseUpEvents.forEach((ele) => {
            const element = this.domElement === document ? this.domElement.body : this.domElement;
            element.removeEventListener(ele.type, ele.listener, false);
            this.mainElement.removeEventListener(ele.type, ele.listener, false);
        });
        this._state = this.STATE.NONE;
    }
    /**
     * Listen to the mouse wheel event,
     * prevent the default behavior,
     * and scale according to the current event event information.
     * @param event Mouse wheel event.
     */
    onMouseWheel(event) {
        event.preventDefault();
        event.stopPropagation();
        this.handleMouseWheel(event);
    }
}

const Util = {
    isArray: 'isArray' in Array
        ? Array.isArray
        : (value) => {
            return toString.call(value) === '[object Array]';
        },
    isArrayLike(x) {
        return !!x && typeof x.length === 'number' && typeof x !== 'function';
    },
    clone(obj) {
        if (typeof obj !== 'object' || obj === null) {
            return obj;
        }
        let rst;
        if (Util.isArrayLike(obj)) {
            rst = obj.slice();
            for (let i = 0, l = obj.length; i < l; i++) {
                rst[i] = Util.clone(obj[i]);
            }
        }
        else {
            rst = {};
            for (const k in obj) {
                if (obj.hasOwnProperty(k)) {
                    rst[k] = Util.clone(obj[k]);
                }
            }
        }
        return rst;
    },
    downloadBlob(blob, fileName = '') {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement('a');
        document.body.appendChild(a);
        a.style.display = 'none';
        a.href = url;
        a.download = fileName;
        a.addEventListener('click', () => {
            if (a.parentElement) {
                a.parentElement.removeChild(a);
            }
        });
        a.click();
        window.URL.revokeObjectURL(url);
    },
};
const isArrayLike = (x) => x && typeof x.length === 'number' && typeof x !== 'function';
/**
 * Fastly remove an element from array.
 * @param array - Array
 * @param item - Element
 */
function removeFromArray(array, item) {
    const index = array.indexOf(item);
    if (index < 0) {
        return false;
    }
    const last = array.length - 1;
    if (index !== last) {
        const end = array[last];
        array[index] = end;
    }
    array.length--;
    return true;
}
/**
 * Get the value of an object or array.
 * @param obj Object or Array.
 * @returns Object value array.
 */
function ObjectValues(obj) {
    return Object.keys(obj).map((key) => obj[key]);
}

/**
 * Used to update tags.
 */
class UpdateFlag {
    /** @internal */
    _flagManagers = [];
    /**
     * Clear.
     */
    clearFromManagers() {
        this._removeFromManagers();
        this._flagManagers.length = 0;
    }
    /**
     * Destroy.
     */
    destroy() {
        this._removeFromManagers();
        this._flagManagers = null;
    }
    _removeFromManagers() {
        const flagManagers = this._flagManagers;
        for (let i = 0, n = flagManagers.length; i < n; i++) {
            removeFromArray(flagManagers[i]._updateFlags, this);
        }
    }
}

/**
 * Used to update tags.
 */
class BoolUpdateFlag extends UpdateFlag {
    /** Flag. */
    flag = true;
    /**
     * @inheritdoc
     */
    dispatch() {
        this.flag = true;
    }
}

/**
 * @internal
 */
class UpdateFlagManager {
    /** @internal */
    _updateFlags = [];
    /**
     * Create a UpdateFlag.
     * @returns - The UpdateFlag.
     */
    createFlag(type) {
        const flag = new type();
        this.addFlag(flag);
        return flag;
    }
    /**
     * Add a UpdateFlag.
     * @param flag - The UpdateFlag.
     */
    addFlag(flag) {
        this._updateFlags.push(flag);
        flag._flagManagers.push(this);
    }
    /**
     * Dispatch.
     */
    dispatch(param) {
        const updateFlags = this._updateFlags;
        for (let i = updateFlags.length - 1; i >= 0; i--) {
            updateFlags[i].dispatch(param);
        }
    }
}

/**
 * Used to implement transformation related functions.
 */
class Transform {
    static _tempQuat0 = new Quaternion();
    static _tempVec30 = new Vector3();
    static _tempVec31 = new Vector3();
    static _tempVec32 = new Vector3();
    static _tempMat30 = new Matrix3();
    static _tempMat31 = new Matrix3();
    static _tempMat32 = new Matrix3();
    static _tempMat41 = new Matrix4();
    static _tempMat42 = new Matrix4();
    _position = new Vector3();
    _rotation = new Vector3();
    _rotationQuaternion = new Quaternion();
    _scale = new Vector3(1, 1, 1);
    _worldPosition = new Vector3();
    _worldRotation = new Vector3();
    _worldRotationQuaternion = new Quaternion();
    _lossyWorldScale = new Vector3(1, 1, 1);
    _localMatrix = new Matrix4();
    _worldMatrix = new Matrix4();
    _updateFlagManager = new UpdateFlagManager();
    _isParentDirty = true;
    _parentTransformCache = null;
    _entity;
    _dirtyFlag = TransformFlag.WmWpWeWqWs;
    /**
     * Local position.
     */
    get position() {
        return this._position;
    }
    set position(value) {
        if (this._position !== value) {
            value.cloneTo(this._position);
        }
    }
    /**
     * World position.
     */
    get worldPosition() {
        const worldPosition = this._worldPosition;
        if (this._isContainDirtyFlag(TransformFlag.WorldPosition)) {
            //@ts-ignore
            worldPosition._onValueChanged = null;
            // if (this._getParentTransform()) {
            {
                this._position.cloneTo(worldPosition);
            }
            //@ts-ignore
            worldPosition._onValueChanged = this._onWorldPositionChanged;
            this._setDirtyFlagFalse(TransformFlag.WorldPosition);
        }
        return worldPosition;
    }
    set worldPosition(value) {
        if (this._worldPosition !== value) {
            value.cloneTo(this._worldPosition);
        }
    }
    /**
     * Local rotation, defining the rotation value in degrees.
     * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.
     */
    get rotation() {
        const rotation = this._rotation;
        if (this._isContainDirtyFlag(TransformFlag.LocalEuler)) {
            //@ts-ignore
            rotation._onValueChanged = null;
            this._rotationQuaternion.toEuler(rotation);
            //@ts-ignore
            rotation._onValueChanged = this._onRotationChanged;
            rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees
            this._setDirtyFlagFalse(TransformFlag.LocalEuler);
        }
        return rotation;
    }
    set rotation(value) {
        if (this._rotation !== value) {
            value.cloneTo(this._rotation);
        }
    }
    /**
     * World rotation, defining the rotation value in degrees.
     * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.
     */
    get worldRotation() {
        const worldRotation = this._worldRotation;
        if (this._isContainDirtyFlag(TransformFlag.WorldEuler)) {
            //@ts-ignore
            worldRotation._onValueChanged = null;
            this.worldRotationQuaternion.toEuler(worldRotation);
            worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle
            //@ts-ignore
            worldRotation._onValueChanged = this._onWorldRotationChanged;
            this._setDirtyFlagFalse(TransformFlag.WorldEuler);
        }
        return worldRotation;
    }
    set worldRotation(value) {
        if (this._worldRotation !== value) {
            value.cloneTo(this._worldRotation);
        }
    }
    /**
     * Local rotation, defining the rotation by using a unit quaternion.
     */
    get rotationQuaternion() {
        const rotationQuaternion = this._rotationQuaternion;
        if (this._isContainDirtyFlag(TransformFlag.LocalQuat)) {
            //@ts-ignore
            rotationQuaternion._onValueChanged = null;
            Quaternion.rotationEuler(MathUtil.degreeToRadian(this._rotation.x), MathUtil.degreeToRadian(this._rotation.y), MathUtil.degreeToRadian(this._rotation.z), rotationQuaternion);
            //@ts-ignore
            rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;
            this._setDirtyFlagFalse(TransformFlag.LocalQuat);
        }
        return rotationQuaternion;
    }
    set rotationQuaternion(value) {
        if (this._rotationQuaternion !== value) {
            if (value.normalized) {
                value.cloneTo(this._rotationQuaternion);
            }
            else {
                Quaternion.normalize(value, this._rotationQuaternion);
            }
        }
        else {
            value.normalized || value.normalize();
        }
    }
    /**
     * World rotation, defining the rotation by using a unit quaternion.
     */
    get worldRotationQuaternion() {
        const worldRotationQuaternion = this._worldRotationQuaternion;
        if (this._isContainDirtyFlag(TransformFlag.WorldQuat)) {
            //@ts-ignore
            worldRotationQuaternion._onValueChanged = null;
            // const parent = this._getParentTransform();
            {
                this.rotationQuaternion.cloneTo(worldRotationQuaternion);
            }
            //@ts-ignore
            worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;
            this._setDirtyFlagFalse(TransformFlag.WorldQuat);
        }
        return worldRotationQuaternion;
    }
    set worldRotationQuaternion(value) {
        if (this._worldRotationQuaternion !== value) {
            if (value.normalized) {
                value.cloneTo(this._worldRotationQuaternion);
            }
            else {
                Quaternion.normalize(value, this._worldRotationQuaternion);
            }
        }
        value.normalized || value.normalize();
    }
    /**
     * Local scaling.
     */
    get scale() {
        return this._scale;
    }
    set scale(value) {
        if (this._scale !== value) {
            value.cloneTo(this._scale);
        }
    }
    /**
     * Local lossy scaling.
     * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,
     * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3.
     */
    get lossyWorldScale() {
        if (this._isContainDirtyFlag(TransformFlag.WorldScale)) {
            // if (this._getParentTransform()) {
            {
                this._scale.cloneTo(this._lossyWorldScale);
            }
            this._setDirtyFlagFalse(TransformFlag.WorldScale);
        }
        return this._lossyWorldScale;
    }
    /**
     * Local matrix.
     * @remarks Need to re-assign after modification to ensure that the modification takes effect.
     */
    get localMatrix() {
        if (this._isContainDirtyFlag(TransformFlag.LocalMatrix)) {
            Matrix4.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);
            this._setDirtyFlagFalse(TransformFlag.LocalMatrix);
        }
        return this._localMatrix;
    }
    set localMatrix(value) {
        if (this._localMatrix !== value) {
            value.cloneTo(this._localMatrix);
        }
        this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);
        this._setDirtyFlagTrue(TransformFlag.LocalEuler);
        this._setDirtyFlagFalse(TransformFlag.LocalMatrix);
        this._updateAllWorldFlag();
    }
    /**
     * World matrix.
     * @remarks Need to re-assign after modification to ensure that the modification takes effect.
     */
    get worldMatrix() {
        if (this._isContainDirtyFlag(TransformFlag.WorldMatrix)) {
            {
                this.localMatrix.cloneTo(this._worldMatrix);
            }
            this._setDirtyFlagFalse(TransformFlag.WorldMatrix);
        }
        return this._worldMatrix;
    }
    set worldMatrix(value) {
        if (this._worldMatrix !== value) {
            value.cloneTo(this._worldMatrix);
        }
        {
            value.cloneTo(this._localMatrix);
        }
        this.localMatrix = this._localMatrix;
        this._setDirtyFlagFalse(TransformFlag.WorldMatrix);
    }
    /**
     * @internal
     */
    constructor(entity = null) {
        this._entity = entity;
        this._onPositionChanged = this._onPositionChanged.bind(this);
        this._onWorldPositionChanged = this._onWorldPositionChanged.bind(this);
        this._onRotationChanged = this._onRotationChanged.bind(this);
        this._onWorldRotationChanged = this._onWorldRotationChanged.bind(this);
        this._onRotationQuaternionChanged = this._onRotationQuaternionChanged.bind(this);
        this._onWorldRotationQuaternionChanged = this._onWorldRotationQuaternionChanged.bind(this);
        this._onScaleChanged = this._onScaleChanged.bind(this);
        //@ts-ignore
        this._position._onValueChanged = this._onPositionChanged;
        //@ts-ignore
        this._worldPosition._onValueChanged = this._onWorldPositionChanged;
        //@ts-ignore
        this._rotation._onValueChanged = this._onRotationChanged;
        //@ts-ignore
        this._worldRotation._onValueChanged = this._onWorldRotationChanged;
        //@ts-ignore
        this._rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;
        //@ts-ignore
        this._worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;
        //@ts-ignore
        this._scale._onValueChanged = this._onScaleChanged;
    }
    /**
     * Set local position by X, Y, Z value.
     * @param x - X coordinate
     * @param y - Y coordinate
     * @param z - Z coordinate
     */
    setPosition(x, y, z) {
        this._position.setValue(x, y, z);
    }
    /**
     * Set local rotation by the X, Y, Z components of the euler angle, unit in degrees.
     * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.
     * @param x - The angle of rotation around the X axis
     * @param y - The angle of rotation around the Y axis
     * @param z - The angle of rotation around the Z axis
     */
    setRotation(x, y, z) {
        this._rotation.setValue(x, y, z);
    }
    /**
     * Set local rotation by the X, Y, Z, and W components of the quaternion.
     * @param x - X component of quaternion
     * @param y - Y component of quaternion
     * @param z - Z component of quaternion
     * @param w - W component of quaternion
     */
    setRotationQuaternion(x, y, z, w) {
        this._rotationQuaternion.setValue(x, y, z, w);
    }
    /**
     * Set local scaling by scaling values along X, Y, Z axis.
     * @param x - Scaling along X axis
     * @param y - Scaling along Y axis
     * @param z - Scaling along Z axis
     */
    setScale(x, y, z) {
        this._scale.setValue(x, y, z);
    }
    /**
     * Set world position by X, Y, Z value.
     * @param x - X coordinate
     * @param y - Y coordinate
     * @param z - Z coordinate
     */
    setWorldPosition(x, y, z) {
        this._worldPosition.setValue(x, y, z);
    }
    /**
     * Set world rotation by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.
     * @param x - The angle of rotation around the X axis
     * @param y - The angle of rotation around the Y axis
     * @param z - The angle of rotation around the Z axis
     */
    setWorldRotation(x, y, z) {
        this._worldRotation.setValue(x, y, z);
    }
    /**
     * Set local rotation by the X, Y, Z, and W components of the quaternion.
     * @param x - X component of quaternion
     * @param y - Y component of quaternion
     * @param z - Z component of quaternion
     * @param w - W component of quaternion
     */
    setWorldRotationQuaternion(x, y, z, w) {
        this._worldRotationQuaternion.setValue(x, y, z, w);
    }
    /**
     * Get the forward direction in world space.
     * @param forward - Forward vector
     * @returns Forward vector
     */
    getWorldForward(forward) {
        const e = this.worldMatrix.elements;
        forward.setValue(-e[8], -e[9], -e[10]);
        return forward.normalize();
    }
    /**
     * Get the right direction in world space.
     * @param right - Right vector
     * @returns Right vector
     */
    getWorldRight(right) {
        const e = this.worldMatrix.elements;
        right.setValue(e[0], e[1], e[2]);
        return right.normalize();
    }
    /**
     * Get the up direction in world space.
     * @param up - Up vector
     * @returns Up vector
     */
    getWorldUp(up) {
        const e = this.worldMatrix.elements;
        up.setValue(e[4], e[5], e[6]);
        return up.normalize();
    }
    translate(translationOrX, relativeToLocalOrY, z, relativeToLocal) {
        if (typeof translationOrX === 'number') {
            const translate = Transform._tempVec30;
            translate.setValue(translationOrX, relativeToLocalOrY, z);
            this._translate(translate, relativeToLocal);
        }
        else {
            this._translate(translationOrX, relativeToLocalOrY);
        }
    }
    rotate(rotationOrX, relativeToLocalOrY, z, relativeToLocal) {
        if (typeof rotationOrX === 'number') {
            this._rotateXYZ(rotationOrX, relativeToLocalOrY, z, relativeToLocal);
        }
        else {
            this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, relativeToLocalOrY);
        }
    }
    /**
     * Rotate around the specified axis according to the specified angle.
     * @param axis - Rotate axis
     * @param angle - Rotate angle in degrees
     * @param relativeToLocal - Relative to local space
     */
    rotateByAxis(axis, angle, relativeToLocal = true) {
        const rad = angle * MathUtil.degreeToRadFactor;
        Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);
        this._rotateByQuat(Transform._tempQuat0, relativeToLocal);
    }
    /**
     * Rotate and ensure that the world front vector points to the target world position.
     * @param targetPosition - Target world position
     * @param worldUp - Up direction in world space, default is Vector3(0, 1, 0)
     */
    lookAt(targetPosition, worldUp) {
        const zAxis = Transform._tempVec30;
        Vector3.subtract(this.worldPosition, targetPosition, zAxis);
        let axisLen = zAxis.length();
        if (axisLen <= MathUtil.zeroTolerance) {
            // The current position and the target position are almost the same.
            return;
        }
        zAxis.scale(1 / axisLen);
        const xAxis = Transform._tempVec31;
        if (worldUp) {
            Vector3.cross(worldUp, zAxis, xAxis);
        }
        else {
            xAxis.setValue(zAxis.z, 0, -zAxis.x);
        }
        axisLen = xAxis.length();
        if (axisLen <= MathUtil.zeroTolerance) {
            // @todo:
            // 1.worldup is（0,0,0）
            // 2.worldUp is parallel to zAxis
            return;
        }
        xAxis.scale(1 / axisLen);
        const yAxis = Transform._tempVec32;
        Vector3.cross(zAxis, xAxis, yAxis);
        const rotMat = Transform._tempMat41;
        const { elements: e } = rotMat;
        (e[0] = xAxis.x), (e[1] = xAxis.y), (e[2] = xAxis.z);
        (e[4] = yAxis.x), (e[5] = yAxis.y), (e[6] = yAxis.z);
        (e[8] = zAxis.x), (e[9] = zAxis.y), (e[10] = zAxis.z);
        rotMat.getRotation(this._worldRotationQuaternion);
    }
    /**
     * Register world transform change flag.
     * @returns Change flag
     */
    registerWorldChangeFlag() {
        return this._updateFlagManager.createFlag(BoolUpdateFlag);
    }
    /**
     * @internal
     */
    _parentChange() {
        this._isParentDirty = true;
        this._updateAllWorldFlag();
    }
    /**
     * @internal
     */
    _isFrontFaceInvert() {
        const scale = this.lossyWorldScale;
        let isInvert = scale.x < 0;
        scale.y < 0 && (isInvert = !isInvert);
        scale.z < 0 && (isInvert = !isInvert);
        return isInvert;
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.
     */
    _updateWorldPositionFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWp)) {
            this._worldAssociatedChange(TransformFlag.WmWp);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionFlag();
            }
        }
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.
     * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.
     */
    _updateWorldRotationFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWeWq)) {
            this._worldAssociatedChange(TransformFlag.WmWeWq);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.
            }
        }
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.
     * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.
     */
    _updateWorldPositionAndRotationFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWq)) {
            this._worldAssociatedChange(TransformFlag.WmWpWeWq);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();
            }
        }
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * Get worldScale: Will trigger the scaling update of itself and all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.
     */
    _updateWorldScaleFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWs)) {
            this._worldAssociatedChange(TransformFlag.WmWs);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();
            }
        }
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * Get worldScale: Will trigger the scaling update of itself and all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.
     */
    _updateWorldPositionAndScaleFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWpWs)) {
            this._worldAssociatedChange(TransformFlag.WmWpWs);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();
            }
        }
    }
    /**
     * Update all world transform property dirty flag, the principle is the same as above.
     */
    _updateAllWorldFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWqWs)) {
            this._worldAssociatedChange(TransformFlag.WmWpWeWqWs);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateAllWorldFlag();
            }
        }
    }
    _getParentTransform() {
        if (!this._isParentDirty) {
            return this._parentTransformCache;
        }
        let parentCache = null;
        let parent = this._entity.parent;
        while (parent) {
            const transform = parent.transform;
            if (transform) {
                parentCache = transform;
                break;
            }
            else {
                parent = parent.parent;
            }
        }
        this._parentTransformCache = parentCache;
        this._isParentDirty = false;
        return parentCache;
    }
    _getScaleMatrix() {
        const invRotation = Transform._tempQuat0;
        const invRotationMat = Transform._tempMat30;
        const worldRotScaMat = Transform._tempMat31;
        const scaMat = Transform._tempMat32;
        worldRotScaMat.setValueByMatrix(this.worldMatrix);
        Quaternion.invert(this.worldRotationQuaternion, invRotation);
        Matrix3.rotationQuaternion(invRotation, invRotationMat);
        Matrix3.multiply(invRotationMat, worldRotScaMat, scaMat);
        return scaMat;
    }
    _isContainDirtyFlags(targetDirtyFlags) {
        return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;
    }
    _isContainDirtyFlag(type) {
        return (this._dirtyFlag & type) != 0;
    }
    _setDirtyFlagTrue(type) {
        this._dirtyFlag |= type;
    }
    _setDirtyFlagFalse(type) {
        this._dirtyFlag &= ~type;
    }
    _worldAssociatedChange(type) {
        this._dirtyFlag |= type;
        this._updateFlagManager.dispatch();
    }
    _rotateByQuat(rotateQuat, relativeToLocal) {
        if (relativeToLocal) {
            Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);
        }
        else {
            Quaternion.multiply(rotateQuat, this.worldRotationQuaternion, this._worldRotationQuaternion);
        }
    }
    _translate(translation, relativeToLocal = true) {
        if (relativeToLocal) {
            this._position.add(translation);
        }
        else {
            this._worldPosition.add(translation);
        }
    }
    _rotateXYZ(x, y, z, relativeToLocal = true) {
        const radFactor = MathUtil.degreeToRadFactor;
        const rotQuat = Transform._tempQuat0;
        Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);
        this._rotateByQuat(rotQuat, relativeToLocal);
    }
    _onPositionChanged() {
        this._setDirtyFlagTrue(TransformFlag.LocalMatrix);
        this._updateWorldPositionFlag();
    }
    _onWorldPositionChanged() {
        const worldPosition = this._worldPosition;
        {
            worldPosition.cloneTo(this._position);
        }
        this._setDirtyFlagFalse(TransformFlag.WorldPosition);
    }
    _onRotationChanged() {
        this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalQuat);
        this._setDirtyFlagFalse(TransformFlag.LocalEuler);
        this._updateWorldRotationFlag();
    }
    _onWorldRotationChanged() {
        const worldRotation = this._worldRotation;
        Quaternion.rotationEuler(MathUtil.degreeToRadian(worldRotation.x), MathUtil.degreeToRadian(worldRotation.y), MathUtil.degreeToRadian(worldRotation.z), this._worldRotationQuaternion);
        this._setDirtyFlagFalse(TransformFlag.WorldEuler);
    }
    _onRotationQuaternionChanged() {
        this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalEuler);
        this._setDirtyFlagFalse(TransformFlag.LocalQuat);
        this._updateWorldRotationFlag();
    }
    _onWorldRotationQuaternionChanged() {
        const worldRotationQuaternion = this._worldRotationQuaternion;
        {
            worldRotationQuaternion.cloneTo(this._rotationQuaternion);
        }
        this._setDirtyFlagFalse(TransformFlag.WorldQuat);
    }
    _onScaleChanged() {
        this._setDirtyFlagTrue(TransformFlag.LocalMatrix);
        this._updateWorldScaleFlag();
    }
}
/**
 * Dirty flag of transform.
 */
var TransformFlag;
(function (TransformFlag) {
    TransformFlag[TransformFlag["LocalEuler"] = 1] = "LocalEuler";
    TransformFlag[TransformFlag["LocalQuat"] = 2] = "LocalQuat";
    TransformFlag[TransformFlag["WorldPosition"] = 4] = "WorldPosition";
    TransformFlag[TransformFlag["WorldEuler"] = 8] = "WorldEuler";
    TransformFlag[TransformFlag["WorldQuat"] = 16] = "WorldQuat";
    TransformFlag[TransformFlag["WorldScale"] = 32] = "WorldScale";
    TransformFlag[TransformFlag["LocalMatrix"] = 64] = "LocalMatrix";
    TransformFlag[TransformFlag["WorldMatrix"] = 128] = "WorldMatrix";
    /** WorldMatrix | WorldPosition */
    // 132
    TransformFlag[TransformFlag["WmWp"] = 132] = "WmWp";
    /** WorldMatrix | WorldEuler | WorldQuat */
    // 152
    TransformFlag[TransformFlag["WmWeWq"] = 152] = "WmWeWq";
    /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */
    // 156
    TransformFlag[TransformFlag["WmWpWeWq"] = 156] = "WmWpWeWq";
    /** WorldMatrix | WorldScale */
    // 160
    TransformFlag[TransformFlag["WmWs"] = 160] = "WmWs";
    /** WorldMatrix | WorldPosition | WorldScale */
    // 164
    TransformFlag[TransformFlag["WmWpWs"] = 164] = "WmWpWs";
    /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */
    // 11 * 16 + 12 = 188
    TransformFlag[TransformFlag["WmWpWeWqWs"] = 188] = "WmWpWeWqWs";
})(TransformFlag || (TransformFlag = {}));

/**
 * Camera.
 */
class Camera {
    // 把引擎也引进来主要是为了获取到canvas的宽高
    // 便于设置透视投影矩阵与宽高比
    // TODO待重构，抽出一个Component
    _engine;
    // 主要是为了让OrbitControl获取到canvas
    get engine() {
        return this._engine;
    }
    transform;
    static _viewMatrixProperty = Shader.getPropertyByName('u_viewMat');
    static _projectionMatrixProperty = Shader.getPropertyByName('u_projMat');
    static _inverseVPMatrixProperty = Shader.getPropertyByName('u_invVPMat');
    static _vpMatrixProperty = Shader.getPropertyByName('u_vpMat');
    static _cameraPositionProperty = Shader.getPropertyByName('u_cameraPos');
    static _cameraPosSquaredProperty = Shader.getPropertyByName('u_cameraPosSquared');
    /**
     * Compute the inverse of the rotation translation matrix.
     * @param rotation - The rotation used to calculate matrix
     * @param translation - The translation used to calculate matrix
     * @param out - The calculated matrix
     */
    static _rotationTranslationInv(rotation, translation, out) {
        const oe = out.elements;
        const { x, y, z, w } = rotation;
        let x2 = x + x;
        let y2 = y + y;
        let z2 = z + z;
        let xx = x * x2;
        let xy = x * y2;
        let xz = x * z2;
        let yy = y * y2;
        let yz = y * z2;
        let zz = z * z2;
        let wx = w * x2;
        let wy = w * y2;
        let wz = w * z2;
        oe[0] = 1 - (yy + zz);
        oe[1] = xy + wz;
        oe[2] = xz - wy;
        oe[3] = 0;
        oe[4] = xy - wz;
        oe[5] = 1 - (xx + zz);
        oe[6] = yz + wx;
        oe[7] = 0;
        oe[8] = xz + wy;
        oe[9] = yz - wx;
        oe[10] = 1 - (xx + yy);
        oe[11] = 0;
        oe[12] = translation.x;
        oe[13] = translation.y;
        oe[14] = translation.z;
        oe[15] = 1;
        out.invert();
    }
    /** Shader data. */
    shaderData = new ShaderData(ShaderDataGroup.Camera);
    /** Rendering priority - A Camera with higher priority will be rendered on top of a camera with lower priority. */
    priority = 0;
    orbitControl;
    _isOrthographic = false;
    _nearClipPlane = 0.1;
    _farClipPlane = 100;
    _fieldOfView = 45;
    _orthographicSize = 10;
    // TODO
    _customAspectRatio = undefined;
    _projectionMatrix = new Matrix4();
    _viewMatrix = new Matrix4();
    _viewport = new Vector4(0, 0, 1, 1);
    // 这个东西有什么用呢
    _lastAspectSize = new Vector2(0, 0);
    get viewMatrix() {
        Camera._rotationTranslationInv(this.transform.worldRotationQuaternion, this.transform.worldPosition, this._viewMatrix);
        return this._viewMatrix;
    }
    set projectionMatrix(value) {
        this._projectionMatrix = value;
    }
    get projectionMatrix() {
        const canvas = this._engine.canvas;
        this._lastAspectSize.x = canvas.width;
        this._lastAspectSize.y = canvas.height;
        const aspectRatio = this.aspectRatio;
        if (!this._isOrthographic) {
            Matrix4.perspective(MathUtil.degreeToRadian(this._fieldOfView), aspectRatio, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);
        }
        else {
            const width = this._orthographicSize * aspectRatio;
            const height = this._orthographicSize;
            Matrix4.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);
        }
        return this._projectionMatrix;
    }
    /**
     * Near clip plane - the closest point to the camera when rendering occurs.
     */
    get nearClipPlane() {
        return this._nearClipPlane;
    }
    set nearClipPlane(value) {
        this._nearClipPlane = value;
    }
    /**
     * Far clip plane - the furthest point to the camera when rendering occurs.
     */
    get farClipPlane() {
        return this._farClipPlane;
    }
    set farClipPlane(value) {
        this._farClipPlane = value;
    }
    /**
     * The camera's view angle. activating when camera use perspective projection.
     */
    get fieldOfView() {
        return this._fieldOfView;
    }
    set fieldOfView(value) {
        this._fieldOfView = value;
    }
    // 获取宽高比
    get aspectRatio() {
        const canvas = this._engine.canvas;
        // TODO: 考虑视口
        return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);
    }
    set aspectRatio(value) {
        this._customAspectRatio = value;
    }
    /**
     * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).
     * @remarks Re-assignment is required after modification to ensure that the modification takes effect.
     */
    get viewport() {
        return this._viewport;
    }
    set viewport(value) {
        if (value !== this._viewport) {
            value.cloneTo(this._viewport);
        }
    }
    /**
     * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.
     */
    get isOrthographic() {
        return this._isOrthographic;
    }
    set isOrthographic(value) {
        this._isOrthographic = value;
    }
    get orthographicSize() {
        return this._orthographicSize;
    }
    set orthographicSize(value) {
        this._orthographicSize = value;
    }
    // TODO： 其实Entity和Camera应该再抽象上一层Component
    constructor(engine) {
        this._engine = engine;
        this.transform = new Transform();
        this.orbitControl = new OrbitControl(this);
    }
    /**
     * Upload camera-related shader data.
     */
    _updateShaderData() {
        const shaderData = this.shaderData;
        const vpMat = new Matrix4();
        // 需要把逆矩阵单独搞一个变量，因为是引用类型，赋值并没有开辟新对象
        const invVpMat = new Matrix4();
        const cameraPos = this.transform.worldPosition;
        const cameraPosSquared = new Vector3();
        // 注意顺序：perspect * view * model
        Matrix4.multiply(this.projectionMatrix, this.viewMatrix, vpMat);
        Matrix4.invert(vpMat, invVpMat);
        Vector3.multiply(cameraPos, cameraPos, cameraPosSquared);
        // TODO: 应该把VP矩阵都成好再传给gl，封装common shader的时候再做
        shaderData.setMatrix(Camera._viewMatrixProperty, this.viewMatrix);
        shaderData.setMatrix(Camera._projectionMatrixProperty, this.projectionMatrix);
        shaderData.setMatrix(Camera._vpMatrixProperty, vpMat);
        shaderData.setMatrix(Camera._inverseVPMatrixProperty, invVpMat);
        shaderData.setVector3(Camera._cameraPositionProperty, cameraPos);
        shaderData.setVector3(Camera._cameraPosSquaredProperty, cameraPosSquared);
    }
    /**
     * The upload method is triggered by render.
     */
    render() {
        this._updateShaderData();
    }
}

/**
 * Lighting model base class.
 */
class Light {
    // TODO: 这个抽的不好，只有点光源需要位
    /** Light source position. */
    transform;
    _viewMat;
    _inverseViewMat;
    // 这个暂时没什么用
    // 因为我们的点光源采用的是世界坐标系
    /**
     * Get the view matrix of the light source position.
     */
    get viewMatrix() {
        if (!this._viewMat)
            this._viewMat = new Matrix4();
        Matrix4.invert(this.transform.worldMatrix, this._viewMat);
        return this._viewMat;
    }
    /**
     * Get the inverse of the view matrix for the light source position.
     */
    get inverseViewMatrix() {
        if (!this._inverseViewMat)
            this._inverseViewMat = new Matrix4();
        Matrix4.invert(this.viewMatrix, this._inverseViewMat);
        return this._inverseViewMat;
    }
    constructor() {
        this.transform = new Transform();
    }
}

/**
 * Point light.
 */
class PointLight extends Light {
    // 因为可能有多个点光源
    /** Get the address of the point light color uniform variable in the shader. */
    static _colorProperty = Shader.getPropertyByName('u_pointLightColor');
    /** Get the address of the uniform variable of the point light position in the shader. */
    static _positionProperty = Shader.getPropertyByName('u_pointLightPosition');
    /** Blend object of color and position. */
    static _combinedData = {
        color: new Float32Array(3),
        position: new Float32Array(3),
    };
    // 白光不管和什么光相乘，都保留颜色
    /** The color of the light, the default is white light. */
    color = new Color(1, 1, 1, 1);
    /** Intensity of light. */
    intensity = 1.0;
    /** Final light color. */
    _lightColor = new Color(1, 1, 1, 1);
    /** Get the position of a point light. */
    get position() {
        return this.transform.worldPosition;
    }
    /**
     * Get the final light color.
     */
    get lightColor() {
        this._lightColor.r = this.color.r * this.intensity;
        this._lightColor.g = this.color.g * this.intensity;
        this._lightColor.b = this.color.b * this.intensity;
        this._lightColor.a = this.color.a * this.intensity;
        return this._lightColor;
    }
    constructor(position) {
        super();
        this.transform.worldPosition = position;
    }
    /**
     * Set variable value in shader.
     * @param shaderData Shader data.
     */
    _updateShaderData(shaderData) {
        this._appendData();
        const data = PointLight._combinedData;
        shaderData.setFloatArray(PointLight._colorProperty, data.color);
        shaderData.setFloatArray(PointLight._positionProperty, data.position);
    }
    /**
     * Populate federated data.
     */
    _appendData() {
        const data = PointLight._combinedData;
        const lightColor = this.lightColor;
        const lightPosition = this.position;
        data.color[0] = lightColor.r;
        data.color[1] = lightColor.g;
        data.color[2] = lightColor.b;
        data.position[0] = lightPosition.x;
        data.position[1] = lightPosition.y;
        data.position[2] = lightPosition.z;
    }
}

// 这个不用继承Light，因为只需要颜色
/**
 * Ambient light.
 */
class AmbientLight {
    /** Get the address of the point ambient color uniform variable in the shader. */
    static _colorProperty = Shader.getPropertyByName('u_diffuseSpecularAmbientShininess');
    /** The color of the light. */
    color;
    constructor(color) {
        this.color = color;
    }
    /**
     * Set variable value in shader.
     * @param shaderData Shader data.
     */
    _updateShaderData(shaderData) {
        const color = this.color;
        const ambientColor = new Float32Array([color.r, color.g, color.b, color.a]);
        shaderData.setFloatArray(AmbientLight._colorProperty, ambientColor);
    }
}

class Ellipsoid {
    static Wgs84 = new Ellipsoid(6378137.0, 6378137.0, 6356752.314245);
    static ScaledWgs84 = new Ellipsoid(1.0, 1.0, 6356752.314245 / 6378137.0);
    static UnitSphere = new Ellipsoid(1.0, 1.0, 1.0);
    _radii;
    _radiiSquared;
    _oneOverRadiiSquared;
    /** The tree radii of the ellipsoid. */
    get radii() {
        return this._radii;
    }
    /** The squares corresponding to the three radii of the ellipsoid. */
    get radiiSquared() {
        return this._radiiSquared;
    }
    /** The inverse of the square corresponding to the three radii of the ellipsoid. */
    get oneOverRadiiSquared() {
        return this._oneOverRadiiSquared;
    }
    constructor(a, b, c) {
        if (a <= 0 || b <= 0 || c <= 0) {
            throw new Error('Ellipsoid parameters are not allowed to be set to less than or equal to 0.');
        }
        this._radii = new Vector3(a, b, c);
        this._radiiSquared = new Vector3(a * a, b * b, c * c);
        this._oneOverRadiiSquared = new Vector3(1 / (this._radii.x * this._radii.x), 1 / (this._radii.y * this._radii.y), 1 / (this._radii.z * this._radii.z));
    }
}

class RayCastedGlobe {
    static _shapeProperty = Shader.getPropertyByName('u_globeOneOverRadiiSquared');
    _shape = Ellipsoid.ScaledWgs84;
    _shader = Shader.find('rayCastedGlobe');
    _mesh;
    _material;
    /** The collection of entities under the earth. */
    entities = [];
    /** The ellipsoid parameters corresponding to the sphere. */
    get shape() {
        return this._shape;
    }
    /** Cube mesh for GPU ray tracing. */
    get mesh() {
        return this._mesh;
    }
    /** The material of the sphere selection. */
    get material() {
        return this._material;
    }
    /** The shader of the sphere. */
    get shader() {
        return this._shader;
    }
    /**
     * Create a cube grid and build a picture material based on the engine.
     * @param engine Engine instance.
     */
    constructor(engine) {
        this._mesh = PrimitiveMesh.createCuboid(engine, 2, 2, 2);
        this._material = new ImageMaterial(engine, this.shader, earthUrl);
    }
    /**
     * Upload the parameters of the ellipsoid to the GPU.
     * @param shaderData Scene shaderdata.
     */
    uploadShaderData(shaderData) {
        shaderData.setVector3(RayCastedGlobe._shapeProperty, this.shape.oneOverRadiiSquared);
    }
}

// TODO: 抽象出来一个EngineObject!!!!
class Scene {
    shaderData = new ShaderData(ShaderDataGroup.Scene);
    /** The engine the scene belongs to. */
    engine;
    /** Cameras in the scene, we only consider the case where there is only one camera in the scene. */
    camera;
    // TODO: 要想在这里使用你就的先抽象出来
    /** The background of the scene, the default is the skybox. */
    background;
    // TODO: 可能有多个点光源
    /** Point lights in the scene. */
    pointLight;
    /** Ambient light in the scene. */
    ambientLight;
    /** Earth is the root entity in the scene. */
    _globe;
    get globe() {
        return this._globe;
    }
    /**
     * The camera and the earth are loaded by default inside the constructor.
     * @param engine The engine the scene belongs to.
     */
    constructor(engine) {
        this.engine = engine;
        // 初始化场景相机
        this.camera = new Camera(engine);
        this.camera.transform.position = new Vector3(10, 10, 10);
        this.camera.transform.lookAt(new Vector3(0, 0, 0));
        // 初始化场景地球
        this._globe = new RayCastedGlobe(engine);
        this.globe.uploadShaderData(this.shaderData);
        // 初始化背景，即天空盒
        this.background = new Background(this.engine);
        // 初始化场景点光源
        this.pointLight = new PointLight(new Vector3(0, 0, 10));
        this.pointLight._updateShaderData(this.shaderData);
        // 初始化场景环境光
        this.ambientLight = new AmbientLight(new Color(0.2, 0.2, 0.2, 1));
        this.ambientLight._updateShaderData(this.shaderData);
    }
}

/**
 * Entity classes in the scene.
 */
class Entity {
    /** Entity count. */
    static _count = 1;
    /** Entity count. */
    id;
    /** Entity name. */
    name;
    /** Entity mesh. */
    mesh;
    /** Entity material. */
    material;
    /** Parent entity id. */
    parent;
    /** Entity childrens. */
    _children;
    /** Entity ransform. */
    transform;
    /**
     * An entity consists of meshes and materials.
     * @param name Entity name.
     * @param mesh Entity mesh.
     * @param material Entity material.
     */
    constructor(name, mesh, material) {
        this.name = name;
        this.id = Entity._count++;
        this.mesh = mesh;
        this.material = material;
        this.transform = new Transform(this);
    }
    /**
     * Add child entities.
     * @param entity Child entities to be loaded.
     * @returns The number of child entities.
     */
    addEntity(entity) {
        if (entity instanceof Entity) {
            if (this._children == null) {
                this._children = [];
            }
            this._children.push(entity);
        }
        return this._children.length;
    }
}

/**
 * Encapsulate canvas tag.
 */
class Canvas {
    /** HTML canvas element. */
    _canvas;
    _width;
    _height;
    /** Canvas element width. */
    get width() {
        return this._width;
    }
    set width(value) {
        if (this._width !== value) {
            this._canvas.width = value;
            this._width = value;
        }
    }
    /** Canvas element height. */
    get height() {
        return this._height;
    }
    set height(value) {
        if (this._height !== value) {
            this._canvas.height = value;
            this._height = value;
        }
    }
    /**
     * Resize by client size.
     * @param pixelRatio Device pixel ratio.
     */
    resizeByClientSize(pixelRatio = window.devicePixelRatio) {
        const webCanvas = this._canvas;
        if (webCanvas instanceof HTMLCanvasElement) {
            this.width = webCanvas.clientWidth * pixelRatio;
            this.height = webCanvas.clientHeight * pixelRatio;
        }
    }
    /**
     * Wrap the canvas element.
     * @param canvas HTML canvas element.
     */
    constructor(canvas) {
        const width = canvas.width;
        const height = canvas.height;
        this._canvas = canvas;
        this._width = width;
        this._height = height;
        // TODO: 做的不好，应该想个优雅的方法
        window.addEventListener('resize', () => {
            this.resizeByClientSize();
        });
    }
}

/**
 * Tools for calculating the time per frame.
 */
class Time {
    _clock;
    _timeScale;
    _deltaTime;
    _startTime;
    _lastTickTime;
    /**
     * Constructor of the Time.
     */
    constructor() {
        this._clock = performance ? performance : Date;
        this._timeScale = 1.0;
        this._deltaTime = 0.0001;
        const now = this._clock.now();
        this._startTime = now;
        this._lastTickTime = now;
    }
    /**
     * Set the current time as the end of rendering marker.
     */
    reset() {
        this._lastTickTime = this._clock.now();
    }
    /**
     * Current Time
     */
    get nowTime() {
        return this._clock.now();
    }
    /**
     * Time between two ticks
     */
    get deltaTime() {
        return this._deltaTime;
    }
    /**
     * Scaled delta time.
     */
    get timeScale() {
        return this._timeScale;
    }
    set timeScale(s) {
        this._timeScale = s;
    }
    /**
     * Unscaled delta time.
     */
    get unscaledDeltaTime() {
        return this._deltaTime / this._timeScale;
    }
    /**
     * The elapsed time, after the clock is initialized.
     */
    get timeSinceStartup() {
        return this.nowTime - this._startTime;
    }
    /**
     * Call every frame, update delta time and other data.
     */
    tick() {
        const now = this.nowTime;
        this._deltaTime = (now - this._lastTickTime) * this._timeScale;
        this._lastTickTime = now;
    }
}

var skyboxFs = "precision mediump float;\n#define GLSLIFY 1\nuniform samplerCube u_Skybox;uniform mat4 u_invVPMat;varying vec4 v_position;void main(){vec4 t=u_invVPMat*v_position;gl_FragColor=textureCube(u_Skybox,normalize(t.xyz/t.w));}"; // eslint-disable-line

var skyboxVs = "#define GLSLIFY 1\nattribute vec3 POSITION;varying vec4 v_position;void main(){gl_Position=vec4(POSITION,1.0);v_position=gl_Position;gl_Position.z=1.0;}"; // eslint-disable-line

var rayCastedGlobeFs = "precision mediump float;\n#define GLSLIFY 1\nconst float oneOverTwoPi=0.15915494309189535;const float oneOverPi=0.3183098861837907;varying vec3 v_worldPosition;uniform vec3 u_cameraPos;uniform vec3 u_cameraPosSquared;uniform vec3 u_globeOneOverRadiiSquared;uniform vec3 u_pointLightPosition;uniform vec4 u_diffuseSpecularAmbientShininess;uniform sampler2D u_sampler;struct Intersection{bool Intersects;float NearTime;float FarTime;};Intersection RayIntersectEllipsoid(vec3 rayOrigin,vec3 rayOriginSquared,vec3 rayDirection,vec3 oneOverEllipsoidRadiiSquared){float a=dot(rayDirection*rayDirection,oneOverEllipsoidRadiiSquared);float b=2.0*dot(rayOrigin*rayDirection,oneOverEllipsoidRadiiSquared);float c=dot(rayOriginSquared,oneOverEllipsoidRadiiSquared)-1.0;float discriminant=b*b-4.0*a*c;if(discriminant<0.0){return Intersection(false,0.0,0.0);}else if(discriminant==0.0){float time=-0.5*b/a;return Intersection(true,time,time);}float t=-0.5*(b+(b>0.0 ? 1.0 :-1.0)*sqrt(discriminant));float root1=t/a;float root2=c/t;return Intersection(true,min(root1,root2),max(root1,root2));}vec3 GeodeticSurfaceNormal(vec3 positionOnEllipsoid,vec3 oneOverEllipsoidRadiiSquared){return normalize(positionOnEllipsoid*oneOverEllipsoidRadiiSquared);}float LightIntensity(vec3 normal,vec3 toLight,vec3 toEye,vec4 diffuseSpecularAmbientShininess){vec3 toReflectedLight=reflect(-toLight,normal);float diffuse=max(dot(toLight,normal),0.0);float specular=max(dot(toReflectedLight,toEye),0.0);specular=pow(specular,diffuseSpecularAmbientShininess.w);return(diffuseSpecularAmbientShininess.x*diffuse)+(diffuseSpecularAmbientShininess.y*specular)+diffuseSpecularAmbientShininess.z;}vec2 ComputeTextureCoordinates(vec3 normal){return vec2(atan(normal.y,normal.x)*oneOverTwoPi+0.5,asin(normal.z)*oneOverPi+0.5);}void main(){vec3 rayDirection=normalize(v_worldPosition-u_cameraPos);Intersection i=RayIntersectEllipsoid(u_cameraPos,u_cameraPosSquared,rayDirection,u_globeOneOverRadiiSquared);if(i.Intersects){vec3 position=u_cameraPos+(i.NearTime*rayDirection);vec3 normal=GeodeticSurfaceNormal(position,u_globeOneOverRadiiSquared);vec3 toLight=normalize(u_pointLightPosition-position);vec3 toEye=normalize(u_cameraPos-position);float intensity=LightIntensity(normal,toLight,toEye,u_diffuseSpecularAmbientShininess);gl_FragColor=vec4(intensity*texture2D(u_sampler,ComputeTextureCoordinates(normal)).rgb,1.0);}else{discard;}}"; // eslint-disable-line

var rayCastedGlobeVs = "#define GLSLIFY 1\nattribute vec4 POSITION;uniform mat4 u_vpMat;varying vec3 v_worldPosition;void main(){gl_Position=u_vpMat*POSITION;v_worldPosition=POSITION.xyz;}"; // eslint-disable-line

var commonFs = "precision mediump float;\n#define GLSLIFY 1\nvarying vec3 v_worldPostion;varying vec2 v_TexCoord;uniform sampler2D u_Sampler;uniform vec3 u_pointLightPosition;uniform vec3 u_pointLightColor;uniform vec3 u_ambientightColor;void main(){vec3 normal=normalize(v_worldPostion);vec3 lightDirection=normalize(u_pointLightPosition-v_worldPostion);float nDotL=max(dot(lightDirection,normal),0.0);vec4 textureColor=texture2D(u_Sampler,v_TexCoord);vec3 diffuse=u_pointLightColor*textureColor.rgb*nDotL;vec3 ambient=u_ambientightColor*textureColor.rgb;gl_FragColor=vec4(diffuse+ambient,textureColor.a);}"; // eslint-disable-line

var commonVs = "#define GLSLIFY 1\nattribute vec3 POSITION;attribute vec3 NORMAL;attribute vec2 TEXCOORD_0;uniform mat4 u_viewMat;uniform mat4 u_projMat;varying vec3 v_worldPostion;varying vec2 v_TexCoord;void main(){gl_Position=u_projMat*u_viewMat*vec4(POSITION,1.0);v_worldPostion=POSITION;v_TexCoord=TEXCOORD_0;}"; // eslint-disable-line

/**
 * Engine built-in shader pool.
 */
class ShaderPool {
    /**
     * Created by Shader based on fragment and vertex shader code.
     */
    static init() {
        Shader.create('skybox', skyboxVs, skyboxFs);
        Shader.create('common', commonVs, commonFs);
        Shader.create('rayCastedGlobe', rayCastedGlobeVs, rayCastedGlobeFs);
    }
}

// 引入引擎的时候就将ShaderPool进行初始化
ShaderPool.init();
/**
 * The engine is the big steward of all content.
 */
class Engine {
    /** The canvas corresponding to the engine. */
    _canvas;
    // TODO: 考虑接入WebGL2.
    /** WebGL rendering context. */
    _gl;
    /** Current active scene. */
    activeScene;
    /** Used to calculate the interval between each frame rendering. */
    _time = new Time();
    /** Easy to destroy RAF. */
    _requestId;
    /** Rendered 2D texture when the image has not been loaded yet. */
    _whiteTexture2D;
    /** Rendered cube texture when the image has not been loaded yet. */
    _whiteTextureCube;
    get canvas() {
        return this._canvas;
    }
    get gl() {
        return this._gl;
    }
    get time() {
        return this._time;
    }
    /**
     * Animation rendering.
     */
    _animate = () => {
        this._requestId = requestAnimationFrame(this._animate);
        this.update();
    };
    /**
     * Engine instance.
     * @param canvasId HTML canvas id.
     */
    constructor(canvasId) {
        const canvas = document.getElementById(canvasId);
        if (canvas instanceof HTMLCanvasElement) {
            this._canvas = new Canvas(canvas);
            this._canvas.resizeByClientSize();
        }
        else {
            throw `canvas is not a HTMLCanvasElement!`;
        }
        const gl = canvas.getContext('webgl', {});
        if (!gl)
            throw `init webgl rendering context failure!`;
        this._gl = gl;
        // ! 这样实例化场景好吗？？？
        this.activeScene = new Scene(this);
        const whitePixel = new Uint8Array([255, 255, 255, 255]);
        const whiteTexture2D = new Texture2D(this, 1, 1, TextureFormat.R8G8B8A8, false);
        whiteTexture2D.setPixelBuffer(whitePixel);
        const whiteTextureCube = new TextureCube(this, 1, TextureFormat.R8G8B8A8, false);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveX, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeX, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveY, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeY, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveZ, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeZ, whitePixel);
        this._whiteTexture2D = whiteTexture2D;
        this._whiteTextureCube = whiteTextureCube;
    }
    /**
     * Update all data.
     */
    update() {
        const time = this._time;
        const deltaTime = time.deltaTime;
        const camera = this.activeScene.camera;
        // 更新相机位置信息
        camera.orbitControl.onUpdate(deltaTime);
        time.tick();
        this._render();
    }
    /**
     * Render based on updated data.
     */
    _render() {
        const gl = this._gl;
        gl.viewport(0, 0, this.canvas.width, this.canvas.height);
        // 这个放这没问题，不然背景画不出来
        gl.depthFunc(gl.LESS);
        // TODO: 这些状态不应该每次都进行获取
        const scene = this.activeScene;
        const globe = scene.globe;
        const camera = scene.camera;
        camera && camera.render();
        // 首先渲染地球
        const { mesh, material } = globe;
        const globeProgram = material.shader._getShaderProgram(this);
        globeProgram.uploadAll(globeProgram.sceneUniformBlock, scene.shaderData);
        globeProgram.uploadAll(globeProgram.cameraUniformBlock, camera.shaderData);
        globeProgram.uploadAll(globeProgram.materialUniformBlock, material.shaderData);
        mesh._draw(globeProgram, mesh.subMesh);
        // TODO: 这里要改成递归场景树渲染
        // entities.forEach((entity) => {
        //   const { mesh, material } = entity;
        //   // ! 这里每次都要去编译shader代码！！！
        //   // TODO: ShaderProgramPool
        //   const program = material.shader._getShaderProgram(this);
        //   // 上传相机的数据，这里还需要上传其他模块的数据，比如：场景，材质等
        //   // 场景的shaderData主要是光线
        //   // ! 这里每个实体都要
        //   program.uploadAll(program.sceneUniformBlock, scene.shaderData);
        //   program.uploadAll(program.cameraUniformBlock, camera.shaderData);
        //   program.uploadAll(program.materialUniformBlock, material.shaderData);
        //   mesh._draw(program, mesh.subMesh);
        // });
        // 最后渲染背景;
        // gl.depthFunc(gl.LEQUAL);
        // const { _mesh, _material } = scene.background;
        // // ! 每次渲染都去实例化不可以！而且bind不应该放在构造函数，否则无法切换program
        // const skyProgram = _material.shader._getShaderProgram(this);
        // skyProgram.uploadAll(skyProgram.cameraUniformBlock, camera.shaderData);
        // skyProgram.uploadAll(skyProgram.materialUniformBlock, _material.shaderData);
        // _mesh._draw(skyProgram, _mesh.subMesh);
    }
    /**
     * Timing and rendering.
     */
    resume() {
        this.time.reset();
        this._requestId = requestAnimationFrame(this._animate);
    }
    /**
     * Engine run.
     */
    run() {
        this.resume();
    }
}

export { Buffer, BufferBindFlag, BufferUsage, BufferUtil, Camera, Canvas, Color, DataType, Engine, Entity, GLCapabilityType, ImageMaterial, IndexBufferBinding, IndexFormat, Material, MathUtil, Matrix3, Matrix4, Mesh, MeshTopology, ModelMesh, ObjectValues, OrbitControl, PrimitiveMesh, Quaternion, Renderer, Scene, Shader, ShaderData, ShaderDataGroup, ShaderProgram, ShaderProperty, ShaderUniform, ShaderUniformBlock, Spherical, SubMesh, Time, Transform, Util, Vector2, Vector3, Vector4, VertexBufferBinding, VertexElement, VertexElementFormat, earthUrl, isArrayLike, removeFromArray, skyStarConfig };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZXNtLmpzIiwic291cmNlcyI6WyIuLi9zcmMvbWF0aC9NYXRoVXRpbC50cyIsIi4uL3NyYy9tYXRoL1ZlY3RvcjIudHMiLCIuLi9zcmMvbWF0aC9WZWN0b3IzLnRzIiwiLi4vc3JjL21hdGgvVmVjdG9yNC50cyIsIi4uL3NyYy9tYXRoL01hdHJpeDMudHMiLCIuLi9zcmMvbWF0aC9RdWF0ZXJuaW9uLnRzIiwiLi4vc3JjL21hdGgvTWF0cml4NC50cyIsIi4uL3NyYy9tYXRoL0NvbG9yLnRzIiwiLi4vc3JjL2NvcmUvZW51bXMvQmFja2dyb3VuZE1vZGUudHMiLCIuLi9zcmMvY29yZS9lbnVtcy9Db2xvclNwYWNlLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlclVuaWZvcm0udHMiLCIuLi9zcmMvY29yZS9zaGFkZXIvZW51bXMvU2hhZGVyRGF0YUdyb3VwLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlclVuaWZvcm1CbG9jay50cyIsIi4uL3NyYy9jb3JlL1JlbmRlcmVyLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlclByb2dyYW0udHMiLCIuLi9zcmMvY29yZS9zaGFkZXIvU2hhZGVyUHJvcGVydHkudHMiLCIuLi9zcmMvY29yZS9zaGFkZXIvU2hhZGVyLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlckRhdGEudHMiLCIuLi9zcmMvY29yZS9tYXRlcmlhbC9NYXRlcmlhbC50cyIsIi4uL3NyYy9jb3JlL3RleHR1cmUvZW51bXMvVGV4dHVyZUZvcm1hdC50cyIsIi4uL3NyYy9jb3JlL3RleHR1cmUvVGV4dHVyZS50cyIsIi4uL3NyYy9jb3JlL3RleHR1cmUvZW51bXMvVGV4dHVyZUZpbHRlck1vZGUudHMiLCIuLi9zcmMvY29yZS90ZXh0dXJlL2VudW1zL1RleHR1cmVXcmFwTW9kZS50cyIsIi4uL3NyYy9jb3JlL3RleHR1cmUvVGV4dHVyZTJELnRzIiwiLi4vc3JjL2NvcmUvdGV4dHVyZS9lbnVtcy9UZXh0dXJlQ3ViZUZhY2UudHMiLCIuLi9zcmMvY29yZS9tYXRlcmlhbC9JbWFnZU1hdGVyaWFsLnRzIiwiLi4vc3JjL2NvcmUvdGV4dHVyZS9UZXh0dXJlQ3ViZS50cyIsIi4uL3NyYy9jb3JlL21hdGVyaWFsL1NreUJveE1hdGVyaWFsLnRzIiwiLi4vc3JjL2NvcmUvZ3JhcGhpYy9lbnVtcy9CdWZmZXJCaW5kRmxhZy50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvZW51bXMvQnVmZmVyVXNhZ2UudHMiLCIuLi9zcmMvY29yZS9ncmFwaGljL2VudW1zL1ZlcnRleEVsZW1lbnRGb3JtYXQudHMiLCIuLi9zcmMvY29yZS9iYXNlL0NvbnN0YW50LnRzIiwiLi4vc3JjL2NvcmUvZ3JhcGhpYy9lbnVtcy9JbmRleEZvcm1hdC50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvQnVmZmVyVXRpbC50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvQnVmZmVyLnRzIiwiLi4vc3JjL2NvcmUvZ3JhcGhpYy9lbnVtcy9NZXNoVG9wb2xvZ3kudHMiLCIuLi9zcmMvY29yZS9ncmFwaGljL0luZGV4QnVmZmVyQmluZGluZy50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvU3ViTWVzaC50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvTWVzaC50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvVmVydGV4QnVmZmVyQmluZGluZy50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvVmVydGV4RWxlbWVudC50cyIsIi4uL3NyYy9jb3JlL21lc2gvTW9kZWxNZXNoLnRzIiwiLi4vc3JjL2NvcmUvbWVzaC9QcmltaXRpdmVNZXNoLnRzIiwiLi4vc3JjL2NvbmZpZy9lYXJ0aC50cyIsIi4uL3NyYy9jb25maWcvc2t5Ym94LnRzIiwiLi4vc3JjL2NvcmUvQmFja2dyb3VuZC50cyIsIi4uL3NyYy9jb250cm9scy9TcGhlcmljYWwudHMiLCIuLi9zcmMvY29udHJvbHMvT3JiaXRDb250cm9sLnRzIiwiLi4vc3JjL2NvcmUvYmFzZS9VdGlsLnRzIiwiLi4vc3JjL2NvcmUvVXBkYXRlRmxhZy50cyIsIi4uL3NyYy9jb3JlL0Jvb2xVcGRhdGVGbGFnLnRzIiwiLi4vc3JjL2NvcmUvVXBkYXRlRmxhZ01hbmFnZXIudHMiLCIuLi9zcmMvY29yZS9UcmFuc2Zvcm0udHMiLCIuLi9zcmMvY29yZS9DYW1lcmEudHMiLCIuLi9zcmMvY29yZS9saWdodGluZy9MaWdodC50cyIsIi4uL3NyYy9jb3JlL2xpZ2h0aW5nL1BvaW50TGlnaHQudHMiLCIuLi9zcmMvY29yZS9saWdodGluZy9BbWJpZW50TGlnaHQudHMiLCIuLi9zcmMvZ2VvZ3JhcGhpYy9FbGxpcHNvaWQudHMiLCIuLi9zcmMvZ2VvZ3JhcGhpYy9SYXlDYXN0ZWRHbG9iZS50cyIsIi4uL3NyYy9jb3JlL1NjZW5lLnRzIiwiLi4vc3JjL2NvcmUvRW50aXR5LnRzIiwiLi4vc3JjL2NvcmUvQ2FudmFzLnRzIiwiLi4vc3JjL2NvcmUvYmFzZS9UaW1lLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlclBvb2wudHMiLCIuLi9zcmMvY29yZS9FbmdpbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21tb24gdXRpbGl0eSBtZXRob2RzIGZvciBtYXRoIG9wZXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRoVXRpbCB7XG4gIC8qKiBUaGUgdmFsdWUgZm9yIHdoaWNoIGFsbCBhYnNvbHV0ZSBudW1iZXJzIHNtYWxsZXIgdGhhbiBhcmUgY29uc2lkZXJlZCBlcXVhbCB0byB6ZXJvLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgemVyb1RvbGVyYW5jZTogbnVtYmVyID0gMWUtNjtcbiAgLyoqIFRoZSBjb252ZXJzaW9uIGZhY3RvciB0aGF0IHJhZGlhbiB0byBkZWdyZWUuICovXG4gIHN0YXRpYyByZWFkb25seSByYWRUb0RlZ3JlZUZhY3RvcjogbnVtYmVyID0gMTgwIC8gTWF0aC5QSTtcbiAgLyoqIFRoZSBjb252ZXJzaW9uIGZhY3RvciB0aGF0IGRlZ3JlZSB0byByYWRpYW4uICovXG4gIHN0YXRpYyByZWFkb25seSBkZWdyZWVUb1JhZEZhY3RvcjogbnVtYmVyID0gTWF0aC5QSSAvIDE4MDtcblxuICAvKipcbiAgICogQ2xhbXBzIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAqIEBwYXJhbSB2IC0gVGhlIHNwZWNpZmllZCB2YWx1ZVxuICAgKiBAcGFyYW0gbWluIC0gVGhlIG1pbiB2YWx1ZVxuICAgKiBAcGFyYW0gbWF4IC0gVGhlIG1heCB2YWx1ZVxuICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIGNsYW1waW5nIGEgdmFsdWUgYmV0d2VlbiBtaW4gYW5kIG1heFxuICAgKi9cbiAgc3RhdGljIGNsYW1wKHY6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHYpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBhbmQgYiBhcmUgYWxtb3N0IGVxdWFscy5cbiAgICogVGhlIGFic29sdXRlIHZhbHVlIG9mIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gYSBhbmQgYiBpcyBjbG9zZSB0byB6ZXJvLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBsZWZ0IHZhbHVlIHRvIGNvbXBhcmVcbiAgICogQHBhcmFtIGIgLSBUaGUgcmlnaHQgdmFsdWUgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJucyBUcnVlIGlmIGEgYWxtb3N0IGVxdWFsIHRvIGIsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc3RhdGljIGVxdWFscyhhOiBudW1iZXIsIGI6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBNYXRoLmFicyhhIC0gYikgPD0gTWF0aFV0aWwuemVyb1RvbGVyYW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2IGlzIHBvdzIuXG4gICAqIEBwYXJhbSB2IC0gVGhlIHNwZWNpZmllZCB2XG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCB2IGlzIHBvdzIsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc3RhdGljIGlzUG93ZXJPZjIodjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh2ICYgKHYgLSAxKSkgPT09IDA7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IHRoZSBzcGVjaWZpZWQgciBmcm9tIHJhZGlhbiB0byBkZWdyZWUuXG4gICAqIEBwYXJhbSByIC0gVGhlIHNwZWNpZmllZCByXG4gICAqIEByZXR1cm5zIFRoZSBkZWdyZWUgdmFsdWVcbiAgICovXG4gIHN0YXRpYyByYWRpYW5Ub0RlZ3JlZShyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiByICogTWF0aFV0aWwucmFkVG9EZWdyZWVGYWN0b3I7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IHRoZSBzcGVjaWZpZWQgZCBmcm9tIGRlZ3JlZSB0byByYWRpYW4uXG4gICAqIEBwYXJhbSBkIC0gVGhlIHNwZWNpZmllZCBkXG4gICAqIEByZXR1cm5zIFRoZSByYWRpYW4gdmFsdWVcbiAgICovXG4gIHN0YXRpYyBkZWdyZWVUb1JhZGlhbihkOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBkICogTWF0aFV0aWwuZGVncmVlVG9SYWRGYWN0b3I7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGhVdGlsIH0gZnJvbSAnLi9NYXRoVXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBWZWN0b3IyIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgX3plcm8gPSBuZXcgVmVjdG9yMigwLjAsIDAuMCk7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RhdGljIHJlYWRvbmx5IF9vbmUgPSBuZXcgVmVjdG9yMigxLjAsIDEuMCk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHN1bSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIGFkZFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBhZGRcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzdW0gb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIsIG91dDogVmVjdG9yMik6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKyByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICsgcmlnaHQuX3k7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gc3VidHJhY3RcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gc3VidHJhY3RcbiAgICogQHBhcmFtIG91dCAtIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBzdWJ0cmFjdChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gbGVmdC5feCAtIHJpZ2h0Ll94O1xuICAgIG91dC5feSA9IGxlZnQuX3kgLSByaWdodC5feTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIG91dCAtIFRoZSBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbXVsdGlwbHkobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIsIG91dDogVmVjdG9yMik6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKiByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICogcmlnaHQuX3k7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGl2aXNvciBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIGRpdmlkZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBkaXZpZGVcbiAgICogQHBhcmFtIG91dCAtIFRoZSBkaXZpc29yIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGl2aWRlKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyLCBvdXQ6IFZlY3RvcjIpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94IC8gcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAvIHJpZ2h0Ll95O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gZG90XG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgdmVjdG9yIHRvIGRvdFxuICAgKiBAcmV0dXJucyBUaGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBkb3QobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIpOiBudW1iZXIge1xuICAgIHJldHVybiBsZWZ0Ll94ICogcmlnaHQuX3ggKyBsZWZ0Ll95ICogcmlnaHQuX3k7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGUgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZShsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMik6IG51bWJlciB7XG4gICAgY29uc3QgeCA9IHJpZ2h0Ll94IC0gbGVmdC5feDtcbiAgICBjb25zdCB5ID0gcmlnaHQuX3kgLSBsZWZ0Ll95O1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGRpc3RhbmNlIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGlzdGFuY2VTcXVhcmVkKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyKTogbnVtYmVyIHtcbiAgICBjb25zdCB4ID0gcmlnaHQuX3ggLSBsZWZ0Ll94O1xuICAgIGNvbnN0IHkgPSByaWdodC5feSAtIGxlZnQuX3k7XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmVjdG9ycyBhcmUgZXF1YWxzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gY29tcGFyZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBjb21wYXJlXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCB2ZWN0b3JzIGFyZSBlcXVhbHMsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBNYXRoVXRpbC5lcXVhbHMobGVmdC5feCwgcmlnaHQuX3gpICYmIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll95LCByaWdodC5feSk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHBhcmFtIHQgLSBUaGUgYmxlbmQgYW1vdW50IHdoZXJlIDAgcmV0dXJucyBsZWZ0IGFuZCAxIHJpZ2h0XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcmVzdWx0IG9mIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbGVycChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgdDogbnVtYmVyLCBvdXQ6IFZlY3RvcjIpOiB2b2lkIHtcbiAgICBjb25zdCB7IF94LCBfeSB9ID0gbGVmdDtcbiAgICBvdXQuX3ggPSBfeCArIChyaWdodC5feCAtIF94KSAqIHQ7XG4gICAgb3V0Ll95ID0gX3kgKyAocmlnaHQuX3kgLSBfeSkgKiB0O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHZlY3RvciBjb250YWluaW5nIHRoZSBsYXJnZXN0IGNvbXBvbmVudHMgb2YgdGhlIHNwZWNpZmllZCB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSB2ZWN0b3IgY29udGFpbmluZyB0aGUgbGFyZ2VzdCBjb21wb25lbnRzIG9mIHRoZSBzcGVjaWZpZWQgdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIG1heChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gTWF0aC5tYXgobGVmdC5feCwgcmlnaHQuX3gpO1xuICAgIG91dC5feSA9IE1hdGgubWF4KGxlZnQuX3ksIHJpZ2h0Ll95KTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSB2ZWN0b3IgY29udGFpbmluZyB0aGUgc21hbGxlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBjb250YWluaW5nIHRoZSBzbWFsbGVzdCBjb21wb25lbnRzIG9mIHRoZSBzcGVjaWZpZWQgdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIG1pbihsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gTWF0aC5taW4obGVmdC5feCwgcmlnaHQuX3gpO1xuICAgIG91dC5feSA9IE1hdGgubWluKGxlZnQuX3ksIHJpZ2h0Ll95KTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGEgZ2l2ZW4gdmVjdG9yLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSB2ZWN0b3IgdG8gbmVnYXRlXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdmVjdG9yIGZhY2luZyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uXG4gICAqL1xuICBzdGF0aWMgbmVnYXRlKGxlZnQ6IFZlY3RvcjIsIG91dDogVmVjdG9yMik6IHZvaWQge1xuICAgIG91dC5feCA9IC1sZWZ0Ll94O1xuICAgIG91dC5feSA9IC1sZWZ0Ll95O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSB2ZWN0b3IgaW50byBhIHVuaXQgdmVjdG9yLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgbm9ybWFsaXplZCB2ZWN0b3JcbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemUobGVmdDogVmVjdG9yMiwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3kgfSA9IGxlZnQ7XG4gICAgbGV0IGxlbiA9IE1hdGguc3FydChfeCAqIF94ICsgX3kgKiBfeSk7XG4gICAgaWYgKGxlbiA+IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICBvdXQuX3ggPSBfeCAqIGxlbjtcbiAgICAgIG91dC5feSA9IF95ICogbGVuO1xuICAgICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIGEgdmVjdG9yIGJ5IHRoZSBnaXZlbiB2YWx1ZS5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgdmVjdG9yIHRvIHNjYWxlXG4gICAqIEBwYXJhbSBzIC0gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgdmVjdG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc2NhbGVkIHZlY3RvclxuICAgKi9cbiAgc3RhdGljIHNjYWxlKGxlZnQ6IFZlY3RvcjIsIHM6IG51bWJlciwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gbGVmdC5feCAqIHM7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAqIHM7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF94OiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3k6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfb25WYWx1ZUNoYW5nZWQ6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl94O1xuICB9XG5cbiAgcHVibGljIHNldCB4KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl94ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl95O1xuICB9XG5cbiAgcHVibGljIHNldCB5KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl95ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBvZiBWZWN0b3IyLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLCBkZWZhdWx0IDBcbiAgICogQHBhcmFtIHkgLSBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvciwgZGVmYXVsdCAwXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKSB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHBhcmFtIHggLSBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgKiBAcGFyYW0geSAtIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzZXRWYWx1ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IFZlY3RvcjIge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHZlY3RvciBieSBhbiBhcnJheS5cbiAgICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5XG4gICAqIEBwYXJhbSBvZmZzZXQgLSBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBhcnJheVxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc2V0VmFsdWVCeUFycmF5KGFycmF5OiBBcnJheUxpa2U8bnVtYmVyPiwgb2Zmc2V0OiBudW1iZXIgPSAwKTogVmVjdG9yMiB7XG4gICAgdGhpcy5feCA9IGFycmF5W29mZnNldF07XG4gICAgdGhpcy5feSA9IGFycmF5W29mZnNldCArIDFdO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3VtIG9mIHRoaXMgdmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIGFkZChyaWdodDogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgIHRoaXMuX3ggKz0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSArPSByaWdodC5feTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyB2ZWN0b3IgYW5kIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc3VidHJhY3QocmlnaHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICB0aGlzLl94IC09IHJpZ2h0Ll94O1xuICAgIHRoaXMuX3kgLT0gcmlnaHQuX3k7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBwcm9kdWN0IG9mIHRoaXMgdmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIG11bHRpcGx5KHJpZ2h0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG4gICAgdGhpcy5feCAqPSByaWdodC5feDtcbiAgICB0aGlzLl95ICo9IHJpZ2h0Ll95O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGl2aXNvciBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBkaXZpZGUocmlnaHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICB0aGlzLl94IC89IHJpZ2h0Ll94O1xuICAgIHRoaXMuX3kgLz0gcmlnaHQuX3k7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgKi9cbiAgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBfeCwgX3kgfSA9IHRoaXM7XG4gICAgcmV0dXJuIE1hdGguc3FydChfeCAqIF94ICsgX3kgKiBfeSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhlIHNxdWFyZWQgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yXG4gICAqL1xuICBsZW5ndGhTcXVhcmVkKCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBfeCwgX3kgfSA9IHRoaXM7XG4gICAgcmV0dXJuIF94ICogX3ggKyBfeSAqIF95O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBuZWdhdGUoKTogVmVjdG9yMiB7XG4gICAgdGhpcy5feCA9IC10aGlzLl94O1xuICAgIHRoaXMuX3kgPSAtdGhpcy5feTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoaXMgdmVjdG9yIGludG8gYSB1bml0IHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIG5vcm1hbGl6ZSgpOiBWZWN0b3IyIHtcbiAgICBWZWN0b3IyLm5vcm1hbGl6ZSh0aGlzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIHZlY3RvciBieSB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAqIEBwYXJhbSBzIC0gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzY2FsZShzOiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICB0aGlzLl94ICo9IHM7XG4gICAgdGhpcy5feSAqPSBzO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIHZhbHVlIG9mIHRoaXMgdmVjdG9yIHRvIGFuIGFycmF5LlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGFycmF5XG4gICAqIEBwYXJhbSBvdXRPZmZzZXQgLSBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBhcnJheVxuICAgKi9cbiAgdG9BcnJheShvdXQ6IG51bWJlcltdIHwgRmxvYXQzMkFycmF5IHwgRmxvYXQ2NEFycmF5LCBvdXRPZmZzZXQ6IG51bWJlciA9IDApIHtcbiAgICBvdXRbb3V0T2Zmc2V0XSA9IHRoaXMuX3g7XG4gICAgb3V0W291dE9mZnNldCArIDFdID0gdGhpcy5feTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIEEgY2xvbmUgb2YgdGhpcyB2ZWN0b3JcbiAgICovXG4gIGNsb25lKCk6IFZlY3RvcjIge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLl94LCB0aGlzLl95KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhpcyB2ZWN0b3IgdG8gdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKi9cbiAgY2xvbmVUbyhvdXQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICBvdXQuX3ggPSB0aGlzLl94O1xuICAgIG91dC5feSA9IHRoaXMuX3k7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0aFV0aWwgfSBmcm9tICcuL01hdGhVdGlsJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuL01hdHJpeDQnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbic7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi9WZWN0b3I0JztcblxuLyoqXG4gKiBEZXNjcmliZXMgYSAzRC12ZWN0b3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWN0b3IzIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgX3plcm8gPSBuZXcgVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgX29uZSA9IG5ldyBWZWN0b3IzKDEuMCwgMS4wLCAxLjApO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBzdW0gb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBhZGRcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gYWRkXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc3VtIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgYWRkKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94ICsgcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSArIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogKyByaWdodC5fejtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIHN1YnRyYWN0KGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94IC0gcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAtIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogLSByaWdodC5fejtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIG91dCAtIFRoZSBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbXVsdGlwbHkobGVmdDogVmVjdG9yMywgcmlnaHQ6IFZlY3RvcjMsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKiByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICogcmlnaHQuX3k7XG4gICAgb3V0Ll96ID0gbGVmdC5feiAqIHJpZ2h0Ll96O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpdmlzb3Igb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBkaXZpZGVcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gZGl2aWRlXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgZGl2aXNvciBvZiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIGRpdmlkZShsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMywgb3V0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gbGVmdC5feCAvIHJpZ2h0Ll94O1xuICAgIG91dC5feSA9IGxlZnQuX3kgLyByaWdodC5feTtcbiAgICBvdXQuX3ogPSBsZWZ0Ll96IC8gcmlnaHQuX3o7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBkb3RcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gZG90XG4gICAqIEByZXR1cm5zIFRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIGRvdChsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMyk6IG51bWJlciB7XG4gICAgcmV0dXJuIGxlZnQuX3ggKiByaWdodC5feCArIGxlZnQuX3kgKiByaWdodC5feSArIGxlZnQuX3ogKiByaWdodC5fejtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gY3Jvc3NcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gY3Jvc3NcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgY3Jvc3MobGVmdDogVmVjdG9yMywgcmlnaHQ6IFZlY3RvcjMsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IGF4ID0gbGVmdC5feDtcbiAgICBjb25zdCBheSA9IGxlZnQuX3k7XG4gICAgY29uc3QgYXogPSBsZWZ0Ll96O1xuICAgIGNvbnN0IGJ4ID0gcmlnaHQuX3g7XG4gICAgY29uc3QgYnkgPSByaWdodC5feTtcbiAgICBjb25zdCBieiA9IHJpZ2h0Ll96O1xuXG4gICAgb3V0LnNldFZhbHVlKGF5ICogYnogLSBheiAqIGJ5LCBheiAqIGJ4IC0gYXggKiBieiwgYXggKiBieSAtIGF5ICogYngpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpc3RhbmNlIG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIGIgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGUgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZShhOiBWZWN0b3IzLCBiOiBWZWN0b3IzKTogbnVtYmVyIHtcbiAgICBjb25zdCB4ID0gYi5feCAtIGEuX3g7XG4gICAgY29uc3QgeSA9IGIuX3kgLSBhLl95O1xuICAgIGNvbnN0IHogPSBiLl96IC0gYS5fejtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGEgLSBUaGUgZmlyc3QgdmVjdG9yXG4gICAqIEBwYXJhbSBiIC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhlIHNxdWFyZWQgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZVNxdWFyZWQoYTogVmVjdG9yMywgYjogVmVjdG9yMyk6IG51bWJlciB7XG4gICAgY29uc3QgeCA9IGIuX3ggLSBhLl94O1xuICAgIGNvbnN0IHkgPSBiLl95IC0gYS5feTtcbiAgICBjb25zdCB6ID0gYi5feiAtIGEuX3o7XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2ZWN0b3JzIGFyZSBlcXVhbHMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBjb21wYXJlXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgdmVjdG9yIHRvIGNvbXBhcmVcbiAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMgYXJlIGVxdWFscywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll94LCByaWdodC5feCkgJiYgTWF0aFV0aWwuZXF1YWxzKGxlZnQuX3ksIHJpZ2h0Ll95KSAmJiBNYXRoVXRpbC5lcXVhbHMobGVmdC5feiwgcmlnaHQuX3opXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIGVuZCAtIFRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEBwYXJhbSB0IC0gVGhlIGJsZW5kIGFtb3VudCB3aGVyZSAwIHJldHVybnMgc3RhcnQgYW5kIDEgZW5kXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcmVzdWx0IG9mIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbGVycChzdGFydDogVmVjdG9yMywgZW5kOiBWZWN0b3IzLCB0OiBudW1iZXIsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gc3RhcnQ7XG4gICAgb3V0Ll94ID0gX3ggKyAoZW5kLl94IC0gX3gpICogdDtcbiAgICBvdXQuX3kgPSBfeSArIChlbmQuX3kgLSBfeSkgKiB0O1xuICAgIG91dC5feiA9IF96ICsgKGVuZC5feiAtIF96KSAqIHQ7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgdmVjdG9yIGNvbnRhaW5pbmcgdGhlIGxhcmdlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBjb250YWluaW5nIHRoZSBsYXJnZXN0IGNvbXBvbmVudHMgb2YgdGhlIHNwZWNpZmllZCB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbWF4KGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBNYXRoLm1heChsZWZ0Ll94LCByaWdodC5feCk7XG4gICAgb3V0Ll95ID0gTWF0aC5tYXgobGVmdC5feSwgcmlnaHQuX3kpO1xuICAgIG91dC5feiA9IE1hdGgubWF4KGxlZnQuX3osIHJpZ2h0Ll96KTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSB2ZWN0b3IgY29udGFpbmluZyB0aGUgc21hbGxlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBjb250YWluaW5nIHRoZSBzbWFsbGVzdCBjb21wb25lbnRzIG9mIHRoZSBzcGVjaWZpZWQgdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIG1pbihsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMywgb3V0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gTWF0aC5taW4obGVmdC5feCwgcmlnaHQuX3gpO1xuICAgIG91dC5feSA9IE1hdGgubWluKGxlZnQuX3ksIHJpZ2h0Ll95KTtcbiAgICBvdXQuX3ogPSBNYXRoLm1pbihsZWZ0Ll96LCByaWdodC5feik7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBhIGdpdmVuIHZlY3Rvci5cbiAgICogQHBhcmFtIGEgLSBUaGUgdmVjdG9yIHRvIG5lZ2F0ZVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBmYWNpbmcgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvblxuICAgKi9cbiAgc3RhdGljIG5lZ2F0ZShhOiBWZWN0b3IzLCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSAtYS5feDtcbiAgICBvdXQuX3kgPSAtYS5feTtcbiAgICBvdXQuX3ogPSAtYS5fejtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgdmVjdG9yIGludG8gYSB1bml0IHZlY3Rvci5cbiAgICogQHBhcmFtIGEgLSBUaGUgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIG5vcm1hbGl6ZWQgdmVjdG9yXG4gICAqL1xuICBzdGF0aWMgbm9ybWFsaXplKGE6IFZlY3RvcjMsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gYTtcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeik7XG4gICAgaWYgKGxlbiA+IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICBvdXQuc2V0VmFsdWUoX3ggKiBsZW4sIF95ICogbGVuLCBfeiAqIGxlbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIGEgdmVjdG9yIGJ5IHRoZSBnaXZlbiB2YWx1ZS5cbiAgICogQHBhcmFtIGEgLSBUaGUgdmVjdG9yIHRvIHNjYWxlXG4gICAqIEBwYXJhbSBzIC0gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgdmVjdG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc2NhbGVkIHZlY3RvclxuICAgKi9cbiAgc3RhdGljIHNjYWxlKGE6IFZlY3RvcjMsIHM6IG51bWJlciwgb3V0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gYS5feCAqIHM7XG4gICAgb3V0Ll95ID0gYS5feSAqIHM7XG4gICAgb3V0Ll96ID0gYS5feiAqIHM7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBub3JtYWwgdHJhbnNmb3JtYXRpb24gdXNpbmcgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAqIEByZW1hcmtzXG4gICAqIEEgbm9ybWFsIHRyYW5zZm9ybSBwZXJmb3JtcyB0aGUgdHJhbnNmb3JtYXRpb24gd2l0aCB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoZSB3IGNvbXBvbmVudFxuICAgKiBpcyB6ZXJvLiBUaGlzIGNhdXNlcyB0aGUgZm91cnRoIHJvdyBhbmQgZm91cnRoIGNvbHVtbiBvZiB0aGUgbWF0cml4IHRvIGJlIHVudXNlZC4gVGhlXG4gICAqIGVuZCByZXN1bHQgaXMgYSB2ZWN0b3IgdGhhdCBpcyBub3QgdHJhbnNsYXRlZCwgYnV0IGFsbCBvdGhlciB0cmFuc2Zvcm1hdGlvbiBwcm9wZXJ0aWVzXG4gICAqIGFwcGx5LiBUaGlzIGlzIG9mdGVuIHByZWZlcnJlZCBmb3Igbm9ybWFsIHZlY3RvcnMgYXMgbm9ybWFscyBwdXJlbHkgcmVwcmVzZW50IGRpcmVjdGlvblxuICAgKiByYXRoZXIgdGhhbiBsb2NhdGlvbiBiZWNhdXNlIG5vcm1hbCB2ZWN0b3JzIHNob3VsZCBub3QgYmUgdHJhbnNsYXRlZC5cbiAgICogQHBhcmFtIHYgLSBUaGUgbm9ybWFsIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIG0gLSBUaGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHRyYW5zZm9ybWVkIG5vcm1hbFxuICAgKi9cbiAgc3RhdGljIHRyYW5zZm9ybU5vcm1hbCh2OiBWZWN0b3IzLCBtOiBNYXRyaXg0LCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3ogfSA9IHY7XG4gICAgY29uc3QgZSA9IG0uZWxlbWVudHM7XG4gICAgb3V0Ll94ID0gX3ggKiBlWzBdICsgX3kgKiBlWzRdICsgX3ogKiBlWzhdO1xuICAgIG91dC5feSA9IF94ICogZVsxXSArIF95ICogZVs1XSArIF96ICogZVs5XTtcbiAgICBvdXQuX3ogPSBfeCAqIGVbMl0gKyBfeSAqIGVbNl0gKyBfeiAqIGVbMTBdO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgdHJhbnNmb3JtYXRpb24gdXNpbmcgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAqIEBwYXJhbSB2IC0gVGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIG0gLSBUaGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHRyYW5zZm9ybWVkIHZlY3RvcjNcbiAgICovXG4gIHN0YXRpYyB0cmFuc2Zvcm1Ub1ZlYzModjogVmVjdG9yMywgbTogTWF0cml4NCwgb3V0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96IH0gPSB2O1xuICAgIGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG4gICAgb3V0Ll94ID0gX3ggKiBlWzBdICsgX3kgKiBlWzRdICsgX3ogKiBlWzhdICsgZVsxMl07XG4gICAgb3V0Ll95ID0gX3ggKiBlWzFdICsgX3kgKiBlWzVdICsgX3ogKiBlWzldICsgZVsxM107XG4gICAgb3V0Ll96ID0gX3ggKiBlWzJdICsgX3kgKiBlWzZdICsgX3ogKiBlWzEwXSArIGVbMTRdO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgdHJhbnNmb3JtYXRpb24gZnJvbSB2ZWN0b3IzIHRvIHZlY3RvcjQgdXNpbmcgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAqIEBwYXJhbSB2IC0gVGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIG0gLSBUaGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHRyYW5zZm9ybWVkIHZlY3RvcjRcbiAgICovXG4gIHN0YXRpYyB0cmFuc2Zvcm1Ub1ZlYzQodjogVmVjdG9yMywgbTogTWF0cml4NCwgb3V0OiBWZWN0b3I0KTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96IH0gPSB2O1xuICAgIGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuICAgIG91dC5feCA9IF94ICogZVswXSArIF95ICogZVs0XSArIF96ICogZVs4XSArIGVbMTJdO1xuICAgIG91dC5feSA9IF94ICogZVsxXSArIF95ICogZVs1XSArIF96ICogZVs5XSArIGVbMTNdO1xuICAgIG91dC5feiA9IF94ICogZVsyXSArIF95ICogZVs2XSArIF96ICogZVsxMF0gKyBlWzE0XTtcbiAgICBvdXQuX3cgPSBfeCAqIGVbM10gKyBfeSAqIGVbN10gKyBfeiAqIGVbMTFdICsgZVsxNV07XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBjb29yZGluYXRlIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBBIGNvb3JkaW5hdGUgdHJhbnNmb3JtIHBlcmZvcm1zIHRoZSB0cmFuc2Zvcm1hdGlvbiB3aXRoIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhlIHcgY29tcG9uZW50XG4gICAqIGlzIG9uZS4gVGhlIGZvdXIgZGltZW5zaW9uYWwgdmVjdG9yIG9idGFpbmVkIGZyb20gdGhlIHRyYW5zZm9ybWF0aW9uIG9wZXJhdGlvbiBoYXMgZWFjaFxuICAgKiBjb21wb25lbnQgaW4gdGhlIHZlY3RvciBkaXZpZGVkIGJ5IHRoZSB3IGNvbXBvbmVudC4gVGhpcyBmb3JjZXMgdGhlIHctY29tcG9uZW50IHRvIGJlIG9uZSBhbmRcbiAgICogdGhlcmVmb3JlIG1ha2VzIHRoZSB2ZWN0b3IgaG9tb2dlbmVvdXMuIFRoZSBob21vZ2VuZW91cyB2ZWN0b3IgaXMgb2Z0ZW4gcHJlZmVycmVkIHdoZW4gd29ya2luZ1xuICAgKiB3aXRoIGNvb3JkaW5hdGVzIGFzIHRoZSB3IGNvbXBvbmVudCBjYW4gc2FmZWx5IGJlIGlnbm9yZWQuXG4gICAqIEBwYXJhbSB2IC0gVGhlIGNvb3JkaW5hdGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0gbSAtIFRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdHJhbnNmb3JtZWQgY29vcmRpbmF0ZXNcbiAgICovXG4gIHN0YXRpYyB0cmFuc2Zvcm1Db29yZGluYXRlKHY6IFZlY3RvcjMsIG06IE1hdHJpeDQsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gdjtcbiAgICBjb25zdCBlID0gbS5lbGVtZW50cztcbiAgICBsZXQgdyA9IF94ICogZVszXSArIF95ICogZVs3XSArIF96ICogZVsxMV0gKyBlWzE1XTtcbiAgICB3ID0gMS4wIC8gdztcblxuICAgIG91dC5feCA9IChfeCAqIGVbMF0gKyBfeSAqIGVbNF0gKyBfeiAqIGVbOF0gKyBlWzEyXSkgKiB3O1xuICAgIG91dC5feSA9IChfeCAqIGVbMV0gKyBfeSAqIGVbNV0gKyBfeiAqIGVbOV0gKyBlWzEzXSkgKiB3O1xuICAgIG91dC5feiA9IChfeCAqIGVbMl0gKyBfeSAqIGVbNl0gKyBfeiAqIGVbMTBdICsgZVsxNF0pICogdztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gdiAtIFRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gVGhlIHRyYW5zZm9ybSBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdHJhbnNmb3JtZWQgdmVjdG9yXG4gICAqL1xuICBzdGF0aWMgdHJhbnNmb3JtQnlRdWF0KHY6IFZlY3RvcjMsIHF1YXRlcm5pb246IFF1YXRlcm5pb24sIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gdjtcbiAgICBjb25zdCB7IF94OiBxeCwgX3k6IHF5LCBfejogcXosIF93OiBxdyB9ID0gcXVhdGVybmlvbjtcblxuICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjXG4gICAgY29uc3QgaXggPSBxdyAqIF94ICsgcXkgKiBfeiAtIHF6ICogX3k7XG4gICAgY29uc3QgaXkgPSBxdyAqIF95ICsgcXogKiBfeCAtIHF4ICogX3o7XG4gICAgY29uc3QgaXogPSBxdyAqIF96ICsgcXggKiBfeSAtIHF5ICogX3g7XG4gICAgY29uc3QgaXcgPSAtcXggKiBfeCAtIHF5ICogX3kgLSBxeiAqIF96O1xuXG4gICAgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuICAgIG91dC5feCA9IGl4ICogcXcgLSBpdyAqIHF4IC0gaXkgKiBxeiArIGl6ICogcXk7XG4gICAgb3V0Ll95ID0gaXkgKiBxdyAtIGl3ICogcXkgLSBpeiAqIHF4ICsgaXggKiBxejtcbiAgICBvdXQuX3ogPSBpeiAqIHF3IC0gaXcgKiBxeiAtIGl4ICogcXkgKyBpeSAqIHF4O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfeDogbnVtYmVyO1xuICAvKiogQGludGVybmFsICovXG4gIF95OiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3o6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfb25WYWx1ZUNoYW5nZWQ6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl94O1xuICB9XG5cbiAgcHVibGljIHNldCB4KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl94ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl95O1xuICB9XG5cbiAgcHVibGljIHNldCB5KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl95ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgeiBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl96O1xuICB9XG5cbiAgcHVibGljIHNldCB6KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl96ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBvZiBWZWN0b3IzLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLCBkZWZhdWx0IDBcbiAgICogQHBhcmFtIHkgLSBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvciwgZGVmYXVsdCAwXG4gICAqIEBwYXJhbSB6IC0gVGhlIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IsIGRlZmF1bHQgMFxuICAgKi9cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCwgejogbnVtYmVyID0gMCkge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3ogPSB6O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEBwYXJhbSB4IC0gVGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAgICogQHBhcmFtIHkgLSBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgKiBAcGFyYW0geiAtIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzZXRWYWx1ZSh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gICAgdGhpcy5feiA9IHo7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoaXMgdmVjdG9yIGJ5IGFuIGFycmF5LlxuICAgKiBAcGFyYW0gYXJyYXkgLSBUaGUgYXJyYXlcbiAgICogQHBhcmFtIG9mZnNldCAtIFRoZSBzdGFydCBvZmZzZXQgb2YgdGhlIGFycmF5XG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzZXRWYWx1ZUJ5QXJyYXkoYXJyYXk6IEFycmF5TGlrZTxudW1iZXI+LCBvZmZzZXQ6IG51bWJlciA9IDApOiBWZWN0b3IzIHtcbiAgICB0aGlzLl94ID0gYXJyYXlbb2Zmc2V0XTtcbiAgICB0aGlzLl95ID0gYXJyYXlbb2Zmc2V0ICsgMV07XG4gICAgdGhpcy5feiA9IGFycmF5W29mZnNldCArIDJdO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3VtIG9mIHRoaXMgdmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIGFkZChyaWdodDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHRoaXMuX3ggKz0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSArPSByaWdodC5feTtcbiAgICB0aGlzLl96ICs9IHJpZ2h0Ll96O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGlmZmVyZW5jZSBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzdWJ0cmFjdChyaWdodDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHRoaXMuX3ggLT0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSAtPSByaWdodC5feTtcbiAgICB0aGlzLl96IC09IHJpZ2h0Ll96O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBtdWx0aXBseShyaWdodDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHRoaXMuX3ggKj0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSAqPSByaWdodC5feTtcbiAgICB0aGlzLl96ICo9IHJpZ2h0Ll96O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGl2aXNvciBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBkaXZpZGUocmlnaHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICB0aGlzLl94IC89IHJpZ2h0Ll94O1xuICAgIHRoaXMuX3kgLz0gcmlnaHQuX3k7XG4gICAgdGhpcy5feiAvPSByaWdodC5fejtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yXG4gICAqL1xuICBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3ogfSA9IHRoaXM7XG4gICAgcmV0dXJuIE1hdGguc3FydChfeCAqIF94ICsgX3kgKiBfeSArIF96ICogX3opO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgKi9cbiAgbGVuZ3RoU3F1YXJlZCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gdGhpcztcbiAgICByZXR1cm4gX3ggKiBfeCArIF95ICogX3kgKyBfeiAqIF96O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBuZWdhdGUoKTogVmVjdG9yMyB7XG4gICAgdGhpcy5feCA9IC10aGlzLl94O1xuICAgIHRoaXMuX3kgPSAtdGhpcy5feTtcbiAgICB0aGlzLl96ID0gLXRoaXMuX3o7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGlzIHZlY3RvciBpbnRvIGEgdW5pdCB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBub3JtYWxpemUoKTogVmVjdG9yMyB7XG4gICAgVmVjdG9yMy5ub3JtYWxpemUodGhpcywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyB2ZWN0b3IgYnkgdGhlIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gcyAtIFRoZSBhbW91bnQgYnkgd2hpY2ggdG8gc2NhbGUgdGhlIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc2NhbGUoczogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgdGhpcy5feCAqPSBzO1xuICAgIHRoaXMuX3kgKj0gcztcbiAgICB0aGlzLl96ICo9IHM7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgdmFsdWUgb2YgdGhpcyB2ZWN0b3IgdG8gYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgYXJyYXlcbiAgICogQHBhcmFtIG91dE9mZnNldCAtIFRoZSBzdGFydCBvZmZzZXQgb2YgdGhlIGFycmF5XG4gICAqL1xuICB0b0FycmF5KG91dDogbnVtYmVyW10gfCBGbG9hdDMyQXJyYXkgfCBGbG9hdDY0QXJyYXksIG91dE9mZnNldDogbnVtYmVyID0gMCkge1xuICAgIG91dFtvdXRPZmZzZXRdID0gdGhpcy5feDtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMV0gPSB0aGlzLl95O1xuICAgIG91dFtvdXRPZmZzZXQgKyAyXSA9IHRoaXMuX3o7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgdmVjdG9yLlxuICAgKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoaXMgdmVjdG9yXG4gICAqL1xuICBjbG9uZSgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjModGhpcy5feCwgdGhpcy5feSwgdGhpcy5feik7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgdmVjdG9yIHRvIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICovXG4gIGNsb25lVG8ob3V0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgb3V0Ll94ID0gdGhpcy5feDtcbiAgICBvdXQuX3kgPSB0aGlzLl95O1xuICAgIG91dC5feiA9IHRoaXMuX3o7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHZlY3RvciBwZXJmb3JtcyBhIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiB1c2luZyB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cbiAgICogQHJlbWFya3NcbiAgICogQSBub3JtYWwgdHJhbnNmb3JtIHBlcmZvcm1zIHRoZSB0cmFuc2Zvcm1hdGlvbiB3aXRoIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhlIHcgY29tcG9uZW50XG4gICAqIGlzIHplcm8uIFRoaXMgY2F1c2VzIHRoZSBmb3VydGggcm93IGFuZCBmb3VydGggY29sdW1uIG9mIHRoZSBtYXRyaXggdG8gYmUgdW51c2VkLiBUaGVcbiAgICogZW5kIHJlc3VsdCBpcyBhIHZlY3RvciB0aGF0IGlzIG5vdCB0cmFuc2xhdGVkLCBidXQgYWxsIG90aGVyIHRyYW5zZm9ybWF0aW9uIHByb3BlcnRpZXNcbiAgICogYXBwbHkuIFRoaXMgaXMgb2Z0ZW4gcHJlZmVycmVkIGZvciBub3JtYWwgdmVjdG9ycyBhcyBub3JtYWxzIHB1cmVseSByZXByZXNlbnQgZGlyZWN0aW9uXG4gICAqIHJhdGhlciB0aGFuIGxvY2F0aW9uIGJlY2F1c2Ugbm9ybWFsIHZlY3RvcnMgc2hvdWxkIG5vdCBiZSB0cmFuc2xhdGVkLlxuICAgKiBAcGFyYW0gbSAtIFRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICB0cmFuc2Zvcm1Ob3JtYWwobTogTWF0cml4NCk6IFZlY3RvcjMge1xuICAgIFZlY3RvcjMudHJhbnNmb3JtTm9ybWFsKHRoaXMsIG0sIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgdmVjdG9yIHBlcmZvcm1zIGEgdHJhbnNmb3JtYXRpb24gdXNpbmcgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAqIEBwYXJhbSBtIC0gVGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIHRyYW5zZm9ybVRvVmVjMyhtOiBNYXRyaXg0KTogVmVjdG9yMyB7XG4gICAgVmVjdG9yMy50cmFuc2Zvcm1Ub1ZlYzModGhpcywgbSwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyB2ZWN0b3IgcGVyZm9ybXMgYSBjb29yZGluYXRlIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgKiBAcmVtYXJrc1xuICAgKiBBIGNvb3JkaW5hdGUgdHJhbnNmb3JtIHBlcmZvcm1zIHRoZSB0cmFuc2Zvcm1hdGlvbiB3aXRoIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhlIHcgY29tcG9uZW50XG4gICAqIGlzIG9uZS4gVGhlIGZvdXIgZGltZW5zaW9uYWwgdmVjdG9yIG9idGFpbmVkIGZyb20gdGhlIHRyYW5zZm9ybWF0aW9uIG9wZXJhdGlvbiBoYXMgZWFjaFxuICAgKiBjb21wb25lbnQgaW4gdGhlIHZlY3RvciBkaXZpZGVkIGJ5IHRoZSB3IGNvbXBvbmVudC4gVGhpcyBmb3JjZXMgdGhlIHctY29tcG9uZW50IHRvIGJlIG9uZSBhbmRcbiAgICogdGhlcmVmb3JlIG1ha2VzIHRoZSB2ZWN0b3IgaG9tb2dlbmVvdXMuIFRoZSBob21vZ2VuZW91cyB2ZWN0b3IgaXMgb2Z0ZW4gcHJlZmVycmVkIHdoZW4gd29ya2luZ1xuICAgKiB3aXRoIGNvb3JkaW5hdGVzIGFzIHRoZSB3IGNvbXBvbmVudCBjYW4gc2FmZWx5IGJlIGlnbm9yZWQuXG4gICAqIEBwYXJhbSBtIC0gVGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIHRyYW5zZm9ybUNvb3JkaW5hdGUobTogTWF0cml4NCk6IFZlY3RvcjMge1xuICAgIFZlY3RvcjMudHJhbnNmb3JtQ29vcmRpbmF0ZSh0aGlzLCBtLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHZlY3RvciBwZXJmb3JtcyBhIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiAtIFRoZSB0cmFuc2Zvcm0gcXVhdGVybmlvblxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgdHJhbnNmb3JtQnlRdWF0KHF1YXRlcm5pb246IFF1YXRlcm5pb24pOiBWZWN0b3IzIHtcbiAgICBWZWN0b3IzLnRyYW5zZm9ybUJ5UXVhdCh0aGlzLCBxdWF0ZXJuaW9uLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0aFV0aWwgfSBmcm9tICcuL01hdGhVdGlsJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuL01hdHJpeDQnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbic7XG5cbi8qKlxuICogRGVzY3JpYmVzIGEgNEQtdmVjdG9yLlxuICovXG5leHBvcnQgY2xhc3MgVmVjdG9yNCB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RhdGljIHJlYWRvbmx5IF96ZXJvID0gbmV3IFZlY3RvcjQoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgX29uZSA9IG5ldyBWZWN0b3I0KDEuMCwgMS4wLCAxLjAsIDEuMCk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHN1bSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIGFkZFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBhZGRcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzdW0gb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogVmVjdG9yNCwgcmlnaHQ6IFZlY3RvcjQsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKyByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICsgcmlnaHQuX3k7XG4gICAgb3V0Ll96ID0gbGVmdC5feiArIHJpZ2h0Ll96O1xuICAgIG91dC5fdyA9IGxlZnQuX3cgKyByaWdodC5fdztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIHN1YnRyYWN0KGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94IC0gcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAtIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogLSByaWdodC5fejtcbiAgICBvdXQuX3cgPSBsZWZ0Ll93IC0gcmlnaHQuX3c7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIG11bHRpcGx5XG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgdmVjdG9yIHRvIG11bHRpcGx5XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcHJvZHVjdCBvZiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIG11bHRpcGx5KGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94ICogcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAqIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogKiByaWdodC5fejtcbiAgICBvdXQuX3cgPSBsZWZ0Ll93ICogcmlnaHQuX3c7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGl2aXNvciBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIGRpdmlkZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBkaXZpZGVcbiAgICogQHBhcmFtIG91dCAtIFRoZSBkaXZpc29yIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGl2aWRlKGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94IC8gcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAvIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogLyByaWdodC5fejtcbiAgICBvdXQuX3cgPSBsZWZ0Ll93IC8gcmlnaHQuX3c7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBkb3RcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gZG90XG4gICAqIEByZXR1cm5zIFRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIGRvdChsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGxlZnQuX3ggKiByaWdodC5feCArIGxlZnQuX3kgKiByaWdodC5feSArIGxlZnQuX3ogKiByaWdodC5feiArIGxlZnQuX3cgKiByaWdodC5fdztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaXN0YW5jZSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGEgLSBUaGUgZmlyc3QgdmVjdG9yXG4gICAqIEBwYXJhbSBiIC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhlIGRpc3RhbmNlIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGlzdGFuY2UoYTogVmVjdG9yNCwgYjogVmVjdG9yNCk6IG51bWJlciB7XG4gICAgY29uc3QgeCA9IGIuX3ggLSBhLl94O1xuICAgIGNvbnN0IHkgPSBiLl95IC0gYS5feTtcbiAgICBjb25zdCB6ID0gYi5feiAtIGEuX3o7XG4gICAgY29uc3QgdyA9IGIuX3cgLSBhLl93O1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHNxdWFyZWQgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBhIC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gYiAtIFRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGRpc3RhbmNlIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGlzdGFuY2VTcXVhcmVkKGE6IFZlY3RvcjQsIGI6IFZlY3RvcjQpOiBudW1iZXIge1xuICAgIGNvbnN0IHggPSBiLl94IC0gYS5feDtcbiAgICBjb25zdCB5ID0gYi5feSAtIGEuX3k7XG4gICAgY29uc3QgeiA9IGIuX3ogLSBhLl96O1xuICAgIGNvbnN0IHcgPSBiLl93IC0gYS5fdztcbiAgICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmVjdG9ycyBhcmUgZXF1YWxzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gY29tcGFyZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBjb21wYXJlXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCB2ZWN0b3JzIGFyZSBlcXVhbHMsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5feCwgcmlnaHQuX3gpICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5feSwgcmlnaHQuX3kpICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5feiwgcmlnaHQuX3opICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5fdywgcmlnaHQuX3cpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIGVuZCAtIFRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEBwYXJhbSB0IC0gVGhlIGJsZW5kIGFtb3VudCB3aGVyZSAwIHJldHVybnMgc3RhcnQgYW5kIDEgZW5kXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcmVzdWx0IG9mIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbGVycChzdGFydDogVmVjdG9yNCwgZW5kOiBWZWN0b3I0LCB0OiBudW1iZXIsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHN0YXJ0O1xuICAgIG91dC5feCA9IF94ICsgKGVuZC5feCAtIF94KSAqIHQ7XG4gICAgb3V0Ll95ID0gX3kgKyAoZW5kLl95IC0gX3kpICogdDtcbiAgICBvdXQuX3ogPSBfeiArIChlbmQuX3ogLSBfeikgKiB0O1xuICAgIG91dC5fdyA9IF93ICsgKGVuZC5fdyAtIF93KSAqIHQ7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgdmVjdG9yIGNvbnRhaW5pbmcgdGhlIGxhcmdlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBjb250YWluaW5nIHRoZSBsYXJnZXN0IGNvbXBvbmVudHMgb2YgdGhlIHNwZWNpZmllZCB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbWF4KGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBNYXRoLm1heChsZWZ0Ll94LCByaWdodC5feCk7XG4gICAgb3V0Ll95ID0gTWF0aC5tYXgobGVmdC5feSwgcmlnaHQuX3kpO1xuICAgIG91dC5feiA9IE1hdGgubWF4KGxlZnQuX3osIHJpZ2h0Ll96KTtcbiAgICBvdXQuX3cgPSBNYXRoLm1heChsZWZ0Ll93LCByaWdodC5fdyk7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgdmVjdG9yIGNvbnRhaW5pbmcgdGhlIHNtYWxsZXN0IGNvbXBvbmVudHMgb2YgdGhlIHNwZWNpZmllZCB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSB2ZWN0b3IgY29udGFpbmluZyB0aGUgc21hbGxlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBtaW4obGVmdDogVmVjdG9yNCwgcmlnaHQ6IFZlY3RvcjQsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIG91dC5feCA9IE1hdGgubWluKGxlZnQuX3gsIHJpZ2h0Ll94KTtcbiAgICBvdXQuX3kgPSBNYXRoLm1pbihsZWZ0Ll95LCByaWdodC5feSk7XG4gICAgb3V0Ll96ID0gTWF0aC5taW4obGVmdC5feiwgcmlnaHQuX3opO1xuICAgIG91dC5fdyA9IE1hdGgubWluKGxlZnQuX3csIHJpZ2h0Ll93KTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGEgZ2l2ZW4gdmVjdG9yLlxuICAgKiBAcGFyYW0gYSAtIFRoZSB2ZWN0b3IgdG8gbmVnYXRlXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdmVjdG9yIGZhY2luZyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uXG4gICAqL1xuICBzdGF0aWMgbmVnYXRlKGE6IFZlY3RvcjQsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIG91dC5feCA9IC1hLl94O1xuICAgIG91dC5feSA9IC1hLl95O1xuICAgIG91dC5feiA9IC1hLl96O1xuICAgIG91dC5fdyA9IC1hLl93O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSB2ZWN0b3IgaW50byBhIHVuaXQgdmVjdG9yLlxuICAgKiBAcGFyYW0gYSAtIFRoZSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgbm9ybWFsaXplZCB2ZWN0b3JcbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemUoYTogVmVjdG9yNCwgb3V0OiBWZWN0b3I0KTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96LCBfdyB9ID0gYTtcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeiArIF93ICogX3cpO1xuICAgIGlmIChsZW4gPiBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgb3V0Ll94ID0gX3ggKiBsZW47XG4gICAgICBvdXQuX3kgPSBfeSAqIGxlbjtcbiAgICAgIG91dC5feiA9IF96ICogbGVuO1xuICAgICAgb3V0Ll93ID0gX3cgKiBsZW47XG4gICAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgYSB2ZWN0b3IgYnkgdGhlIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gYSAtIFRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAgICogQHBhcmFtIHMgLSBUaGUgYW1vdW50IGJ5IHdoaWNoIHRvIHNjYWxlIHRoZSB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzY2FsZWQgdmVjdG9yXG4gICAqL1xuICBzdGF0aWMgc2NhbGUoYTogVmVjdG9yNCwgczogbnVtYmVyLCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBhLl94ICogcztcbiAgICBvdXQuX3kgPSBhLl95ICogcztcbiAgICBvdXQuX3ogPSBhLl96ICogcztcbiAgICBvdXQuX3cgPSBhLl93ICogcztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgKiBAcGFyYW0gdiAtIFRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSBtIC0gVGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSB0cmFuc2Zvcm1lZCB2ZWN0b3IzXG4gICAqL1xuICBzdGF0aWMgdHJhbnNmb3JtKHY6IFZlY3RvcjQsIG06IE1hdHJpeDQsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHY7XG4gICAgY29uc3QgZSA9IG0uZWxlbWVudHM7XG4gICAgb3V0Ll94ID0gX3ggKiBlWzBdICsgX3kgKiBlWzRdICsgX3ogKiBlWzhdICsgX3cgKiBlWzEyXTtcbiAgICBvdXQuX3kgPSBfeCAqIGVbMV0gKyBfeSAqIGVbNV0gKyBfeiAqIGVbOV0gKyBfdyAqIGVbMTNdO1xuICAgIG91dC5feiA9IF94ICogZVsyXSArIF95ICogZVs2XSArIF96ICogZVsxMF0gKyBfdyAqIGVbMTRdO1xuICAgIG91dC5fdyA9IF94ICogZVszXSArIF95ICogZVs3XSArIF96ICogZVsxMV0gKyBfdyAqIGVbMTVdO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgdHJhbnNmb3JtYXRpb24gdXNpbmcgdGhlIGdpdmVuIHF1YXRlcm5pb24uXG4gICAqIEBwYXJhbSB2IC0gVGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHEgLSBUaGUgdHJhbnNmb3JtIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIG91dCAtIFRoZSB0cmFuc2Zvcm1lZCB2ZWN0b3JcbiAgICovXG4gIHN0YXRpYyB0cmFuc2Zvcm1CeVF1YXQodjogVmVjdG9yNCwgcTogUXVhdGVybmlvbiwgb3V0OiBWZWN0b3I0KTogdm9pZCB7XG4gICAgY29uc3QgeyBfeDogeCwgX3k6IHksIF96OiB6LCBfdzogdyB9ID0gdjtcbiAgICBjb25zdCBxeCA9IHEuX3g7XG4gICAgY29uc3QgcXkgPSBxLl95O1xuICAgIGNvbnN0IHF6ID0gcS5fejtcbiAgICBjb25zdCBxdyA9IHEuX3c7XG5cbiAgICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xuICAgIGNvbnN0IGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuICAgIGNvbnN0IGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuICAgIGNvbnN0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuICAgIGNvbnN0IGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcblxuICAgIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcbiAgICBvdXQuX3ggPSBpeCAqIHF3IC0gaXcgKiBxeCAtIGl5ICogcXogKyBpeiAqIHF5O1xuICAgIG91dC5feSA9IGl5ICogcXcgLSBpdyAqIHF5IC0gaXogKiBxeCArIGl4ICogcXo7XG4gICAgb3V0Ll96ID0gaXogKiBxdyAtIGl3ICogcXogLSBpeCAqIHF5ICsgaXkgKiBxeDtcbiAgICBvdXQuX3cgPSB3O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfeDogbnVtYmVyO1xuICAvKiogQGludGVybmFsICovXG4gIF95OiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3o6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfdzogbnVtYmVyO1xuICAvKiogQGludGVybmFsICovXG4gIF9vblZhbHVlQ2hhbmdlZDogKCkgPT4gdm9pZCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGdldCB4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3g7XG4gIH1cblxuICBwdWJsaWMgc2V0IHgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3ggPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3k7XG4gIH1cblxuICBwdWJsaWMgc2V0IHkodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3kgPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGdldCB6KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3o7XG4gIH1cblxuICBwdWJsaWMgc2V0IHoodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3ogPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB3IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGdldCB3KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3c7XG4gIH1cblxuICBwdWJsaWMgc2V0IHcodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3cgPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIG9mIFZlY3RvcjQuXG4gICAqIEBwYXJhbSB4IC0gVGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IsIGRlZmF1bHQgMFxuICAgKiBAcGFyYW0geSAtIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLCBkZWZhdWx0IDBcbiAgICogQHBhcmFtIHogLSBUaGUgeiBjb21wb25lbnQgb2YgdGhlIHZlY3RvciwgZGVmYXVsdCAwXG4gICAqIEBwYXJhbSB3IC0gVGhlIHcgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IsIGRlZmF1bHQgMFxuICAgKi9cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCwgejogbnVtYmVyID0gMCwgdzogbnVtYmVyID0gMCkge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3ogPSB6O1xuICAgIHRoaXMuX3cgPSB3O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEBwYXJhbSB4IC0gVGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAgICogQHBhcmFtIHkgLSBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgKiBAcGFyYW0geiAtIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gICAqIEBwYXJhbSB3IC0gVGhlIHcgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIHNldFZhbHVlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHc6IG51bWJlcik6IFZlY3RvcjQge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3ogPSB6O1xuICAgIHRoaXMuX3cgPSB3O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHZlY3RvciBieSBhbiBhcnJheS5cbiAgICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5XG4gICAqIEBwYXJhbSBvZmZzZXQgLSBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBhcnJheVxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc2V0VmFsdWVCeUFycmF5KGFycmF5OiBBcnJheUxpa2U8bnVtYmVyPiwgb2Zmc2V0OiBudW1iZXIgPSAwKTogVmVjdG9yNCB7XG4gICAgdGhpcy5feCA9IGFycmF5W29mZnNldF07XG4gICAgdGhpcy5feSA9IGFycmF5W29mZnNldCArIDFdO1xuICAgIHRoaXMuX3ogPSBhcnJheVtvZmZzZXQgKyAyXTtcbiAgICB0aGlzLl93ID0gYXJyYXlbb2Zmc2V0ICsgM107XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBzdW0gb2YgdGhpcyB2ZWN0b3IgYW5kIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgYWRkKHJpZ2h0OiBWZWN0b3I0KTogVmVjdG9yNCB7XG4gICAgdGhpcy5feCArPSByaWdodC5feDtcbiAgICB0aGlzLl95ICs9IHJpZ2h0Ll95O1xuICAgIHRoaXMuX3ogKz0gcmlnaHQuX3o7XG4gICAgdGhpcy5fdyArPSByaWdodC5fdztcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyB2ZWN0b3IgYW5kIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gcmlnaHQgLSB0aGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc3VidHJhY3QocmlnaHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcbiAgICB0aGlzLl94IC09IHJpZ2h0Ll94O1xuICAgIHRoaXMuX3kgLT0gcmlnaHQuX3k7XG4gICAgdGhpcy5feiAtPSByaWdodC5fejtcbiAgICB0aGlzLl93IC09IHJpZ2h0Ll93O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIHRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBtdWx0aXBseShyaWdodDogVmVjdG9yNCk6IFZlY3RvcjQge1xuICAgIHRoaXMuX3ggKj0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSAqPSByaWdodC5feTtcbiAgICB0aGlzLl96ICo9IHJpZ2h0Ll96O1xuICAgIHRoaXMuX3cgKj0gcmlnaHQuX3c7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaXZpc29yIG9mIHRoaXMgdmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gdGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIGRpdmlkZShyaWdodDogVmVjdG9yNCk6IFZlY3RvcjQge1xuICAgIHRoaXMuX3ggLz0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSAvPSByaWdodC5feTtcbiAgICB0aGlzLl96IC89IHJpZ2h0Ll96O1xuICAgIHRoaXMuX3cgLz0gcmlnaHQuX3c7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgKi9cbiAgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96LCBfdyB9ID0gdGhpcztcbiAgICByZXR1cm4gTWF0aC5zcXJ0KF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeiArIF93ICogX3cpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgKi9cbiAgbGVuZ3RoU3F1YXJlZCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHRoaXM7XG4gICAgcmV0dXJuIF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeiArIF93ICogX3c7XG4gIH1cblxuICAvKipcbiAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIG5lZ2F0ZSgpOiBWZWN0b3I0IHtcbiAgICB0aGlzLl94ID0gLXRoaXMuX3g7XG4gICAgdGhpcy5feSA9IC10aGlzLl95O1xuICAgIHRoaXMuX3ogPSAtdGhpcy5fejtcbiAgICB0aGlzLl93ID0gLXRoaXMuX3c7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGlzIHZlY3RvciBpbnRvIGEgdW5pdCB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBub3JtYWxpemUoKTogVmVjdG9yNCB7XG4gICAgVmVjdG9yNC5ub3JtYWxpemUodGhpcywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyB2ZWN0b3IgYnkgdGhlIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gcyAtIFRoZSBhbW91bnQgYnkgd2hpY2ggdG8gc2NhbGUgdGhlIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc2NhbGUoczogbnVtYmVyKTogVmVjdG9yNCB7XG4gICAgdGhpcy5feCAqPSBzO1xuICAgIHRoaXMuX3kgKj0gcztcbiAgICB0aGlzLl96ICo9IHM7XG4gICAgdGhpcy5fdyAqPSBzO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIHZhbHVlIG9mIHRoaXMgdmVjdG9yIHRvIGFuIGFycmF5LlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGFycmF5XG4gICAqIEBwYXJhbSBvdXRPZmZzZXQgLSBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBhcnJheVxuICAgKi9cbiAgdG9BcnJheShvdXQ6IG51bWJlcltdIHwgRmxvYXQzMkFycmF5IHwgRmxvYXQ2NEFycmF5LCBvdXRPZmZzZXQ6IG51bWJlciA9IDApIHtcbiAgICBvdXRbb3V0T2Zmc2V0XSA9IHRoaXMuX3g7XG4gICAgb3V0W291dE9mZnNldCArIDFdID0gdGhpcy5feTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMl0gPSB0aGlzLl96O1xuICAgIG91dFtvdXRPZmZzZXQgKyAzXSA9IHRoaXMuX3c7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgdmVjdG9yLlxuICAgKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoaXMgdmVjdG9yXG4gICAqL1xuICBjbG9uZSgpOiBWZWN0b3I0IHtcbiAgICBsZXQgcmV0ID0gbmV3IFZlY3RvcjQodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhpcyB2ZWN0b3IgdG8gdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKi9cbiAgY2xvbmVUbyhvdXQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcbiAgICBvdXQuX3ggPSB0aGlzLl94O1xuICAgIG91dC5feSA9IHRoaXMuX3k7XG4gICAgb3V0Ll96ID0gdGhpcy5fejtcbiAgICBvdXQuX3cgPSB0aGlzLl93O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGhVdGlsIH0gZnJvbSAnLi9NYXRoVXRpbCc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi9NYXRyaXg0JztcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuL1F1YXRlcm5pb24nO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4vVmVjdG9yMic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIDN4MyBtYXRoZW1hdGljYWwgbWF0cml4LlxuICovXG5leHBvcnQgY2xhc3MgTWF0cml4MyB7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBzdW0gb2YgdHdvIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBtYXRyaXggdG8gYWRkXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgbWF0cml4IHRvIGFkZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHN1bSBvZiB0d28gbWF0cmljZXNcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMsIG91dDogTWF0cml4Myk6IHZvaWQge1xuICAgIGNvbnN0IGxlID0gbGVmdC5lbGVtZW50cztcbiAgICBjb25zdCByZSA9IHJpZ2h0LmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgb2VbMF0gPSBsZVswXSArIHJlWzBdO1xuICAgIG9lWzFdID0gbGVbMV0gKyByZVsxXTtcbiAgICBvZVsyXSA9IGxlWzJdICsgcmVbMl07XG5cbiAgICBvZVszXSA9IGxlWzNdICsgcmVbM107XG4gICAgb2VbNF0gPSBsZVs0XSArIHJlWzRdO1xuICAgIG9lWzVdID0gbGVbNV0gKyByZVs1XTtcblxuICAgIG9lWzZdID0gbGVbNl0gKyByZVs2XTtcbiAgICBvZVs3XSA9IGxlWzddICsgcmVbN107XG4gICAgb2VbOF0gPSBsZVs4XSArIHJlWzhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gbWF0cmljZXMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IG1hdHJpeCB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIG1hdHJpeCB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gbWF0cmljZXNcbiAgICovXG4gIHN0YXRpYyBzdWJ0cmFjdChsZWZ0OiBNYXRyaXgzLCByaWdodDogTWF0cml4Mywgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgbGUgPSBsZWZ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHJlID0gcmlnaHQuZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBvZVswXSA9IGxlWzBdIC0gcmVbMF07XG4gICAgb2VbMV0gPSBsZVsxXSAtIHJlWzFdO1xuICAgIG9lWzJdID0gbGVbMl0gLSByZVsyXTtcblxuICAgIG9lWzNdID0gbGVbM10gLSByZVszXTtcbiAgICBvZVs0XSA9IGxlWzRdIC0gcmVbNF07XG4gICAgb2VbNV0gPSBsZVs1XSAtIHJlWzVdO1xuXG4gICAgb2VbNl0gPSBsZVs2XSAtIHJlWzZdO1xuICAgIG9lWzddID0gbGVbN10gLSByZVs3XTtcbiAgICBvZVs4XSA9IGxlWzhdIC0gcmVbOF07XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0d28gbWF0cmljZXMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IG1hdHJpeCB0byBtdWx0aXBseVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIG1hdHJpeCB0byBtdWx0aXBseVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHByb2R1Y3Qgb2YgdHdvIG1hdHJpY2VzXG4gICAqL1xuICBzdGF0aWMgbXVsdGlwbHkobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMsIG91dDogTWF0cml4Myk6IHZvaWQge1xuICAgIGNvbnN0IGxlID0gbGVmdC5lbGVtZW50cztcbiAgICBjb25zdCByZSA9IHJpZ2h0LmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgbDExID0gbGVbMF0sXG4gICAgICBsMTIgPSBsZVsxXSxcbiAgICAgIGwxMyA9IGxlWzJdO1xuICAgIGNvbnN0IGwyMSA9IGxlWzNdLFxuICAgICAgbDIyID0gbGVbNF0sXG4gICAgICBsMjMgPSBsZVs1XTtcbiAgICBjb25zdCBsMzEgPSBsZVs2XSxcbiAgICAgIGwzMiA9IGxlWzddLFxuICAgICAgbDMzID0gbGVbOF07XG5cbiAgICBjb25zdCByMTEgPSByZVswXSxcbiAgICAgIHIxMiA9IHJlWzFdLFxuICAgICAgcjEzID0gcmVbMl07XG4gICAgY29uc3QgcjIxID0gcmVbM10sXG4gICAgICByMjIgPSByZVs0XSxcbiAgICAgIHIyMyA9IHJlWzVdO1xuICAgIGNvbnN0IHIzMSA9IHJlWzZdLFxuICAgICAgcjMyID0gcmVbN10sXG4gICAgICByMzMgPSByZVs4XTtcblxuICAgIG9lWzBdID0gbDExICogcjExICsgbDIxICogcjEyICsgbDMxICogcjEzO1xuICAgIG9lWzFdID0gbDEyICogcjExICsgbDIyICogcjEyICsgbDMyICogcjEzO1xuICAgIG9lWzJdID0gbDEzICogcjExICsgbDIzICogcjEyICsgbDMzICogcjEzO1xuXG4gICAgb2VbM10gPSBsMTEgKiByMjEgKyBsMjEgKiByMjIgKyBsMzEgKiByMjM7XG4gICAgb2VbNF0gPSBsMTIgKiByMjEgKyBsMjIgKiByMjIgKyBsMzIgKiByMjM7XG4gICAgb2VbNV0gPSBsMTMgKiByMjEgKyBsMjMgKiByMjIgKyBsMzMgKiByMjM7XG5cbiAgICBvZVs2XSA9IGwxMSAqIHIzMSArIGwyMSAqIHIzMiArIGwzMSAqIHIzMztcbiAgICBvZVs3XSA9IGwxMiAqIHIzMSArIGwyMiAqIHIzMiArIGwzMiAqIHIzMztcbiAgICBvZVs4XSA9IGwxMyAqIHIzMSArIGwyMyAqIHIzMiArIGwzMyAqIHIzMztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBtYXRyaWNlcyBhcmUgZXF1YWxzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBtYXRyaXggdG8gY29tcGFyZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIG1hdHJpeCB0byBjb21wYXJlXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCBtYXRyaWNlcyBhcmUgZXF1YWxzLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIHN0YXRpYyBlcXVhbHMobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMpOiBib29sZWFuIHtcbiAgICBjb25zdCBsZSA9IGxlZnQuZWxlbWVudHM7XG4gICAgY29uc3QgcmUgPSByaWdodC5lbGVtZW50cztcblxuICAgIHJldHVybiAoXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbMF0sIHJlWzBdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzFdLCByZVsxXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsyXSwgcmVbMl0pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbM10sIHJlWzNdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzRdLCByZVs0XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVs1XSwgcmVbNV0pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbNl0sIHJlWzZdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzddLCByZVs3XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVs4XSwgcmVbOF0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gc3RhcnQgLSBUaGUgZmlyc3QgbWF0cml4XG4gICAqIEBwYXJhbSBlbmQgLSBUaGUgc2Vjb25kIG1hdHJpeFxuICAgKiBAcGFyYW0gdCAtIFRoZSBibGVuZCBhbW91bnQgd2hlcmUgMCByZXR1cm5zIHN0YXJ0IGFuZCAxIGVuZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHJlc3VsdCBvZiBsaW5lYXIgYmxlbmRpbmcgYmV0d2VlbiB0d28gbWF0cmljZXNcbiAgICovXG4gIHN0YXRpYyBsZXJwKHN0YXJ0OiBNYXRyaXgzLCBlbmQ6IE1hdHJpeDMsIHQ6IG51bWJlciwgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3Qgc2UgPSBzdGFydC5lbGVtZW50cztcbiAgICBjb25zdCBlZSA9IGVuZC5lbGVtZW50cztcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBjb25zdCBpbnYgPSAxLjAgLSB0O1xuXG4gICAgb2VbMF0gPSBzZVswXSAqIGludiArIGVlWzBdICogdDtcbiAgICBvZVsxXSA9IHNlWzFdICogaW52ICsgZWVbMV0gKiB0O1xuICAgIG9lWzJdID0gc2VbMl0gKiBpbnYgKyBlZVsyXSAqIHQ7XG5cbiAgICBvZVszXSA9IHNlWzNdICogaW52ICsgZWVbM10gKiB0O1xuICAgIG9lWzRdID0gc2VbNF0gKiBpbnYgKyBlZVs0XSAqIHQ7XG4gICAgb2VbNV0gPSBzZVs1XSAqIGludiArIGVlWzVdICogdDtcblxuICAgIG9lWzZdID0gc2VbNl0gKiBpbnYgKyBlZVs2XSAqIHQ7XG4gICAgb2VbN10gPSBzZVs3XSAqIGludiArIGVlWzddICogdDtcbiAgICBvZVs4XSA9IHNlWzhdICogaW52ICsgZWVbOF0gKiB0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHJvdGF0aW9uIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIHF1YXRlcm5pb24gLSBUaGUgcXVhdGVybmlvbiB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCByb3RhdGlvbiBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyByb3RhdGlvblF1YXRlcm5pb24ocXVhdGVybmlvbjogUXVhdGVybmlvbiwgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeyBfeDogeCwgX3k6IHksIF96OiB6LCBfdzogdyB9ID0gcXVhdGVybmlvbjtcbiAgICBjb25zdCB4MiA9IHggKyB4O1xuICAgIGNvbnN0IHkyID0geSArIHk7XG4gICAgY29uc3QgejIgPSB6ICsgejtcbiAgICBjb25zdCB4eCA9IHggKiB4MjtcbiAgICBjb25zdCB5eCA9IHkgKiB4MjtcbiAgICBjb25zdCB5eSA9IHkgKiB5MjtcbiAgICBjb25zdCB6eCA9IHogKiB4MjtcbiAgICBjb25zdCB6eSA9IHogKiB5MjtcbiAgICBjb25zdCB6eiA9IHogKiB6MjtcbiAgICBjb25zdCB3eCA9IHcgKiB4MjtcbiAgICBjb25zdCB3eSA9IHcgKiB5MjtcbiAgICBjb25zdCB3eiA9IHcgKiB6MjtcblxuICAgIG9lWzBdID0gMSAtIHl5IC0geno7XG4gICAgb2VbM10gPSB5eCAtIHd6O1xuICAgIG9lWzZdID0genggKyB3eTtcblxuICAgIG9lWzFdID0geXggKyB3ejtcbiAgICBvZVs0XSA9IDEgLSB4eCAtIHp6O1xuICAgIG9lWzddID0genkgLSB3eDtcblxuICAgIG9lWzJdID0genggLSB3eTtcbiAgICBvZVs1XSA9IHp5ICsgd3g7XG4gICAgb2VbOF0gPSAxIC0geHggLSB5eTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBtYXRyaXggZnJvbSBzY2FsZSB2ZWN0b3IuXG4gICAqIEBwYXJhbSBzIC0gVGhlIHNjYWxlIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgc2NhbGluZyhzOiBWZWN0b3IyLCBvdXQ6IE1hdHJpeDMpOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcblxuICAgIG9lWzBdID0gcy5feDtcbiAgICBvZVsxXSA9IDA7XG4gICAgb2VbMl0gPSAwO1xuXG4gICAgb2VbM10gPSAwO1xuICAgIG9lWzRdID0gcy5feTtcbiAgICBvZVs1XSA9IDA7XG5cbiAgICBvZVs2XSA9IDA7XG4gICAgb2VbN10gPSAwO1xuICAgIG9lWzhdID0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBtYXRyaXggZnJvbSB0cmFuc2xhdGlvbiB2ZWN0b3IuXG4gICAqIEBwYXJhbSB0cmFuc2xhdGlvbiAtIFRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIG1hdHJpeFxuICAgKi9cbiAgc3RhdGljIHRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uOiBWZWN0b3IyLCBvdXQ6IE1hdHJpeDMpOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcblxuICAgIG9lWzBdID0gMTtcbiAgICBvZVsxXSA9IDA7XG4gICAgb2VbMl0gPSAwO1xuXG4gICAgb2VbM10gPSAwO1xuICAgIG9lWzRdID0gMTtcbiAgICBvZVs1XSA9IDA7XG5cbiAgICBvZVs2XSA9IHRyYW5zbGF0aW9uLl94O1xuICAgIG9lWzddID0gdHJhbnNsYXRpb24uX3k7XG4gICAgb2VbOF0gPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgaW52ZXJzZSBvZiB0aGUgc3BlY2lmaWVkIG1hdHJpeC5cbiAgICogQHBhcmFtIGEgLSBUaGUgbWF0cml4IHdob3NlIGludmVyc2UgaXMgdG8gYmUgY2FsY3VsYXRlZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGludmVyc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBpbnZlcnQoYTogTWF0cml4Mywgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gYWVbMF0sXG4gICAgICBhMTIgPSBhZVsxXSxcbiAgICAgIGExMyA9IGFlWzJdO1xuICAgIGNvbnN0IGEyMSA9IGFlWzNdLFxuICAgICAgYTIyID0gYWVbNF0sXG4gICAgICBhMjMgPSBhZVs1XTtcbiAgICBjb25zdCBhMzEgPSBhZVs2XSxcbiAgICAgIGEzMiA9IGFlWzddLFxuICAgICAgYTMzID0gYWVbOF07XG5cbiAgICBjb25zdCBiMTIgPSBhMzMgKiBhMjIgLSBhMjMgKiBhMzI7XG4gICAgY29uc3QgYjIyID0gLWEzMyAqIGEyMSArIGEyMyAqIGEzMTtcbiAgICBjb25zdCBiMzIgPSBhMzIgKiBhMjEgLSBhMjIgKiBhMzE7XG5cbiAgICBsZXQgZGV0ID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuICAgIGlmICghZGV0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIG9lWzBdID0gYjEyICogZGV0O1xuICAgIG9lWzFdID0gKC1hMzMgKiBhMTIgKyBhMTMgKiBhMzIpICogZGV0O1xuICAgIG9lWzJdID0gKGEyMyAqIGExMiAtIGExMyAqIGEyMikgKiBkZXQ7XG5cbiAgICBvZVszXSA9IGIyMiAqIGRldDtcbiAgICBvZVs0XSA9IChhMzMgKiBhMTEgLSBhMTMgKiBhMzEpICogZGV0O1xuICAgIG9lWzVdID0gKC1hMjMgKiBhMTEgKyBhMTMgKiBhMjEpICogZGV0O1xuXG4gICAgb2VbNl0gPSBiMzIgKiBkZXQ7XG4gICAgb2VbN10gPSAoLWEzMiAqIGExMSArIGExMiAqIGEzMSkgKiBkZXQ7XG4gICAgb2VbOF0gPSAoYTIyICogYTExIC0gYTEyICogYTIxKSAqIGRldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSAzeDMgbm9ybWFsIG1hdHJpeCBmcm9tIGEgNHg0IG1hdHJpeC5cbiAgICogQHJlbWFya3MgVGhlIGNhbGN1bGF0aW9uIHByb2Nlc3MgaXMgdGhlIHRyYW5zcG9zZSBtYXRyaXggb2YgdGhlIGludmVyc2UgbWF0cml4LlxuICAgKiBAcGFyYW0gbWF0NCAtIFRoZSA0eDQgbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUSGUgM3gzIG5vcm1hbCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBub3JtYWxNYXRyaXgobWF0NDogTWF0cml4NCwgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBtYXQ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gYWVbMF0sXG4gICAgICBhMTIgPSBhZVsxXSxcbiAgICAgIGExMyA9IGFlWzJdLFxuICAgICAgYTE0ID0gYWVbM107XG4gICAgY29uc3QgYTIxID0gYWVbNF0sXG4gICAgICBhMjIgPSBhZVs1XSxcbiAgICAgIGEyMyA9IGFlWzZdLFxuICAgICAgYTI0ID0gYWVbN107XG4gICAgY29uc3QgYTMxID0gYWVbOF0sXG4gICAgICBhMzIgPSBhZVs5XSxcbiAgICAgIGEzMyA9IGFlWzEwXSxcbiAgICAgIGEzNCA9IGFlWzExXTtcbiAgICBjb25zdCBhNDEgPSBhZVsxMl0sXG4gICAgICBhNDIgPSBhZVsxM10sXG4gICAgICBhNDMgPSBhZVsxNF0sXG4gICAgICBhNDQgPSBhZVsxNV07XG5cbiAgICBjb25zdCBiMDAgPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gICAgY29uc3QgYjAxID0gYTExICogYTIzIC0gYTEzICogYTIxO1xuICAgIGNvbnN0IGIwMiA9IGExMSAqIGEyNCAtIGExNCAqIGEyMTtcbiAgICBjb25zdCBiMDMgPSBhMTIgKiBhMjMgLSBhMTMgKiBhMjI7XG4gICAgY29uc3QgYjA0ID0gYTEyICogYTI0IC0gYTE0ICogYTIyO1xuICAgIGNvbnN0IGIwNSA9IGExMyAqIGEyNCAtIGExNCAqIGEyMztcbiAgICBjb25zdCBiMDYgPSBhMzEgKiBhNDIgLSBhMzIgKiBhNDE7XG4gICAgY29uc3QgYjA3ID0gYTMxICogYTQzIC0gYTMzICogYTQxO1xuICAgIGNvbnN0IGIwOCA9IGEzMSAqIGE0NCAtIGEzNCAqIGE0MTtcbiAgICBjb25zdCBiMDkgPSBhMzIgKiBhNDMgLSBhMzMgKiBhNDI7XG4gICAgY29uc3QgYjEwID0gYTMyICogYTQ0IC0gYTM0ICogYTQyO1xuICAgIGNvbnN0IGIxMSA9IGEzMyAqIGE0NCAtIGEzNCAqIGE0MztcblxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG4gICAgaWYgKCFkZXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvZVswXSA9IChhMjIgKiBiMTEgLSBhMjMgKiBiMTAgKyBhMjQgKiBiMDkpICogZGV0O1xuICAgIG9lWzFdID0gKGEyMyAqIGIwOCAtIGEyMSAqIGIxMSAtIGEyNCAqIGIwNykgKiBkZXQ7XG4gICAgb2VbMl0gPSAoYTIxICogYjEwIC0gYTIyICogYjA4ICsgYTI0ICogYjA2KSAqIGRldDtcblxuICAgIG9lWzNdID0gKGExMyAqIGIxMCAtIGExMiAqIGIxMSAtIGExNCAqIGIwOSkgKiBkZXQ7XG4gICAgb2VbNF0gPSAoYTExICogYjExIC0gYTEzICogYjA4ICsgYTE0ICogYjA3KSAqIGRldDtcbiAgICBvZVs1XSA9IChhMTIgKiBiMDggLSBhMTEgKiBiMTAgLSBhMTQgKiBiMDYpICogZGV0O1xuXG4gICAgb2VbNl0gPSAoYTQyICogYjA1IC0gYTQzICogYjA0ICsgYTQ0ICogYjAzKSAqIGRldDtcbiAgICBvZVs3XSA9IChhNDMgKiBiMDIgLSBhNDEgKiBiMDUgLSBhNDQgKiBiMDEpICogZGV0O1xuICAgIG9lWzhdID0gKGE0MSAqIGIwNCAtIGE0MiAqIGIwMiArIGE0NCAqIGIwMCkgKiBkZXQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNwZWNpZmllZCBtYXRyaXggcm90YXRlcyBhcm91bmQgYW4gYW5nbGUuXG4gICAqIEBwYXJhbSBhIC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHBhcmFtIHIgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHJvdGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgcm90YXRlKGE6IE1hdHJpeDMsIHI6IG51bWJlciwgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihyKTtcbiAgICBjb25zdCBjID0gTWF0aC5jb3Mocik7XG5cbiAgICBjb25zdCBhMTEgPSBhZVswXSxcbiAgICAgIGExMiA9IGFlWzFdLFxuICAgICAgYTEzID0gYWVbMl07XG4gICAgY29uc3QgYTIxID0gYWVbM10sXG4gICAgICBhMjIgPSBhZVs0XSxcbiAgICAgIGEyMyA9IGFlWzVdO1xuICAgIGNvbnN0IGEzMSA9IGFlWzZdLFxuICAgICAgYTMyID0gYWVbN10sXG4gICAgICBhMzMgPSBhZVs4XTtcblxuICAgIG9lWzBdID0gYyAqIGExMSArIHMgKiBhMjE7XG4gICAgb2VbMV0gPSBjICogYTEyICsgcyAqIGEyMjtcbiAgICBvZVsyXSA9IGMgKiBhMTMgKyBzICogYTIzO1xuXG4gICAgb2VbM10gPSBjICogYTIxIC0gcyAqIGExMTtcbiAgICBvZVs0XSA9IGMgKiBhMjIgLSBzICogYTEyO1xuICAgIG9lWzVdID0gYyAqIGEyMyAtIHMgKiBhMTM7XG5cbiAgICBvZVs2XSA9IGEzMTtcbiAgICBvZVs3XSA9IGEzMjtcbiAgICBvZVs4XSA9IGEzMztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSBhIG1hdHJpeCBieSBhIGdpdmVuIHZlY3Rvci5cbiAgICogQHBhcmFtIG0gLSBUaGUgbWF0cml4XG4gICAqIEBwYXJhbSBzIC0gVGhlIGdpdmVuIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNjYWxlZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBzY2FsZShtOiBNYXRyaXgzLCBzOiBWZWN0b3IyLCBvdXQ6IE1hdHJpeDMpOiB2b2lkIHtcbiAgICBjb25zdCB7IF94OiB4LCBfeTogeSB9ID0gcztcbiAgICBjb25zdCBhZSA9IG0uZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBvZVswXSA9IHggKiBhZVswXTtcbiAgICBvZVsxXSA9IHggKiBhZVsxXTtcbiAgICBvZVsyXSA9IHggKiBhZVsyXTtcblxuICAgIG9lWzNdID0geSAqIGFlWzNdO1xuICAgIG9lWzRdID0geSAqIGFlWzRdO1xuICAgIG9lWzVdID0geSAqIGFlWzVdO1xuXG4gICAgb2VbNl0gPSBhZVs2XTtcbiAgICBvZVs3XSA9IGFlWzddO1xuICAgIG9lWzhdID0gYWVbOF07XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNsYXRlIGEgbWF0cml4IGJ5IGEgZ2l2ZW4gdmVjdG9yLlxuICAgKiBAcGFyYW0gbSAtIFRoZSBtYXRyaXhcbiAgICogQHBhcmFtIHRyYW5zbGF0aW9uIC0gVGhlIGdpdmVuIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHRyYW5zbGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgdHJhbnNsYXRlKG06IE1hdHJpeDMsIHRyYW5zbGF0aW9uOiBWZWN0b3IyLCBvdXQ6IE1hdHJpeDMpOiB2b2lkIHtcbiAgICBjb25zdCB7IF94OiB4LCBfeTogeSB9ID0gdHJhbnNsYXRpb247XG4gICAgY29uc3QgYWUgPSBtLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gYWVbMF0sXG4gICAgICBhMTIgPSBhZVsxXSxcbiAgICAgIGExMyA9IGFlWzJdO1xuICAgIGNvbnN0IGEyMSA9IGFlWzNdLFxuICAgICAgYTIyID0gYWVbNF0sXG4gICAgICBhMjMgPSBhZVs1XTtcbiAgICBjb25zdCBhMzEgPSBhZVs2XSxcbiAgICAgIGEzMiA9IGFlWzddLFxuICAgICAgYTMzID0gYWVbOF07XG5cbiAgICBvZVswXSA9IGExMTtcbiAgICBvZVsxXSA9IGExMjtcbiAgICBvZVsyXSA9IGExMztcblxuICAgIG9lWzNdID0gYTIxO1xuICAgIG9lWzRdID0gYTIyO1xuICAgIG9lWzVdID0gYTIzO1xuXG4gICAgb2VbNl0gPSB4ICogYTExICsgeSAqIGEyMSArIGEzMTtcbiAgICBvZVs3XSA9IHggKiBhMTIgKyB5ICogYTIyICsgYTMyO1xuICAgIG9lWzhdID0geCAqIGExMyArIHkgKiBhMjMgKyBhMzM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0cmFuc3Bvc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXguXG4gICAqIEBwYXJhbSBhIC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSB0cmFuc3Bvc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyB0cmFuc3Bvc2UoYTogTWF0cml4Mywgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgY29uc3QgYTEyID0gYWVbMV07XG4gICAgICBjb25zdCBhMTMgPSBhZVsyXTtcbiAgICAgIGNvbnN0IGEyMyA9IGFlWzVdO1xuICAgICAgb2VbMV0gPSBhZVszXTtcbiAgICAgIG9lWzJdID0gYWVbNl07XG4gICAgICBvZVszXSA9IGExMjtcbiAgICAgIG9lWzVdID0gYWVbN107XG4gICAgICBvZVs2XSA9IGExMztcbiAgICAgIG9lWzddID0gYTIzO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZVswXSA9IGFlWzBdO1xuICAgICAgb2VbMV0gPSBhZVszXTtcbiAgICAgIG9lWzJdID0gYWVbNl07XG5cbiAgICAgIG9lWzNdID0gYWVbMV07XG4gICAgICBvZVs0XSA9IGFlWzRdO1xuICAgICAgb2VbNV0gPSBhZVs3XTtcblxuICAgICAgb2VbNl0gPSBhZVsyXTtcbiAgICAgIG9lWzddID0gYWVbNV07XG4gICAgICBvZVs4XSA9IGFlWzhdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBjb250YWluaW5nIHRoZSBlbGVtZW50cyBvZiB0aGUgbWF0cml4IChjb2x1bW4gbWF0cml4KS5cbiAgICogQHJlbWFya3NcbiAgICogZWxlbWVudHNbMF0gZmlyc3QgY29sdW1uIGFuZCBmaXJzdCByb3cgdmFsdWUgbTExXG4gICAqIGVsZW1lbnRzWzFdIGZpcnN0IGNvbHVtbiBhbmQgc2Vjb25kIHJvdyB2YWx1ZSBtMTJcbiAgICogZWxlbWVudHNbMl0gZmlyc3QgY29sdW1uIGFuZCB0aGlyZCByb3cgdmFsdWUgbTEzXG4gICAqIGVsZW1lbnRzWzNdIHNlY29uZCBjb2x1bW4gYW5kIGZpcnN0IHJvdyB2YWx1ZSBtMjFcbiAgICogYW5kIHNvIG9uXG4gICAqL1xuICBlbGVtZW50czogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSg5KTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3Igb2YgMyozIG1hdHJpeC5cbiAgICogQHBhcmFtIG0xMSAtIERlZmF1bHQgMSBjb2x1bW4gMSwgcm93IDFcbiAgICogQHBhcmFtIG0xMiAtIERlZmF1bHQgMCBjb2x1bW4gMSwgcm93IDJcbiAgICogQHBhcmFtIG0xMyAtIERlZmF1bHQgMCBjb2x1bW4gMSwgcm93IDNcbiAgICogQHBhcmFtIG0yMSAtIERlZmF1bHQgMCBjb2x1bW4gMiwgcm93IDFcbiAgICogQHBhcmFtIG0yMiAtIERlZmF1bHQgMSBjb2x1bW4gMiwgcm93IDJcbiAgICogQHBhcmFtIG0yMyAtIERlZmF1bHQgMCBjb2x1bW4gMiwgcm93IDNcbiAgICogQHBhcmFtIG0zMSAtIERlZmF1bHQgMCBjb2x1bW4gMywgcm93IDFcbiAgICogQHBhcmFtIG0zMiAtIERlZmF1bHQgMCBjb2x1bW4gMywgcm93IDJcbiAgICogQHBhcmFtIG0zMyAtIERlZmF1bHQgMSBjb2x1bW4gMywgcm93IDNcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIG0xMTogbnVtYmVyID0gMSxcbiAgICBtMTI6IG51bWJlciA9IDAsXG4gICAgbTEzOiBudW1iZXIgPSAwLFxuICAgIG0yMTogbnVtYmVyID0gMCxcbiAgICBtMjI6IG51bWJlciA9IDEsXG4gICAgbTIzOiBudW1iZXIgPSAwLFxuICAgIG0zMTogbnVtYmVyID0gMCxcbiAgICBtMzI6IG51bWJlciA9IDAsXG4gICAgbTMzOiBudW1iZXIgPSAxLFxuICApIHtcbiAgICBjb25zdCBlOiBGbG9hdDMyQXJyYXkgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgZVswXSA9IG0xMTtcbiAgICBlWzFdID0gbTEyO1xuICAgIGVbMl0gPSBtMTM7XG5cbiAgICBlWzNdID0gbTIxO1xuICAgIGVbNF0gPSBtMjI7XG4gICAgZVs1XSA9IG0yMztcblxuICAgIGVbNl0gPSBtMzE7XG4gICAgZVs3XSA9IG0zMjtcbiAgICBlWzhdID0gbTMzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBtYXRyaXgsIGFuZCByZXR1cm4gdGhpcyBtYXRyaXguXG4gICAqIEBwYXJhbSBtMTFcbiAgICogQHBhcmFtIG0xMlxuICAgKiBAcGFyYW0gbTEzXG4gICAqIEBwYXJhbSBtMjFcbiAgICogQHBhcmFtIG0yMlxuICAgKiBAcGFyYW0gbTIzXG4gICAqIEBwYXJhbSBtMzFcbiAgICogQHBhcmFtIG0zMlxuICAgKiBAcGFyYW0gbTMzXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4XG4gICAqL1xuICBzZXRWYWx1ZShcbiAgICBtMTE6IG51bWJlcixcbiAgICBtMTI6IG51bWJlcixcbiAgICBtMTM6IG51bWJlcixcbiAgICBtMjE6IG51bWJlcixcbiAgICBtMjI6IG51bWJlcixcbiAgICBtMjM6IG51bWJlcixcbiAgICBtMzE6IG51bWJlcixcbiAgICBtMzI6IG51bWJlcixcbiAgICBtMzM6IG51bWJlcixcbiAgKTogTWF0cml4MyB7XG4gICAgY29uc3QgZTogRmxvYXQzMkFycmF5ID0gdGhpcy5lbGVtZW50cztcblxuICAgIGVbMF0gPSBtMTE7XG4gICAgZVsxXSA9IG0xMjtcbiAgICBlWzJdID0gbTEzO1xuXG4gICAgZVszXSA9IG0yMTtcbiAgICBlWzRdID0gbTIyO1xuICAgIGVbNV0gPSBtMjM7XG5cbiAgICBlWzZdID0gbTMxO1xuICAgIGVbN10gPSBtMzI7XG4gICAgZVs4XSA9IG0zMztcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBtYXRyaXggYnkgYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICogQHJldHVybnMgVGhpcyBtYXRyaXhcbiAgICovXG4gIHNldFZhbHVlQnlBcnJheShhcnJheTogQXJyYXlMaWtlPG51bWJlcj4sIG9mZnNldDogbnVtYmVyID0gMCk6IE1hdHJpeDMge1xuICAgIGNvbnN0IHNyY2UgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgc3JjZVtpXSA9IGFycmF5W2kgKyBvZmZzZXRdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoaXMgM3gzIG1hdHJpeCBieSB0aGUgc3BlY2lmaWVkIDR4NCBtYXRyaXguXG4gICAqIHVwcGVyLWxlZnQgcHJpbmNpcGxlXG4gICAqIEBwYXJhbSBhIC0gVGhlIHNwZWNpZmllZCA0eDQgbWF0cml4XG4gICAqIEByZXR1cm5zIFRoaXMgM3gzIG1hdHJpeFxuICAgKi9cbiAgc2V0VmFsdWVCeU1hdHJpeChhOiBNYXRyaXg0KTogTWF0cml4MyB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgZVswXSA9IGFlWzBdO1xuICAgIGVbMV0gPSBhZVsxXTtcbiAgICBlWzJdID0gYWVbMl07XG5cbiAgICBlWzNdID0gYWVbNF07XG4gICAgZVs0XSA9IGFlWzVdO1xuICAgIGVbNV0gPSBhZVs2XTtcblxuICAgIGVbNl0gPSBhZVs4XTtcbiAgICBlWzddID0gYWVbOV07XG4gICAgZVs4XSA9IGFlWzEwXTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoZSB2YWx1ZSBvZiB0aGlzIG1hdHJpeCB0byBhbiBhcnJheS5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb3V0T2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICovXG4gIHRvQXJyYXkob3V0OiBudW1iZXJbXSB8IEZsb2F0MzJBcnJheSB8IEZsb2F0NjRBcnJheSwgb3V0T2Zmc2V0OiBudW1iZXIgPSAwKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBvdXRbb3V0T2Zmc2V0XSA9IGVbMF07XG4gICAgb3V0W291dE9mZnNldCArIDFdID0gZVsxXTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMl0gPSBlWzJdO1xuICAgIG91dFtvdXRPZmZzZXQgKyAzXSA9IGVbM107XG4gICAgb3V0W291dE9mZnNldCArIDRdID0gZVs0XTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgNV0gPSBlWzVdO1xuICAgIG91dFtvdXRPZmZzZXQgKyA2XSA9IGVbNl07XG4gICAgb3V0W291dE9mZnNldCArIDddID0gZVs3XTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgOF0gPSBlWzhdO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGlzIG1hdHJpeFxuICAgKi9cbiAgY2xvbmUoKTogTWF0cml4MyB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgbGV0IHJldCA9IG5ldyBNYXRyaXgzKGVbMF0sIGVbMV0sIGVbMl0sIGVbM10sIGVbNF0sIGVbNV0sIGVbNl0sIGVbN10sIGVbOF0pO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgbWF0cml4IHRvIHRoZSBzcGVjaWZpZWQgbWF0cml4LlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIGNsb25lVG8ob3V0OiBNYXRyaXgzKTogTWF0cml4MyB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBvZVswXSA9IGVbMF07XG4gICAgb2VbMV0gPSBlWzFdO1xuICAgIG9lWzJdID0gZVsyXTtcblxuICAgIG9lWzNdID0gZVszXTtcbiAgICBvZVs0XSA9IGVbNF07XG4gICAgb2VbNV0gPSBlWzVdO1xuXG4gICAgb2VbNl0gPSBlWzZdO1xuICAgIG9lWzddID0gZVs3XTtcbiAgICBvZVs4XSA9IGVbOF07XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHN1bSBvZiB0aGlzIG1hdHJpeCBhbmQgdGhlIHNwZWNpZmllZCBtYXRyaXguXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgbWF0cml4XG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IHRoYXQgc3RvcmUgdGhlIHN1bSBvZiB0aGUgdHdvIG1hdHJpY2VzXG4gICAqL1xuICBhZGQocmlnaHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLmFkZCh0aGlzLCByaWdodCwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoaXMgbWF0cml4IGFuZCB0aGUgc3BlY2lmaWVkIG1hdHJpeC5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHJldHVybnMgVGhpcyBtYXRyaXggdGhhdCBzdG9yZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28gbWF0cmljZXNcbiAgICovXG4gIHN1YnRyYWN0KHJpZ2h0OiBNYXRyaXgzKTogTWF0cml4MyB7XG4gICAgTWF0cml4My5zdWJ0cmFjdCh0aGlzLCByaWdodCwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0aGlzIG1hdHJpeCBhbmQgdGhlIHNwZWNpZmllZCBtYXRyaXguXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgbWF0cml4XG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IHRoYXQgc3RvcmUgdGhlIHByb2R1Y3Qgb2YgdGhlIHR3byBtYXRyaWNlc1xuICAgKi9cbiAgbXVsdGlwbHkocmlnaHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLm11bHRpcGx5KHRoaXMsIHJpZ2h0LCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBkZXRlcm1pbmFudCBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHJldHVybnMgVGhlIGRldGVybWluYW50IG9mIHRoaXMgbWF0cml4XG4gICAqL1xuICBkZXRlcm1pbmFudCgpOiBudW1iZXIge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gZVswXSxcbiAgICAgIGExMiA9IGVbMV0sXG4gICAgICBhMTMgPSBlWzJdO1xuICAgIGNvbnN0IGEyMSA9IGVbM10sXG4gICAgICBhMjIgPSBlWzRdLFxuICAgICAgYTIzID0gZVs1XTtcbiAgICBjb25zdCBhMzEgPSBlWzZdLFxuICAgICAgYTMyID0gZVs3XSxcbiAgICAgIGEzMyA9IGVbOF07XG5cbiAgICBjb25zdCBiMTIgPSBhMzMgKiBhMjIgLSBhMjMgKiBhMzI7XG4gICAgY29uc3QgYjIyID0gLWEzMyAqIGEyMSArIGEyMyAqIGEzMTtcbiAgICBjb25zdCBiMzIgPSBhMzIgKiBhMjEgLSBhMjIgKiBhMzE7XG5cbiAgICByZXR1cm4gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuICB9XG5cbiAgLyoqXG4gICAqIElkZW50aXR5IHRoaXMgbWF0cml4LlxuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCBhZnRlciBpZGVudGl0eVxuICAgKi9cbiAgaWRlbnRpdHkoKTogTWF0cml4MyB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBlWzBdID0gMTtcbiAgICBlWzFdID0gMDtcbiAgICBlWzJdID0gMDtcblxuICAgIGVbM10gPSAwO1xuICAgIGVbNF0gPSAxO1xuICAgIGVbNV0gPSAwO1xuXG4gICAgZVs2XSA9IDA7XG4gICAgZVs3XSA9IDA7XG4gICAgZVs4XSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZlcnQgdGhlIG1hdHJpeC5cbiAgICogQHJldHVybnMgVGhlIG1hdHJpeCBhZnRlciBpbnZlcnRcbiAgICovXG4gIGludmVydCgpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLmludmVydCh0aGlzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1hdHJpeCByb3RhdGVzIGFyb3VuZCBhbiBhbmdsZS5cbiAgICogQHBhcmFtIHIgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCBhZnRlciByb3RhdGVcbiAgICovXG4gIHJvdGF0ZShyOiBudW1iZXIpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLnJvdGF0ZSh0aGlzLCByLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIG1hdHJpeCBieSBhIGdpdmVuIHZlY3Rvci5cbiAgICogQHBhcmFtIHMgLSBUaGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIHNjYWxlXG4gICAqL1xuICBzY2FsZShzOiBWZWN0b3IyKTogTWF0cml4MyB7XG4gICAgTWF0cml4My5zY2FsZSh0aGlzLCBzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgdGhpcyBtYXRyaXggYnkgYSBnaXZlbiB2ZWN0b3IuXG4gICAqIEBwYXJhbSB0cmFuc2xhdGlvbiAtIFRoZSBnaXZlbiB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyBtYXRyaXggYWZ0ZXIgdHJhbnNsYXRlXG4gICAqL1xuICB0cmFuc2xhdGUodHJhbnNsYXRpb246IFZlY3RvcjIpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLnRyYW5zbGF0ZSh0aGlzLCB0cmFuc2xhdGlvbiwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0cmFuc3Bvc2Ugb2YgdGhpcyBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIHRyYW5zcG9zZVxuICAgKi9cbiAgdHJhbnNwb3NlKCk6IE1hdHJpeDMge1xuICAgIE1hdHJpeDMudHJhbnNwb3NlKHRoaXMsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNYXRoVXRpbCB9IGZyb20gJy4vTWF0aFV0aWwnO1xuaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4vTWF0cml4Myc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZm91ciBkaW1lbnNpb25hbCBtYXRoZW1hdGljYWwgcXVhdGVybmlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFF1YXRlcm5pb24ge1xuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyByZWFkb25seSBfdGVtcFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyByZWFkb25seSBfdGVtcFF1YXQxID0gbmV3IFF1YXRlcm5pb24oKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3VtIG9mIHR3byBxdWF0ZXJuaW9ucy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgcXVhdGVybmlvbiB0byBhZGRcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBxdWF0ZXJuaW9uIHRvIGFkZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHN1bSBvZiB0d28gcXVhdGVybmlvbnNcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogUXVhdGVybmlvbiwgcmlnaHQ6IFF1YXRlcm5pb24sIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKyByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICsgcmlnaHQuX3k7XG4gICAgb3V0Ll96ID0gbGVmdC5feiArIHJpZ2h0Ll96O1xuICAgIG91dC5fdyA9IGxlZnQuX3cgKyByaWdodC5fdztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9ucy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgcXVhdGVybmlvbiB0byBtdWx0aXBseVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb24gdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIG91dCAtIFRoZSBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9uc1xuICAgKi9cbiAgc3RhdGljIG11bHRpcGx5KGxlZnQ6IFF1YXRlcm5pb24sIHJpZ2h0OiBRdWF0ZXJuaW9uLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBjb25zdCBheCA9IGxlZnQuX3gsXG4gICAgICBheSA9IGxlZnQuX3ksXG4gICAgICBheiA9IGxlZnQuX3osXG4gICAgICBhdyA9IGxlZnQuX3c7XG4gICAgY29uc3QgYnggPSByaWdodC5feCxcbiAgICAgIGJ5ID0gcmlnaHQuX3ksXG4gICAgICBieiA9IHJpZ2h0Ll96LFxuICAgICAgYncgPSByaWdodC5fdztcblxuICAgIG91dC5feCA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gICAgb3V0Ll95ID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgICBvdXQuX3ogPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIG91dC5fdyA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHF1YXRlcm5pb24gdGhhdCBjb250YWlucyBjb25qdWdhdGVkIHZlcnNpb24gb2YgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBzcGVjaWZpZWQgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNvbmp1Z2F0ZSB2ZXJzaW9uIG9mIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIGNvbmp1Z2F0ZShhOiBRdWF0ZXJuaW9uLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBvdXQuX3ggPSAtYS5feDtcbiAgICBvdXQuX3kgPSAtYS5feTtcbiAgICBvdXQuX3ogPSAtYS5fejtcbiAgICBvdXQuX3cgPSBhLl93O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9ucy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgcXVhdGVybmlvbiB0byBkb3RcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBxdWF0ZXJuaW9uIHRvIGRvdFxuICAgKiBAcmV0dXJucyBUaGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXRlcm5pb25zXG4gICAqL1xuICBzdGF0aWMgZG90KGxlZnQ6IFF1YXRlcm5pb24sIHJpZ2h0OiBRdWF0ZXJuaW9uKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbGVmdC5feCAqIHJpZ2h0Ll94ICsgbGVmdC5feSAqIHJpZ2h0Ll95ICsgbGVmdC5feiAqIHJpZ2h0Ll96ICsgbGVmdC5fdyAqIHJpZ2h0Ll93O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb25zIGFyZSBlcXVhbHMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHF1YXRlcm5pb24gdG8gY29tcGFyZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb24gdG8gY29tcGFyZVxuICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbnMgYXJlIGVxdWFscywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IFF1YXRlcm5pb24sIHJpZ2h0OiBRdWF0ZXJuaW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll94LCByaWdodC5feCkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll95LCByaWdodC5feSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll96LCByaWdodC5feikgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll93LCByaWdodC5fdylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHF1YXRlcm5pb24gcm90YXRlcyBhcm91bmQgYW4gYXJiaXRyYXJ5IGF4aXMuXG4gICAqIEBwYXJhbSBheGlzIC0gVGhlIGF4aXNcbiAgICogQHBhcmFtIHJhZCAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcXVhdGVybmlvbiBhZnRlciByb3RhdGVcbiAgICovXG4gIHN0YXRpYyByb3RhdGlvbkF4aXNBbmdsZShheGlzOiBWZWN0b3IzLCByYWQ6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgY29uc3Qgbm9ybWFsQXhpcyA9IFF1YXRlcm5pb24uX3RlbXBWZWN0b3IzO1xuICAgIFZlY3RvcjMubm9ybWFsaXplKGF4aXMsIG5vcm1hbEF4aXMpO1xuICAgIHJhZCAqPSAwLjU7XG4gICAgY29uc3QgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgb3V0Ll94ID0gbm9ybWFsQXhpcy5feCAqIHM7XG4gICAgb3V0Ll95ID0gbm9ybWFsQXhpcy5feSAqIHM7XG4gICAgb3V0Ll96ID0gbm9ybWFsQXhpcy5feiAqIHM7XG4gICAgb3V0Ll93ID0gTWF0aC5jb3MocmFkKTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBxdWF0ZXJuaW9uIHJvdGF0ZXMgYXJvdW5kIHgsIHksIHogYXhpcyAocGl0Y2gveWF3L3JvbGwpLlxuICAgKiBAcGFyYW0geCAtIFRoZSByYWRpYW4gb2Ygcm90YXRpb24gYXJvdW5kIFggKHBpdGNoKVxuICAgKiBAcGFyYW0geSAtIFRoZSByYWRpYW4gb2Ygcm90YXRpb24gYXJvdW5kIFkgKHlhdylcbiAgICogQHBhcmFtIHogLSBUaGUgcmFkaWFuIG9mIHJvdGF0aW9uIGFyb3VuZCBaIChyb2xsKVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uRXVsZXIoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgUXVhdGVybmlvbi5yb3RhdGlvbllhd1BpdGNoUm9sbCh5LCB4LCB6LCBvdXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHF1YXRlcm5pb24gZnJvbSB0aGUgc3BlY2lmaWVkIHlhdywgcGl0Y2ggYW5kIHJvbGwgYW5nbGVzLlxuICAgKiBAcGFyYW0geWF3IC0gWWF3IGFyb3VuZCB0aGUgeSBheGlzIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIHBpdGNoIC0gUGl0Y2ggYXJvdW5kIHRoZSB4IGF4aXMgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gcm9sbCAtIFJvbGwgYXJvdW5kIHRoZSB6IGF4aXMgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uWWF3UGl0Y2hSb2xsKHlhdzogbnVtYmVyLCBwaXRjaDogbnVtYmVyLCByb2xsOiBudW1iZXIsIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIGNvbnN0IGhhbGZSb2xsID0gcm9sbCAqIDAuNTtcbiAgICBjb25zdCBoYWxmUGl0Y2ggPSBwaXRjaCAqIDAuNTtcbiAgICBjb25zdCBoYWxmWWF3ID0geWF3ICogMC41O1xuXG4gICAgY29uc3Qgc2luUm9sbCA9IE1hdGguc2luKGhhbGZSb2xsKTtcbiAgICBjb25zdCBjb3NSb2xsID0gTWF0aC5jb3MoaGFsZlJvbGwpO1xuICAgIGNvbnN0IHNpblBpdGNoID0gTWF0aC5zaW4oaGFsZlBpdGNoKTtcbiAgICBjb25zdCBjb3NQaXRjaCA9IE1hdGguY29zKGhhbGZQaXRjaCk7XG4gICAgY29uc3Qgc2luWWF3ID0gTWF0aC5zaW4oaGFsZllhdyk7XG4gICAgY29uc3QgY29zWWF3ID0gTWF0aC5jb3MoaGFsZllhdyk7XG5cbiAgICBjb25zdCBjb3NZYXdQaXRjaCA9IGNvc1lhdyAqIGNvc1BpdGNoO1xuICAgIGNvbnN0IHNpbllhd1BpdGNoID0gc2luWWF3ICogc2luUGl0Y2g7XG5cbiAgICBvdXQuX3ggPSBjb3NZYXcgKiBzaW5QaXRjaCAqIGNvc1JvbGwgKyBzaW5ZYXcgKiBjb3NQaXRjaCAqIHNpblJvbGw7XG4gICAgb3V0Ll95ID0gc2luWWF3ICogY29zUGl0Y2ggKiBjb3NSb2xsIC0gY29zWWF3ICogc2luUGl0Y2ggKiBzaW5Sb2xsO1xuICAgIG91dC5feiA9IGNvc1lhd1BpdGNoICogc2luUm9sbCAtIHNpbllhd1BpdGNoICogY29zUm9sbDtcbiAgICBvdXQuX3cgPSBjb3NZYXdQaXRjaCAqIGNvc1JvbGwgKyBzaW5ZYXdQaXRjaCAqIHNpblJvbGw7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBzcGVjaWZpZWQgM3gzIG1hdHJpeC5cbiAgICogQHBhcmFtIG0gLSBUaGUgc3BlY2lmaWVkIDN4MyBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIHF1YXRlcm5pb25cbiAgICovXG4gIHN0YXRpYyByb3RhdGlvbk1hdHJpeDN4MyhtOiBNYXRyaXgzLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBjb25zdCBtZSA9IG0uZWxlbWVudHM7XG4gICAgY29uc3QgbTExID0gbWVbMF0sXG4gICAgICBtMTIgPSBtZVsxXSxcbiAgICAgIG0xMyA9IG1lWzJdO1xuICAgIGNvbnN0IG0yMSA9IG1lWzNdLFxuICAgICAgbTIyID0gbWVbNF0sXG4gICAgICBtMjMgPSBtZVs1XTtcbiAgICBjb25zdCBtMzEgPSBtZVs2XSxcbiAgICAgIG0zMiA9IG1lWzddLFxuICAgICAgbTMzID0gbWVbOF07XG4gICAgY29uc3Qgc2NhbGUgPSBtMTEgKyBtMjIgKyBtMzM7XG4gICAgbGV0IHNxcnQsIGhhbGY7XG5cbiAgICBpZiAoc2NhbGUgPiAwKSB7XG4gICAgICBzcXJ0ID0gTWF0aC5zcXJ0KHNjYWxlICsgMS4wKTtcbiAgICAgIG91dC5fdyA9IHNxcnQgKiAwLjU7XG4gICAgICBzcXJ0ID0gMC41IC8gc3FydDtcblxuICAgICAgb3V0Ll94ID0gKG0yMyAtIG0zMikgKiBzcXJ0O1xuICAgICAgb3V0Ll95ID0gKG0zMSAtIG0xMykgKiBzcXJ0O1xuICAgICAgb3V0Ll96ID0gKG0xMiAtIG0yMSkgKiBzcXJ0O1xuICAgIH0gZWxzZSBpZiAobTExID49IG0yMiAmJiBtMTEgPj0gbTMzKSB7XG4gICAgICBzcXJ0ID0gTWF0aC5zcXJ0KDEuMCArIG0xMSAtIG0yMiAtIG0zMyk7XG4gICAgICBoYWxmID0gMC41IC8gc3FydDtcblxuICAgICAgb3V0Ll94ID0gMC41ICogc3FydDtcbiAgICAgIG91dC5feSA9IChtMTIgKyBtMjEpICogaGFsZjtcbiAgICAgIG91dC5feiA9IChtMTMgKyBtMzEpICogaGFsZjtcbiAgICAgIG91dC5fdyA9IChtMjMgLSBtMzIpICogaGFsZjtcbiAgICB9IGVsc2UgaWYgKG0yMiA+IG0zMykge1xuICAgICAgc3FydCA9IE1hdGguc3FydCgxLjAgKyBtMjIgLSBtMTEgLSBtMzMpO1xuICAgICAgaGFsZiA9IDAuNSAvIHNxcnQ7XG5cbiAgICAgIG91dC5feCA9IChtMjEgKyBtMTIpICogaGFsZjtcbiAgICAgIG91dC5feSA9IDAuNSAqIHNxcnQ7XG4gICAgICBvdXQuX3ogPSAobTMyICsgbTIzKSAqIGhhbGY7XG4gICAgICBvdXQuX3cgPSAobTMxIC0gbTEzKSAqIGhhbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNxcnQgPSBNYXRoLnNxcnQoMS4wICsgbTMzIC0gbTExIC0gbTIyKTtcbiAgICAgIGhhbGYgPSAwLjUgLyBzcXJ0O1xuXG4gICAgICBvdXQuX3ggPSAobTEzICsgbTMxKSAqIGhhbGY7XG4gICAgICBvdXQuX3kgPSAobTIzICsgbTMyKSAqIGhhbGY7XG4gICAgICBvdXQuX3ogPSAwLjUgKiBzcXJ0O1xuICAgICAgb3V0Ll93ID0gKG0xMiAtIG0yMSkgKiBoYWxmO1xuICAgIH1cbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGludmVyc2Ugb2YgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBxdWF0ZXJuaW9uIHdob3NlIGludmVyc2UgaXMgdG8gYmUgY2FsY3VsYXRlZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGludmVyc2Ugb2YgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBzdGF0aWMgaW52ZXJ0KGE6IFF1YXRlcm5pb24sIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIGNvbnN0IHsgX3g6IHgsIF95OiB5LCBfejogeiwgX3c6IHcgfSA9IGE7XG4gICAgY29uc3QgZG90ID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gICAgaWYgKGRvdCA+IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIGNvbnN0IGludkRvdCA9IDEuMCAvIGRvdDtcbiAgICAgIG91dC5feCA9IC14ICogaW52RG90O1xuICAgICAgb3V0Ll95ID0gLXkgKiBpbnZEb3Q7XG4gICAgICBvdXQuX3ogPSAteiAqIGludkRvdDtcbiAgICAgIG91dC5fdyA9IHcgKiBpbnZEb3Q7XG4gICAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBsaW5lYXIgYmxlbmQgYmV0d2VlbiB0d28gcXVhdGVybmlvbnMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBlbmQgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHQgLSBUaGUgYmxlbmQgYW1vdW50IHdoZXJlIDAgcmV0dXJucyBzdGFydCBhbmQgMSBlbmRcbiAgICogQHBhcmFtIG91dCAtIFRoZSByZXN1bHQgb2YgbGluZWFyIGJsZW5kaW5nIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zXG4gICAqL1xuICBzdGF0aWMgbGVycChzdGFydDogUXVhdGVybmlvbiwgZW5kOiBRdWF0ZXJuaW9uLCB0OiBudW1iZXIsIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIGNvbnN0IGludiA9IDEuMCAtIHQ7XG4gICAgaWYgKFF1YXRlcm5pb24uZG90KHN0YXJ0LCBlbmQpID49IDApIHtcbiAgICAgIG91dC5feCA9IHN0YXJ0Ll94ICogaW52ICsgZW5kLl94ICogdDtcbiAgICAgIG91dC5feSA9IHN0YXJ0Ll95ICogaW52ICsgZW5kLl95ICogdDtcbiAgICAgIG91dC5feiA9IHN0YXJ0Ll96ICogaW52ICsgZW5kLl96ICogdDtcbiAgICAgIG91dC5fdyA9IHN0YXJ0Ll93ICogaW52ICsgZW5kLl93ICogdDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Ll94ID0gc3RhcnQuX3ggKiBpbnYgLSBlbmQuX3ggKiB0O1xuICAgICAgb3V0Ll95ID0gc3RhcnQuX3kgKiBpbnYgLSBlbmQuX3kgKiB0O1xuICAgICAgb3V0Ll96ID0gc3RhcnQuX3ogKiBpbnYgLSBlbmQuX3ogKiB0O1xuICAgICAgb3V0Ll93ID0gc3RhcnQuX3cgKiBpbnYgLSBlbmQuX3cgKiB0O1xuICAgIH1cblxuICAgIG91dC5ub3JtYWxpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgYmxlbmQgYmV0d2VlbiB0d28gcXVhdGVybmlvbnMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBlbmQgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHQgLSBUaGUgYmxlbmQgYW1vdW50IHdoZXJlIDAgcmV0dXJucyBzdGFydCBhbmQgMSBlbmRcbiAgICogQHBhcmFtIG91dCAtIFRoZSByZXN1bHQgb2Ygc3BoZXJpY2FsIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byBxdWF0ZXJuaW9uc1xuICAgKi9cbiAgc3RhdGljIHNsZXJwKHN0YXJ0OiBRdWF0ZXJuaW9uLCBlbmQ6IFF1YXRlcm5pb24sIHQ6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgY29uc3QgYXggPSBzdGFydC5feDtcbiAgICBjb25zdCBheSA9IHN0YXJ0Ll95O1xuICAgIGNvbnN0IGF6ID0gc3RhcnQuX3o7XG4gICAgY29uc3QgYXcgPSBzdGFydC5fdztcbiAgICBsZXQgYnggPSBlbmQuX3g7XG4gICAgbGV0IGJ5ID0gZW5kLl95O1xuICAgIGxldCBieiA9IGVuZC5fejtcbiAgICBsZXQgYncgPSBlbmQuX3c7XG5cbiAgICBsZXQgc2NhbGUwOiBudW1iZXIsIHNjYWxlMTogbnVtYmVyO1xuICAgIC8vIGNhbGMgY29zaW5lXG4gICAgbGV0IGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcbiAgICAvLyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcbiAgICBpZiAoY29zb20gPCAwLjApIHtcbiAgICAgIGNvc29tID0gLWNvc29tO1xuICAgICAgYnggPSAtYng7XG4gICAgICBieSA9IC1ieTtcbiAgICAgIGJ6ID0gLWJ6O1xuICAgICAgYncgPSAtYnc7XG4gICAgfVxuICAgIC8vIGNhbGN1bGF0ZSBjb2VmZmljaWVudHNcbiAgICBpZiAoMS4wIC0gY29zb20gPiBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICAvLyBzdGFuZGFyZCBjYXNlIChzbGVycClcbiAgICAgIGNvbnN0IG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICAgIGNvbnN0IHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgICAgc2NhbGUwID0gTWF0aC5zaW4oKDEuMCAtIHQpICogb21lZ2EpIC8gc2lub207XG4gICAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgcXVhdGVybmlvbnMgYXJlIHZlcnkgY2xvc2VcbiAgICAgIC8vICAuLi4gc28gd2UgY2FuIGRvIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICAgIHNjYWxlMCA9IDEuMCAtIHQ7XG4gICAgICBzY2FsZTEgPSB0O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXG4gICAgb3V0Ll94ID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICBvdXQuX3kgPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIG91dC5feiA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgb3V0Ll93ID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZXMgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uIG1hZ25pdHVkZSB0byB1bml0IGxlbmd0aC5cbiAgICogQHBhcmFtIGEgLSBUaGUgc3BlY2lmaWVkIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIG91dCAtIFRoZSBub3JtYWxpemVkIHF1YXRlcm5pb25cbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemUoYTogUXVhdGVybmlvbiwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96LCBfdyB9ID0gYTtcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeiArIF93ICogX3cpO1xuICAgIGlmIChsZW4gPiBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgb3V0Ll94ID0gX3ggKiBsZW47XG4gICAgICBvdXQuX3kgPSBfeSAqIGxlbjtcbiAgICAgIG91dC5feiA9IF96ICogbGVuO1xuICAgICAgb3V0Ll93ID0gX3cgKiBsZW47XG4gICAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgcXVhdGVybmlvbiByb3RhdGUgYXJvdW5kIFggYXhpcy5cbiAgICogQHBhcmFtIHJhZCAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBzdGF0aWMgcm90YXRpb25YKHJhZDogbnVtYmVyLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICByYWQgKj0gMC41O1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihyYWQpO1xuICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0Ll94ID0gcztcbiAgICBvdXQuX3kgPSAwO1xuICAgIG91dC5feiA9IDA7XG4gICAgb3V0Ll93ID0gYztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBxdWF0ZXJuaW9uIHJvdGF0ZSBhcm91bmQgWSBheGlzLlxuICAgKiBAcGFyYW0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIHF1YXRlcm5pb25cbiAgICovXG4gIHN0YXRpYyByb3RhdGlvblkocmFkOiBudW1iZXIsIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIHJhZCAqPSAwLjU7XG4gICAgY29uc3QgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgY29uc3QgYyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXQuX3ggPSAwO1xuICAgIG91dC5feSA9IHM7XG4gICAgb3V0Ll96ID0gMDtcbiAgICBvdXQuX3cgPSBjO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHF1YXRlcm5pb24gcm90YXRlIGFyb3VuZCBaIGF4aXMuXG4gICAqIEBwYXJhbSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uWihyYWQ6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgcmFkICo9IDAuNTtcbiAgICBjb25zdCBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICBjb25zdCBjID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dC5feCA9IDA7XG4gICAgb3V0Ll95ID0gMDtcbiAgICBvdXQuX3ogPSBzO1xuICAgIG91dC5fdyA9IGM7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgcXVhdGVybmlvbiB0aGF0IHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbiByb3RhdGUgYXJvdW5kIFggYXhpcy5cbiAgICogQHBhcmFtIHF1YXRlcm5pb24gLSBUaGUgc3BlY2lmaWVkIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHJhZCAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBzdGF0aWMgcm90YXRlWChxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uLCByYWQ6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96LCBfdyB9ID0gcXVhdGVybmlvbjtcbiAgICByYWQgKj0gMC41O1xuICAgIGNvbnN0IGJ4ID0gTWF0aC5zaW4ocmFkKTtcbiAgICBjb25zdCBidyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXQuX3ggPSBfeCAqIGJ3ICsgX3cgKiBieDtcbiAgICBvdXQuX3kgPSBfeSAqIGJ3ICsgX3ogKiBieDtcbiAgICBvdXQuX3ogPSBfeiAqIGJ3IC0gX3kgKiBieDtcbiAgICBvdXQuX3cgPSBfdyAqIGJ3IC0gX3ggKiBieDtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBxdWF0ZXJuaW9uIHRoYXQgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uIHJvdGF0ZSBhcm91bmQgWSBheGlzLlxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiAtIFRoZSBzcGVjaWZpZWQgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIHF1YXRlcm5pb25cbiAgICovXG4gIHN0YXRpYyByb3RhdGVZKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJhZDogbnVtYmVyLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3osIF93IH0gPSBxdWF0ZXJuaW9uO1xuICAgIHJhZCAqPSAwLjU7XG4gICAgY29uc3QgYnkgPSBNYXRoLnNpbihyYWQpO1xuICAgIGNvbnN0IGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dC5feCA9IF94ICogYncgLSBfeiAqIGJ5O1xuICAgIG91dC5feSA9IF95ICogYncgKyBfdyAqIGJ5O1xuICAgIG91dC5feiA9IF96ICogYncgKyBfeCAqIGJ5O1xuICAgIG91dC5fdyA9IF93ICogYncgLSBfeSAqIGJ5O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHF1YXRlcm5pb24gdGhhdCB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24gcm90YXRlIGFyb3VuZCBaIGF4aXMuXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gVGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIHJvdGF0ZVoocXVhdGVybmlvbjogUXVhdGVybmlvbiwgcmFkOiBudW1iZXIsIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHF1YXRlcm5pb247XG4gICAgcmFkICo9IDAuNTtcbiAgICBjb25zdCBieiA9IE1hdGguc2luKHJhZCk7XG4gICAgY29uc3QgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0Ll94ID0gX3ggKiBidyArIF95ICogYno7XG4gICAgb3V0Ll95ID0gX3kgKiBidyAtIF94ICogYno7XG4gICAgb3V0Ll96ID0gX3ogKiBidyArIF93ICogYno7XG4gICAgb3V0Ll93ID0gX3cgKiBidyAtIF96ICogYno7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgYSBxdWF0ZXJuaW9uIGJ5IGEgZ2l2ZW4gbnVtYmVyLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBzIC0gVGhlIGdpdmVuIG51bWJlclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNjYWxlZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBzdGF0aWMgc2NhbGUoYTogUXVhdGVybmlvbiwgczogbnVtYmVyLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBhLl94ICogcztcbiAgICBvdXQuX3kgPSBhLl95ICogcztcbiAgICBvdXQuX3ogPSBhLl96ICogcztcbiAgICBvdXQuX3cgPSBhLl93ICogcztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3g6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfeTogbnVtYmVyO1xuICAvKiogQGludGVybmFsICovXG4gIF96OiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3c6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfb25WYWx1ZUNoYW5nZWQ6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHF1YXRlcm5pb24uXG4gICAqL1xuICBwdWJsaWMgZ2V0IHgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5feDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgeCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5feCA9IHZhbHVlO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHkgY29tcG9uZW50IG9mIHRoZSBxdWF0ZXJuaW9uLlxuICAgKi9cbiAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3k7XG4gIH1cblxuICBwdWJsaWMgc2V0IHkodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3kgPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvbi5cbiAgICovXG4gIHB1YmxpYyBnZXQgeigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl96O1xuICB9XG5cbiAgcHVibGljIHNldCB6KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl96ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY3Rpbmcgd2hldGhlciB0aGlzIGluc3RhbmNlIGlzIG5vcm1hbGl6ZWQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IG5vcm1hbGl6ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGguYWJzKHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93IC0gMSkgPFxuICAgICAgTWF0aFV0aWwuemVyb1RvbGVyYW5jZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHcgY29tcG9uZW50IG9mIHRoZSBxdWF0ZXJuaW9uLlxuICAgKi9cbiAgcHVibGljIGdldCB3KCkge1xuICAgIHJldHVybiB0aGlzLl93O1xuICB9XG5cbiAgcHVibGljIHNldCB3KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl93ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBvZiBRdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvbiwgZGVmYXVsdCAwXG4gICAqIEBwYXJhbSB5IC0gVGhlIHkgY29tcG9uZW50IG9mIHRoZSBxdWF0ZXJuaW9uLCBkZWZhdWx0IDBcbiAgICogQHBhcmFtIHogLSBUaGUgeiBjb21wb25lbnQgb2YgdGhlIHF1YXRlcm5pb24sIGRlZmF1bHQgMFxuICAgKiBAcGFyYW0gdyAtIFRoZSB3IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvbiwgZGVmYXVsdCAxXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwLCB6OiBudW1iZXIgPSAwLCB3OiBudW1iZXIgPSAxKSB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gICAgdGhpcy5feiA9IHo7XG4gICAgdGhpcy5fdyA9IHc7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24sIGFuZCByZXR1cm4gdGhpcyBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvblxuICAgKiBAcGFyYW0geSAtIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvblxuICAgKiBAcGFyYW0geiAtIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gdyAtIFRoZSB3IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvblxuICAgKiBAcmV0dXJucyBUaGlzIHF1YXRlcm5pb25cbiAgICovXG4gIHNldFZhbHVlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHc6IG51bWJlcik6IFF1YXRlcm5pb24ge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3ogPSB6O1xuICAgIHRoaXMuX3cgPSB3O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24gYnkgYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICBzZXRWYWx1ZUJ5QXJyYXkoYXJyYXk6IEFycmF5TGlrZTxudW1iZXI+LCBvZmZzZXQ6IG51bWJlciA9IDApOiBRdWF0ZXJuaW9uIHtcbiAgICB0aGlzLl94ID0gYXJyYXlbb2Zmc2V0XTtcbiAgICB0aGlzLl95ID0gYXJyYXlbb2Zmc2V0ICsgMV07XG4gICAgdGhpcy5feiA9IGFycmF5W29mZnNldCArIDJdO1xuICAgIHRoaXMuX3cgPSBhcnJheVtvZmZzZXQgKyAzXTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBxdWF0ZXJuaW9uIGludG8gaXRzIGNvbmp1Z2F0ZWQgdmVyc2lvbi5cbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICBjb25qdWdhdGUoKTogUXVhdGVybmlvbiB7XG4gICAgdGhpcy5feCAqPSAtMTtcbiAgICB0aGlzLl95ICo9IC0xO1xuICAgIHRoaXMuX3ogKj0gLTE7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHJvdGF0aW9uIGF4aXMgYW5kIHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBxdWF0ZXJuaW9uICh1bml0OiByYWRpYW5zKS5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBheGlzIGFzIGFuIG91dHB1dCBwYXJhbWV0ZXJcbiAgICogQHJldHVybnMgVGhlIHJvdGF0aW9uIGFuZ2xlICh1bml0OiByYWRpYW5zKVxuICAgKi9cbiAgZ2V0QXhpc0FuZ2xlKG91dDogVmVjdG9yMyk6IG51bWJlciB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96IH0gPSB0aGlzO1xuICAgIGNvbnN0IGxlbmd0aCA9IF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfejtcblxuICAgIGlmIChsZW5ndGggPCBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICBvdXQuX3ggPSAxO1xuICAgICAgb3V0Ll95ID0gMDtcbiAgICAgIG91dC5feiA9IDA7XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbnYgPSAxLjAgLyBsZW5ndGg7XG4gICAgICBvdXQuX3ggPSB0aGlzLl94ICogaW52O1xuICAgICAgb3V0Ll95ID0gdGhpcy5feSAqIGludjtcbiAgICAgIG91dC5feiA9IHRoaXMuX3ogKiBpbnY7XG5cbiAgICAgIHJldHVybiBNYXRoLmFjb3ModGhpcy5fdykgKiAyLjA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIElkZW50aXR5IHRoaXMgcXVhdGVybmlvbi5cbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uIGFmdGVyIGlkZW50aXR5XG4gICAqL1xuICBpZGVudGl0eSgpOiBRdWF0ZXJuaW9uIHtcbiAgICB0aGlzLl94ID0gMDtcbiAgICB0aGlzLl95ID0gMDtcbiAgICB0aGlzLl96ID0gMDtcbiAgICB0aGlzLl93ID0gMTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIHRoaXMgcXVhdGVybmlvbi5cbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGlzIHF1YXRlcm5pb25cbiAgICovXG4gIGxlbmd0aCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHRoaXM7XG4gICAgcmV0dXJuIE1hdGguc3FydChfeCAqIF94ICsgX3kgKiBfeSArIF96ICogX3ogKyBfdyAqIF93KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHF1YXRlcm5pb24uXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHF1YXRlcm5pb25cbiAgICovXG4gIGxlbmd0aFNxdWFyZWQoKTogbnVtYmVyIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3osIF93IH0gPSB0aGlzO1xuICAgIHJldHVybiBfeCAqIF94ICsgX3kgKiBfeSArIF96ICogX3ogKyBfdyAqIF93O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoaXMgcXVhdGVybmlvbiBpbnRvIGEgdW5pdCBxdWF0ZXJuaW9uLlxuICAgKiBAcmV0dXJucyBUaGlzIHF1YXRlcm5pb25cbiAgICovXG4gIG5vcm1hbGl6ZSgpOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLm5vcm1hbGl6ZSh0aGlzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGV1bGVyIG9mIHRoaXMgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBldWxlciAoaW4gcmFkaWFucykgYXMgYW4gb3V0cHV0IHBhcmFtZXRlclxuICAgKiBAcmV0dXJucyBFdWxlciB4LT5waXRjaCB5LT55YXcgei0+cm9sbFxuICAgKi9cbiAgdG9FdWxlcihvdXQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICB0aGlzLl90b1lhd1BpdGNoUm9sbChvdXQpO1xuXG4gICAgY29uc3QgdCA9IG91dC5feDtcbiAgICBvdXQuX3ggPSBvdXQuX3k7XG4gICAgb3V0Ll95ID0gdDtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZXVsZXIgb2YgdGhpcyBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGV1bGVyIChpbiByYWRpYW5zKSBhcyBhbiBvdXRwdXQgcGFyYW1ldGVyXG4gICAqIEByZXR1cm5zIEV1bGVyIHgtPnlhdyB5LT5waXRjaCB6LT5yb2xsXG4gICAqL1xuICB0b1lhd1BpdGNoUm9sbChvdXQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICB0aGlzLl90b1lhd1BpdGNoUm9sbChvdXQpO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbiB0byBhbiBhcnJheS5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb3V0T2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICovXG4gIHRvQXJyYXkob3V0OiBudW1iZXJbXSB8IEZsb2F0MzJBcnJheSB8IEZsb2F0NjRBcnJheSwgb3V0T2Zmc2V0OiBudW1iZXIgPSAwKSB7XG4gICAgb3V0W291dE9mZnNldF0gPSB0aGlzLl94O1xuICAgIG91dFtvdXRPZmZzZXQgKyAxXSA9IHRoaXMuX3k7XG4gICAgb3V0W291dE9mZnNldCArIDJdID0gdGhpcy5fejtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgM10gPSB0aGlzLl93O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIHF1YXRlcm5pb24uXG4gICAqIEByZXR1cm5zIEEgY2xvbmUgb2YgdGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICBjbG9uZSgpOiBRdWF0ZXJuaW9uIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgcXVhdGVybmlvbiB0byB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24uXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc3BlY2lmaWVkIHF1YXRlcm5pb25cbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBjbG9uZVRvKG91dDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xuICAgIG91dC5feCA9IHRoaXMuX3g7XG4gICAgb3V0Ll95ID0gdGhpcy5feTtcbiAgICBvdXQuX3ogPSB0aGlzLl96O1xuICAgIG91dC5fdyA9IHRoaXMuX3c7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhpcyBxdWF0ZXJuaW9uIHJvdGF0ZSBhcm91bmQgWCBheGlzLlxuICAgKiBAcGFyYW0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICByb3RhdGVYKHJhZDogbnVtYmVyKTogUXVhdGVybmlvbiB7XG4gICAgUXVhdGVybmlvbi5yb3RhdGVYKHRoaXMsIHJhZCwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoaXMgcXVhdGVybmlvbiByb3RhdGUgYXJvdW5kIFkgYXhpcy5cbiAgICogQHBhcmFtIHJhZCAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEByZXR1cm5zIFRoaXMgcXVhdGVybmlvblxuICAgKi9cbiAgcm90YXRlWShyYWQ6IG51bWJlcik6IFF1YXRlcm5pb24ge1xuICAgIFF1YXRlcm5pb24ucm90YXRlWSh0aGlzLCByYWQsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGlzIHF1YXRlcm5pb24gcm90YXRlIGFyb3VuZCBaIGF4aXMuXG4gICAqIEBwYXJhbSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBUaGlzIHF1YXRlcm5pb25cbiAgICovXG4gIHJvdGF0ZVoocmFkOiBudW1iZXIpOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLnJvdGF0ZVoodGhpcywgcmFkLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhpcyBxdWF0ZXJuaW9uIHJvdGF0ZXMgYXJvdW5kIGFuIGFyYml0cmFyeSBheGlzLlxuICAgKiBAcGFyYW0gYXhpcyAtIFRoZSBheGlzXG4gICAqIEBwYXJhbSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBUaGlzIHF1YXRlcm5pb25cbiAgICovXG4gIHJvdGF0aW9uQXhpc0FuZ2xlKGF4aXM6IFZlY3RvcjMsIHJhZDogbnVtYmVyKTogUXVhdGVybmlvbiB7XG4gICAgUXVhdGVybmlvbi5yb3RhdGlvbkF4aXNBbmdsZShheGlzLCByYWQsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBxdWF0ZXJuaW9uIGFuZCB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24uXG4gICAqIEBwYXJhbSBxdWF0IC0gVGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uXG4gICAqIEByZXR1cm5zIFRoZSBwcm9kdWN0IG9mIHRoZSB0d28gcXVhdGVybmlvbnNcbiAgICovXG4gIG11bHRpcGx5KHF1YXQ6IFF1YXRlcm5pb24pOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLm11bHRpcGx5KHRoaXMsIHF1YXQsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEludmVydCB0aGlzIHF1YXRlcm5pb24uXG4gICAqIEByZXR1cm5zIFRoaXMgcXVhdGVybmlvbiBhZnRlciBpbnZlcnRcbiAgICovXG4gIGludmVydCgpOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLmludmVydCh0aGlzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0aGlzIHF1YXRlcm5pb24gYW5kIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIHF1YXQgLSBUaGUgc3BlY2lmaWVkIHF1YXRlcm5pb25cbiAgICogQHJldHVybnMgVGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9uc1xuICAgKi9cbiAgZG90KHF1YXQ6IFF1YXRlcm5pb24pOiBudW1iZXIge1xuICAgIHJldHVybiBRdWF0ZXJuaW9uLmRvdCh0aGlzLCBxdWF0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBibGVuZCBiZXR3ZWVuIHRoaXMgcXVhdGVybmlvbiBhbmQgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gcXVhdCAtIFRoZSBzcGVjaWZpZWQgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gdCAtIFRoZSBibGVuZCBhbW91bnQgd2hlcmUgMCByZXR1cm5zIHRoaXMgYW5kIDEgcXVhdFxuICAgKiBAcmV0dXJucyAtIFRoZSByZXN1bHQgb2YgbGluZWFyIGJsZW5kaW5nIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zXG4gICAqL1xuICBsZXJwKHF1YXQ6IFF1YXRlcm5pb24sIHQ6IG51bWJlcik6IFF1YXRlcm5pb24ge1xuICAgIFF1YXRlcm5pb24ubGVycCh0aGlzLCBxdWF0LCB0LCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhpcyBxdWF0ZXJuaW9uIHJvdGF0aW9uIGFyb3VuZCBhbiBhcmJpdHJhcnkgYXhpcy5cbiAgICogQHBhcmFtIGF4aXMgLSBUaGUgYXhpc1xuICAgKiBAcGFyYW0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICByb3RhdGVBeGlzQW5nbGUoYXhpczogVmVjdG9yMywgcmFkOiBudW1iZXIpOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLl90ZW1wUXVhdDEucm90YXRpb25BeGlzQW5nbGUoYXhpcywgcmFkKTtcbiAgICB0aGlzLm11bHRpcGx5KFF1YXRlcm5pb24uX3RlbXBRdWF0MSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwcml2YXRlIF90b1lhd1BpdGNoUm9sbChvdXQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3osIF93IH0gPSB0aGlzO1xuICAgIGNvbnN0IHh4ID0gX3ggKiBfeDtcbiAgICBjb25zdCB5eSA9IF95ICogX3k7XG4gICAgY29uc3QgenogPSBfeiAqIF96O1xuICAgIGNvbnN0IHh5ID0gX3ggKiBfeTtcbiAgICBjb25zdCB6dyA9IF96ICogX3c7XG4gICAgY29uc3QgenggPSBfeiAqIF94O1xuICAgIGNvbnN0IHl3ID0gX3kgKiBfdztcbiAgICBjb25zdCB5eiA9IF95ICogX3o7XG4gICAgY29uc3QgeHcgPSBfeCAqIF93O1xuXG4gICAgb3V0Ll95ID0gTWF0aC5hc2luKDIuMCAqICh4dyAtIHl6KSk7XG4gICAgaWYgKE1hdGguY29zKG91dC55KSA+IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIG91dC5feiA9IE1hdGguYXRhbjIoMi4wICogKHh5ICsgencpLCAxLjAgLSAyLjAgKiAoenogKyB4eCkpO1xuICAgICAgb3V0Ll94ID0gTWF0aC5hdGFuMigyLjAgKiAoenggKyB5dyksIDEuMCAtIDIuMCAqICh5eSArIHh4KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5feiA9IE1hdGguYXRhbjIoLTIuMCAqICh4eSAtIHp3KSwgMS4wIC0gMi4wICogKHl5ICsgenopKTtcbiAgICAgIG91dC5feCA9IDAuMDtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0aFV0aWwgfSBmcm9tICcuL01hdGhVdGlsJztcbmltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuL01hdHJpeDMnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbic7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgNHg0IG1hdGhlbWF0aWNhbCBtYXRyaXguXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRyaXg0IHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX3RlbXBWZWMzMDogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF90ZW1wVmVjMzE6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfdGVtcFZlYzMyOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX3RlbXBNYXQzMDogTWF0cml4MyA9IG5ldyBNYXRyaXgzKCk7XG5cbiAgLyoqIEBpbnRlcm5hbCBJZGVudGl0eSBtYXRyaXguICovXG4gIHN0YXRpYyByZWFkb25seSBfaWRlbnRpdHk6IE1hdHJpeDQgPSBuZXcgTWF0cml4NChcbiAgICAxLjAsXG4gICAgMC4wLFxuICAgIDAuMCxcbiAgICAwLjAsXG4gICAgMC4wLFxuICAgIDEuMCxcbiAgICAwLjAsXG4gICAgMC4wLFxuICAgIDAuMCxcbiAgICAwLjAsXG4gICAgMS4wLFxuICAgIDAuMCxcbiAgICAwLjAsXG4gICAgMC4wLFxuICAgIDAuMCxcbiAgICAxLjAsXG4gICk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHByb2R1Y3Qgb2YgdHdvIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBtYXRyaXggdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBtYXRyaXggdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIG91dCAtIFRoZSBwcm9kdWN0IG9mIHRoZSB0d28gbWF0cmljZXNcbiAgICovXG4gIHN0YXRpYyBtdWx0aXBseShsZWZ0OiBNYXRyaXg0LCByaWdodDogTWF0cml4NCwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgbGUgPSBsZWZ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHJlID0gcmlnaHQuZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBjb25zdCBsMTEgPSBsZVswXSxcbiAgICAgIGwxMiA9IGxlWzFdLFxuICAgICAgbDEzID0gbGVbMl0sXG4gICAgICBsMTQgPSBsZVszXTtcbiAgICBjb25zdCBsMjEgPSBsZVs0XSxcbiAgICAgIGwyMiA9IGxlWzVdLFxuICAgICAgbDIzID0gbGVbNl0sXG4gICAgICBsMjQgPSBsZVs3XTtcbiAgICBjb25zdCBsMzEgPSBsZVs4XSxcbiAgICAgIGwzMiA9IGxlWzldLFxuICAgICAgbDMzID0gbGVbMTBdLFxuICAgICAgbDM0ID0gbGVbMTFdO1xuICAgIGNvbnN0IGw0MSA9IGxlWzEyXSxcbiAgICAgIGw0MiA9IGxlWzEzXSxcbiAgICAgIGw0MyA9IGxlWzE0XSxcbiAgICAgIGw0NCA9IGxlWzE1XTtcblxuICAgIGNvbnN0IHIxMSA9IHJlWzBdLFxuICAgICAgcjEyID0gcmVbMV0sXG4gICAgICByMTMgPSByZVsyXSxcbiAgICAgIHIxNCA9IHJlWzNdO1xuICAgIGNvbnN0IHIyMSA9IHJlWzRdLFxuICAgICAgcjIyID0gcmVbNV0sXG4gICAgICByMjMgPSByZVs2XSxcbiAgICAgIHIyNCA9IHJlWzddO1xuICAgIGNvbnN0IHIzMSA9IHJlWzhdLFxuICAgICAgcjMyID0gcmVbOV0sXG4gICAgICByMzMgPSByZVsxMF0sXG4gICAgICByMzQgPSByZVsxMV07XG4gICAgY29uc3QgcjQxID0gcmVbMTJdLFxuICAgICAgcjQyID0gcmVbMTNdLFxuICAgICAgcjQzID0gcmVbMTRdLFxuICAgICAgcjQ0ID0gcmVbMTVdO1xuXG4gICAgb2VbMF0gPSBsMTEgKiByMTEgKyBsMjEgKiByMTIgKyBsMzEgKiByMTMgKyBsNDEgKiByMTQ7XG4gICAgb2VbMV0gPSBsMTIgKiByMTEgKyBsMjIgKiByMTIgKyBsMzIgKiByMTMgKyBsNDIgKiByMTQ7XG4gICAgb2VbMl0gPSBsMTMgKiByMTEgKyBsMjMgKiByMTIgKyBsMzMgKiByMTMgKyBsNDMgKiByMTQ7XG4gICAgb2VbM10gPSBsMTQgKiByMTEgKyBsMjQgKiByMTIgKyBsMzQgKiByMTMgKyBsNDQgKiByMTQ7XG5cbiAgICBvZVs0XSA9IGwxMSAqIHIyMSArIGwyMSAqIHIyMiArIGwzMSAqIHIyMyArIGw0MSAqIHIyNDtcbiAgICBvZVs1XSA9IGwxMiAqIHIyMSArIGwyMiAqIHIyMiArIGwzMiAqIHIyMyArIGw0MiAqIHIyNDtcbiAgICBvZVs2XSA9IGwxMyAqIHIyMSArIGwyMyAqIHIyMiArIGwzMyAqIHIyMyArIGw0MyAqIHIyNDtcbiAgICBvZVs3XSA9IGwxNCAqIHIyMSArIGwyNCAqIHIyMiArIGwzNCAqIHIyMyArIGw0NCAqIHIyNDtcblxuICAgIG9lWzhdID0gbDExICogcjMxICsgbDIxICogcjMyICsgbDMxICogcjMzICsgbDQxICogcjM0O1xuICAgIG9lWzldID0gbDEyICogcjMxICsgbDIyICogcjMyICsgbDMyICogcjMzICsgbDQyICogcjM0O1xuICAgIG9lWzEwXSA9IGwxMyAqIHIzMSArIGwyMyAqIHIzMiArIGwzMyAqIHIzMyArIGw0MyAqIHIzNDtcbiAgICBvZVsxMV0gPSBsMTQgKiByMzEgKyBsMjQgKiByMzIgKyBsMzQgKiByMzMgKyBsNDQgKiByMzQ7XG5cbiAgICBvZVsxMl0gPSBsMTEgKiByNDEgKyBsMjEgKiByNDIgKyBsMzEgKiByNDMgKyBsNDEgKiByNDQ7XG4gICAgb2VbMTNdID0gbDEyICogcjQxICsgbDIyICogcjQyICsgbDMyICogcjQzICsgbDQyICogcjQ0O1xuICAgIG9lWzE0XSA9IGwxMyAqIHI0MSArIGwyMyAqIHI0MiArIGwzMyAqIHI0MyArIGw0MyAqIHI0NDtcbiAgICBvZVsxNV0gPSBsMTQgKiByNDEgKyBsMjQgKiByNDIgKyBsMzQgKiByNDMgKyBsNDQgKiByNDQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgbWF0cmljZXMgYXJlIGVxdWFscy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgbWF0cml4IHRvIGNvbXBhcmVcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBtYXRyaXggdG8gY29tcGFyZVxuICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgbWF0cmljZXMgYXJlIGVxdWFscywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IE1hdHJpeDQsIHJpZ2h0OiBNYXRyaXg0KTogYm9vbGVhbiB7XG4gICAgY29uc3QgbGUgPSBsZWZ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHJlID0gcmlnaHQuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzBdLCByZVswXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxXSwgcmVbMV0pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbMl0sIHJlWzJdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzNdLCByZVszXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVs0XSwgcmVbNF0pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbNV0sIHJlWzVdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzZdLCByZVs2XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVs3XSwgcmVbN10pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbOF0sIHJlWzhdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzldLCByZVs5XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxMF0sIHJlWzEwXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxMV0sIHJlWzExXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxMl0sIHJlWzEyXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxM10sIHJlWzEzXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxNF0sIHJlWzE0XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxNV0sIHJlWzE1XSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gbWF0cmljZXMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCBtYXRyaXhcbiAgICogQHBhcmFtIGVuZCAtIFRoZSBzZWNvbmQgbWF0cml4XG4gICAqIEBwYXJhbSB0IC0gVGhlIGJsZW5kIGFtb3VudCB3aGVyZSAwIHJldHVybnMgc3RhcnQgYW5kIDEgZW5kXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcmVzdWx0IG9mIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byBtYXRyaWNlc1xuICAgKi9cbiAgc3RhdGljIGxlcnAoc3RhcnQ6IE1hdHJpeDQsIGVuZDogTWF0cml4NCwgdDogbnVtYmVyLCBvdXQ6IE1hdHJpeDQpOiB2b2lkIHtcbiAgICBjb25zdCBzZSA9IHN0YXJ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IGVlID0gZW5kLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIGNvbnN0IGludiA9IDEuMCAtIHQ7XG5cbiAgICBvZVswXSA9IHNlWzBdICogaW52ICsgZWVbMF0gKiB0O1xuICAgIG9lWzFdID0gc2VbMV0gKiBpbnYgKyBlZVsxXSAqIHQ7XG4gICAgb2VbMl0gPSBzZVsyXSAqIGludiArIGVlWzJdICogdDtcbiAgICBvZVszXSA9IHNlWzNdICogaW52ICsgZWVbM10gKiB0O1xuXG4gICAgb2VbNF0gPSBzZVs0XSAqIGludiArIGVlWzRdICogdDtcbiAgICBvZVs1XSA9IHNlWzVdICogaW52ICsgZWVbNV0gKiB0O1xuICAgIG9lWzZdID0gc2VbNl0gKiBpbnYgKyBlZVs2XSAqIHQ7XG4gICAgb2VbN10gPSBzZVs3XSAqIGludiArIGVlWzddICogdDtcblxuICAgIG9lWzhdID0gc2VbOF0gKiBpbnYgKyBlZVs4XSAqIHQ7XG4gICAgb2VbOV0gPSBzZVs5XSAqIGludiArIGVlWzldICogdDtcbiAgICBvZVsxMF0gPSBzZVsxMF0gKiBpbnYgKyBlZVsxMF0gKiB0O1xuICAgIG9lWzExXSA9IHNlWzExXSAqIGludiArIGVlWzExXSAqIHQ7XG5cbiAgICBvZVsxMl0gPSBzZVsxMl0gKiBpbnYgKyBlZVsxMl0gKiB0O1xuICAgIG9lWzEzXSA9IHNlWzEzXSAqIGludiArIGVlWzEzXSAqIHQ7XG4gICAgb2VbMTRdID0gc2VbMTRdICogaW52ICsgZWVbMTRdICogdDtcbiAgICBvZVsxNV0gPSBzZVsxNV0gKiBpbnYgKyBlZVsxNV0gKiB0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHJvdGF0aW9uIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIHF1YXRlcm5pb24gLSBUaGUgcXVhdGVybmlvbiB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCByb3RhdGlvbiBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyByb3RhdGlvblF1YXRlcm5pb24ocXVhdGVybmlvbjogUXVhdGVybmlvbiwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeyBfeDogeCwgX3k6IHksIF96OiB6LCBfdzogdyB9ID0gcXVhdGVybmlvbjtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeXggPSB5ICogeDI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB6eCA9IHogKiB4MjtcbiAgICBsZXQgenkgPSB6ICogeTI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gICAgb2VbMF0gPSAxIC0geXkgLSB6ejtcbiAgICBvZVsxXSA9IHl4ICsgd3o7XG4gICAgb2VbMl0gPSB6eCAtIHd5O1xuICAgIG9lWzNdID0gMDtcblxuICAgIG9lWzRdID0geXggLSB3ejtcbiAgICBvZVs1XSA9IDEgLSB4eCAtIHp6O1xuICAgIG9lWzZdID0genkgKyB3eDtcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IHp4ICsgd3k7XG4gICAgb2VbOV0gPSB6eSAtIHd4O1xuICAgIG9lWzEwXSA9IDEgLSB4eCAtIHl5O1xuICAgIG9lWzExXSA9IDA7XG5cbiAgICBvZVsxMl0gPSAwO1xuICAgIG9lWzEzXSA9IDA7XG4gICAgb2VbMTRdID0gMDtcbiAgICBvZVsxNV0gPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIG1hdHJpeCByb3RhdGVzIGFyb3VuZCBhbiBhcmJpdHJhcnkgYXhpcy5cbiAgICogQHBhcmFtIGF4aXMgLSBUaGUgYXhpc1xuICAgKiBAcGFyYW0gciAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgbWF0cml4IGFmdGVyIHJvdGF0ZVxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uQXhpc0FuZ2xlKGF4aXM6IFZlY3RvcjMsIHI6IG51bWJlciwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgbGV0IHsgX3g6IHgsIF95OiB5LCBfejogeiB9ID0gYXhpcztcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gICAgbGV0IHMsIGMsIHQ7XG5cbiAgICBpZiAoTWF0aC5hYnMobGVuKSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHggKj0gbGVuO1xuICAgIHkgKj0gbGVuO1xuICAgIHogKj0gbGVuO1xuXG4gICAgcyA9IE1hdGguc2luKHIpO1xuICAgIGMgPSBNYXRoLmNvcyhyKTtcbiAgICB0ID0gMSAtIGM7XG5cbiAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG9lWzBdID0geCAqIHggKiB0ICsgYztcbiAgICBvZVsxXSA9IHkgKiB4ICogdCArIHogKiBzO1xuICAgIG9lWzJdID0geiAqIHggKiB0IC0geSAqIHM7XG4gICAgb2VbM10gPSAwO1xuXG4gICAgb2VbNF0gPSB4ICogeSAqIHQgLSB6ICogcztcbiAgICBvZVs1XSA9IHkgKiB5ICogdCArIGM7XG4gICAgb2VbNl0gPSB6ICogeSAqIHQgKyB4ICogcztcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IHggKiB6ICogdCArIHkgKiBzO1xuICAgIG9lWzldID0geSAqIHogKiB0IC0geCAqIHM7XG4gICAgb2VbMTBdID0geiAqIHogKiB0ICsgYztcbiAgICBvZVsxMV0gPSAwO1xuXG4gICAgb2VbMTJdID0gMDtcbiAgICBvZVsxM10gPSAwO1xuICAgIG9lWzE0XSA9IDA7XG4gICAgb2VbMTVdID0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gYW5kIGEgdHJhbnNsYXRpb24uXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gVGhlIHF1YXRlcm5pb24gdXNlZCB0byBjYWxjdWxhdGUgdGhlIG1hdHJpeFxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBUaGUgdHJhbnNsYXRpb24gdXNlZCB0byBjYWxjdWxhdGUgdGhlIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgcm90YXRpb25UcmFuc2xhdGlvbihxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uLCB0cmFuc2xhdGlvbjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgTWF0cml4NC5yb3RhdGlvblF1YXRlcm5pb24ocXVhdGVybmlvbiwgb3V0KTtcblxuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIG9lWzEyXSA9IHRyYW5zbGF0aW9uLl94O1xuICAgIG9lWzEzXSA9IHRyYW5zbGF0aW9uLl95O1xuICAgIG9lWzE0XSA9IHRyYW5zbGF0aW9uLl96O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhbiBhZmZpbmUgbWF0cml4LlxuICAgKiBAcGFyYW0gc2NhbGUgLSBUaGUgc2NhbGUgdXNlZCB0byBjYWxjdWxhdGUgbWF0cml4XG4gICAqIEBwYXJhbSByb3RhdGlvbiAtIFRoZSByb3RhdGlvbiB1c2VkIHRvIGNhbGN1bGF0ZSBtYXRyaXhcbiAgICogQHBhcmFtIHRyYW5zbGF0aW9uIC0gVGhlIHRyYW5zbGF0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgYWZmaW5lVHJhbnNmb3JtYXRpb24oc2NhbGU6IFZlY3RvcjMsIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLCB0cmFuc2xhdGlvbjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeyBfeDogeCwgX3k6IHksIF96OiB6LCBfdzogdyB9ID0gcm90YXRpb247XG4gICAgbGV0IHgyID0geCArIHg7XG4gICAgbGV0IHkyID0geSArIHk7XG4gICAgbGV0IHoyID0geiArIHo7XG5cbiAgICBsZXQgeHggPSB4ICogeDI7XG4gICAgbGV0IHh5ID0geCAqIHkyO1xuICAgIGxldCB4eiA9IHggKiB6MjtcbiAgICBsZXQgeXkgPSB5ICogeTI7XG4gICAgbGV0IHl6ID0geSAqIHoyO1xuICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICBsZXQgd3ggPSB3ICogeDI7XG4gICAgbGV0IHd5ID0gdyAqIHkyO1xuICAgIGxldCB3eiA9IHcgKiB6MjtcbiAgICBsZXQgc3ggPSBzY2FsZS5feDtcbiAgICBsZXQgc3kgPSBzY2FsZS5feTtcbiAgICBsZXQgc3ogPSBzY2FsZS5fejtcblxuICAgIG9lWzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gICAgb2VbMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgICBvZVsyXSA9ICh4eiAtIHd5KSAqIHN4O1xuICAgIG9lWzNdID0gMDtcblxuICAgIG9lWzRdID0gKHh5IC0gd3opICogc3k7XG4gICAgb2VbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgICBvZVs2XSA9ICh5eiArIHd4KSAqIHN5O1xuICAgIG9lWzddID0gMDtcblxuICAgIG9lWzhdID0gKHh6ICsgd3kpICogc3o7XG4gICAgb2VbOV0gPSAoeXogLSB3eCkgKiBzejtcbiAgICBvZVsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgICBvZVsxMV0gPSAwO1xuXG4gICAgb2VbMTJdID0gdHJhbnNsYXRpb24uX3g7XG4gICAgb2VbMTNdID0gdHJhbnNsYXRpb24uX3k7XG4gICAgb2VbMTRdID0gdHJhbnNsYXRpb24uX3o7XG4gICAgb2VbMTVdID0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBtYXRyaXggZnJvbSBzY2FsZSB2ZWN0b3IuXG4gICAqIEBwYXJhbSBzIC0gVGhlIHNjYWxlIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgc2NhbGluZyhzOiBWZWN0b3IzLCBvdXQ6IE1hdHJpeDQpOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBvZVswXSA9IHMuX3g7XG4gICAgb2VbMV0gPSAwO1xuICAgIG9lWzJdID0gMDtcbiAgICBvZVszXSA9IDA7XG5cbiAgICBvZVs0XSA9IDA7XG4gICAgb2VbNV0gPSBzLl95O1xuICAgIG9lWzZdID0gMDtcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IDA7XG4gICAgb2VbOV0gPSAwO1xuICAgIG9lWzEwXSA9IHMuX3o7XG4gICAgb2VbMTFdID0gMDtcblxuICAgIG9lWzEyXSA9IDA7XG4gICAgb2VbMTNdID0gMDtcbiAgICBvZVsxNF0gPSAwO1xuICAgIG9lWzE1XSA9IDE7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgbWF0cml4IGZyb20gdHJhbnNsYXRpb24gdmVjdG9yLlxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBUaGUgdHJhbnNsYXRpb24gdmVjdG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyB0cmFuc2xhdGlvbih0cmFuc2xhdGlvbjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgb2VbMF0gPSAxO1xuICAgIG9lWzFdID0gMDtcbiAgICBvZVsyXSA9IDA7XG4gICAgb2VbM10gPSAwO1xuXG4gICAgb2VbNF0gPSAwO1xuICAgIG9lWzVdID0gMTtcbiAgICBvZVs2XSA9IDA7XG4gICAgb2VbN10gPSAwO1xuXG4gICAgb2VbOF0gPSAwO1xuICAgIG9lWzldID0gMDtcbiAgICBvZVsxMF0gPSAxO1xuICAgIG9lWzExXSA9IDA7XG5cbiAgICBvZVsxMl0gPSB0cmFuc2xhdGlvbi5feDtcbiAgICBvZVsxM10gPSB0cmFuc2xhdGlvbi5feTtcbiAgICBvZVsxNF0gPSB0cmFuc2xhdGlvbi5fejtcbiAgICBvZVsxNV0gPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgaW52ZXJzZSBvZiB0aGUgc3BlY2lmaWVkIG1hdHJpeC5cbiAgICogQHBhcmFtIGEgLSBUaGUgbWF0cml4IHdob3NlIGludmVyc2UgaXMgdG8gYmUgY2FsY3VsYXRlZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGludmVyc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBpbnZlcnQoYTogTWF0cml4NCwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gYWVbMF0sXG4gICAgICBhMTIgPSBhZVsxXSxcbiAgICAgIGExMyA9IGFlWzJdLFxuICAgICAgYTE0ID0gYWVbM107XG4gICAgY29uc3QgYTIxID0gYWVbNF0sXG4gICAgICBhMjIgPSBhZVs1XSxcbiAgICAgIGEyMyA9IGFlWzZdLFxuICAgICAgYTI0ID0gYWVbN107XG4gICAgY29uc3QgYTMxID0gYWVbOF0sXG4gICAgICBhMzIgPSBhZVs5XSxcbiAgICAgIGEzMyA9IGFlWzEwXSxcbiAgICAgIGEzNCA9IGFlWzExXTtcbiAgICBjb25zdCBhNDEgPSBhZVsxMl0sXG4gICAgICBhNDIgPSBhZVsxM10sXG4gICAgICBhNDMgPSBhZVsxNF0sXG4gICAgICBhNDQgPSBhZVsxNV07XG5cbiAgICBjb25zdCBiMDAgPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gICAgY29uc3QgYjAxID0gYTExICogYTIzIC0gYTEzICogYTIxO1xuICAgIGNvbnN0IGIwMiA9IGExMSAqIGEyNCAtIGExNCAqIGEyMTtcbiAgICBjb25zdCBiMDMgPSBhMTIgKiBhMjMgLSBhMTMgKiBhMjI7XG4gICAgY29uc3QgYjA0ID0gYTEyICogYTI0IC0gYTE0ICogYTIyO1xuICAgIGNvbnN0IGIwNSA9IGExMyAqIGEyNCAtIGExNCAqIGEyMztcbiAgICBjb25zdCBiMDYgPSBhMzEgKiBhNDIgLSBhMzIgKiBhNDE7XG4gICAgY29uc3QgYjA3ID0gYTMxICogYTQzIC0gYTMzICogYTQxO1xuICAgIGNvbnN0IGIwOCA9IGEzMSAqIGE0NCAtIGEzNCAqIGE0MTtcbiAgICBjb25zdCBiMDkgPSBhMzIgKiBhNDMgLSBhMzMgKiBhNDI7XG4gICAgY29uc3QgYjEwID0gYTMyICogYTQ0IC0gYTM0ICogYTQyO1xuICAgIGNvbnN0IGIxMSA9IGEzMyAqIGE0NCAtIGEzNCAqIGE0MztcblxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG4gICAgaWYgKCFkZXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvZVswXSA9IChhMjIgKiBiMTEgLSBhMjMgKiBiMTAgKyBhMjQgKiBiMDkpICogZGV0O1xuICAgIG9lWzFdID0gKGExMyAqIGIxMCAtIGExMiAqIGIxMSAtIGExNCAqIGIwOSkgKiBkZXQ7XG4gICAgb2VbMl0gPSAoYTQyICogYjA1IC0gYTQzICogYjA0ICsgYTQ0ICogYjAzKSAqIGRldDtcbiAgICBvZVszXSA9IChhMzMgKiBiMDQgLSBhMzIgKiBiMDUgLSBhMzQgKiBiMDMpICogZGV0O1xuXG4gICAgb2VbNF0gPSAoYTIzICogYjA4IC0gYTIxICogYjExIC0gYTI0ICogYjA3KSAqIGRldDtcbiAgICBvZVs1XSA9IChhMTEgKiBiMTEgLSBhMTMgKiBiMDggKyBhMTQgKiBiMDcpICogZGV0O1xuICAgIG9lWzZdID0gKGE0MyAqIGIwMiAtIGE0MSAqIGIwNSAtIGE0NCAqIGIwMSkgKiBkZXQ7XG4gICAgb2VbN10gPSAoYTMxICogYjA1IC0gYTMzICogYjAyICsgYTM0ICogYjAxKSAqIGRldDtcblxuICAgIG9lWzhdID0gKGEyMSAqIGIxMCAtIGEyMiAqIGIwOCArIGEyNCAqIGIwNikgKiBkZXQ7XG4gICAgb2VbOV0gPSAoYTEyICogYjA4IC0gYTExICogYjEwIC0gYTE0ICogYjA2KSAqIGRldDtcbiAgICBvZVsxMF0gPSAoYTQxICogYjA0IC0gYTQyICogYjAyICsgYTQ0ICogYjAwKSAqIGRldDtcbiAgICBvZVsxMV0gPSAoYTMyICogYjAyIC0gYTMxICogYjA0IC0gYTM0ICogYjAwKSAqIGRldDtcblxuICAgIG9lWzEyXSA9IChhMjIgKiBiMDcgLSBhMjEgKiBiMDkgLSBhMjMgKiBiMDYpICogZGV0O1xuICAgIG9lWzEzXSA9IChhMTEgKiBiMDkgLSBhMTIgKiBiMDcgKyBhMTMgKiBiMDYpICogZGV0O1xuICAgIG9lWzE0XSA9IChhNDIgKiBiMDEgLSBhNDEgKiBiMDMgLSBhNDMgKiBiMDApICogZGV0O1xuICAgIG9lWzE1XSA9IChhMzEgKiBiMDMgLSBhMzIgKiBiMDEgKyBhMzMgKiBiMDApICogZGV0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHJpZ2h0LWhhbmRlZCBsb29rLWF0IG1hdHJpeC5cbiAgICogQHBhcmFtIGV5ZSAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgdmlld2VyJ3MgZXllXG4gICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgY2FtZXJhIGxvb2stYXQgdGFyZ2V0XG4gICAqIEBwYXJhbSB1cCAtIFRoZSBjYW1lcmEncyB1cCB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIGxvb2stYXQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgbG9va0F0KGV5ZTogVmVjdG9yMywgdGFyZ2V0OiBWZWN0b3IzLCB1cDogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeEF4aXM6IFZlY3RvcjMgPSBNYXRyaXg0Ll90ZW1wVmVjMzA7XG4gICAgY29uc3QgeUF4aXM6IFZlY3RvcjMgPSBNYXRyaXg0Ll90ZW1wVmVjMzE7XG4gICAgY29uc3QgekF4aXM6IFZlY3RvcjMgPSBNYXRyaXg0Ll90ZW1wVmVjMzI7XG5cbiAgICBWZWN0b3IzLnN1YnRyYWN0KGV5ZSwgdGFyZ2V0LCB6QXhpcyk7XG4gICAgekF4aXMubm9ybWFsaXplKCk7XG4gICAgVmVjdG9yMy5jcm9zcyh1cCwgekF4aXMsIHhBeGlzKTtcbiAgICB4QXhpcy5ub3JtYWxpemUoKTtcbiAgICBWZWN0b3IzLmNyb3NzKHpBeGlzLCB4QXhpcywgeUF4aXMpO1xuXG4gICAgb2VbMF0gPSB4QXhpcy5feDtcbiAgICBvZVsxXSA9IHlBeGlzLl94O1xuICAgIG9lWzJdID0gekF4aXMuX3g7XG4gICAgb2VbM10gPSAwO1xuXG4gICAgb2VbNF0gPSB4QXhpcy5feTtcbiAgICBvZVs1XSA9IHlBeGlzLl95O1xuICAgIG9lWzZdID0gekF4aXMuX3k7XG4gICAgb2VbN10gPSAwO1xuXG4gICAgb2VbOF0gPSB4QXhpcy5fejtcbiAgICBvZVs5XSA9IHlBeGlzLl96O1xuICAgIG9lWzEwXSA9IHpBeGlzLl96O1xuICAgIG9lWzExXSA9IDA7XG5cbiAgICBvZVsxMl0gPSAtVmVjdG9yMy5kb3QoeEF4aXMsIGV5ZSk7XG4gICAgb2VbMTNdID0gLVZlY3RvcjMuZG90KHlBeGlzLCBleWUpO1xuICAgIG9lWzE0XSA9IC1WZWN0b3IzLmRvdCh6QXhpcywgZXllKTtcbiAgICBvZVsxNV0gPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhbiBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGxlZnQgZWRnZSBvZiB0aGUgdmlld2luZ1xuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgcmlnaHQgZWRnZSBvZiB0aGUgdmlld2luZ1xuICAgKiBAcGFyYW0gYm90dG9tIC0gVGhlIGJvdHRvbSBlZGdlIG9mIHRoZSB2aWV3aW5nXG4gICAqIEBwYXJhbSB0b3AgLSBUaGUgdG9wIGVkZ2Ugb2YgdGhlIHZpZXdpbmdcbiAgICogQHBhcmFtIG5lYXIgLSBUaGUgZGVwdGggb2YgdGhlIG5lYXIgcGxhbmVcbiAgICogQHBhcmFtIGZhciAtIFRoZSBkZXB0aCBvZiB0aGUgZmFyIHBsYW5lXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBvcnRobyhcbiAgICBsZWZ0OiBudW1iZXIsXG4gICAgcmlnaHQ6IG51bWJlcixcbiAgICBib3R0b206IG51bWJlcixcbiAgICB0b3A6IG51bWJlcixcbiAgICBuZWFyOiBudW1iZXIsXG4gICAgZmFyOiBudW1iZXIsXG4gICAgb3V0OiBNYXRyaXg0LFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBjb25zdCBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KTtcbiAgICBjb25zdCBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgICBjb25zdCBuZiA9IDEgLyAobmVhciAtIGZhcik7XG5cbiAgICBvZVswXSA9IC0yICogbHI7XG4gICAgb2VbMV0gPSAwO1xuICAgIG9lWzJdID0gMDtcbiAgICBvZVszXSA9IDA7XG5cbiAgICBvZVs0XSA9IDA7XG4gICAgb2VbNV0gPSAtMiAqIGJ0O1xuICAgIG9lWzZdID0gMDtcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IDA7XG4gICAgb2VbOV0gPSAwO1xuICAgIG9lWzEwXSA9IDIgKiBuZjtcbiAgICBvZVsxMV0gPSAwO1xuXG4gICAgb2VbMTJdID0gKGxlZnQgKyByaWdodCkgKiBscjtcbiAgICBvZVsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0O1xuICAgIG9lWzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG9lWzE1XSA9IDE7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSBmb3ZZIC0gRmllbGQgb2YgdmlldyBpbiB0aGUgeSBkaXJlY3Rpb24sIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIGFzcGVjdCAtIEFzcGVjdCByYXRpbywgZGVmaW5lZCBhcyB2aWV3IHNwYWNlIHdpZHRoIGRpdmlkZWQgYnkgaGVpZ2h0XG4gICAqIEBwYXJhbSBuZWFyIC0gVGhlIGRlcHRoIG9mIHRoZSBuZWFyIHBsYW5lXG4gICAqIEBwYXJhbSBmYXIgLSBUaGUgZGVwdGggb2YgdGhlIGZhciBwbGFuZVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBwZXJzcGVjdGl2ZShmb3ZZOiBudW1iZXIsIGFzcGVjdDogbnVtYmVyLCBuZWFyOiBudW1iZXIsIGZhcjogbnVtYmVyLCBvdXQ6IE1hdHJpeDQpOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBjb25zdCBmID0gMS4wIC8gTWF0aC50YW4oZm92WSAvIDIpO1xuICAgIGNvbnN0IG5mID0gMSAvIChuZWFyIC0gZmFyKTtcblxuICAgIG9lWzBdID0gZiAvIGFzcGVjdDtcbiAgICBvZVsxXSA9IDA7XG4gICAgb2VbMl0gPSAwO1xuICAgIG9lWzNdID0gMDtcblxuICAgIG9lWzRdID0gMDtcbiAgICBvZVs1XSA9IGY7XG4gICAgb2VbNl0gPSAwO1xuICAgIG9lWzddID0gMDtcblxuICAgIG9lWzhdID0gMDtcbiAgICBvZVs5XSA9IDA7XG4gICAgb2VbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb2VbMTFdID0gLTE7XG5cbiAgICBvZVsxMl0gPSAwO1xuICAgIG9lWzEzXSA9IDA7XG4gICAgb2VbMTRdID0gMiAqIGZhciAqIG5lYXIgKiBuZjtcbiAgICBvZVsxNV0gPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzcGVjaWZpZWQgbWF0cml4IHJvdGF0ZXMgYXJvdW5kIGFuIGFyYml0cmFyeSBheGlzLlxuICAgKiBAcGFyYW0gbSAtIFRoZSBzcGVjaWZpZWQgbWF0cml4XG4gICAqIEBwYXJhbSBheGlzIC0gVGhlIGF4aXNcbiAgICogQHBhcmFtIHIgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHJvdGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgcm90YXRlQXhpc0FuZ2xlKG06IE1hdHJpeDQsIGF4aXM6IFZlY3RvcjMsIHI6IG51bWJlciwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgbGV0IHsgX3g6IHgsIF95OiB5LCBfejogeiB9ID0gYXhpcztcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG5cbiAgICBpZiAoTWF0aC5hYnMobGVuKSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZSA9IG0uZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgbGV0IHMsIGMsIHQ7XG5cbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHggKj0gbGVuO1xuICAgIHkgKj0gbGVuO1xuICAgIHogKj0gbGVuO1xuXG4gICAgcyA9IE1hdGguc2luKHIpO1xuICAgIGMgPSBNYXRoLmNvcyhyKTtcbiAgICB0ID0gMSAtIGM7XG5cbiAgICBsZXQgYTExID0gbWVbMF0sXG4gICAgICBhMTIgPSBtZVsxXSxcbiAgICAgIGExMyA9IG1lWzJdLFxuICAgICAgYTE0ID0gbWVbM107XG4gICAgbGV0IGEyMSA9IG1lWzRdLFxuICAgICAgYTIyID0gbWVbNV0sXG4gICAgICBhMjMgPSBtZVs2XSxcbiAgICAgIGEyNCA9IG1lWzddO1xuICAgIGxldCBhMzEgPSBtZVs4XSxcbiAgICAgIGEzMiA9IG1lWzldLFxuICAgICAgYTMzID0gbWVbMTBdLFxuICAgICAgYTM0ID0gbWVbMTFdO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG4gICAgbGV0IGIxMSA9IHggKiB4ICogdCArIGM7XG4gICAgbGV0IGIxMiA9IHkgKiB4ICogdCArIHogKiBzO1xuICAgIGxldCBiMTMgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgICBsZXQgYjIxID0geCAqIHkgKiB0IC0geiAqIHM7XG4gICAgbGV0IGIyMiA9IHkgKiB5ICogdCArIGM7XG4gICAgbGV0IGIyMyA9IHogKiB5ICogdCArIHggKiBzO1xuICAgIGxldCBiMzEgPSB4ICogeiAqIHQgKyB5ICogcztcbiAgICBsZXQgYjMyID0geSAqIHogKiB0IC0geCAqIHM7XG4gICAgbGV0IGIzMyA9IHogKiB6ICogdCArIGM7XG5cbiAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG9lWzBdID0gYTExICogYjExICsgYTIxICogYjEyICsgYTMxICogYjEzO1xuICAgIG9lWzFdID0gYTEyICogYjExICsgYTIyICogYjEyICsgYTMyICogYjEzO1xuICAgIG9lWzJdID0gYTEzICogYjExICsgYTIzICogYjEyICsgYTMzICogYjEzO1xuICAgIG9lWzNdID0gYTE0ICogYjExICsgYTI0ICogYjEyICsgYTM0ICogYjEzO1xuXG4gICAgb2VbNF0gPSBhMTEgKiBiMjEgKyBhMjEgKiBiMjIgKyBhMzEgKiBiMjM7XG4gICAgb2VbNV0gPSBhMTIgKiBiMjEgKyBhMjIgKiBiMjIgKyBhMzIgKiBiMjM7XG4gICAgb2VbNl0gPSBhMTMgKiBiMjEgKyBhMjMgKiBiMjIgKyBhMzMgKiBiMjM7XG4gICAgb2VbN10gPSBhMTQgKiBiMjEgKyBhMjQgKiBiMjIgKyBhMzQgKiBiMjM7XG5cbiAgICBvZVs4XSA9IGExMSAqIGIzMSArIGEyMSAqIGIzMiArIGEzMSAqIGIzMztcbiAgICBvZVs5XSA9IGExMiAqIGIzMSArIGEyMiAqIGIzMiArIGEzMiAqIGIzMztcbiAgICBvZVsxMF0gPSBhMTMgKiBiMzEgKyBhMjMgKiBiMzIgKyBhMzMgKiBiMzM7XG4gICAgb2VbMTFdID0gYTE0ICogYjMxICsgYTI0ICogYjMyICsgYTM0ICogYjMzO1xuXG4gICAgaWYgKG0gIT09IG91dCkge1xuICAgICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICAgIG9lWzEyXSA9IG1lWzEyXTtcbiAgICAgIG9lWzEzXSA9IG1lWzEzXTtcbiAgICAgIG9lWzE0XSA9IG1lWzE0XTtcbiAgICAgIG9lWzE1XSA9IG1lWzE1XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgYSBtYXRyaXggYnkgYSBnaXZlbiB2ZWN0b3IuXG4gICAqIEBwYXJhbSBtIC0gVGhlIG1hdHJpeFxuICAgKiBAcGFyYW0gcyAtIFRoZSBnaXZlbiB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzY2FsZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgc2NhbGUobTogTWF0cml4NCwgczogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHsgX3g6IHgsIF95OiB5LCBfejogeiB9ID0gcztcblxuICAgIG9lWzBdID0gbWVbMF0gKiB4O1xuICAgIG9lWzFdID0gbWVbMV0gKiB4O1xuICAgIG9lWzJdID0gbWVbMl0gKiB4O1xuICAgIG9lWzNdID0gbWVbM10gKiB4O1xuXG4gICAgb2VbNF0gPSBtZVs0XSAqIHk7XG4gICAgb2VbNV0gPSBtZVs1XSAqIHk7XG4gICAgb2VbNl0gPSBtZVs2XSAqIHk7XG4gICAgb2VbN10gPSBtZVs3XSAqIHk7XG5cbiAgICBvZVs4XSA9IG1lWzhdICogejtcbiAgICBvZVs5XSA9IG1lWzldICogejtcbiAgICBvZVsxMF0gPSBtZVsxMF0gKiB6O1xuICAgIG9lWzExXSA9IG1lWzExXSAqIHo7XG5cbiAgICBvZVsxMl0gPSBtZVsxMl07XG4gICAgb2VbMTNdID0gbWVbMTNdO1xuICAgIG9lWzE0XSA9IG1lWzE0XTtcbiAgICBvZVsxNV0gPSBtZVsxNV07XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNsYXRlIGEgbWF0cml4IGJ5IGEgZ2l2ZW4gdmVjdG9yLlxuICAgKiBAcGFyYW0gbSAtIFRoZSBtYXRyaXhcbiAgICogQHBhcmFtIHYgLSBUaGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdHJhbnNsYXRlZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyB0cmFuc2xhdGUobTogTWF0cml4NCwgdjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHsgX3g6IHgsIF95OiB5LCBfejogeiB9ID0gdjtcblxuICAgIGlmIChtID09PSBvdXQpIHtcbiAgICAgIG9lWzEyXSA9IG1lWzBdICogeCArIG1lWzRdICogeSArIG1lWzhdICogeiArIG1lWzEyXTtcbiAgICAgIG9lWzEzXSA9IG1lWzFdICogeCArIG1lWzVdICogeSArIG1lWzldICogeiArIG1lWzEzXTtcbiAgICAgIG9lWzE0XSA9IG1lWzJdICogeCArIG1lWzZdICogeSArIG1lWzEwXSAqIHogKyBtZVsxNF07XG4gICAgICBvZVsxNV0gPSBtZVszXSAqIHggKyBtZVs3XSAqIHkgKyBtZVsxMV0gKiB6ICsgbWVbMTVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhMTEgPSBtZVswXSxcbiAgICAgICAgYTEyID0gbWVbMV0sXG4gICAgICAgIGExMyA9IG1lWzJdLFxuICAgICAgICBhMTQgPSBtZVszXTtcbiAgICAgIGNvbnN0IGEyMSA9IG1lWzRdLFxuICAgICAgICBhMjIgPSBtZVs1XSxcbiAgICAgICAgYTIzID0gbWVbNl0sXG4gICAgICAgIGEyNCA9IG1lWzddO1xuICAgICAgY29uc3QgYTMxID0gbWVbOF0sXG4gICAgICAgIGEzMiA9IG1lWzldLFxuICAgICAgICBhMzMgPSBtZVsxMF0sXG4gICAgICAgIGEzNCA9IG1lWzExXTtcblxuICAgICAgKG9lWzBdID0gYTExKSwgKG9lWzFdID0gYTEyKSwgKG9lWzJdID0gYTEzKSwgKG9lWzNdID0gYTE0KTtcbiAgICAgIChvZVs0XSA9IGEyMSksIChvZVs1XSA9IGEyMiksIChvZVs2XSA9IGEyMyksIChvZVs3XSA9IGEyNCk7XG4gICAgICAob2VbOF0gPSBhMzEpLCAob2VbOV0gPSBhMzIpLCAob2VbMTBdID0gYTMzKSwgKG9lWzExXSA9IGEzNCk7XG5cbiAgICAgIG9lWzEyXSA9IGExMSAqIHggKyBhMjEgKiB5ICsgYTMxICogeiArIG1lWzEyXTtcbiAgICAgIG9lWzEzXSA9IGExMiAqIHggKyBhMjIgKiB5ICsgYTMyICogeiArIG1lWzEzXTtcbiAgICAgIG9lWzE0XSA9IGExMyAqIHggKyBhMjMgKiB5ICsgYTMzICogeiArIG1lWzE0XTtcbiAgICAgIG9lWzE1XSA9IGExNCAqIHggKyBhMjQgKiB5ICsgYTM0ICogeiArIG1lWzE1XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0cmFuc3Bvc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXguXG4gICAqIEBwYXJhbSBhIC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSB0cmFuc3Bvc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyB0cmFuc3Bvc2UoYTogTWF0cml4NCwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgY29uc3QgYTEyID0gYWVbMV07XG4gICAgICBjb25zdCBhMTMgPSBhZVsyXTtcbiAgICAgIGNvbnN0IGExNCA9IGFlWzNdO1xuICAgICAgY29uc3QgYTIzID0gYWVbNl07XG4gICAgICBjb25zdCBhMjQgPSBhZVs3XTtcbiAgICAgIGNvbnN0IGEzNCA9IGFlWzExXTtcblxuICAgICAgb2VbMV0gPSBhZVs0XTtcbiAgICAgIG9lWzJdID0gYWVbOF07XG4gICAgICBvZVszXSA9IGFlWzEyXTtcblxuICAgICAgb2VbNF0gPSBhMTI7XG4gICAgICBvZVs2XSA9IGFlWzldO1xuICAgICAgb2VbN10gPSBhZVsxM107XG5cbiAgICAgIG9lWzhdID0gYTEzO1xuICAgICAgb2VbOV0gPSBhMjM7XG4gICAgICBvZVsxMV0gPSBhZVsxNF07XG5cbiAgICAgIG9lWzEyXSA9IGExNDtcbiAgICAgIG9lWzEzXSA9IGEyNDtcbiAgICAgIG9lWzE0XSA9IGEzNDtcbiAgICB9IGVsc2Uge1xuICAgICAgb2VbMF0gPSBhZVswXTtcbiAgICAgIG9lWzFdID0gYWVbNF07XG4gICAgICBvZVsyXSA9IGFlWzhdO1xuICAgICAgb2VbM10gPSBhZVsxMl07XG5cbiAgICAgIG9lWzRdID0gYWVbMV07XG4gICAgICBvZVs1XSA9IGFlWzVdO1xuICAgICAgb2VbNl0gPSBhZVs5XTtcbiAgICAgIG9lWzddID0gYWVbMTNdO1xuXG4gICAgICBvZVs4XSA9IGFlWzJdO1xuICAgICAgb2VbOV0gPSBhZVs2XTtcbiAgICAgIG9lWzEwXSA9IGFlWzEwXTtcbiAgICAgIG9lWzExXSA9IGFlWzE0XTtcblxuICAgICAgb2VbMTJdID0gYWVbM107XG4gICAgICBvZVsxM10gPSBhZVs3XTtcbiAgICAgIG9lWzE0XSA9IGFlWzExXTtcbiAgICAgIG9lWzE1XSA9IGFlWzE1XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZWxlbWVudHMgb2YgdGhlIG1hdHJpeCAoY29sdW1uIG1hdHJpeCkuXG4gICAqIEByZW1hcmtzXG4gICAqIGVsZW1lbnRzWzBdIGZpcnN0IGNvbHVtbiBhbmQgZmlyc3Qgcm93IHZhbHVlIG0xMVxuICAgKiBlbGVtZW50c1sxXSBmaXJzdCBjb2x1bW4gYW5kIHNlY29uZCByb3cgdmFsdWUgbTEyXG4gICAqIGVsZW1lbnRzWzJdIGZpcnN0IGNvbHVtbiBhbmQgdGhpcmQgcm93IHZhbHVlIG0xM1xuICAgKiBlbGVtZW50c1szXSBmaXJzdCBjb2x1bW4gYW5kIGZvdXJ0aCByb3cgdmFsdWUgbTE0XG4gICAqIGVsZW1lbnRzWzRdIHNlY29uZCBjb2x1bW4gYW5kIGZpcnN0IHJvdyB2YWx1ZSBtMjFcbiAgICogYW5kIHNvIG9uXG4gICAqL1xuICBlbGVtZW50czogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIG9mIDR4NCBNYXRyaXg0LlxuICAgKiBAcGFyYW0gbTExIC0gZGVmYXVsdCAxLCBjb2x1bW4gMSwgcm93IDFcbiAgICogQHBhcmFtIG0xMiAtIGRlZmF1bHQgMCwgY29sdW1uIDEsIHJvdyAyXG4gICAqIEBwYXJhbSBtMTMgLSBkZWZhdWx0IDAsIGNvbHVtbiAxLCByb3cgM1xuICAgKiBAcGFyYW0gbTE0IC0gZGVmYXVsdCAwLCBjb2x1bW4gMSwgcm93IDRcbiAgICogQHBhcmFtIG0yMSAtIGRlZmF1bHQgMCwgY29sdW1uIDIsIHJvdyAxXG4gICAqIEBwYXJhbSBtMjIgLSBkZWZhdWx0IDEsIGNvbHVtbiAyLCByb3cgMlxuICAgKiBAcGFyYW0gbTIzIC0gZGVmYXVsdCAwLCBjb2x1bW4gMiwgcm93IDNcbiAgICogQHBhcmFtIG0yNCAtIGRlZmF1bHQgMCwgY29sdW1uIDIsIHJvdyA0XG4gICAqIEBwYXJhbSBtMzEgLSBkZWZhdWx0IDAsIGNvbHVtbiAzLCByb3cgMVxuICAgKiBAcGFyYW0gbTMyIC0gZGVmYXVsdCAwLCBjb2x1bW4gMywgcm93IDJcbiAgICogQHBhcmFtIG0zMyAtIGRlZmF1bHQgMSwgY29sdW1uIDMsIHJvdyAzXG4gICAqIEBwYXJhbSBtMzQgLSBkZWZhdWx0IDAsIGNvbHVtbiAzLCByb3cgNFxuICAgKiBAcGFyYW0gbTQxIC0gZGVmYXVsdCAwLCBjb2x1bW4gNCwgcm93IDFcbiAgICogQHBhcmFtIG00MiAtIGRlZmF1bHQgMCwgY29sdW1uIDQsIHJvdyAyXG4gICAqIEBwYXJhbSBtNDMgLSBkZWZhdWx0IDAsIGNvbHVtbiA0LCByb3cgM1xuICAgKiBAcGFyYW0gbTQ0IC0gZGVmYXVsdCAxLCBjb2x1bW4gNCwgcm93IDRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIG0xMTogbnVtYmVyID0gMSxcbiAgICBtMTI6IG51bWJlciA9IDAsXG4gICAgbTEzOiBudW1iZXIgPSAwLFxuICAgIG0xNDogbnVtYmVyID0gMCxcbiAgICBtMjE6IG51bWJlciA9IDAsXG4gICAgbTIyOiBudW1iZXIgPSAxLFxuICAgIG0yMzogbnVtYmVyID0gMCxcbiAgICBtMjQ6IG51bWJlciA9IDAsXG4gICAgbTMxOiBudW1iZXIgPSAwLFxuICAgIG0zMjogbnVtYmVyID0gMCxcbiAgICBtMzM6IG51bWJlciA9IDEsXG4gICAgbTM0OiBudW1iZXIgPSAwLFxuICAgIG00MTogbnVtYmVyID0gMCxcbiAgICBtNDI6IG51bWJlciA9IDAsXG4gICAgbTQzOiBudW1iZXIgPSAwLFxuICAgIG00NDogbnVtYmVyID0gMSxcbiAgKSB7XG4gICAgY29uc3QgZTogRmxvYXQzMkFycmF5ID0gdGhpcy5lbGVtZW50cztcblxuICAgIGVbMF0gPSBtMTE7XG4gICAgZVsxXSA9IG0xMjtcbiAgICBlWzJdID0gbTEzO1xuICAgIGVbM10gPSBtMTQ7XG5cbiAgICBlWzRdID0gbTIxO1xuICAgIGVbNV0gPSBtMjI7XG4gICAgZVs2XSA9IG0yMztcbiAgICBlWzddID0gbTI0O1xuXG4gICAgZVs4XSA9IG0zMTtcbiAgICBlWzldID0gbTMyO1xuICAgIGVbMTBdID0gbTMzO1xuICAgIGVbMTFdID0gbTM0O1xuXG4gICAgZVsxMl0gPSBtNDE7XG4gICAgZVsxM10gPSBtNDI7XG4gICAgZVsxNF0gPSBtNDM7XG4gICAgZVsxNV0gPSBtNDQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIG1hdHJpeCwgYW5kIHJldHVybiB0aGlzIG1hdHJpeC5cbiAgICogQHBhcmFtIG0xMSAtIGNvbHVtbiAxLCByb3cgMVxuICAgKiBAcGFyYW0gbTEyIC0gY29sdW1uIDEsIHJvdyAyXG4gICAqIEBwYXJhbSBtMTMgLSBjb2x1bW4gMSwgcm93IDNcbiAgICogQHBhcmFtIG0xNCAtIGNvbHVtbiAxLCByb3cgNFxuICAgKiBAcGFyYW0gbTIxIC0gY29sdW1uIDIsIHJvdyAxXG4gICAqIEBwYXJhbSBtMjIgLSBjb2x1bW4gMiwgcm93IDJcbiAgICogQHBhcmFtIG0yMyAtIGNvbHVtbiAyLCByb3cgM1xuICAgKiBAcGFyYW0gbTI0IC0gY29sdW1uIDIsIHJvdyA0XG4gICAqIEBwYXJhbSBtMzEgLSBjb2x1bW4gMywgcm93IDFcbiAgICogQHBhcmFtIG0zMiAtIGNvbHVtbiAzLCByb3cgMlxuICAgKiBAcGFyYW0gbTMzIC0gY29sdW1uIDMsIHJvdyAzXG4gICAqIEBwYXJhbSBtMzQgLSBjb2x1bW4gMywgcm93IDRcbiAgICogQHBhcmFtIG00MSAtIGNvbHVtbiA0LCByb3cgMVxuICAgKiBAcGFyYW0gbTQyIC0gY29sdW1uIDQsIHJvdyAyXG4gICAqIEBwYXJhbSBtNDMgLSBjb2x1bW4gNCwgcm93IDNcbiAgICogQHBhcmFtIG00NCAtIGNvbHVtbiA0LCByb3cgNFxuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeFxuICAgKi9cbiAgc2V0VmFsdWUoXG4gICAgbTExOiBudW1iZXIsXG4gICAgbTEyOiBudW1iZXIsXG4gICAgbTEzOiBudW1iZXIsXG4gICAgbTE0OiBudW1iZXIsXG4gICAgbTIxOiBudW1iZXIsXG4gICAgbTIyOiBudW1iZXIsXG4gICAgbTIzOiBudW1iZXIsXG4gICAgbTI0OiBudW1iZXIsXG4gICAgbTMxOiBudW1iZXIsXG4gICAgbTMyOiBudW1iZXIsXG4gICAgbTMzOiBudW1iZXIsXG4gICAgbTM0OiBudW1iZXIsXG4gICAgbTQxOiBudW1iZXIsXG4gICAgbTQyOiBudW1iZXIsXG4gICAgbTQzOiBudW1iZXIsXG4gICAgbTQ0OiBudW1iZXIsXG4gICk6IE1hdHJpeDQge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgZVswXSA9IG0xMTtcbiAgICBlWzFdID0gbTEyO1xuICAgIGVbMl0gPSBtMTM7XG4gICAgZVszXSA9IG0xNDtcblxuICAgIGVbNF0gPSBtMjE7XG4gICAgZVs1XSA9IG0yMjtcbiAgICBlWzZdID0gbTIzO1xuICAgIGVbN10gPSBtMjQ7XG5cbiAgICBlWzhdID0gbTMxO1xuICAgIGVbOV0gPSBtMzI7XG4gICAgZVsxMF0gPSBtMzM7XG4gICAgZVsxMV0gPSBtMzQ7XG5cbiAgICBlWzEyXSA9IG00MTtcbiAgICBlWzEzXSA9IG00MjtcbiAgICBlWzE0XSA9IG00MztcbiAgICBlWzE1XSA9IG00NDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBtYXRyaXggYnkgYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICogQHJldHVybnMgVGhpcyBtYXRyaXhcbiAgICovXG4gIHNldFZhbHVlQnlBcnJheShhcnJheTogQXJyYXlMaWtlPG51bWJlcj4sIG9mZnNldDogbnVtYmVyID0gMCk6IE1hdHJpeDQge1xuICAgIGNvbnN0IHNyY2UgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgc3JjZVtpXSA9IGFycmF5W2kgKyBvZmZzZXRdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgdmFsdWUgb2YgdGhpcyBtYXRyaXggdG8gYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgYXJyYXlcbiAgICogQHBhcmFtIG91dE9mZnNldCAtIFRoZSBzdGFydCBvZmZzZXQgb2YgdGhlIGFycmF5XG4gICAqL1xuICB0b0FycmF5KG91dDogbnVtYmVyW10gfCBGbG9hdDMyQXJyYXkgfCBGbG9hdDY0QXJyYXksIG91dE9mZnNldDogbnVtYmVyID0gMCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgb3V0W291dE9mZnNldF0gPSBlWzBdO1xuICAgIG91dFtvdXRPZmZzZXQgKyAxXSA9IGVbMV07XG4gICAgb3V0W291dE9mZnNldCArIDJdID0gZVsyXTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgM10gPSBlWzNdO1xuICAgIG91dFtvdXRPZmZzZXQgKyA0XSA9IGVbNF07XG4gICAgb3V0W291dE9mZnNldCArIDVdID0gZVs1XTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgNl0gPSBlWzZdO1xuICAgIG91dFtvdXRPZmZzZXQgKyA3XSA9IGVbN107XG4gICAgb3V0W291dE9mZnNldCArIDhdID0gZVs4XTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgOV0gPSBlWzldO1xuICAgIG91dFtvdXRPZmZzZXQgKyAxMF0gPSBlWzEwXTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMTFdID0gZVsxMV07XG4gICAgb3V0W291dE9mZnNldCArIDEyXSA9IGVbMTJdO1xuICAgIG91dFtvdXRPZmZzZXQgKyAxM10gPSBlWzEzXTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMTRdID0gZVsxNF07XG4gICAgb3V0W291dE9mZnNldCArIDE1XSA9IGVbMTVdO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGlzIG1hdHJpeFxuICAgKi9cbiAgY2xvbmUoKTogTWF0cml4NCB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgbGV0IHJldCA9IG5ldyBNYXRyaXg0KFxuICAgICAgZVswXSxcbiAgICAgIGVbMV0sXG4gICAgICBlWzJdLFxuICAgICAgZVszXSxcbiAgICAgIGVbNF0sXG4gICAgICBlWzVdLFxuICAgICAgZVs2XSxcbiAgICAgIGVbN10sXG4gICAgICBlWzhdLFxuICAgICAgZVs5XSxcbiAgICAgIGVbMTBdLFxuICAgICAgZVsxMV0sXG4gICAgICBlWzEyXSxcbiAgICAgIGVbMTNdLFxuICAgICAgZVsxNF0sXG4gICAgICBlWzE1XSxcbiAgICApO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgbWF0cml4IHRvIHRoZSBzcGVjaWZpZWQgbWF0cml4LlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIGNsb25lVG8ob3V0OiBNYXRyaXg0KTogTWF0cml4NCB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBvZVswXSA9IGVbMF07XG4gICAgb2VbMV0gPSBlWzFdO1xuICAgIG9lWzJdID0gZVsyXTtcbiAgICBvZVszXSA9IGVbM107XG5cbiAgICBvZVs0XSA9IGVbNF07XG4gICAgb2VbNV0gPSBlWzVdO1xuICAgIG9lWzZdID0gZVs2XTtcbiAgICBvZVs3XSA9IGVbN107XG5cbiAgICBvZVs4XSA9IGVbOF07XG4gICAgb2VbOV0gPSBlWzldO1xuICAgIG9lWzEwXSA9IGVbMTBdO1xuICAgIG9lWzExXSA9IGVbMTFdO1xuXG4gICAgb2VbMTJdID0gZVsxMl07XG4gICAgb2VbMTNdID0gZVsxM107XG4gICAgb2VbMTRdID0gZVsxNF07XG4gICAgb2VbMTVdID0gZVsxNV07XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBtYXRyaXggYW5kIHRoZSBzcGVjaWZpZWQgbWF0cml4LlxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc3BlY2lmaWVkIG1hdHJpeFxuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCB0aGF0IHN0b3JlIHRoZSBwcm9kdWN0IG9mIHRoZSB0d28gbWF0cmljZXNcbiAgICovXG4gIG11bHRpcGx5KHJpZ2h0OiBNYXRyaXg0KTogTWF0cml4NCB7XG4gICAgTWF0cml4NC5tdWx0aXBseSh0aGlzLCByaWdodCwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgZGV0ZXJtaW5hbnQgb2YgdGhpcyBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoZSBkZXRlcm1pbmFudCBvZiB0aGlzIG1hdHJpeFxuICAgKi9cbiAgZGV0ZXJtaW5hbnQoKTogbnVtYmVyIHtcbiAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcblxuICAgIGNvbnN0IGExMSA9IGVbMF0sXG4gICAgICBhMTIgPSBlWzFdLFxuICAgICAgYTEzID0gZVsyXSxcbiAgICAgIGExNCA9IGVbM107XG4gICAgY29uc3QgYTIxID0gZVs0XSxcbiAgICAgIGEyMiA9IGVbNV0sXG4gICAgICBhMjMgPSBlWzZdLFxuICAgICAgYTI0ID0gZVs3XTtcbiAgICBjb25zdCBhMzEgPSBlWzhdLFxuICAgICAgYTMyID0gZVs5XSxcbiAgICAgIGEzMyA9IGVbMTBdLFxuICAgICAgYTM0ID0gZVsxMV07XG4gICAgY29uc3QgYTQxID0gZVsxMl0sXG4gICAgICBhNDIgPSBlWzEzXSxcbiAgICAgIGE0MyA9IGVbMTRdLFxuICAgICAgYTQ0ID0gZVsxNV07XG5cbiAgICBjb25zdCBiMDAgPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gICAgY29uc3QgYjAxID0gYTExICogYTIzIC0gYTEzICogYTIxO1xuICAgIGNvbnN0IGIwMiA9IGExMSAqIGEyNCAtIGExNCAqIGEyMTtcbiAgICBjb25zdCBiMDMgPSBhMTIgKiBhMjMgLSBhMTMgKiBhMjI7XG4gICAgY29uc3QgYjA0ID0gYTEyICogYTI0IC0gYTE0ICogYTIyO1xuICAgIGNvbnN0IGIwNSA9IGExMyAqIGEyNCAtIGExNCAqIGEyMztcbiAgICBjb25zdCBiMDYgPSBhMzEgKiBhNDIgLSBhMzIgKiBhNDE7XG4gICAgY29uc3QgYjA3ID0gYTMxICogYTQzIC0gYTMzICogYTQxO1xuICAgIGNvbnN0IGIwOCA9IGEzMSAqIGE0NCAtIGEzNCAqIGE0MTtcbiAgICBjb25zdCBiMDkgPSBhMzIgKiBhNDMgLSBhMzMgKiBhNDI7XG4gICAgY29uc3QgYjEwID0gYTMyICogYTQ0IC0gYTM0ICogYTQyO1xuICAgIGNvbnN0IGIxMSA9IGEzMyAqIGE0NCAtIGEzNCAqIGE0MztcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICByZXR1cm4gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29tcG9zZSB0aGlzIG1hdHJpeCB0byB0cmFuc2xhdGlvbiwgcm90YXRpb24gYW5kIHNjYWxlIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBUcmFuc2xhdGlvbiB2ZWN0b3IgYXMgYW4gb3V0cHV0IHBhcmFtZXRlclxuICAgKiBAcGFyYW0gcm90YXRpb24gLSBSb3RhdGlvbiBxdWF0ZXJuaW9uIGFzIGFuIG91dHB1dCBwYXJhbWV0ZXJcbiAgICogQHBhcmFtIHNjYWxlIC0gU2NhbGUgdmVjdG9yIGFzIGFuIG91dHB1dCBwYXJhbWV0ZXJcbiAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGlzIG1hdHJpeCBjYW4gYmUgZGVjb21wb3NlZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBkZWNvbXBvc2UodHJhbnNsYXRpb246IFZlY3RvcjMsIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLCBzY2FsZTogVmVjdG9yMyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHJtOiBNYXRyaXgzID0gTWF0cml4NC5fdGVtcE1hdDMwO1xuXG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3Qgcm1lID0gcm0uZWxlbWVudHM7XG5cbiAgICBjb25zdCBtMTEgPSBlWzBdO1xuICAgIGNvbnN0IG0xMiA9IGVbMV07XG4gICAgY29uc3QgbTEzID0gZVsyXTtcbiAgICBjb25zdCBtMTQgPSBlWzNdO1xuICAgIGNvbnN0IG0yMSA9IGVbNF07XG4gICAgY29uc3QgbTIyID0gZVs1XTtcbiAgICBjb25zdCBtMjMgPSBlWzZdO1xuICAgIGNvbnN0IG0yNCA9IGVbN107XG4gICAgY29uc3QgbTMxID0gZVs4XTtcbiAgICBjb25zdCBtMzIgPSBlWzldO1xuICAgIGNvbnN0IG0zMyA9IGVbMTBdO1xuICAgIGNvbnN0IG0zNCA9IGVbMTFdO1xuICAgIHRyYW5zbGF0aW9uLnNldFZhbHVlKGVbMTJdLCBlWzEzXSwgZVsxNF0pO1xuXG4gICAgY29uc3QgeHMgPSBNYXRoLnNpZ24obTExICogbTEyICogbTEzICogbTE0KSA8IDAgPyAtMSA6IDE7XG4gICAgY29uc3QgeXMgPSBNYXRoLnNpZ24obTIxICogbTIyICogbTIzICogbTI0KSA8IDAgPyAtMSA6IDE7XG4gICAgY29uc3QgenMgPSBNYXRoLnNpZ24obTMxICogbTMyICogbTMzICogbTM0KSA8IDAgPyAtMSA6IDE7XG5cbiAgICBjb25zdCBzeCA9IHhzICogTWF0aC5zcXJ0KG0xMSAqIG0xMSArIG0xMiAqIG0xMiArIG0xMyAqIG0xMyk7XG4gICAgY29uc3Qgc3kgPSB5cyAqIE1hdGguc3FydChtMjEgKiBtMjEgKyBtMjIgKiBtMjIgKyBtMjMgKiBtMjMpO1xuICAgIGNvbnN0IHN6ID0genMgKiBNYXRoLnNxcnQobTMxICogbTMxICsgbTMyICogbTMyICsgbTMzICogbTMzKTtcbiAgICBzY2FsZS5zZXRWYWx1ZShzeCwgc3ksIHN6KTtcblxuICAgIGlmIChcbiAgICAgIE1hdGguYWJzKHN4KSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UgfHxcbiAgICAgIE1hdGguYWJzKHN5KSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UgfHxcbiAgICAgIE1hdGguYWJzKHN6KSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2VcbiAgICApIHtcbiAgICAgIHJvdGF0aW9uLmlkZW50aXR5KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGludlNYID0gMSAvIHN4O1xuICAgICAgY29uc3QgaW52U1kgPSAxIC8gc3k7XG4gICAgICBjb25zdCBpbnZTWiA9IDEgLyBzejtcblxuICAgICAgcm1lWzBdID0gbTExICogaW52U1g7XG4gICAgICBybWVbMV0gPSBtMTIgKiBpbnZTWDtcbiAgICAgIHJtZVsyXSA9IG0xMyAqIGludlNYO1xuICAgICAgcm1lWzNdID0gbTIxICogaW52U1k7XG4gICAgICBybWVbNF0gPSBtMjIgKiBpbnZTWTtcbiAgICAgIHJtZVs1XSA9IG0yMyAqIGludlNZO1xuICAgICAgcm1lWzZdID0gbTMxICogaW52U1o7XG4gICAgICBybWVbN10gPSBtMzIgKiBpbnZTWjtcbiAgICAgIHJtZVs4XSA9IG0zMyAqIGludlNaO1xuICAgICAgUXVhdGVybmlvbi5yb3RhdGlvbk1hdHJpeDN4MyhybSwgcm90YXRpb24pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCByb3RhdGlvbiBmcm9tIHRoaXMgbWF0cml4LlxuICAgKiBAcGFyYW0gb3V0IC0gUm90YXRpb24gcXVhdGVybmlvbiBhcyBhbiBvdXRwdXQgcGFyYW1ldGVyXG4gICAqIEByZXR1cm5zIFRoZSBvdXRcbiAgICovXG4gIGdldFJvdGF0aW9uKG91dDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGxldCB0cmFjZSA9IGVbMF0gKyBlWzVdICsgZVsxMF07XG5cbiAgICBpZiAodHJhY2UgPiBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICBsZXQgcyA9IE1hdGguc3FydCh0cmFjZSArIDEuMCkgKiAyO1xuICAgICAgb3V0Ll93ID0gMC4yNSAqIHM7XG4gICAgICBvdXQuX3ggPSAoZVs2XSAtIGVbOV0pIC8gcztcbiAgICAgIG91dC5feSA9IChlWzhdIC0gZVsyXSkgLyBzO1xuICAgICAgb3V0Ll96ID0gKGVbMV0gLSBlWzRdKSAvIHM7XG4gICAgfSBlbHNlIGlmIChlWzBdID4gZVs1XSAmJiBlWzBdID4gZVsxMF0pIHtcbiAgICAgIGxldCBzID0gTWF0aC5zcXJ0KDEuMCArIGVbMF0gLSBlWzVdIC0gZVsxMF0pICogMjtcbiAgICAgIG91dC5fdyA9IChlWzZdIC0gZVs5XSkgLyBzO1xuICAgICAgb3V0Ll94ID0gMC4yNSAqIHM7XG4gICAgICBvdXQuX3kgPSAoZVsxXSArIGVbNF0pIC8gcztcbiAgICAgIG91dC5feiA9IChlWzhdICsgZVsyXSkgLyBzO1xuICAgIH0gZWxzZSBpZiAoZVs1XSA+IGVbMTBdKSB7XG4gICAgICBsZXQgcyA9IE1hdGguc3FydCgxLjAgKyBlWzVdIC0gZVswXSAtIGVbMTBdKSAqIDI7XG4gICAgICBvdXQuX3cgPSAoZVs4XSAtIGVbMl0pIC8gcztcbiAgICAgIG91dC5feCA9IChlWzFdICsgZVs0XSkgLyBzO1xuICAgICAgb3V0Ll95ID0gMC4yNSAqIHM7XG4gICAgICBvdXQuX3ogPSAoZVs2XSArIGVbOV0pIC8gcztcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHMgPSBNYXRoLnNxcnQoMS4wICsgZVsxMF0gLSBlWzBdIC0gZVs1XSkgKiAyO1xuICAgICAgb3V0Ll93ID0gKGVbMV0gLSBlWzRdKSAvIHM7XG4gICAgICBvdXQuX3ggPSAoZVs4XSArIGVbMl0pIC8gcztcbiAgICAgIG91dC5feSA9IChlWzZdICsgZVs5XSkgLyBzO1xuICAgICAgb3V0Ll96ID0gMC4yNSAqIHM7XG4gICAgfVxuXG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc2NhbGUgZnJvbSB0aGlzIG1hdHJpeC5cbiAgICogQHBhcmFtIG91dCAtIFNjYWxlIHZlY3RvciBhcyBhbiBvdXRwdXQgcGFyYW1ldGVyXG4gICAqIEByZXR1cm5zIFRoZSBvdXRcbiAgICovXG4gIGdldFNjYWxpbmcob3V0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgLy9nZXRTY2FsZSgpXG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3QgbTExID0gZVswXSxcbiAgICAgIG0xMiA9IGVbMV0sXG4gICAgICBtMTMgPSBlWzJdO1xuICAgIGNvbnN0IG0yMSA9IGVbNF0sXG4gICAgICBtMjIgPSBlWzVdLFxuICAgICAgbTIzID0gZVs2XTtcbiAgICBjb25zdCBtMzEgPSBlWzhdLFxuICAgICAgbTMyID0gZVs5XSxcbiAgICAgIG0zMyA9IGVbMTBdO1xuXG4gICAgb3V0LnNldFZhbHVlKFxuICAgICAgTWF0aC5zcXJ0KG0xMSAqIG0xMSArIG0xMiAqIG0xMiArIG0xMyAqIG0xMyksXG4gICAgICBNYXRoLnNxcnQobTIxICogbTIxICsgbTIyICogbTIyICsgbTIzICogbTIzKSxcbiAgICAgIE1hdGguc3FydChtMzEgKiBtMzEgKyBtMzIgKiBtMzIgKyBtMzMgKiBtMzMpLFxuICAgICk7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0cmFuc2xhdGlvbiBmcm9tIHRoaXMgbWF0cml4LlxuICAgKiBAcGFyYW0gb3V0IC0gVHJhbnNsYXRpb24gdmVjdG9yIGFzIGFuIG91dHB1dCBwYXJhbWV0ZXJcbiAgICogQHJldHVybnMgVGhlIG91dFxuICAgKi9cbiAgZ2V0VHJhbnNsYXRpb24ob3V0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgb3V0LnNldFZhbHVlKGVbMTJdLCBlWzEzXSwgZVsxNF0pO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogSWRlbnRpdHkgdGhpcyBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIGlkZW50aXR5XG4gICAqL1xuICBpZGVudGl0eSgpOiBNYXRyaXg0IHtcbiAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcblxuICAgIGVbMF0gPSAxO1xuICAgIGVbMV0gPSAwO1xuICAgIGVbMl0gPSAwO1xuICAgIGVbM10gPSAwO1xuXG4gICAgZVs0XSA9IDA7XG4gICAgZVs1XSA9IDE7XG4gICAgZVs2XSA9IDA7XG4gICAgZVs3XSA9IDA7XG5cbiAgICBlWzhdID0gMDtcbiAgICBlWzldID0gMDtcbiAgICBlWzEwXSA9IDE7XG4gICAgZVsxMV0gPSAwO1xuXG4gICAgZVsxMl0gPSAwO1xuICAgIGVbMTNdID0gMDtcbiAgICBlWzE0XSA9IDA7XG4gICAgZVsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogSW52ZXJ0IHRoZSBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoZSBtYXRyaXggYWZ0ZXIgaW52ZXJ0XG4gICAqL1xuICBpbnZlcnQoKTogTWF0cml4NCB7XG4gICAgTWF0cml4NC5pbnZlcnQodGhpcywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtYXRyaXggcm90YXRlcyBhcm91bmQgYW4gYXJiaXRyYXJ5IGF4aXMuXG4gICAqIEBwYXJhbSBheGlzIC0gVGhlIGF4aXNcbiAgICogQHBhcmFtIHIgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCBhZnRlciByb3RhdGVcbiAgICovXG4gIHJvdGF0ZUF4aXNBbmdsZShheGlzOiBWZWN0b3IzLCByOiBudW1iZXIpOiBNYXRyaXg0IHtcbiAgICBNYXRyaXg0LnJvdGF0ZUF4aXNBbmdsZSh0aGlzLCBheGlzLCByLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIG1hdHJpeCBieSBhIGdpdmVuIHZlY3Rvci5cbiAgICogQHBhcmFtIHMgLSBUaGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIHNjYWxlXG4gICAqL1xuICBzY2FsZShzOiBWZWN0b3IzKTogTWF0cml4NCB7XG4gICAgTWF0cml4NC5zY2FsZSh0aGlzLCBzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgdGhpcyBtYXRyaXggYnkgYSBnaXZlbiB2ZWN0b3IuXG4gICAqIEBwYXJhbSB2IC0gVGhlIGdpdmVuIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCBhZnRlciB0cmFuc2xhdGVcbiAgICovXG4gIHRyYW5zbGF0ZSh2OiBWZWN0b3IzKTogTWF0cml4NCB7XG4gICAgTWF0cml4NC50cmFuc2xhdGUodGhpcywgdiwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0cmFuc3Bvc2Ugb2YgdGhpcyBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIHRyYW5zcG9zZVxuICAgKi9cbiAgdHJhbnNwb3NlKCk6IE1hdHJpeDQge1xuICAgIE1hdHJpeDQudHJhbnNwb3NlKHRoaXMsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNYXRoVXRpbCB9IGZyb20gJy4vTWF0aFV0aWwnO1xuXG4vKipcbiAqIERlc2NyaWJlcyBhIGNvbG9yIGluIHRoZSBmcm9tIG9mIFJHQkEgKGluIG9yZGVyOiBSLCBHLCBCLCBBKS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbG9yIHtcbiAgLyoqXG4gICAqIE1vZGlmeSBhIHZhbHVlIGZyb20gdGhlIGdhbW1hIHNwYWNlIHRvIHRoZSBsaW5lYXIgc3BhY2UuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSBpbiBnYW1tYSBzcGFjZVxuICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgaW4gbGluZWFyIHNwYWNlXG4gICAqL1xuICBzdGF0aWMgZ2FtbWFUb0xpbmVhclNwYWNlKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgIC8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L09wZW5HTC9leHRlbnNpb25zL0VYVC9FWFRfZnJhbWVidWZmZXJfc1JHQi50eHRcbiAgICAvLyBodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS9PcGVuR0wvZXh0ZW5zaW9ucy9FWFQvRVhUX3RleHR1cmVfc1JHQl9kZWNvZGUudHh0XG5cbiAgICBpZiAodmFsdWUgPD0gMC4wKSByZXR1cm4gMC4wO1xuICAgIGVsc2UgaWYgKHZhbHVlIDw9IDAuMDQwNDUpIHJldHVybiB2YWx1ZSAvIDEyLjkyO1xuICAgIGVsc2UgaWYgKHZhbHVlIDwgMS4wKSByZXR1cm4gTWF0aC5wb3coKHZhbHVlICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgZWxzZSByZXR1cm4gTWF0aC5wb3codmFsdWUsIDIuNCk7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IGEgdmFsdWUgZnJvbSB0aGUgbGluZWFyIHNwYWNlIHRvIHRoZSBnYW1tYSBzcGFjZS5cbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIGluIGxpbmVhciBzcGFjZVxuICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgaW4gZ2FtbWEgc3BhY2VcbiAgICovXG4gIHN0YXRpYyBsaW5lYXJUb0dhbW1hU3BhY2UodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvT3BlbkdML2V4dGVuc2lvbnMvRVhUL0VYVF9mcmFtZWJ1ZmZlcl9zUkdCLnR4dFxuICAgIC8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L09wZW5HTC9leHRlbnNpb25zL0VYVC9FWFRfdGV4dHVyZV9zUkdCX2RlY29kZS50eHRcblxuICAgIGlmICh2YWx1ZSA8PSAwLjApIHJldHVybiAwLjA7XG4gICAgZWxzZSBpZiAodmFsdWUgPCAwLjAwMzEzMDgpIHJldHVybiAxMi45MiAqIHZhbHVlO1xuICAgIGVsc2UgaWYgKHZhbHVlIDwgMS4wKSByZXR1cm4gMS4wNTUgKiBNYXRoLnBvdyh2YWx1ZSwgMC40MTY2NikgLSAwLjA1NTtcbiAgICBlbHNlIHJldHVybiBNYXRoLnBvdyh2YWx1ZSwgMC40MTY2Nik7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgY29sb3JzIGFyZSBlcXVhbHMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IGNvbG9yIHRvIGNvbXBhcmVcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBjb2xvciB0byBjb21wYXJlXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCBjb2xvcnMgYXJlIGVxdWFscywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IENvbG9yLCByaWdodDogQ29sb3IpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlZnQuciwgcmlnaHQucikgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0LmcsIHJpZ2h0LmcpICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5iLCByaWdodC5iKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlZnQuYSwgcmlnaHQuYSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHN1bSBvZiB0d28gY29sb3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBjb2xvciB0byBhZGRcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBjb2xvciB0byBhZGRcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzdW0gb2YgdHdvIGNvbG9yc1xuICAgKiBAcmV0dXJucyBUaGUgYWRkZWQgY29sb3JcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogQ29sb3IsIHJpZ2h0OiBDb2xvciwgb3V0OiBDb2xvcik6IENvbG9yIHtcbiAgICBvdXQuciA9IGxlZnQuciArIHJpZ2h0LnI7XG4gICAgb3V0LmcgPSBsZWZ0LmcgKyByaWdodC5nO1xuICAgIG91dC5iID0gbGVmdC5iICsgcmlnaHQuYjtcbiAgICBvdXQuYSA9IGxlZnQuYSArIHJpZ2h0LmE7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIGEgY29sb3IgYnkgdGhlIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBjb2xvciB0byBzY2FsZVxuICAgKiBAcGFyYW0gcyAtIFRoZSBhbW91bnQgYnkgd2hpY2ggdG8gc2NhbGUgdGhlIGNvbG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc2NhbGVkIGNvbG9yXG4gICAqIEByZXR1cm5zIFRoZSBzY2FsZWQgY29sb3JcbiAgICovXG4gIHN0YXRpYyBzY2FsZShsZWZ0OiBDb2xvciwgczogbnVtYmVyLCBvdXQ6IENvbG9yKTogQ29sb3Ige1xuICAgIG91dC5yID0gbGVmdC5yICogcztcbiAgICBvdXQuZyA9IGxlZnQuZyAqIHM7XG4gICAgb3V0LmIgPSBsZWZ0LmIgKiBzO1xuICAgIG91dC5hID0gbGVmdC5hICogcztcblxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKiogVGhlIHJlZCBjb21wb25lbnQgb2YgdGhlIGNvbG9yLCAwfjEuICovXG4gIHB1YmxpYyByOiBudW1iZXI7XG4gIC8qKiBUaGUgZ3JlZW4gY29tcG9uZW50IG9mIHRoZSBjb2xvciwgMH4xLiAqL1xuICBwdWJsaWMgZzogbnVtYmVyO1xuICAvKiogVGhlIGJsdWUgY29tcG9uZW50IG9mIHRoZSBjb2xvciwgMH4xLiAqL1xuICBwdWJsaWMgYjogbnVtYmVyO1xuICAvKiogVGhlIGFscGhhIGNvbXBvbmVudCBvZiB0aGUgY29sb3IsIDB+MS4gKi9cbiAgcHVibGljIGE6IG51bWJlcjtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3Igb2YgQ29sb3IuXG4gICAqIEBwYXJhbSByIC0gVGhlIHJlZCBjb21wb25lbnQgb2YgdGhlIGNvbG9yXG4gICAqIEBwYXJhbSBnIC0gVGhlIGdyZWVuIGNvbXBvbmVudCBvZiB0aGUgY29sb3JcbiAgICogQHBhcmFtIGIgLSBUaGUgYmx1ZSBjb21wb25lbnQgb2YgdGhlIGNvbG9yXG4gICAqIEBwYXJhbSBhIC0gVGhlIGFscGhhIGNvbXBvbmVudCBvZiB0aGUgY29sb3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHI6IG51bWJlciA9IDEsIGc6IG51bWJlciA9IDEsIGI6IG51bWJlciA9IDEsIGE6IG51bWJlciA9IDEpIHtcbiAgICB0aGlzLnIgPSByO1xuICAgIHRoaXMuZyA9IGc7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmEgPSBhO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBjb2xvci5cbiAgICogQHBhcmFtIHIgLSBUaGUgcmVkIGNvbXBvbmVudCBvZiB0aGUgY29sb3JcbiAgICogQHBhcmFtIGcgLSBUaGUgZ3JlZW4gY29tcG9uZW50IG9mIHRoZSBjb2xvclxuICAgKiBAcGFyYW0gYiAtIFRoZSBibHVlIGNvbXBvbmVudCBvZiB0aGUgY29sb3JcbiAgICogQHBhcmFtIGEgLSBUaGUgYWxwaGEgY29tcG9uZW50IG9mIHRoZSBjb2xvclxuICAgKiBAcmV0dXJucyBUaGlzIGNvbG9yLlxuICAgKi9cbiAgc2V0VmFsdWUocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYTogbnVtYmVyKTogQ29sb3Ige1xuICAgIHRoaXMuciA9IHI7XG4gICAgdGhpcy5nID0gZztcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYSA9IGE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3VtIG9mIHRoaXMgY29sb3IgYW5kIHRoZSBzcGVjaWZpZWQgY29sb3IuXG4gICAqIEBwYXJhbSBjb2xvciAtIFRoZSBzcGVjaWZpZWQgY29sb3JcbiAgICogQHJldHVybnMgVGhlIGFkZGVkIGNvbG9yXG4gICAqL1xuICBhZGQoY29sb3I6IENvbG9yKTogQ29sb3Ige1xuICAgIHRoaXMuciArPSBjb2xvci5yO1xuICAgIHRoaXMuZyArPSBjb2xvci5nO1xuICAgIHRoaXMuYiArPSBjb2xvci5iO1xuICAgIHRoaXMuYSArPSBjb2xvci5hO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyBjb2xvciBieSB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAqIEBwYXJhbSBzIC0gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgY29sb3JcbiAgICogQHJldHVybnMgVGhlIHNjYWxlZCBjb2xvclxuICAgKi9cbiAgc2NhbGUoczogbnVtYmVyKTogQ29sb3Ige1xuICAgIHRoaXMuciAqPSBzO1xuICAgIHRoaXMuZyAqPSBzO1xuICAgIHRoaXMuYiAqPSBzO1xuICAgIHRoaXMuYSAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgY29sb3IuXG4gICAqIEByZXR1cm5zIEEgY2xvbmUgb2YgdGhpcyBjb2xvclxuICAgKi9cbiAgY2xvbmUoKTogQ29sb3Ige1xuICAgIGNvbnN0IHJldCA9IG5ldyBDb2xvcih0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCB0aGlzLmEpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgY29sb3IgdG8gdGhlIHNwZWNpZmllZCBjb2xvci5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBzcGVjaWZpZWQgY29sb3JcbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCBjb2xvclxuICAgKi9cbiAgY2xvbmVUbyhvdXQ6IENvbG9yKTogQ29sb3Ige1xuICAgIG91dC5yID0gdGhpcy5yO1xuICAgIG91dC5nID0gdGhpcy5nO1xuICAgIG91dC5iID0gdGhpcy5iO1xuICAgIG91dC5hID0gdGhpcy5hO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IGNvbXBvbmVudHMgKHIsIGcsIGIpIG9mIHRoaXMgY29sb3IgZnJvbSBnYW1tYSBzcGFjZSB0byBsaW5lYXIgc3BhY2UuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY29sb3IgaW4gbGluZWFyIHNwYWNlXG4gICAqIEByZXR1cm5zIFRoZSBjb2xvciBpbiBsaW5lYXIgc3BhY2VcbiAgICovXG4gIHRvTGluZWFyKG91dDogQ29sb3IpOiBDb2xvciB7XG4gICAgb3V0LnIgPSBDb2xvci5nYW1tYVRvTGluZWFyU3BhY2UodGhpcy5yKTtcbiAgICBvdXQuZyA9IENvbG9yLmdhbW1hVG9MaW5lYXJTcGFjZSh0aGlzLmcpO1xuICAgIG91dC5iID0gQ29sb3IuZ2FtbWFUb0xpbmVhclNwYWNlKHRoaXMuYik7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb2RpZnkgY29tcG9uZW50cyAociwgZywgYikgb2YgdGhpcyBjb2xvciBmcm9tIGxpbmVhciBzcGFjZSB0byBnYW1tYSBzcGFjZS5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBjb2xvciBpbiBnYW1tYSBzcGFjZVxuICAgKiBAcmV0dXJucyBUaGUgY29sb3IgaW4gZ2FtbWEgc3BhY2VcbiAgICovXG4gIHRvR2FtbWEob3V0OiBDb2xvcik6IENvbG9yIHtcbiAgICBvdXQuciA9IENvbG9yLmxpbmVhclRvR2FtbWFTcGFjZSh0aGlzLnIpO1xuICAgIG91dC5nID0gQ29sb3IubGluZWFyVG9HYW1tYVNwYWNlKHRoaXMuZyk7XG4gICAgb3V0LmIgPSBDb2xvci5saW5lYXJUb0dhbW1hU3BhY2UodGhpcy5iKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG4iLCIvKipcbiAqIEVudW0gdHlwZSBmb3IgYmFja2dyb3VuZCBtb2RlLlxuICovXG5leHBvcnQgZW51bSBCYWNrZ3JvdW5kTW9kZSB7XG4gIC8qIFNvbGlkIGNvbG9yLiAqL1xuICBTb2xpZENvbG9yLFxuICAvKiBTa3kuICovXG4gIFNreSxcbiAgLyoqIFRleHR1cmUgKi9cbiAgVGV4dHVyZSxcbn1cbiIsIi8qKlxuICogQ29sb3IgU3BhY2UuXG4gKi9cbmV4cG9ydCBlbnVtIENvbG9yU3BhY2Uge1xuICAvKiogTGluZWFyIGNvbG9yIHNwYWNlLiAqL1xuICBMaW5lYXIsXG4gIC8qKiBHYW1tYSBjb2xvciBzcGFjZS4gKi9cbiAgR2FtbWEsXG59XG4iLCJpbXBvcnQgeyBNYXRyaXg0LCBWZWN0b3IyLCBWZWN0b3IzLCBWZWN0b3I0LCBDb2xvciB9IGZyb20gJy4uLy4uL21hdGgnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmUnO1xuaW1wb3J0IHsgU2hhZGVyUHJvcGVydHlWYWx1ZVR5cGUgfSBmcm9tICcuL1NoYWRlckRhdGEnO1xuaW1wb3J0IHsgQ29sb3JTcGFjZSB9IGZyb20gJy4uL2VudW1zL0NvbG9yU3BhY2UnO1xuXG4vKipcbiAqIFRoZSBlbmNhcHN1bGF0aW9uIG9mIGVhY2ggdW5pZm9ybSB2YXJpYWJsZSwgaW5jbHVkaW5nIGl0cyBjYWNoZSB2YWx1ZSwgZGF0YSB1cGxvYWQgbWV0aG9kLCBhbmQgZGF0YSBzdG9yYWdlIGFkZHJlc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXJVbmlmb3JtIHtcbiAgbmFtZTogc3RyaW5nO1xuICBwcm9wZXJ0eUlkOiBudW1iZXI7XG4gIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgYXBwbHlGdW5jOiAoc2hhZGVyVW5pZm9ybTogU2hhZGVyVW5pZm9ybSwgdmFsdWU6IFNoYWRlclByb3BlcnR5VmFsdWVUeXBlKSA9PiB2b2lkO1xuICBjYWNoZVZhbHVlOiBudW1iZXIgfCBWZWN0b3IyIHwgVmVjdG9yMyB8IFZlY3RvcjQ7XG4gIHRleHR1cmVJbmRleDogR0xlbnVtIHwgR0xlbnVtW107XG4gIHRleHR1cmVEZWZhdWx0OiBUZXh0dXJlIHwgVGV4dHVyZVtdO1xuXG4gIHByaXZhdGUgX2dsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gIHByaXZhdGUgX2NvbG9yU3BhY2U6IENvbG9yU3BhY2U7XG5cbiAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuICAgIHRoaXMuX2dsID0gZ2w7XG4gIH1cblxuICB1cGxvYWQxZihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY2FjaGVWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2dsLnVuaWZvcm0xZihzaGFkZXJVbmlmb3JtLmxvY2F0aW9uLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNhY2hlVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICB1cGxvYWQxZnYoc2hhZGVyVW5pZm9ybTogU2hhZGVyVW5pZm9ybSwgdmFsdWU6IEZsb2F0MzJBcnJheSk6IHZvaWQge1xuICAgIHRoaXMuX2dsLnVuaWZvcm0xZnYoc2hhZGVyVW5pZm9ybS5sb2NhdGlvbiwgdmFsdWUpO1xuICB9XG5cbiAgdXBsb2FkMmZ2KHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9nbC51bmlmb3JtMmZ2KHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcbiAgfVxuXG4gIHVwbG9hZDNmKHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBWZWN0b3IzIHwgVmVjdG9yNCB8IENvbG9yKTogdm9pZCB7XG4gICAgY29uc3QgY2FjaGVWYWx1ZSA9IDxWZWN0b3IzPnRoaXMuY2FjaGVWYWx1ZTtcbiAgICBpZiAoKDxDb2xvcj52YWx1ZSkuciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY2FjaGVWYWx1ZS54ICE9PSAoPENvbG9yPnZhbHVlKS5yIHx8IGNhY2hlVmFsdWUueSAhPT0gKDxDb2xvcj52YWx1ZSkuZyB8fCBjYWNoZVZhbHVlLnogIT09ICg8Q29sb3I+dmFsdWUpLmIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbG9yU3BhY2UgPT09IENvbG9yU3BhY2UuTGluZWFyKSB7XG4gICAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTNmKFxuICAgICAgICAgICAgc2hhZGVyVW5pZm9ybS5sb2NhdGlvbixcbiAgICAgICAgICAgIENvbG9yLmdhbW1hVG9MaW5lYXJTcGFjZSgoPENvbG9yPnZhbHVlKS5yKSxcbiAgICAgICAgICAgIENvbG9yLmdhbW1hVG9MaW5lYXJTcGFjZSgoPENvbG9yPnZhbHVlKS5nKSxcbiAgICAgICAgICAgIENvbG9yLmdhbW1hVG9MaW5lYXJTcGFjZSgoPENvbG9yPnZhbHVlKS5iKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2dsLnVuaWZvcm0zZihzaGFkZXJVbmlmb3JtLmxvY2F0aW9uLCAoPENvbG9yPnZhbHVlKS5yLCAoPENvbG9yPnZhbHVlKS5nLCAoPENvbG9yPnZhbHVlKS5iKTtcbiAgICAgICAgfVxuICAgICAgICBjYWNoZVZhbHVlLnggPSAoPENvbG9yPnZhbHVlKS5yO1xuICAgICAgICBjYWNoZVZhbHVlLnkgPSAoPENvbG9yPnZhbHVlKS5nO1xuICAgICAgICBjYWNoZVZhbHVlLnogPSAoPENvbG9yPnZhbHVlKS5iO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNhY2hlVmFsdWUueCAhPT0gKDxWZWN0b3IzPnZhbHVlKS54IHx8XG4gICAgICAgIGNhY2hlVmFsdWUueSAhPT0gKDxWZWN0b3IzPnZhbHVlKS55IHx8XG4gICAgICAgIGNhY2hlVmFsdWUueiAhPT0gKDxWZWN0b3IzPnZhbHVlKS56XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTNmKHNoYWRlclVuaWZvcm0ubG9jYXRpb24sICg8VmVjdG9yMz52YWx1ZSkueCwgKDxWZWN0b3IzPnZhbHVlKS55LCAoPFZlY3RvcjM+dmFsdWUpLnopO1xuICAgICAgICBjYWNoZVZhbHVlLnggPSAoPFZlY3RvcjM+dmFsdWUpLng7XG4gICAgICAgIGNhY2hlVmFsdWUueSA9ICg8VmVjdG9yMz52YWx1ZSkueTtcbiAgICAgICAgY2FjaGVWYWx1ZS56ID0gKDxWZWN0b3IzPnZhbHVlKS56O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZDNmdihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgdGhpcy5fZ2wudW5pZm9ybTNmdihzaGFkZXJVbmlmb3JtLmxvY2F0aW9uLCB2YWx1ZSk7XG4gIH1cblxuICB1cGxvYWQ0ZihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogVmVjdG9yNCB8IENvbG9yKTogdm9pZCB7XG4gICAgY29uc3QgY2FjaGVWYWx1ZSA9IDxWZWN0b3I0PnRoaXMuY2FjaGVWYWx1ZTtcbiAgICBpZiAoKDxDb2xvcj52YWx1ZSkuciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNhY2hlVmFsdWUueCAhPT0gKDxDb2xvcj52YWx1ZSkuciB8fFxuICAgICAgICBjYWNoZVZhbHVlLnkgIT09ICg8Q29sb3I+dmFsdWUpLmcgfHxcbiAgICAgICAgY2FjaGVWYWx1ZS56ICE9PSAoPENvbG9yPnZhbHVlKS5iIHx8XG4gICAgICAgIGNhY2hlVmFsdWUudyAhPT0gKDxDb2xvcj52YWx1ZSkuYVxuICAgICAgKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb2xvclNwYWNlID09PSBDb2xvclNwYWNlLkxpbmVhcikge1xuICAgICAgICAgIHRoaXMuX2dsLnVuaWZvcm00ZihcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0ubG9jYXRpb24sXG4gICAgICAgICAgICBDb2xvci5nYW1tYVRvTGluZWFyU3BhY2UoKDxDb2xvcj52YWx1ZSkuciksXG4gICAgICAgICAgICBDb2xvci5nYW1tYVRvTGluZWFyU3BhY2UoKDxDb2xvcj52YWx1ZSkuZyksXG4gICAgICAgICAgICBDb2xvci5nYW1tYVRvTGluZWFyU3BhY2UoKDxDb2xvcj52YWx1ZSkuYiksXG4gICAgICAgICAgICAoPENvbG9yPnZhbHVlKS5hLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTRmKFxuICAgICAgICAgICAgc2hhZGVyVW5pZm9ybS5sb2NhdGlvbixcbiAgICAgICAgICAgICg8Q29sb3I+dmFsdWUpLnIsXG4gICAgICAgICAgICAoPENvbG9yPnZhbHVlKS5nLFxuICAgICAgICAgICAgKDxDb2xvcj52YWx1ZSkuYixcbiAgICAgICAgICAgICg8Q29sb3I+dmFsdWUpLmEsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjYWNoZVZhbHVlLnggPSAoPENvbG9yPnZhbHVlKS5yO1xuICAgICAgICBjYWNoZVZhbHVlLnkgPSAoPENvbG9yPnZhbHVlKS5nO1xuICAgICAgICBjYWNoZVZhbHVlLnogPSAoPENvbG9yPnZhbHVlKS5iO1xuICAgICAgICBjYWNoZVZhbHVlLncgPSAoPENvbG9yPnZhbHVlKS5hO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNhY2hlVmFsdWUueCAhPT0gKDxWZWN0b3I0PnZhbHVlKS54IHx8XG4gICAgICAgIGNhY2hlVmFsdWUueSAhPT0gKDxWZWN0b3I0PnZhbHVlKS55IHx8XG4gICAgICAgIGNhY2hlVmFsdWUueiAhPT0gKDxWZWN0b3I0PnZhbHVlKS56IHx8XG4gICAgICAgIGNhY2hlVmFsdWUudyAhPT0gKDxWZWN0b3I0PnZhbHVlKS53XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTRmKFxuICAgICAgICAgIHNoYWRlclVuaWZvcm0ubG9jYXRpb24sXG4gICAgICAgICAgKDxWZWN0b3I0PnZhbHVlKS54LFxuICAgICAgICAgICg8VmVjdG9yND52YWx1ZSkueSxcbiAgICAgICAgICAoPFZlY3RvcjQ+dmFsdWUpLnosXG4gICAgICAgICAgKDxWZWN0b3I0PnZhbHVlKS53LFxuICAgICAgICApO1xuICAgICAgICBjYWNoZVZhbHVlLnggPSAoPFZlY3RvcjQ+dmFsdWUpLng7XG4gICAgICAgIGNhY2hlVmFsdWUueSA9ICg8VmVjdG9yND52YWx1ZSkueTtcbiAgICAgICAgY2FjaGVWYWx1ZS56ID0gKDxWZWN0b3I0PnZhbHVlKS56O1xuICAgICAgICBjYWNoZVZhbHVlLncgPSAoPFZlY3RvcjQ+dmFsdWUpLnc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBsb2FkNGZ2KHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9nbC51bmlmb3JtNGZ2KHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcbiAgfVxuXG4gIHVwbG9hZDFpKHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jYWNoZVZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fZ2wudW5pZm9ybTFpKHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcbiAgICAgIHRoaXMuY2FjaGVWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHVwbG9hZDFpdihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogSW50MzJBcnJheSk6IHZvaWQge1xuICAgIHRoaXMuX2dsLnVuaWZvcm0xaXYoc2hhZGVyVW5pZm9ybS5sb2NhdGlvbiwgdmFsdWUpO1xuICB9XG5cbiAgdXBsb2FkMml2KHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBJbnQzMkFycmF5KTogdm9pZCB7XG4gICAgdGhpcy5fZ2wudW5pZm9ybTJpdihzaGFkZXJVbmlmb3JtLmxvY2F0aW9uLCB2YWx1ZSk7XG4gIH1cblxuICB1cGxvYWQzaXYoc2hhZGVyVW5pZm9ybTogU2hhZGVyVW5pZm9ybSwgdmFsdWU6IEludDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9nbC51bmlmb3JtM2l2KHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcbiAgfVxuXG4gIHVwbG9hZDRpdihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogSW50MzJBcnJheSk6IHZvaWQge1xuICAgIHRoaXMuX2dsLnVuaWZvcm00aXYoc2hhZGVyVW5pZm9ybS5sb2NhdGlvbiwgdmFsdWUpO1xuICB9XG5cbiAgdXBsb2FkTWF0NChzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogTWF0cml4NCk6IHZvaWQge1xuICAgIHRoaXMuX2dsLnVuaWZvcm1NYXRyaXg0ZnYoc2hhZGVyVW5pZm9ybS5sb2NhdGlvbiwgZmFsc2UsIHZhbHVlLmVsZW1lbnRzKTtcbiAgfVxuXG4gIHVwbG9hZE1hdDR2KHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9nbC51bmlmb3JtTWF0cml4NGZ2KHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7XG4gIH1cblxuICB1cGxvYWRUZXh0dXJlKHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBUZXh0dXJlKTogdm9pZCB7XG4gICAgLy8g5byA5ZCv56yseOWPt+e6ueeQhuWNleWFg1xuICAgIHRoaXMuX2dsLmFjdGl2ZVRleHR1cmUoc2hhZGVyVW5pZm9ybS50ZXh0dXJlSW5kZXggYXMgR0xlbnVtKTtcbiAgICAvLyDlkJF0YXJnZXTnu5HlrprnurnnkIblr7nosaFcbiAgICB0aGlzLl9nbC5iaW5kVGV4dHVyZSh2YWx1ZS5fZ2xUYXJnZXQsIHZhbHVlLl9nbFRleHR1cmUpO1xuICB9XG59XG4iLCIvKipcbiAqIFNoYWRlciBkYXRhIGdyb3VwaW5nLlxuICovXG5leHBvcnQgZW51bSBTaGFkZXJEYXRhR3JvdXAge1xuICAvKiogU2NlbmUgZ3JvdXAuICovXG4gIFNjZW5lLFxuICAvKiogQ2FtZXJhIGdyb3VwLiAqL1xuICBDYW1lcmEsXG4gIC8qKiBSZW5kZXJlciBncm91cC4gKi9cbiAgUmVuZGVyZXIsXG4gIC8qKiBtYXRlcmlhbCBncm91cC4gKi9cbiAgTWF0ZXJpYWwsXG4gIC8vIFRPRE86IEdlb2dyYXBoaWNcbn1cbiIsImltcG9ydCB7IFNoYWRlclVuaWZvcm0gfSBmcm9tICcuL1NoYWRlclVuaWZvcm0nO1xuXG4vKipcbiAqIFNoYWRlciB1bmlmb3JtIGJsb2NrLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXJVbmlmb3JtQmxvY2sge1xuICByZWFkb25seSBjb25zdFVuaWZvcm1zOiBTaGFkZXJVbmlmb3JtW10gPSBbXTtcbiAgcmVhZG9ubHkgdGV4dHVyZVVuaWZvcm1zOiBTaGFkZXJVbmlmb3JtW10gPSBbXTtcbn1cbiIsImltcG9ydCB7IFNoYWRlclByb2dyYW0gfSBmcm9tICcuL3NoYWRlci9TaGFkZXJQcm9ncmFtJztcbmltcG9ydCB7IE1lc2gsIFN1Yk1lc2ggfSBmcm9tICcuL2dyYXBoaWMnO1xuXG4vKipcbiAqIFJlbmRlcmVyLCBlYWNoIE1lc2ggd2lsbCBoYXZlIGEgcmVuZGVyZXIgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5kZXJlciB7XG4gIC8qKiBDdXJyZW50IGJpbmQgcHJvZ3JhbS4gKi9cbiAgc3RhdGljIGdsUHJvZ3JhbTogU2hhZGVyUHJvZ3JhbTtcbiAgLy8gVE9ETzog6KaB5o6l5YWld2ViZ2wyLCDlupTor6Xmir3lh7rkuIDkuKrnsbvlnotcbiAgcHJpdmF0ZSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICAvKiogQXJyYXkgb2YgYWRkcmVzc2VzIG9mIGF0dHJpYnV0ZSB2YXJpYWJsZXMgaW4gc2hhZGVyIHByb2dyYW1zLiAqL1xuICBwcm90ZWN0ZWQgYXR0cmliTG9jQXJyYXk6IG51bWJlcltdO1xuICAvKiogTWVzaCB0byBiZSByZW5kZXJlZC4gKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9wcmltaXRpdmU6IE1lc2g7XG5cbiAgLyoqXG4gICAqIFJlbmRlciBiYXNlZCBvbiByZW5kZXJpbmcgY29udGV4dCBhbmQgZ3JpZC5cbiAgICogQHBhcmFtIGdsIFdlYkdMIHJlbmRlcmluZyBjb250ZXh0LlxuICAgKiBAcGFyYW0gcHJpbWl0aXZlIE1lc2ggdG8gYmUgcmVuZGVyZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwcmltaXRpdmU6IE1lc2gpIHtcbiAgICB0aGlzLl9wcmltaXRpdmUgPSBwcmltaXRpdmU7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuaW5pdFJlbmRlclN0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQmluZCBidWZmZXIgYW5kIGF0dHJpYnV0ZS5cbiAgICovXG4gIHByb3RlY3RlZCBiaW5kQnVmZmVyQW5kQXR0cmliKHNoYWRlclByb2dyYW06IFNoYWRlclByb2dyYW0pOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgY29uc3QgcHJpbWl0aXZlID0gdGhpcy5fcHJpbWl0aXZlO1xuICAgIGNvbnN0IHZlcnRleEJ1ZmZlckJpbmRpbmdzID0gcHJpbWl0aXZlLl92ZXJ0ZXhCdWZmZXJCaW5kaW5ncztcblxuICAgIHRoaXMuYXR0cmliTG9jQXJyYXkgPSBbXTtcbiAgICBjb25zdCBhdHRyaWJ1dGVMb2NhdGlvbiA9IHNoYWRlclByb2dyYW0uYXR0cmlidXRlTG9jYXRpb247XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHByaW1pdGl2ZS5fdmVydGV4RWxlbWVudE1hcDtcblxuICAgIGxldCB2Ym86IFdlYkdMQnVmZmVyO1xuICAgIGxldCBsYXN0Qm91bmRWYm86IFdlYkdMQnVmZmVyO1xuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIGF0dHJpYnV0ZUxvY2F0aW9uKSB7XG4gICAgICBjb25zdCBsb2MgPSBhdHRyaWJ1dGVMb2NhdGlvbltuYW1lXTtcbiAgICAgIGlmIChsb2MgPT09IC0xKSBjb250aW51ZTtcblxuICAgICAgY29uc3QgZWxlbWVudCA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgc3RyaWRlIH0gPSB2ZXJ0ZXhCdWZmZXJCaW5kaW5nc1tlbGVtZW50LmJpbmRpbmdJbmRleF07XG4gICAgICAgIHZibyA9IGJ1ZmZlci5fbmF0aXZlQnVmZmVyO1xuICAgICAgICBpZiAobGFzdEJvdW5kVmJvICE9PSB2Ym8pIHtcbiAgICAgICAgICBsYXN0Qm91bmRWYm8gPSB2Ym87XG4gICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZibyk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2MpO1xuICAgICAgICBjb25zdCB7IHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQgfSA9IGVsZW1lbnQuX2dsRWxlbWVudEluZm87XG4gICAgICAgIC8vIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCAwLCBlbGVtZW50Lm9mZnNldCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUsIGVsZW1lbnQub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5hdHRyaWJMb2NBcnJheS5wdXNoKGxvYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ3ZlcnRleCBhdHRyaWJ1dGUgbm90IGZvdW5kOiAnICsgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcbiAgfVxuXG4gIC8vIFRPRE86IOi/meS4qua4suafk+eKtuaAgeaYr+S4jeaYr+W6lOivpeiAg+iZkeaUvuWIsOadkOi0qOmHjOmdou+8jOW5tuS4lOaKveWHuuS4gOS4qlJlbmRlclN0YXRlXG4gIC8qKlxuICAgKiBDbGVhciBkZXB0aCwgY29sb3IgYnVmZmVyLCBldGMuXG4gICAqL1xuICBpbml0UmVuZGVyU3RhdGUoKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgIGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XG4gICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xuICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IHRoZSBwcmltaXRpdmUuXG4gICAqL1xuICBkcmF3KHNoYWRlclByb2dyYW06IFNoYWRlclByb2dyYW0sIHN1Yk1lc2g6IFN1Yk1lc2gpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgY29uc3QgcHJpbWl0aXZlID0gdGhpcy5fcHJpbWl0aXZlO1xuXG4gICAgdGhpcy5iaW5kQnVmZmVyQW5kQXR0cmliKHNoYWRlclByb2dyYW0pO1xuXG4gICAgY29uc3QgeyBfaW5kZXhCdWZmZXJCaW5kaW5nLCBfaW5zdGFuY2VDb3VudCwgX2dsSW5kZXhUeXBlLCBfZ2xJbmRleEJ5dGVDb3VudCB9ID0gcHJpbWl0aXZlO1xuICAgIGNvbnN0IHsgdG9wb2xvZ3ksIHN0YXJ0LCBjb3VudCB9ID0gc3ViTWVzaDtcblxuICAgIGlmICghX2luc3RhbmNlQ291bnQpIHtcbiAgICAgIGlmIChfaW5kZXhCdWZmZXJCaW5kaW5nKSB7XG4gICAgICAgIGNvbnN0IHsgX25hdGl2ZUJ1ZmZlciB9ID0gX2luZGV4QnVmZmVyQmluZGluZy5idWZmZXI7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIF9uYXRpdmVCdWZmZXIpO1xuICAgICAgICBnbC5kcmF3RWxlbWVudHModG9wb2xvZ3ksIGNvdW50LCBfZ2xJbmRleFR5cGUsIHN0YXJ0ICogX2dsSW5kZXhCeXRlQ291bnQpO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLmRyYXdBcnJheXModG9wb2xvZ3ksIHN0YXJ0LCBjb3VudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGVzdERyYXcoc2hhZGVyUHJvZ3JhbTogU2hhZGVyUHJvZ3JhbSkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgMS4wLFxuICAgICAgMS4wLFxuICAgICAgMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIDEuMCxcbiAgICAgIDEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAtMS4wLFxuICAgICAgMS4wLFxuICAgICAgMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIDEuMCwgLy9mcm9udOmdoiB2MC00XG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAtMS4wLFxuICAgICAgMS4wLFxuICAgICAgMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAtMS4wLCAvL3JpZ2h0IHYwMzQ1XG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAtMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIDEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAtMS4wLFxuICAgICAgMS4wLFxuICAgICAgMS4wLCAvL3VwIHYwNTYxXG4gICAgICAtMS4wLFxuICAgICAgMS4wLFxuICAgICAgMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAxLjAsXG4gICAgICAtMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAtMS4wLFxuICAgICAgMS4wLFxuICAgICAgLTEuMCwgLy9sZWZ0XG4gICAgICAtMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIDEuMCxcbiAgICAgIDEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAxLjAsXG4gICAgICAxLjAsXG4gICAgICAtMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAtMS4wLFxuICAgICAgLTEuMCwgLy9kb3duXG4gICAgICAxLjAsXG4gICAgICAtMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIDEuMCxcbiAgICAgIDEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAtMS4wLFxuICAgICAgMS4wLFxuICAgICAgLTEuMCxcbiAgICAgIC0xLjAsXG4gICAgICAtMS4wLFxuICAgICAgLTEuMCwgLy9iYWNrXG4gICAgXSk7XG4gICAgdmFyIGJ1ZiA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWYpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBwb3NpdGlvbiwgZ2wuU1RBVElDX0RSQVcpO1xuICAgIHZhciBsb2MgPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihzaGFkZXJQcm9ncmFtLmdsUHJvZ3JhbSwgJ1BPU0lUSU9OJyk7XG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2MsIDMsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jKTtcbiAgICBjb25zdCBpbmRpY2UgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAwLCAxLCAyLCAwLCAyLCAzLCA0LCA1LCA2LCA0LCA2LCA3LCA4LCA5LCAxMCwgOCwgMTAsIDExLCAxMiwgMTMsIDE0LCAxMiwgMTQsIDE1LCAxNiwgMTcsIDE4LCAxNiwgMTgsIDE5LCAyMCwgMjEsXG4gICAgICAyMiwgMjAsIDIyLCAyMyxcbiAgICBdKTtcbiAgICB2YXIgYnVmID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYnVmKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRpY2UsIGdsLlNUQVRJQ19EUkFXKTtcbiAgICBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7XG4gICAgZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAxLjApO1xuICAgIGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIGluZGljZS5sZW5ndGgsIGdsLlVOU0lHTkVEX0JZVEUsIDApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuL1NoYWRlcic7XG5pbXBvcnQgeyBTaGFkZXJVbmlmb3JtIH0gZnJvbSAnLi9TaGFkZXJVbmlmb3JtJztcbmltcG9ydCB7IFNoYWRlckRhdGFHcm91cCB9IGZyb20gJy4vZW51bXMvU2hhZGVyRGF0YUdyb3VwJztcbmltcG9ydCB7IFNoYWRlclVuaWZvcm1CbG9jayB9IGZyb20gJy4vU2hhZGVyVW5pZm9ybUJsb2NrJztcbmltcG9ydCB7IFNoYWRlckRhdGEgfSBmcm9tICcuL1NoYWRlckRhdGEnO1xuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuLi9SZW5kZXJlcic7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9FbmdpbmUnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmUnO1xuaW1wb3J0IHsgVmVjdG9yMywgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgnO1xuXG4vKipcbiAqIFNoYWRlciBwcm9ncmFtLCBjb3JyZXNwb25kaW5nIHRvIHRoZSBHUFUgc2hhZGVyIHByb2dyYW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXJQcm9ncmFtIHtcbiAgLyoqIFNoYWRlciBwcm9ncmFtIGNvdW50ZXIuICovXG4gIHByaXZhdGUgc3RhdGljIF9jb3VudGVyID0gMDtcbiAgLyoqIFNoYWRlciBwcm9ncmFtIGlkLiAqL1xuICBpZDogbnVtYmVyO1xuXG4gIHJlYWRvbmx5IHNjZW5lVW5pZm9ybUJsb2NrOiBTaGFkZXJVbmlmb3JtQmxvY2sgPSBuZXcgU2hhZGVyVW5pZm9ybUJsb2NrKCk7XG4gIHJlYWRvbmx5IGNhbWVyYVVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrID0gbmV3IFNoYWRlclVuaWZvcm1CbG9jaygpO1xuICByZWFkb25seSByZW5kZXJlclVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrID0gbmV3IFNoYWRlclVuaWZvcm1CbG9jaygpO1xuICByZWFkb25seSBtYXRlcmlhbFVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrID0gbmV3IFNoYWRlclVuaWZvcm1CbG9jaygpO1xuICByZWFkb25seSBvdGhlclVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrID0gbmV3IFNoYWRlclVuaWZvcm1CbG9jaygpO1xuXG4gIC8qKiBBdHRyaWJ1dGUgdmFyaWFibGUgbG9jYXRpb24gaW4gd2ViZ2wuICovXG4gIGF0dHJpYnV0ZUxvY2F0aW9uOiBSZWNvcmQ8c3RyaW5nLCBHTGludD4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHByaXZhdGUgX2lzVmFsaWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgX2VuZ2luZTogRW5naW5lO1xuICBwcml2YXRlIF9nbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICBwcml2YXRlIF92ZXJ0ZXhTaGFkZXI6IFdlYkdMU2hhZGVyO1xuICBwcml2YXRlIF9mcmFnbWVudFNoYWRlcjogV2ViR0xTaGFkZXI7XG4gIHByaXZhdGUgX2dsUHJvZ3JhbTogV2ViR0xQcm9ncmFtO1xuICAvLyDlvZPliY3mv4DmtLvnmoTnurnnkIbljZXlhYNcbiAgLyoqIEN1cnJlbnRseSBhY3RpdmUgdGV4dHVyZSB1bml0LiAqL1xuICBwcml2YXRlIF9hY3RpdmVUZXh0dXJlVWludDogbnVtYmVyID0gMDtcblxuICAvKiogV2ViR0wgcHJvZ3JhbS4gKi9cbiAgZ2V0IGdsUHJvZ3JhbSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2xQcm9ncmFtO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBzaGFkZXIgcHJvZ3JhbSBpcyB2YWxpZC5cbiAgICovXG4gIGdldCBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUsIHZlcnRleFNvdXJjZTogc3RyaW5nLCBmcmFnbWVudFNvdXJjZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xuICAgIHRoaXMuX2dsID0gZW5naW5lLmdsO1xuICAgIHRoaXMuX2dsUHJvZ3JhbSA9IHRoaXMuX2NyZWF0ZVByb2dyYW0odmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XG4gICAgLy8gISBiaW5k5LiN5bqU6K+l5pS+5ZyoY29uc3RydWN0b3Lph4zpnaJcbiAgICB0aGlzLmJpbmQoKTtcblxuICAgIGlmICh0aGlzLl9nbFByb2dyYW0pIHtcbiAgICAgIHRoaXMuX2lzVmFsaWQgPSB0cnVlO1xuICAgICAgdGhpcy5fcmVjb3JkTG9jYXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaWQgPSBTaGFkZXJQcm9ncmFtLl9jb3VudGVyKys7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgd2ViZ2wgcHJvZ3JhbSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHZlcnRleFNvdXJjZSBWZXJ0ZXggc291cmNlIGNvZGUuXG4gICAqIEBwYXJhbSBmcmFnbWVudFNvdXJjZSBGcmFnbWVudCBzb3VyY2UgY29kZS5cbiAgICogQHJldHVybnMgV2ViR0wgcHJvZ3JhbS5cbiAgICovXG4gIHByaXZhdGUgX2NyZWF0ZVByb2dyYW0odmVydGV4U291cmNlOiBzdHJpbmcsIGZyYWdtZW50U291cmNlOiBzdHJpbmcpOiBXZWJHTFByb2dyYW0gfCBudWxsIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuXG4gICAgLy8gY3JlYXRlIGFuZCBjb21waWxlIHNoYWRlclxuICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IHRoaXMuX2NyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSLCB2ZXJ0ZXhTb3VyY2UpO1xuICAgIGlmICghdmVydGV4U2hhZGVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IHRoaXMuX2NyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIsIGZyYWdtZW50U291cmNlKTtcbiAgICBpZiAoIWZyYWdtZW50U2hhZGVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBsaW5rIHByb2dyYW0gYW5kIHNoYWRlclxuICAgIGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcbiAgICBnbC52YWxpZGF0ZVByb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICBpZiAoZ2wuaXNDb250ZXh0TG9zdCgpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb250ZXh0IGxvc3Qgd2hpbGUgbGlua2luZyBwcm9ncmFtLicpO1xuICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgICBnbC5kZWxldGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgY29uc29sZS5lcnJvcignQ291bGQgbm90IGxpbmsgV2ViR0wgcHJvZ3JhbS4gXFxuJyArIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcbiAgICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLl92ZXJ0ZXhTaGFkZXIgPSB2ZXJ0ZXhTaGFkZXI7XG4gICAgdGhpcy5fZnJhZ21lbnRTaGFkZXIgPSBmcmFnbWVudFNoYWRlcjtcbiAgICByZXR1cm4gcHJvZ3JhbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGNvbXBpbGUgc2hhZGVyLlxuICAgKiBAcGFyYW0gc2hhZGVyVHlwZSBGcmFnbWVudCBzaGFkZXIgY29kZSBvciB2ZXJ0ZXggc2hhZGVyIGNvZGUuXG4gICAqIEBwYXJhbSBzaGFkZXJTb3VyY2UgRnJhZ21lbnQgc2hhZGVyIHNvdXJjZSBjb2RlIG9yIHZlcnRleCBzaGFkZXIgc291cmNlIGNvZGUuXG4gICAqIEByZXR1cm5zIFdlYkdMU2hhZGVyIHwgbnVsbFxuICAgKi9cbiAgcHJpdmF0ZSBfY3JlYXRlU2hhZGVyKHNoYWRlclR5cGU6IG51bWJlciwgc2hhZGVyU291cmNlOiBzdHJpbmcpOiBXZWJHTFNoYWRlciB8IG51bGwge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHNoYWRlclR5cGUpO1xuXG4gICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvbnRleHQgbG9zdCB3aGlsZSBjcmVhdGUgc2hhZGVyLicpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgICBpZiAoZ2wuaXNDb250ZXh0TG9zdCgpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb250ZXh0IGxvc3Qgd2hpbGUgY29tcGlsaW5nIHNoYWRlci4nKTtcbiAgICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBjb21waWxlIFdlYkdMIHNoYWRlci5cXG4ke2dsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKX1gKTtcbiAgICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYWRlcjtcbiAgfVxuXG4gIC8vIOWwhue6ueeQhuaVsOaNruaIluiAhXVuaWZvcm3mlbDmja7mjqjlhaXlr7nlupTnu4TnmoRibG9ja1xuICAvKipcbiAgICogUHVzaCB0ZXh0dXJlIGRhdGEgb3IgdW5pZm9ybSBkYXRhIGludG8gdGhlIGJsb2NrIG9mIHRoZSBjb3JyZXNwb25kaW5nIGdyb3VwLlxuICAgKiBAcGFyYW0gdW5pZm9ybSBTaGFkZXIgdW5pZm9ybS5cbiAgICogQHBhcmFtIGdyb3VwIFNoYWRlciBkYXRhIGdyb3VwOiBTY2VuZSwgQ2FtZXJhLCBSZW5kZXJlciBhbmQgTWF0ZXJpYWwuXG4gICAqIEBwYXJhbSBpc1RleHR1cmUgSXMgaXQgYSB0ZXh0dXJlIG9yIGEgdW5pZm9ybSB2YXJpYWJsZS5cbiAgICovXG4gIHByaXZhdGUgX2dyb3VwaW5nVW5pZm9ybSh1bmlmb3JtOiBTaGFkZXJVbmlmb3JtLCBncm91cDogU2hhZGVyRGF0YUdyb3VwLCBpc1RleHR1cmU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBzd2l0Y2ggKGdyb3VwKSB7XG4gICAgICBjYXNlIFNoYWRlckRhdGFHcm91cC5TY2VuZTpcbiAgICAgICAgaWYgKGlzVGV4dHVyZSkge1xuICAgICAgICAgIHRoaXMuc2NlbmVVbmlmb3JtQmxvY2sudGV4dHVyZVVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zY2VuZVVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNoYWRlckRhdGFHcm91cC5DYW1lcmE6XG4gICAgICAgIGlmIChpc1RleHR1cmUpIHtcbiAgICAgICAgICB0aGlzLmNhbWVyYVVuaWZvcm1CbG9jay50ZXh0dXJlVW5pZm9ybXMucHVzaCh1bmlmb3JtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNhbWVyYVVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNoYWRlckRhdGFHcm91cC5SZW5kZXJlcjpcbiAgICAgICAgaWYgKGlzVGV4dHVyZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXJVbmlmb3JtQmxvY2sudGV4dHVyZVVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlclVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNoYWRlckRhdGFHcm91cC5NYXRlcmlhbDpcbiAgICAgICAgaWYgKGlzVGV4dHVyZSkge1xuICAgICAgICAgIHRoaXMubWF0ZXJpYWxVbmlmb3JtQmxvY2sudGV4dHVyZVVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tYXRlcmlhbFVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoaXNUZXh0dXJlKSB7XG4gICAgICAgICAgdGhpcy5vdGhlclVuaWZvcm1CbG9jay50ZXh0dXJlVW5pZm9ybXMucHVzaCh1bmlmb3JtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm90aGVyVW5pZm9ybUJsb2NrLmNvbnN0VW5pZm9ybXMucHVzaCh1bmlmb3JtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNvcmQgdGhlIGxvY2F0aW9uIG9mIHVuaWZvcm0vYXR0cmlidXRlLlxuICAgKi9cbiAgcHJpdmF0ZSBfcmVjb3JkTG9jYXRpb24oKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5fZ2xQcm9ncmFtO1xuICAgIGNvbnN0IHVuaWZvcm1JbmZvcyA9IHRoaXMuX2dldFVuaWZvcm1JbmZvcygpO1xuICAgIGNvbnN0IGF0dHJpYnV0ZUluZm9zID0gdGhpcy5fZ2V0QXR0cmlidXRlSW5mb3MoKTtcblxuICAgIHVuaWZvcm1JbmZvcy5mb3JFYWNoKCh7IG5hbWUsIHNpemUsIHR5cGUgfSkgPT4ge1xuICAgICAgY29uc3Qgc2hhZGVyVW5pZm9ybSA9IG5ldyBTaGFkZXJVbmlmb3JtKGdsKTtcbiAgICAgIGxldCBpc0FycmF5ID0gZmFsc2U7XG4gICAgICBsZXQgaXNUZXh0dXJlID0gZmFsc2U7XG5cbiAgICAgIGlmIChuYW1lLmluZGV4T2YoJ1swXScpID4gMCkge1xuICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSAzKTtcbiAgICAgICAgaXNBcnJheSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGdyb3VwID0gU2hhZGVyLl9nZXRTaGFkZXJQcm9wZXJ0eUdyb3VwKG5hbWUpO1xuICAgICAgY29uc3QgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7XG4gICAgICBzaGFkZXJVbmlmb3JtLm5hbWUgPSBuYW1lO1xuICAgICAgc2hhZGVyVW5pZm9ybS5wcm9wZXJ0eUlkID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKG5hbWUpLl91bmlxdWVJZDtcbiAgICAgIHNoYWRlclVuaWZvcm0ubG9jYXRpb24gPSBsb2NhdGlvbjtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgZ2wuRkxPQVQ6XG4gICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQxZnY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQxZjtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uY2FjaGVWYWx1ZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGdsLkZMT0FUX1ZFQzI6XG4gICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQyZnY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGdsLkZMT0FUX1ZFQzM6XG4gICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQzZnY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQzZjtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uY2FjaGVWYWx1ZSA9IG5ldyBWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9WRUM0OlxuICAgICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmFwcGx5RnVuYyA9IHNoYWRlclVuaWZvcm0udXBsb2FkNGZ2O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmFwcGx5RnVuYyA9IHNoYWRlclVuaWZvcm0udXBsb2FkNGY7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmNhY2hlVmFsdWUgPSBuZXcgVmVjdG9yNCgwLCAwLCAwLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZ2wuSU5UOlxuICAgICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmFwcGx5RnVuYyA9IHNoYWRlclVuaWZvcm0udXBsb2FkMWl2O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmFwcGx5RnVuYyA9IHNoYWRlclVuaWZvcm0udXBsb2FkMWk7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmNhY2hlVmFsdWUgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBnbC5JTlRfVkVDMjpcbiAgICAgICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICAgICAgc2hhZGVyVW5pZm9ybS5hcHBseUZ1bmMgPSBzaGFkZXJVbmlmb3JtLnVwbG9hZDJpdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZ2wuSU5UX1ZFQzQ6XG4gICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQ0aXY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDQ6XG4gICAgICAgICAgc2hhZGVyVW5pZm9ybS5hcHBseUZ1bmMgPSBpc0FycmF5ID8gc2hhZGVyVW5pZm9ybS51cGxvYWRNYXQ0diA6IHNoYWRlclVuaWZvcm0udXBsb2FkTWF0NDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBnbC5TQU1QTEVSXzJEOlxuICAgICAgICBjYXNlIGdsLlNBTVBMRVJfQ1VCRTpcbiAgICAgICAgICBsZXQgZGVmYXVsdFRleHR1cmU6IFRleHR1cmU7XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGdsLlNBTVBMRVJfMkQ6XG4gICAgICAgICAgICAgIGRlZmF1bHRUZXh0dXJlID0gdGhpcy5fZW5naW5lLl93aGl0ZVRleHR1cmUyRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGdsLlNBTVBMRVJfQ1VCRTpcbiAgICAgICAgICAgICAgZGVmYXVsdFRleHR1cmUgPSB0aGlzLl9lbmdpbmUuX3doaXRlVGV4dHVyZUN1YmU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0ZXh0dXJlIHR5cGUuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNUZXh0dXJlID0gdHJ1ZTtcbiAgICAgICAgICBjb25zdCB0ZXh0dXJlSW5kZXggPSBnbC5URVhUVVJFMCArIHRoaXMuX2FjdGl2ZVRleHR1cmVVaW50O1xuXG4gICAgICAgICAgc2hhZGVyVW5pZm9ybS50ZXh0dXJlRGVmYXVsdCA9IGRlZmF1bHRUZXh0dXJlO1xuICAgICAgICAgIHNoYWRlclVuaWZvcm0udGV4dHVyZUluZGV4ID0gdGV4dHVyZUluZGV4O1xuICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWRUZXh0dXJlO1xuICAgICAgICAgIGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdGhpcy5fYWN0aXZlVGV4dHVyZVVpbnQrKyk7XG4gICAgICAgICAgc2hhZGVyVW5pZm9ybS51cGxvYWRUZXh0dXJlKHNoYWRlclVuaWZvcm0sIGRlZmF1bHRUZXh0dXJlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2dyb3VwaW5nVW5pZm9ybShzaGFkZXJVbmlmb3JtLCBncm91cCwgaXNUZXh0dXJlKTtcbiAgICB9KTtcblxuICAgIGF0dHJpYnV0ZUluZm9zLmZvckVhY2goKHsgbmFtZSB9KSA9PiB7XG4gICAgICB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9uW25hbWVdID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhZGRyZXNzIG9mIHRoZSBhY3RpdmUgdW5pZm9ybSB2YXJpYWJsZSBpbiB0aGUgY3VycmVudCB3ZWJnbCBwcm9ncmFtLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiB1bmlmb3JtIHZhcmlhYmxlIGFkZHJlc3Nlcy5cbiAgICovXG4gIHByaXZhdGUgX2dldFVuaWZvcm1JbmZvcygpOiBXZWJHTEFjdGl2ZUluZm9bXSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5fZ2xQcm9ncmFtO1xuICAgIGNvbnN0IHVuaWZvcm1JbmZvcyA9IG5ldyBBcnJheTxXZWJHTEFjdGl2ZUluZm8+KCk7XG5cbiAgICBjb25zdCB1bmlmb3JtQ291bnQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmlmb3JtQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgaW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0ocHJvZ3JhbSwgaSk7XG4gICAgICB1bmlmb3JtSW5mb3NbaV0gPSBpbmZvO1xuICAgIH1cbiAgICByZXR1cm4gdW5pZm9ybUluZm9zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYWRkcmVzcyBvZiB0aGUgYWN0aXZlIGF0dHJpYnV0ZSB2YXJpYWJsZSBpbiB0aGUgY3VycmVudCB3ZWJnbCBwcm9ncmFtLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBhdHRyaWJ1dGUgdmFyaWFibGUgYWRkcmVzc2VzLlxuICAgKi9cbiAgcHJpdmF0ZSBfZ2V0QXR0cmlidXRlSW5mb3MoKTogV2ViR0xBY3RpdmVJbmZvW10ge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuX2dsUHJvZ3JhbTtcbiAgICBjb25zdCBhdHRyaWJ1dGVJbmZvcyA9IG5ldyBBcnJheTxXZWJHTEFjdGl2ZUluZm8+KCk7XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVDb3VudCA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYihwcm9ncmFtLCBpKTtcbiAgICAgIGF0dHJpYnV0ZUluZm9zW2ldID0gaW5mbztcbiAgICB9XG5cbiAgICByZXR1cm4gYXR0cmlidXRlSW5mb3M7XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkIGFsbCBzaGFkZXIgZGF0YSBpbiBzaGFkZXIgdW5pZm9ybSBibG9jay5cbiAgICogQHBhcmFtIHVuaWZvcm1CbG9jayAtIHNoYWRlciBVbmlmb3JtIGJsb2NrXG4gICAqIEBwYXJhbSBzaGFkZXJEYXRhIC0gc2hhZGVyIGRhdGFcbiAgICovXG4gIHVwbG9hZEFsbCh1bmlmb3JtQmxvY2s6IFNoYWRlclVuaWZvcm1CbG9jaywgc2hhZGVyRGF0YTogU2hhZGVyRGF0YSk6IHZvaWQge1xuICAgIHRoaXMudXBsb2FkVW5pZm9ybXModW5pZm9ybUJsb2NrLCBzaGFkZXJEYXRhKTtcbiAgICB0aGlzLnVwbG9hZFRleHR1cmVzKHVuaWZvcm1CbG9jaywgc2hhZGVyRGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkIGNvbnN0YW50IHNoYWRlciBkYXRhIGluIHNoYWRlciB1bmlmb3JtIGJsb2NrLlxuICAgKiBAcGFyYW0gdW5pZm9ybUJsb2NrIC0gc2hhZGVyIFVuaWZvcm0gYmxvY2tcbiAgICogQHBhcmFtIHNoYWRlckRhdGEgLSBzaGFkZXIgZGF0YVxuICAgKi9cbiAgdXBsb2FkVW5pZm9ybXModW5pZm9ybUJsb2NrOiBTaGFkZXJVbmlmb3JtQmxvY2ssIHNoYWRlckRhdGE6IFNoYWRlckRhdGEpOiB2b2lkIHtcbiAgICAvLyBzaGFkZXJEYXRhLl9wcm9wZXJ0aWVz5piv5qC55o2uc2hhZGVycHJvcGVydHnnmoRpZOeahOWAvOeahOWTiOW4jOihqFxuICAgIC8vIOWboOS4uuS7peaVsOWtl+S4uumUruaViOeOh+abtOmrmFxuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBzaGFkZXJEYXRhLl9wcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbnN0VW5pZm9ybXMgPSB1bmlmb3JtQmxvY2suY29uc3RVbmlmb3JtcztcblxuICAgIGZvciAobGV0IGkgPSAwLCBuID0gY29uc3RVbmlmb3Jtcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIGNvbnN0IHVuaWZvcm0gPSBjb25zdFVuaWZvcm1zW2ldO1xuICAgICAgY29uc3QgZGF0YSA9IHByb3BlcnRpZXNbdW5pZm9ybS5wcm9wZXJ0eUlkXTtcbiAgICAgIC8vICEgSGlnaGxpZ2h0OiDov5nph4znm7jlvZPkuo7miopDUFXkuK3nmoTlgLzliIbphY3nu5lHUFVcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgIT0gbnVsbCAmJiB1bmlmb3JtLmFwcGx5RnVuYyh1bmlmb3JtLCBkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIsIHVuaWZvcm0sIGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgdGV4dHVyZSBzaGFkZXIgZGF0YSBpbiBzaGFkZXIgdW5pZm9ybSBibG9jay5cbiAgICogQHBhcmFtIHVuaWZvcm1CbG9jayAtIHNoYWRlciBVbmlmb3JtIGJsb2NrXG4gICAqIEBwYXJhbSBzaGFkZXJEYXRhIC0gc2hhZGVyIGRhdGFcbiAgICovXG4gIHVwbG9hZFRleHR1cmVzKHVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrLCBzaGFkZXJEYXRhOiBTaGFkZXJEYXRhKTogdm9pZCB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHNoYWRlckRhdGEuX3Byb3BlcnRpZXM7XG4gICAgY29uc3QgdGV4dHVyZVVuaWZvcm1zID0gdW5pZm9ybUJsb2NrLnRleHR1cmVVbmlmb3JtcztcbiAgICAvLyB0ZXh0dXJlVW5pZm9ybXMgcHJvcGVydHkgbWF5YmUgbnVsbCBpZiBTaGFkZXJVbmlmb3JtQmxvY2sgbm90IGNvbnRhaW4gYW55IHRleHR1cmUuXG4gICAgaWYgKHRleHR1cmVVbmlmb3Jtcykge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIG4gPSB0ZXh0dXJlVW5pZm9ybXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHVuaWZvcm0gPSB0ZXh0dXJlVW5pZm9ybXNbaV07XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBwcm9wZXJ0aWVzW3VuaWZvcm0ucHJvcGVydHlJZF07XG4gICAgICAgIGlmICh0ZXh0dXJlKSB7XG4gICAgICAgICAgdW5pZm9ybS5hcHBseUZ1bmModW5pZm9ybSwgdGV4dHVyZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdW5pZm9ybS5hcHBseUZ1bmModW5pZm9ybSwgdW5pZm9ybS50ZXh0dXJlRGVmYXVsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQmluZCB0aGlzIHNoYWRlciBwcm9ncmFtLlxuICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBzaGFkZXIgcHJvZ3JhbSBpcyBzd2l0Y2hlZC5cbiAgICovXG4gIGJpbmQoKTogYm9vbGVhbiB7XG4gICAgaWYgKFJlbmRlcmVyLmdsUHJvZ3JhbSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5fZ2wudXNlUHJvZ3JhbSh0aGlzLl9nbFByb2dyYW0pO1xuICAgICAgUmVuZGVyZXIuZ2xQcm9ncmFtID0gdGhpcztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIHRoaXMuX3ZlcnRleFNoYWRlciAmJiBnbC5kZWxldGVTaGFkZXIodGhpcy5fdmVydGV4U2hhZGVyKTtcbiAgICB0aGlzLl9mcmFnbWVudFNoYWRlciAmJiBnbC5kZWxldGVTaGFkZXIodGhpcy5fZnJhZ21lbnRTaGFkZXIpO1xuICAgIHRoaXMuX2dsUHJvZ3JhbSAmJiBnbC5kZWxldGVQcm9ncmFtKHRoaXMuX2dsUHJvZ3JhbSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFNoYWRlckRhdGFHcm91cCB9IGZyb20gJy4vZW51bXMvU2hhZGVyRGF0YUdyb3VwJztcblxuLyoqXG4gKiBTaGFkZXIgcHJvcGVydHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXJQcm9wZXJ0eSB7XG4gIHByaXZhdGUgc3RhdGljIF9wcm9wZXJ0eU5hbWVDb3VudGVyOiBudW1iZXIgPSAwO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3VuaXF1ZUlkOiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2dyb3VwOiBTaGFkZXJEYXRhR3JvdXA7XG5cbiAgLyoqIFNoYWRlciBwcm9wZXJ0eSBuYW1lLiAqL1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLl91bmlxdWVJZCA9IFNoYWRlclByb3BlcnR5Ll9wcm9wZXJ0eU5hbWVDb3VudGVyKys7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL0VuZ2luZSc7XG5pbXBvcnQgeyBTaGFkZXJEYXRhR3JvdXAgfSBmcm9tICcuL2VudW1zL1NoYWRlckRhdGFHcm91cCc7XG5pbXBvcnQgeyBTaGFkZXJQcm9ncmFtIH0gZnJvbSAnLi9TaGFkZXJQcm9ncmFtJztcbmltcG9ydCB7IFNoYWRlclByb3BlcnR5IH0gZnJvbSAnLi9TaGFkZXJQcm9wZXJ0eSc7XG5cbi8qKlxuICogU2hhZGVyIGNvbnRhaW5pbmcgdmVydGV4IGFuZCBmcmFnbWVudCBzb3VyY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXIge1xuICAvKiogU2hhZGVyIGNvdW50ZXIuICovXG4gIHByaXZhdGUgc3RhdGljIF9zaGFkZXJDb3VudGVyID0gMDtcbiAgLyoqIFNoYWRlciBtYXAuICovXG4gIHByaXZhdGUgc3RhdGljIF9zaGFkZXJNYXA6IFJlY29yZDxzdHJpbmcsIFNoYWRlcj4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvKiogU2hhZGVyIGNvdW50ZXIuICovXG4gIHByaXZhdGUgc3RhdGljIF9wcm9wZXJ0eU5hbWVNYXA6IFJlY29yZDxzdHJpbmcsIFNoYWRlclByb3BlcnR5PiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLyoqIFRoZSBuYW1lIG9mIHNoYWRlci4gKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3NoYWRlcklkID0gMDtcblxuICAvKiogVmVydGV4IHNoYWRlciBzb3VyY2UuICovXG4gIHByaXZhdGUgX3ZlcnRleFNvdXJjZTogc3RyaW5nO1xuICAvKiogRnJhZ21lbnQgc2hhZGVyIHNvdXJjZS4gKi9cbiAgcHJpdmF0ZSBfZnJhZ21lbnRTb3VyY2U6IHN0cmluZztcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmVydGV4U291cmNlOiBzdHJpbmcsIGZyYWdtZW50U291cmNlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zaGFkZXJJZCA9IFNoYWRlci5fc2hhZGVyQ291bnRlcisrO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5fdmVydGV4U291cmNlID0gdmVydGV4U291cmNlO1xuICAgIHRoaXMuX2ZyYWdtZW50U291cmNlID0gZnJhZ21lbnRTb3VyY2U7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgX2dldFNoYWRlclByb3BlcnR5R3JvdXAocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBTaGFkZXJEYXRhR3JvdXAgfCBudWxsIHtcbiAgICBjb25zdCBzaGFkZXJQcm9wZXJ0eSA9IFNoYWRlci5fcHJvcGVydHlOYW1lTWFwW3Byb3BlcnR5TmFtZV07XG4gICAgcmV0dXJuIHNoYWRlclByb3BlcnR5Py5fZ3JvdXA7XG4gIH1cblxuICAvLyDkuI3lrZjlnKjlsLHliJvlu7rkuIDkuKpcbiAgLyoqXG4gICAqIEdldCBzaGFkZXIgcHJvcGVydHkgYnkgbmFtZS5cbiAgICogQHBhcmFtIG5hbWUgLSBOYW1lIG9mIHRoZSBzaGFkZXIgcHJvcGVydHlcbiAgICogQHJldHVybnMgU2hhZGVyIHByb3BlcnR5XG4gICAqL1xuICBzdGF0aWMgZ2V0UHJvcGVydHlCeU5hbWUobmFtZTogc3RyaW5nKTogU2hhZGVyUHJvcGVydHkge1xuICAgIGNvbnN0IHByb3BlcnR5TmFtZU1hcCA9IFNoYWRlci5fcHJvcGVydHlOYW1lTWFwO1xuICAgIGlmIChwcm9wZXJ0eU5hbWVNYXBbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5TmFtZU1hcFtuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5a6e5L6L5YyW55qE5pe25YCZ5bm25LiN5YiG6YWN5YiG57uE77yM5Y2z5q2k5pe2cHJvcGVydHnov5jmsqHmnIlncm91cOWxnuaAp1xuICAgICAgY29uc3QgcHJvcGVydHkgPSBuZXcgU2hhZGVyUHJvcGVydHkobmFtZSk7XG4gICAgICBwcm9wZXJ0eU5hbWVNYXBbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgc2hhZGVyLlxuICAgKiBAcGFyYW0gbmFtZSAtIE5hbWUgb2YgdGhlIHNoYWRlci5cbiAgICogQHBhcmFtIHZlcnRleFNvdXJjZSAtIFZlcnRleCBzb3VyY2UgY29kZS5cbiAgICogQHBhcmFtIGZyYWdtZW50U291cmNlIC0gRnJhZ21lbnQgc291cmNlIGNvZGUuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKG5hbWU6IHN0cmluZywgdmVydGV4U291cmNlOiBzdHJpbmcsIGZyYWdtZW50U291cmNlOiBzdHJpbmcpOiBTaGFkZXIge1xuICAgIGNvbnN0IHNoYWRlck1hcCA9IFNoYWRlci5fc2hhZGVyTWFwO1xuICAgIGlmIChzaGFkZXJNYXBbbmFtZV0pIHtcbiAgICAgIHRocm93IGBTaGFkZXIgbmFtZWQgXCIke25hbWV9XCIgYWxyZWFkeSBleGlzdHMuYDtcbiAgICB9XG4gICAgcmV0dXJuIChzaGFkZXJNYXBbbmFtZV0gPSBuZXcgU2hhZGVyKG5hbWUsIHZlcnRleFNvdXJjZSwgZnJhZ21lbnRTb3VyY2UpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgc2hhZGVyIGJ5IG5hbWUuXG4gICAqIEBwYXJhbSBuYW1lIC0gTmFtZSBvZiB0aGUgc2hhZGVyXG4gICAqL1xuICBzdGF0aWMgZmluZChuYW1lOiBzdHJpbmcpOiBTaGFkZXIge1xuICAgIHJldHVybiBTaGFkZXIuX3NoYWRlck1hcFtuYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgcHJvZ3JhbSBiYXNlZCBvbiBzaGFkZXIuXG4gICAqIEBwYXJhbSBlbmdpbmVcbiAgICogQHJldHVybnMgU2hhZGVyIHByb2dyYW0uXG4gICAqL1xuICBfZ2V0U2hhZGVyUHJvZ3JhbShlbmdpbmU6IEVuZ2luZSk6IFNoYWRlclByb2dyYW0ge1xuICAgIC8vIFRPRE86IOWwhuW4uOmHj3NoYWRlcuaLvOaOpeWIsOi/memHjFxuICAgIGNvbnN0IHZlcnRleFNvdXJjZSA9IHRoaXMuX3ZlcnRleFNvdXJjZTtcbiAgICBjb25zdCBmcmFnbWVudFNvdXJjZSA9IHRoaXMuX2ZyYWdtZW50U291cmNlO1xuXG4gICAgcmV0dXJuIG5ldyBTaGFkZXJQcm9ncmFtKGVuZ2luZSwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbG9yLCBNYXRyaXg0LCBWZWN0b3IyLCBWZWN0b3IzLCBWZWN0b3I0IH0gZnJvbSAnLi4vLi4vbWF0aCc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZSc7XG5pbXBvcnQgeyBTaGFkZXJEYXRhR3JvdXAgfSBmcm9tICcuL2VudW1zL1NoYWRlckRhdGFHcm91cCc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuL1NoYWRlcic7XG5pbXBvcnQgeyBTaGFkZXJQcm9wZXJ0eSB9IGZyb20gJy4vU2hhZGVyUHJvcGVydHknO1xuXG5leHBvcnQgdHlwZSBTaGFkZXJQcm9wZXJ0eVZhbHVlVHlwZSA9XG4gIHwgbnVtYmVyXG4gIHwgVmVjdG9yMlxuICB8IFZlY3RvcjNcbiAgfCBWZWN0b3I0XG4gIHwgQ29sb3JcbiAgfCBNYXRyaXg0XG4gIHwgVGV4dHVyZVxuICB8IFRleHR1cmVbXVxuICB8IEludDMyQXJyYXlcbiAgfCBGbG9hdDMyQXJyYXk7XG5cbmV4cG9ydCBjbGFzcyBTaGFkZXJEYXRhIHtcbiAgX2dyb3VwOiBTaGFkZXJEYXRhR3JvdXA7XG4gIF9wcm9wZXJ0aWVzOiBSZWNvcmQ8bnVtYmVyLCBTaGFkZXJQcm9wZXJ0eVZhbHVlVHlwZT4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGNvbnN0cnVjdG9yKGdyb3VwOiBTaGFkZXJEYXRhR3JvdXApIHtcbiAgICB0aGlzLl9ncm91cCA9IGdyb3VwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmbG9hdCBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEByZXR1cm5zIEZsb2F0XG4gICAqL1xuICBnZXRGbG9hdChwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IG51bWJlcjtcblxuICAvKipcbiAgICogR2V0IGZsb2F0IGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIEZsb2F0XG4gICAqL1xuICBnZXRGbG9hdChwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHkpOiBudW1iZXI7XG5cbiAgZ2V0RmxvYXQocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YShwcm9wZXJ0eSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGZsb2F0IGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kaW5nIGZsb2F0IHNoYWRlciBwcm9wZXJ0eSB0eXBlLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHBhcmFtIHZhbHVlIC0gRmxvYXRcbiAgICovXG4gIHNldEZsb2F0KHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGZsb2F0IGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGluZyBmbG9hdCBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSAtIEZsb2F0XG4gICAqL1xuICBzZXRGbG9hdChwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHksIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuXG4gIHNldEZsb2F0KHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3NldERhdGEocHJvcGVydHksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgaW50IGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHJldHVybnMgSW50XG4gICAqL1xuICBnZXRJbnQocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEdldCBpbnQgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHJldHVybnMgSW50XG4gICAqL1xuICBnZXRJbnQocHJvcGVydHk6IFNoYWRlclByb3BlcnR5KTogbnVtYmVyO1xuXG4gIGdldEludChwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHkpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9nZXREYXRhKHByb3BlcnR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgaW50IGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kZW5jZSBpbmNsdWRlcyBpbnQgYW5kIGJvb2wgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0gdmFsdWUgLSBJbnRcbiAgICovXG4gIHNldEludChwcm9wZXJ0eU5hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldCBpbnQgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kZW5jZSBpbmNsdWRlcyBpbnQgYW5kIGJvb2wgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgLSBJbnRcbiAgICovXG4gIHNldEludChwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHksIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuXG4gIHNldEludChwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHksIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXREYXRhKHByb3BlcnR5LCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGZsb2F0IGFycmF5IGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHJldHVybnMgRmxvYXQgYXJyYXlcbiAgICovXG4gIGdldEZsb2F0QXJyYXkocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBGbG9hdDMyQXJyYXk7XG5cbiAgLyoqXG4gICAqIEdldCBmbG9hdCBhcnJheSBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBGbG9hdCBhcnJheVxuICAgKi9cbiAgZ2V0RmxvYXRBcnJheShwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHkpOiBGbG9hdDMyQXJyYXk7XG5cbiAgZ2V0RmxvYXRBcnJheShwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHkpOiBGbG9hdDMyQXJyYXkge1xuICAgIHJldHVybiB0aGlzLl9nZXREYXRhKHByb3BlcnR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZmxvYXQgYXJyYXkgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIGZsb2F0IGFycmF544CBdmVjMiBhcnJheeOAgXZlYzMgYXJyYXnjgIF2ZWM0IGFycmF5IGFuZCBtYXRyaXggYXJyYXkgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0gdmFsdWUgLSBGbG9hdCBhcnJheVxuICAgKi9cbiAgc2V0RmxvYXRBcnJheShwcm9wZXJ0eU5hbWU6IHN0cmluZywgdmFsdWU6IEZsb2F0MzJBcnJheSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldCBmbG9hdCBhcnJheSBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIGZsb2F0IGFycmF544CBdmVjMiBhcnJheeOAgXZlYzMgYXJyYXnjgIF2ZWM0IGFycmF5IGFuZCBtYXRyaXggYXJyYXkgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgLSBGbG9hdCBhcnJheVxuICAgKi9cbiAgc2V0RmxvYXRBcnJheShwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHksIHZhbHVlOiBGbG9hdDMyQXJyYXkpOiB2b2lkO1xuXG4gIHNldEZsb2F0QXJyYXkocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGF0YShwcm9wZXJ0eSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBpbnQgYXJyYXkgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcmV0dXJucyBJbnQgQXJyYXlcbiAgICovXG4gIGdldEludEFycmF5KHByb3BlcnR5TmFtZTogc3RyaW5nKTogSW50MzJBcnJheTtcblxuICAvKipcbiAgICogR2V0IGludCBhcnJheSBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBJbnQgQXJyYXlcbiAgICovXG4gIGdldEludEFycmF5KHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSk6IEludDMyQXJyYXk7XG5cbiAgZ2V0SW50QXJyYXkocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5KTogSW50MzJBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGEocHJvcGVydHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBpbnQgYXJyYXkgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIGJvb2wgYXJyYXnjgIFpbnQgYXJyYXnjgIFidmVjMiBhcnJheeOAgWJ2ZWMzIGFycmF544CBYnZlYzQgYXJyYXnjgIFpdmVjMiBhcnJheeOAgWl2ZWMzIGFycmF5IGFuZCBpdmVjNCBhcnJheSBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIEludCBBcnJheVxuICAgKi9cbiAgc2V0SW50QXJyYXkocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBJbnQzMkFycmF5KTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGludCBhcnJheSBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIGJvb2wgYXJyYXnjgIFpbnQgYXJyYXnjgIFidmVjMiBhcnJheeOAgWJ2ZWMzIGFycmF544CBYnZlYzQgYXJyYXnjgIFpdmVjMiBhcnJheeOAgWl2ZWMzIGFycmF5IGFuZCBpdmVjNCBhcnJheSBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSAtIEludCBBcnJheVxuICAgKi9cbiAgc2V0SW50QXJyYXkocHJvcGVydHk6IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogSW50MzJBcnJheSk6IHZvaWQ7XG5cbiAgc2V0SW50QXJyYXkocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogSW50MzJBcnJheSk6IHZvaWQge1xuICAgIHRoaXMuX3NldERhdGEocHJvcGVydHksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdHdvLWRpbWVuc2lvbmFsIGZyb20gc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcmV0dXJucyBUd28tZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBnZXRWZWN0b3IyKHByb3BlcnR5TmFtZTogc3RyaW5nKTogVmVjdG9yMjtcblxuICAvKipcbiAgICogR2V0IHR3by1kaW1lbnNpb25hbCBmcm9tIHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIFR3by1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIGdldFZlY3RvcjIocHJvcGVydHk6IFNoYWRlclByb3BlcnR5KTogVmVjdG9yMjtcblxuICBnZXRWZWN0b3IyKHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSk6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLl9nZXREYXRhKHByb3BlcnR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdHdvLWRpbWVuc2lvbmFsIHZlY3RvciBmcm9tIHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kZW5jZSBpbmNsdWRlcyB2ZWMy44CBaXZlYzIgYW5kIGJ2ZWMyIHNoYWRlciBwcm9wZXJ0eSB0eXBlLlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0gdmFsdWUgLSBUd28tZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBzZXRWZWN0b3IyKHByb3BlcnR5OiBzdHJpbmcsIHZhbHVlOiBWZWN0b3IyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IHR3by1kaW1lbnNpb25hbCB2ZWN0b3IgZnJvbSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIHZlYzLjgIFpdmVjMiBhbmQgYnZlYzIgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgLSBUd28tZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBzZXRWZWN0b3IyKHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IFZlY3RvcjIpOiB2b2lkO1xuXG4gIHNldFZlY3RvcjIocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogVmVjdG9yMik6IHZvaWQge1xuICAgIHRoaXMuX3NldERhdGEocHJvcGVydHksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdmVjdG9yMyBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEByZXR1cm5zIFRocmVlLWRpbWVuc2lvbmFsIHZlY3RvclxuICAgKi9cbiAgZ2V0VmVjdG9yMyhwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IFZlY3RvcjM7XG5cbiAgLyoqXG4gICAqIEdldCB2ZWN0b3IzIGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIFRocmVlLWRpbWVuc2lvbmFsIHZlY3RvclxuICAgKi9cbiAgZ2V0VmVjdG9yMyhwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHkpOiBWZWN0b3IzO1xuXG4gIGdldFZlY3RvcjMocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5KTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGEocHJvcGVydHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aHJlZSBkaW1lbnNpb25hbCB2ZWN0b3IgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIHZlYzPjgIFpdmVjMyBhbmQgYnZlYzMgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRocmVlLWRpbWVuc2lvbmFsIHZlY3RvclxuICAgKi9cbiAgc2V0VmVjdG9yMyhwcm9wZXJ0eTogc3RyaW5nLCB2YWx1ZTogVmVjdG9yMyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldCB0aHJlZSBkaW1lbnNpb25hbCB2ZWN0b3IgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kZW5jZSBpbmNsdWRlcyB2ZWMz44CBaXZlYzMgYW5kIGJ2ZWMzIHNoYWRlciBwcm9wZXJ0eSB0eXBlLlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIC0gVGhyZWUtZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBzZXRWZWN0b3IzKHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IFZlY3RvcjMpOiB2b2lkO1xuXG4gIHNldFZlY3RvcjMocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogVmVjdG9yMyk6IHZvaWQge1xuICAgIHRoaXMuX3NldERhdGEocHJvcGVydHksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdmVjdG9yNCBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEByZXR1cm5zIEZvdXItZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBnZXRWZWN0b3I0KHByb3BlcnR5TmFtZTogc3RyaW5nKTogVmVjdG9yNDtcblxuICAvKipcbiAgICogR2V0IHZlY3RvcjQgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHJldHVybnMgRm91ci1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIGdldFZlY3RvcjQocHJvcGVydHk6IFNoYWRlclByb3BlcnR5KTogVmVjdG9yNDtcblxuICBnZXRWZWN0b3I0KHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSk6IFZlY3RvcjQge1xuICAgIHJldHVybiB0aGlzLl9nZXREYXRhKHByb3BlcnR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZm91ci1kaW1lbnNpb25hbCB2ZWN0b3IgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIHZlYzTjgIFpdmVjNCBhbmQgYnZlYzQgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIEZvdXItZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBzZXRWZWN0b3I0KHByb3BlcnR5OiBzdHJpbmcsIHZhbHVlOiBWZWN0b3I0KTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGZvdXItZGltZW5zaW9uYWwgdmVjdG9yIGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgdmVjNOOAgWl2ZWM0IGFuZCBidmVjNCBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSAtIEZvdXItZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBzZXRWZWN0b3I0KHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IFZlY3RvcjQpOiB2b2lkO1xuXG4gIHNldFZlY3RvcjQocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogVmVjdG9yNCk6IHZvaWQge1xuICAgIHRoaXMuX3NldERhdGEocHJvcGVydHksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbWF0cml4IGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHJldHVybnMgTWF0cml4XG4gICAqL1xuICBnZXRNYXRyaXgocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBNYXRyaXg0O1xuXG4gIC8qKlxuICAgKiBHZXQgbWF0cml4IGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIE1hdHJpeFxuICAgKi9cbiAgZ2V0TWF0cml4KHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSk6IE1hdHJpeDQ7XG5cbiAgZ2V0TWF0cml4KHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSk6IE1hdHJpeDQge1xuICAgIHJldHVybiB0aGlzLl9nZXREYXRhKHByb3BlcnR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgbWF0cml4IGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kZW5jZSBpbmNsdWRlcyBtYXRyaXggc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0gdmFsdWUgLSBNYXRyaXhcbiAgICovXG4gIHNldE1hdHJpeChwcm9wZXJ0eU5hbWU6IHN0cmluZywgdmFsdWU6IE1hdHJpeDQpO1xuXG4gIC8qKlxuICAgKiBTZXQgbWF0cml4IGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgbWF0cml4IHNoYWRlciBwcm9wZXJ0eSB0eXBlLlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIC0gTWF0cml4XG4gICAqL1xuICBzZXRNYXRyaXgocHJvcGVydHk6IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogTWF0cml4NCk7XG5cbiAgc2V0TWF0cml4KHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IE1hdHJpeDQpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXREYXRhKHByb3BlcnR5LCB2YWx1ZSk7XG4gIH1cblxuICBfZ2V0RGF0YTxUIGV4dGVuZHMgU2hhZGVyUHJvcGVydHlWYWx1ZVR5cGU+KHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSk6IFQge1xuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwcm9wZXJ0eSA9IFNoYWRlci5nZXRQcm9wZXJ0eUJ5TmFtZShwcm9wZXJ0eSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzW3Byb3BlcnR5Ll91bmlxdWVJZF0gYXMgVDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGV4dHVyZSBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEByZXR1cm5zIFRleHR1cmVcbiAgICovXG4gIGdldFRleHR1cmUocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBUZXh0dXJlO1xuXG4gIC8qKlxuICAgKiBHZXQgdGV4dHVyZSBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBUZXh0dXJlXG4gICAqL1xuICBnZXRUZXh0dXJlKHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSk6IFRleHR1cmU7XG5cbiAgZ2V0VGV4dHVyZShwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHkpOiBUZXh0dXJlIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YShwcm9wZXJ0eSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRleHR1cmUgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0gdmFsdWUgLSBUZXh0dXJlXG4gICAqL1xuICBzZXRUZXh0dXJlKHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogVGV4dHVyZSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldCB0ZXh0dXJlIGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRleHR1cmVcbiAgICovXG4gIHNldFRleHR1cmUocHJvcGVydHk6IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogVGV4dHVyZSk6IHZvaWQ7XG5cbiAgc2V0VGV4dHVyZShwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHksIHZhbHVlOiBUZXh0dXJlKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGF0YShwcm9wZXJ0eSwgdmFsdWUpO1xuICB9XG5cbiAgLy8g6K6+572u5pWw5o2u55qE5pe25YCZ6aG65L6/5oyH5a6a5LqG5YiG57uE77yB77yB77yBXG4gIF9zZXREYXRhPFQgZXh0ZW5kcyBTaGFkZXJQcm9wZXJ0eVZhbHVlVHlwZT4ocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogVCk6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwcm9wZXJ0eSA9IFNoYWRlci5nZXRQcm9wZXJ0eUJ5TmFtZShwcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BlcnR5Ll9ncm91cCAhPT0gdGhpcy5fZ3JvdXApIHtcbiAgICAgIGlmIChwcm9wZXJ0eS5fZ3JvdXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wZXJ0eS5fZ3JvdXAgPSB0aGlzLl9ncm91cDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGBTaGFkZXIgcHJvcGVydHkgJHtwcm9wZXJ0eS5uYW1lfSBoYXMgYmVlbiB1c2VkIGFzICR7U2hhZGVyRGF0YUdyb3VwW3Byb3BlcnR5Ll9ncm91cF19IHByb3BlcnR5LmA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fcHJvcGVydGllc1twcm9wZXJ0eS5fdW5pcXVlSWRdID0gdmFsdWU7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL0VuZ2luZSc7XG5pbXBvcnQgeyBTaGFkZXIsIFNoYWRlckRhdGEsIFNoYWRlckRhdGFHcm91cCB9IGZyb20gJy4uL3NoYWRlcic7XG5cbi8qKlxuICogTWF0ZXJpYWwgYmFzZSBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE1hdGVyaWFsIHtcbiAgLyoqIE5hbWUuICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqIFNoYWRlciB1c2VkIGJ5IHRoZSBtYXRlcmlhbC4gKi9cbiAgc2hhZGVyOiBTaGFkZXI7XG4gIC8vIFRPRE86IOaPkOWNh+S4gOS4qlJlZk9iamVjdCFcbiAgZW5naW5lOiBFbmdpbmU7XG5cbiAgLyoqIFNoYWRlciBkYXRhLiAqL1xuICByZWFkb25seSBzaGFkZXJEYXRhOiBTaGFkZXJEYXRhID0gbmV3IFNoYWRlckRhdGEoU2hhZGVyRGF0YUdyb3VwLk1hdGVyaWFsKTtcblxuICBjb25zdHJ1Y3RvcihlbmdpbmU6IEVuZ2luZSwgc2hhZGVyOiBTaGFkZXIpIHtcbiAgICB0aGlzLnNoYWRlciA9IHNoYWRlcjtcbiAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBUZXh0dXJlIGZvcm1hdCBlbnVtZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGVudW0gVGV4dHVyZUZvcm1hdCB7XG4gIC8qKiBSR0IgZm9ybWF0LDggYml0cyBwZXIgY2hhbm5lbC4gKi9cbiAgUjhHOEI4LFxuICAvKiogUkdCQSBmb3JtYXQsOCBiaXRzIHBlciBjaGFubmVsLiAqL1xuICBSOEc4QjhBOCxcbiAgLyoqIFJHQkEgZm9ybWF0LDQgYml0cyBwZXIgY2hhbm5lbC4gKi9cbiAgUjRHNEI0QTQsXG4gIC8qKiBSR0JBIGZvcm1hdCw1IGJpdHMgaW4gUiBjaGFubmVsLDUgYml0cyBpbiBHIGNoYW5uZWwsNSBiaXRzIGluIEIgY2hhbm5lbCwgMSBiaXQgaW4gQSBjaGFubmVsLiAqL1xuICBSNUc1QjVBMSxcbiAgLyoqIFJHQiBmb3JtYXQsNSBiaXRzIGluIFIgY2hhbm5lbCw2IGJpdHMgaW4gRyBjaGFubmVsLDUgYml0cyBpbiBCIGNoYW5uZWwuICovXG4gIFI1RzZCNSxcbiAgLyoqIFRyYW5zcGFyZW50IGZvcm1hdCw4IGJpdHMuICovXG4gIEFscGhhOCxcbiAgLyoqIEx1bWluYW5jZS9hbHBoYSBpbiBSR0IgY2hhbm5lbCwgYWxwaGEgaW4gQSBjaGFubmVsLiAqL1xuICBMdW1pbmFuY2VBbHBoYSxcbiAgLyoqIFJHQkEgZm9ybWF0LDE2IGJpdHMgcGVyIGNoYW5uZWwuICovXG4gIFIxNkcxNkIxNkExNixcbiAgLyoqIFJHQkEgZm9ybWF0LDMyIGJpdHMgcGVyIGNoYW5uZWwuICovXG4gIFIzMkczMkIzMkEzMixcblxuICAvKiogUkdCIGNvbXByZXNzZWQgZm9ybWF044CCKi9cbiAgRFhUMSxcbiAgLyoqIFJHQkEgY29tcHJlc3NlZCBmb3JtYXTjgIIqL1xuICBEWFQ1LFxuICAvKiogUkdCIGNvbXByZXNzZWQgZm9ybWF0LDQgYml0cyBwZXIgcGl4ZWzjgIIqL1xuICBFVEMxX1JHQixcbiAgLyoqIFJHQiBjb21wcmVzc2VkIGZvcm1hdCw0IGJpdHMgcGVyIHBpeGVs44CCKi9cbiAgRVRDMl9SR0IsXG4gIC8qKiBSR0JBIGNvbXByZXNzZWQgZm9ybWF0LDUgYml0cyBwZXIgcGl4ZWwsNCBiaXQgaW4gUkdCLCAxIGJpdCBpbiBBLiAqL1xuICBFVEMyX1JHQkE1LFxuICAvKiogUkdCIGNvbXByZXNzZWQgZm9ybWF0LDggYml0cyBwZXIgcGl4ZWwuICovXG4gIEVUQzJfUkdCQTgsXG4gIC8qKiBSR0IgY29tcHJlc3NlZCBmb3JtYXQsMiBiaXRzIHBlciBwaXhlbC4gKi9cbiAgUFZSVENfUkdCMixcbiAgLyoqIFJHQkEgY29tcHJlc3NlZCBmb3JtYXQsMiBiaXRzIHBlciBwaXhlbC4gKi9cbiAgUFZSVENfUkdCQTIsXG4gIC8qKiBSR0IgY29tcHJlc3NlZCBmb3JtYXQsNCBiaXRzIHBlciBwaXhlbC4gKi9cbiAgUFZSVENfUkdCNCxcbiAgLyoqIFJHQkEgY29tcHJlc3NlZCBmb3JtYXQsNCBiaXRzIHBlciBwaXhlbC4gKi9cbiAgUFZSVENfUkdCQTQsXG4gIC8qKiBSR0IoQSkgY29tcHJlc3NlZCBmb3JtYXQsMTI4IGJpdHMgcGVyIDR4NCBwaXhlbCBibG9jay4gKi9cbiAgQVNUQ180eDQsXG4gIC8qKiBSR0IoQSkgY29tcHJlc3NlZCBmb3JtYXQsMTI4IGJpdHMgcGVyIDV4NSBwaXhlbCBibG9jay4gKi9cbiAgQVNUQ181eDUsXG4gIC8qKiBSR0IoQSkgY29tcHJlc3NlZCBmb3JtYXQsMTI4IGJpdHMgcGVyIDZ4NiBwaXhlbCBibG9jay4gKi9cbiAgQVNUQ182eDYsXG4gIC8qKiBSR0IoQSkgY29tcHJlc3NlZCBmb3JtYXQsMTI4IGJpdHMgcGVyIDh4OCBwaXhlbCBibG9jay4gKi9cbiAgQVNUQ184eDgsXG4gIC8qKiBSR0IoQSkgY29tcHJlc3NlZCBmb3JtYXQsMTI4IGJpdHMgcGVyIDEweDEwIHBpeGVsIGJsb2NrLiAqL1xuICBBU1RDXzEweDEwLFxuICAvKiogUkdCKEEpIGNvbXByZXNzZWQgZm9ybWF0LDEyOCBiaXRzIHBlciAxMngxMiBwaXhlbCBibG9jay4gKi9cbiAgQVNUQ18xMngxMixcblxuICAvKiogUmVuZGVyIHRvIGRlcHRoIGJ1ZmZlcixlbmdpbmUgd2lsbCBhdXRvbWF0aWNhbGx5IHNlbGVjdCB0aGUgc3VwcG9ydGVkIHByZWNpc2lvbi4gKi9cbiAgRGVwdGgsXG4gIC8qKiBSZW5kZXIgdG8gZGVwdGggc3RlbmNpbCBidWZmZXIsIGVuZ2luZSB3aWxsIGF1dG9tYXRpY2FsbHkgc2VsZWN0IHRoZSBzdXBwb3J0ZWQgcHJlY2lzaW9uLiAqL1xuICBEZXB0aFN0ZW5jaWwsXG4gIC8qKiBSZW5kZXIgdG8gc3RlbmNpbCBidWZmZXIuICovXG4gIFN0ZW5jaWwsXG4gIC8qKiBGb3JjZSAxNi1iaXQgZGVwdGggYnVmZmVyLiAqL1xuICBEZXB0aDE2LFxuICAvKiogRm9yY2UgMjQtYml0IGRlcHRoIGJ1ZmZlci4gKi9cbiAgRGVwdGgyNCxcbiAgLyoqIEZvcmNlIDMyLWJpdCBkZXB0aCBidWZmZXIuICovXG4gIERlcHRoMzIsXG4gIC8qKiBGb3JjZSAxNi1iaXQgZGVwdGggKyA4LWJpdCBzdGVuY2lsIGJ1ZmZlci4gKi9cbiAgRGVwdGgyNFN0ZW5jaWw4LFxuICAvKiogRm9yY2UgMzItYml0IGRlcHRoICsgOC1iaXQgc3RlbmNpbCBidWZmZXIuICovXG4gIERlcHRoMzJTdGVuY2lsOCxcbn1cbiIsImltcG9ydCB7IFRleHR1cmVGaWx0ZXJNb2RlIH0gZnJvbSAnLi9lbnVtcy9UZXh0dXJlRmlsdGVyTW9kZSc7XG5pbXBvcnQgeyBUZXh0dXJlRm9ybWF0IH0gZnJvbSAnLi9lbnVtcy9UZXh0dXJlRm9ybWF0JztcbmltcG9ydCB7IFRleHR1cmVXcmFwTW9kZSB9IGZyb20gJy4vZW51bXMvVGV4dHVyZVdyYXBNb2RlJztcblxuLyoqXG4gKiBUZXh0dXJlIHNwZWNpZmljIGZvcm1hdCBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXh0dXJlRm9ybWF0RGV0YWlsIHtcbiAgLyoqIFRleHR1cmUgY29sb3IgaW50ZXJuYWwgZm9ybWF0OiBSR0IsIFJHQkEuICovXG4gIGludGVybmFsRm9ybWF0OiBHTGludDtcbiAgLyoqIFRleHR1cmUgY29sb3IgYmFzZSBmb3JtYXQ6IFJHQiwgUkdCQS4gKi9cbiAgYmFzZUZvcm1hdD86IEdMZW51bTtcbiAgLyoqIFRleGVsIGRhdGEgdHlwZS4gKi9cbiAgZGF0YVR5cGU/OiBHTGVudW07XG4gIC8vIHdlYmdsMuaJjeW8gOWQr+e6ueeQhuWOi+e8qVxuICAvKiogV2hldGhlciB0ZXh0dXJlIGNvbXByZXNzaW9uLiAqL1xuICBpc0NvbXByZXNzZWQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3Mgb2YgdGV4dHVyZSwgY29udGFpbnMgc29tZSBjb21tb24gZnVuY3Rpb25zIG9mIHRleHR1cmUtcmVsYXRlZCBjbGFzc2VzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGV4dHVyZSB7XG4gIG5hbWU6IHN0cmluZztcblxuICAvKiogV2hldGhlciB0byBlbmFibGUgbWlwbWFwLiAqL1xuICBfbWlwbWFwOiBib29sZWFuO1xuICAvKiogVGV4dHVyZSBvYmplY3Qgc3RvcmFnZSBhZGRyZXNzLiAqL1xuICBfZ2xUZXh0dXJlOiBXZWJHTFRleHR1cmU7XG4gIC8qKiBUZXh0dXJlIHNhbXBsZXIuICovXG4gIF9nbFRhcmdldDogbnVtYmVyO1xuICAvKiogVGV4dHVyZSBmb3JtYXQgZGV0YWlsLiAqL1xuICBfZm9ybWF0RGV0YWlsOiBUZXh0dXJlRm9ybWF0RGV0YWlsO1xuXG4gIC8qKiBUZXh0dXJlIGZvcm1hdC4gKi9cbiAgcHJvdGVjdGVkIF9mb3JtYXQ6IFRleHR1cmVGb3JtYXQ7XG4gIC8qKiBUZXh0dXJlIHdpZHRoLiAqL1xuICBwcm90ZWN0ZWQgX3dpZHRoOiBudW1iZXI7XG4gIC8qKiBUZXh0dXJlIGhlaWdodC4gKi9cbiAgcHJvdGVjdGVkIF9oZWlnaHQ6IG51bWJlcjtcbiAgcHJvdGVjdGVkIF9taXBtYXBDb3VudDogbnVtYmVyO1xuICBwcm90ZWN0ZWQgX2dsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG5cbiAgcHJpdmF0ZSBfd3JhcE1vZGVVOiBUZXh0dXJlV3JhcE1vZGU7XG4gIHByaXZhdGUgX3dyYXBNb2RlVjogVGV4dHVyZVdyYXBNb2RlO1xuICBwcml2YXRlIF9maWx0ZXJNb2RlOiBUZXh0dXJlRmlsdGVyTW9kZTtcblxuICBnZXQgZm9ybWF0KCk6IFRleHR1cmVGb3JtYXQge1xuICAgIHJldHVybiB0aGlzLl9mb3JtYXQ7XG4gIH1cblxuICBnZXQgd2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fd2lkdGg7XG4gIH1cblxuICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIGdldCB3cmFwTW9kZVUoKTogVGV4dHVyZVdyYXBNb2RlIHtcbiAgICByZXR1cm4gdGhpcy5fd3JhcE1vZGVVO1xuICB9XG5cbiAgc2V0IHdyYXBNb2RlVSh2YWx1ZTogVGV4dHVyZVdyYXBNb2RlKSB7XG4gICAgaWYgKHZhbHVlID09PSB0aGlzLl93cmFwTW9kZVUpIHJldHVybjtcbiAgICB0aGlzLl93cmFwTW9kZVUgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCB3cmFwTW9kZVYoKTogVGV4dHVyZVdyYXBNb2RlIHtcbiAgICByZXR1cm4gdGhpcy5fd3JhcE1vZGVWO1xuICB9XG5cbiAgc2V0IHdyYXBNb2RlVih2YWx1ZTogVGV4dHVyZVdyYXBNb2RlKSB7XG4gICAgaWYgKHZhbHVlID09PSB0aGlzLl93cmFwTW9kZVYpIHJldHVybjtcbiAgICB0aGlzLl93cmFwTW9kZVYgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBtaXBtYXBDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9taXBtYXBDb3VudDtcbiAgfVxuXG4gIGdldCBmaWx0ZXJNb2RlKCk6IFRleHR1cmVGaWx0ZXJNb2RlIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyTW9kZTtcbiAgfVxuXG4gIHNldCBmaWx0ZXJNb2RlKHZhbHVlOiBUZXh0dXJlRmlsdGVyTW9kZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fZmlsdGVyTW9kZSkgcmV0dXJuO1xuICAgIHRoaXMuX2ZpbHRlck1vZGUgPSB2YWx1ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfZ2V0TWF4TWlwbGV2ZWwoc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLmxvZzIoc2l6ZSkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9nZXRNaXBtYXBDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9taXBtYXAgPyBNYXRoLmZsb29yKE1hdGgubG9nMihNYXRoLm1heCh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KSkpICsgMSA6IDE7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRldGFpbGVkIHRleHR1cmUgZGV0YWlsIGluZm9ybWF0aW9uIGJhc2VkIG9uIHRleHR1cmUgZm9ybWF0LlxuICAgKiBAcGFyYW0gZm9ybWF0IFRleHR1cmUgZm9ybWF0LlxuICAgKiBAcGFyYW0gZ2wgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlxuICAgKiBAcmV0dXJucyBUZXh0dXJlIGZvcm1hdCBkZXRhaWwuXG4gICAqL1xuICBzdGF0aWMgX2dldEZvcm1hdERldGFpbChmb3JtYXQ6IFRleHR1cmVGb3JtYXQsIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBUZXh0dXJlRm9ybWF0RGV0YWlsIHtcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgY2FzZSBUZXh0dXJlRm9ybWF0LlI4RzhCODpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbnRlcm5hbEZvcm1hdDogZ2wuUkdCLFxuICAgICAgICAgIGJhc2VGb3JtYXQ6IGdsLlJHQixcbiAgICAgICAgICBkYXRhVHlwZTogZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICBpc0NvbXByZXNzZWQ6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgY2FzZSBUZXh0dXJlRm9ybWF0LlI4RzhCOEE4OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGludGVybmFsRm9ybWF0OiBnbC5SR0JBLFxuICAgICAgICAgIGJhc2VGb3JtYXQ6IGdsLlJHQkEsXG4gICAgICAgICAgZGF0YVR5cGU6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgICAgaXNDb21wcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgVGV4dHVyZUZvcm1hdC5SNEc0QjRBNDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbnRlcm5hbEZvcm1hdDogZ2wuUkdCQSxcbiAgICAgICAgICBiYXNlRm9ybWF0OiBnbC5SR0JBLFxuICAgICAgICAgIGRhdGFUeXBlOiBnbC5VTlNJR05FRF9TSE9SVF80XzRfNF80LFxuICAgICAgICAgIGlzQ29tcHJlc3NlZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICBjYXNlIFRleHR1cmVGb3JtYXQuUjVHNUI1QTE6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW50ZXJuYWxGb3JtYXQ6IGdsLlJHQkEsXG4gICAgICAgICAgYmFzZUZvcm1hdDogZ2wuUkdCQSxcbiAgICAgICAgICBkYXRhVHlwZTogZ2wuVU5TSUdORURfU0hPUlRfNV81XzVfMSxcbiAgICAgICAgICBpc0NvbXByZXNzZWQ6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgY2FzZSBUZXh0dXJlRm9ybWF0LlI1RzZCNTpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbnRlcm5hbEZvcm1hdDogZ2wuUkdCLFxuICAgICAgICAgIGJhc2VGb3JtYXQ6IGdsLlJHQixcbiAgICAgICAgICBkYXRhVHlwZTogZ2wuVU5TSUdORURfU0hPUlRfNV82XzUsXG4gICAgICAgICAgaXNDb21wcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgVGV4dHVyZUZvcm1hdC5BbHBoYTg6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW50ZXJuYWxGb3JtYXQ6IGdsLkFMUEhBLFxuICAgICAgICAgIGJhc2VGb3JtYXQ6IGdsLkFMUEhBLFxuICAgICAgICAgIGRhdGFUeXBlOiBnbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICAgIGlzQ29tcHJlc3NlZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICBjYXNlIFRleHR1cmVGb3JtYXQuTHVtaW5hbmNlQWxwaGE6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW50ZXJuYWxGb3JtYXQ6IGdsLkxVTUlOQU5DRV9BTFBIQSxcbiAgICAgICAgICBiYXNlRm9ybWF0OiBnbC5MVU1JTkFOQ0VfQUxQSEEsXG4gICAgICAgICAgZGF0YVR5cGU6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgICAgaXNDb21wcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdGhpcyBUZXh0dXJlRm9ybWF0IGlzIG5vdCBzdXBwb3J0ZWQgaW4gT2FzaXMgRW5naW5lOiAke2Zvcm1hdH1gKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogVGhlIGZpbHRlciBtb2RlIG9mIHRoZSB0ZXh0dXJlLlxuICovXG5leHBvcnQgZW51bSBUZXh0dXJlRmlsdGVyTW9kZSB7XG4gIC8qKiBQb2ludCBmaWx0ZXJpbmcuICovXG4gIFBvaW50ID0gMCxcbiAgLyoqIEJpbGluZWFyIGZpbHRlcmluZy4gKi9cbiAgQmlsaW5lYXIgPSAxLFxuICAvKiogVHJpbGluZWFyIGZpbHRlcmluZy4gKi9cbiAgVHJpbGluZWFyID0gMixcbn1cbiIsIi8qKlxuICogV3JhcHBpbmcgbW9kZSBvZiB0aGUgdGV4dHVyZS5cbiAqL1xuZXhwb3J0IGVudW0gVGV4dHVyZVdyYXBNb2RlIHtcbiAgLyoqIENsYW1waW5nIG1vZGUuIHVzZSB0aGUgY29sb3Igb2YgZWRnZSBwaXhlbHMgYmV5b25kIHRoZSB0ZXh0dXJlIGJvdW5kYXJ5LiAqL1xuICBDbGFtcCA9IDAsXG4gIC8qKiBSZXBlYXRpbmcgbW9kZS4gdGlsaW5nIHdpbGwgYmUgcmVwZWF0ZWQgaWYgaXQgZXhjZWVkcyB0aGUgdGV4dHVyZSBib3VuZGFyeS4gKi9cbiAgUmVwZWF0ID0gMSxcbiAgLyoqIE1pcnJvciByZXBlYXQgbW9kZS4gdGlsaW5nIHdpbGwgYmUgbWlycm9yZWQgYW5kIHJlcGVhdGVkIGlmIGl0IGV4Y2VlZHMgdGhlIHRleHR1cmUgYm91bmRhcnkuICovXG4gIE1pcnJvciA9IDIsXG59XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9FbmdpbmUnO1xuaW1wb3J0IHsgVGV4dHVyZUZpbHRlck1vZGUgfSBmcm9tICcuL2VudW1zL1RleHR1cmVGaWx0ZXJNb2RlJztcbmltcG9ydCB7IFRleHR1cmVGb3JtYXQgfSBmcm9tICcuL2VudW1zL1RleHR1cmVGb3JtYXQnO1xuaW1wb3J0IHsgVGV4dHVyZVdyYXBNb2RlIH0gZnJvbSAnLi9lbnVtcy9UZXh0dXJlV3JhcE1vZGUnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZSc7XG5cbi8qKlxuICogVHdvLWRpbWVuc2lvbmFsIHRleHR1cmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0dXJlMkQgZXh0ZW5kcyBUZXh0dXJlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBUZXh0dXJlMkQuXG4gICAqIEBwYXJhbSBlbmdpbmUgRGVmaW5lIHRoZSBlbmdpbmUgdG8gdXNlIHRvIHJlbmRlciB0aGlzIHRleHR1cmUuXG4gICAqIEBwYXJhbSB3aWR0aCBUZXh0dXJlIHdpZHRoLlxuICAgKiBAcGFyYW0gaGVpZ2h0IFRleHR1cmUgaGVpZ2h0LlxuICAgKiBAcGFyYW0gZm9ybWF0IFRleHR1cmUgZm9ybWF0LiBkZWZhdWx0ICBgVGV4dHVyZUZvcm1hdC5SOEc4QjhBOGAuXG4gICAqIEBwYXJhbSBtaXBtYXAgV2hldGhlciB0byB1c2UgbXVsdGktbGV2ZWwgdGV4dHVyZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVuZ2luZTogRW5naW5lLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgZm9ybWF0OiBUZXh0dXJlRm9ybWF0ID0gVGV4dHVyZUZvcm1hdC5SOEc4QjhBOCxcbiAgICBtaXBtYXA6IGJvb2xlYW4gPSB0cnVlLFxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX21pcG1hcCA9IG1pcG1hcDtcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9mb3JtYXQgPSBmb3JtYXQ7XG4gICAgdGhpcy5fbWlwbWFwQ291bnQgPSB0aGlzLl9nZXRNaXBtYXBDb3VudCgpO1xuXG4gICAgdGhpcy5maWx0ZXJNb2RlID0gVGV4dHVyZUZpbHRlck1vZGUuQmlsaW5lYXI7XG4gICAgdGhpcy53cmFwTW9kZVUgPSB0aGlzLndyYXBNb2RlViA9IFRleHR1cmVXcmFwTW9kZS5SZXBlYXQ7XG5cbiAgICB0aGlzLl9nbCA9IGVuZ2luZS5nbDtcbiAgICB0aGlzLl9nbFRleHR1cmUgPSB0aGlzLl9nbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgdGhpcy5fZ2xUYXJnZXQgPSB0aGlzLl9nbC5URVhUVVJFXzJEO1xuICAgIHRoaXMuX2Zvcm1hdERldGFpbCA9IFRleHR1cmUuX2dldEZvcm1hdERldGFpbChmb3JtYXQsIHRoaXMuX2dsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGV4dHVyZSBiYXNlZCBvbiBwaXhlbCBidWZmZXIuXG4gICAqIEBwYXJhbSBjb2xvckJ1ZmZlciBDb2xvciBidWZmZXIgYXJyYXkuXG4gICAqIEBwYXJhbSBtaXBMZXZlbCBNaXAgbGV2ZWwuXG4gICAqIEBwYXJhbSB4IFN0YXJ0aW5nIHBvaW50IHggcG9zaXRpb24uXG4gICAqIEBwYXJhbSB5IFN0YXJ0aW5nIHBvaW50IHkgcG9zaXRpb24uXG4gICAqIEBwYXJhbSB3aWR0aCBTZXQgd2lkdGguXG4gICAqIEBwYXJhbSBoZWlnaHQgU2V0IGhlaWdodC5cbiAgICovXG4gIHNldFBpeGVsQnVmZmVyKFxuICAgIGNvbG9yQnVmZmVyOiBBcnJheUJ1ZmZlclZpZXcsXG4gICAgbWlwTGV2ZWw6IG51bWJlciA9IDAsXG4gICAgeDogbnVtYmVyID0gMCxcbiAgICB5OiBudW1iZXIgPSAwLFxuICAgIHdpZHRoPzogbnVtYmVyLFxuICAgIGhlaWdodD86IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCB7IGludGVybmFsRm9ybWF0LCBiYXNlRm9ybWF0LCBkYXRhVHlwZSB9ID0gdGhpcy5fZm9ybWF0RGV0YWlsO1xuICAgIGNvbnN0IG1pcFdpZHRoID0gTWF0aC5tYXgoMSwgdGhpcy5fd2lkdGggPj4gbWlwTGV2ZWwpO1xuICAgIGNvbnN0IG1pcEhlaWdodCA9IE1hdGgubWF4KDEsIHRoaXMuaGVpZ2h0ID4+IG1pcExldmVsKTtcblxuICAgIHdpZHRoID0gd2lkdGggfHwgbWlwV2lkdGggLSB4O1xuICAgIGhlaWdodCA9IGhlaWdodCB8fCBtaXBIZWlnaHQgLSB5O1xuXG4gICAgLy8gd2ViZ2wyIOaJjeWPr+S7peiAg+iZkee6ueeQhuWOi+e8qUFQSSBpc0NvbXByZXNzZWRcbiAgICBnbC5iaW5kVGV4dHVyZSh0aGlzLl9nbFRhcmdldCwgdGhpcy5fZ2xUZXh0dXJlKTtcbiAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCAwKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKHRoaXMuX2dsVGFyZ2V0LCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgLy8gZ2wudGV4U3ViSW1hZ2UyRCh0aGlzLl9nbFRhcmdldCwgbWlwTGV2ZWwsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJhc2VGb3JtYXQsIGRhdGFUeXBlLCBjb2xvckJ1ZmZlcik7XG4gICAgZ2wudGV4SW1hZ2UyRCh0aGlzLl9nbFRhcmdldCwgbWlwTGV2ZWwsIGludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCAwLCBiYXNlRm9ybWF0LCBkYXRhVHlwZSwgY29sb3JCdWZmZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dHVyZSBhY2NvcmRpbmcgdG8gdGhlIHBpY3R1cmUuXG4gICAqIEBwYXJhbSBpbWFnZVNvdXJjZSBJbWFnZSBzb3VyY2UuXG4gICAqIEBwYXJhbSBtaXBMZXZlbCBNaXAgbGV2ZWwuXG4gICAqIEBwYXJhbSBmbGlwWSBZIGF4aXMgcmV2ZXJzZWQuXG4gICAqL1xuICBzZXRJbWFnZVNvdXJjZShcbiAgICBpbWFnZVNvdXJjZTogVGV4SW1hZ2VTb3VyY2UsXG4gICAgbWlwTGV2ZWw6IG51bWJlcixcbiAgICBmbGlwWTogYm9vbGVhbixcbiAgICAvLyBwcmVtdWx0aXBseUFscGhhOiBib29sZWFuLFxuICAgIC8vIHg6IG51bWJlciA9IDAsXG4gICAgLy8geTogbnVtYmVyID0gMCxcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCB7IGJhc2VGb3JtYXQsIGRhdGFUeXBlLCBpbnRlcm5hbEZvcm1hdCB9ID0gdGhpcy5fZm9ybWF0RGV0YWlsO1xuXG4gICAgZ2wuYmluZFRleHR1cmUodGhpcy5fZ2xUYXJnZXQsIHRoaXMuX2dsVGV4dHVyZSk7XG4gICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgK2ZsaXBZKTtcbiAgICAvLyDlsIZBbHBoYemAmumBk+S5mOS7peWFtuS7luminOiJsumAmumBk1xuICAgIC8vIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgK3ByZW11bHRpcGx5QWxwaGEpO1xuICAgIC8vIGdsLnRleFN1YkltYWdlMkQodGhpcy5fZ2xUYXJnZXQsIG1pcExldmVsLCB4IHx8IDAsIHkgfHwgMCwgYmFzZUZvcm1hdCwgZGF0YVR5cGUsIGltYWdlU291cmNlKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhJbWFnZTJEKHRoaXMuX2dsVGFyZ2V0LCBtaXBMZXZlbCwgaW50ZXJuYWxGb3JtYXQsIGJhc2VGb3JtYXQsIGRhdGFUeXBlLCBpbWFnZVNvdXJjZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogRGVmaW5lIHRoZSBmYWNlIG9mIHRoZSBjdWJlIHRleHR1cmUuXG4gKi9cbmV4cG9ydCBlbnVtIFRleHR1cmVDdWJlRmFjZSB7XG4gIC8qKiBQb3NpdGl2ZSBYIGZhY2UgZm9yIGEgY3ViZS1tYXBwZWQgdGV4dHVyZS4gKi9cbiAgUG9zaXRpdmVYID0gMCxcbiAgLyoqIE5lZ2F0aXZlIFggZmFjZSBmb3IgYSBjdWJlLW1hcHBlZCB0ZXh0dXJlLiAqL1xuICBOZWdhdGl2ZVggPSAxLFxuICAvKiogUG9zaXRpdmUgWSBmYWNlIGZvciBhIGN1YmUtbWFwcGVkIHRleHR1cmUuICovXG4gIFBvc2l0aXZlWSA9IDIsXG4gIC8qKiBOZWdhdGl2ZSBZIGZhY2UgZm9yIGEgY3ViZS1tYXBwZWQgdGV4dHVyZS4gKi9cbiAgTmVnYXRpdmVZID0gMyxcbiAgLyoqIFBvc2l0aXZlIFogZmFjZSBmb3IgYSBjdWJlLW1hcHBlZCB0ZXh0dXJlLiAqL1xuICBQb3NpdGl2ZVogPSA0LFxuICAvKiogTmVnYXRpdmUgWiBmYWNlIGZvciBhIGN1YmUtbWFwcGVkIHRleHR1cmUuICovXG4gIE5lZ2F0aXZlWiA9IDUsXG59XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9FbmdpbmUnO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSAnLi4vc2hhZGVyJztcbmltcG9ydCB7IFRleHR1cmUyRCwgVGV4dHVyZUZvcm1hdCB9IGZyb20gJy4uL3RleHR1cmUnO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsJztcblxuLyoqXG4gKiBJbWFnZSBtYXRlcmlhbHMgdXNpbmcgMkQgdGV4dHVyZXMgdG8gZGlzcGxheSB0aGUgZWFydGgsIHJhc3RlciB0aWxlcywgZXRjLlxuICovXG5leHBvcnQgY2xhc3MgSW1hZ2VNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcbiAgLyoqIFRoZSB0ZXh0dXJlIHVzZWQgYnkgdGhlIGltYWdlIG1hdGVyaWFsLiAqL1xuICB0ZXh0dXJlMmQ6IFRleHR1cmUyRDtcbiAgLyoqIFRoZSBhZGRyZXNzIG9mIHRoZSB0ZXh0dXJlIHNhbXBsZXIgaW4gdGhlIHNoYWRlci4gKi9cbiAgc3RhdGljIF9zYW1wbGVwcm9wID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X3NhbXBsZXInKTtcblxuICAvLyBUT0RPOiDlupTor6Xlu7rnq4vkuIDkuKpzaGFkZXLmsaDvvIzov5nmoLflsLHkuI3nlKjlho3kvKDlhaVzaGFkZXLkuoZcbiAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUsIHNoYWRlcjogU2hhZGVyLCB1cmw6IHN0cmluZykge1xuICAgIHN1cGVyKGVuZ2luZSwgc2hhZGVyKTtcbiAgICBjb25zdCBzaGFkZXJEYXRhID0gdGhpcy5zaGFkZXJEYXRhO1xuICAgIHRoaXMubG9hZFRleHR1cmUodXJsKVxuICAgICAgLnRoZW4oKGltYWdlKSA9PiB7XG4gICAgICAgIHRoaXMudGV4dHVyZTJkID0gbmV3IFRleHR1cmUyRChlbmdpbmUsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIFRleHR1cmVGb3JtYXQuUjhHOEI4LCBmYWxzZSk7XG4gICAgICAgIHRoaXMudGV4dHVyZTJkLnNldEltYWdlU291cmNlKGltYWdlLCAwLCB0cnVlKTtcbiAgICAgICAgc2hhZGVyRGF0YS5zZXRUZXh0dXJlKEltYWdlTWF0ZXJpYWwuX3NhbXBsZXByb3AsIHRoaXMudGV4dHVyZTJkKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCB0ZXh0dXJlIGltYWdlIGFjY29yZGluZyB0byB1cmwuXG4gICAqIEBwYXJhbSB1cmwgVGV4dHVyZSBpbWFnZSB1cmwuXG4gICAqIEByZXR1cm5zIFByb21pc2U8SFRNTEltYWdlRWxlbWVudD5cbiAgICovXG4gIHByaXZhdGUgbG9hZFRleHR1cmUodXJsOiBzdHJpbmcpOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50ID0gbmV3IEltYWdlKCk7XG4gICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoaW1hZ2UpO1xuICAgICAgfTtcbiAgICAgIGltYWdlLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH07XG4gICAgICBpbWFnZS5zcmMgPSB1cmw7XG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9FbmdpbmUnO1xuaW1wb3J0IHsgVGV4dHVyZUZpbHRlck1vZGUgfSBmcm9tICcuL2VudW1zL1RleHR1cmVGaWx0ZXJNb2RlJztcbmltcG9ydCB7IFRleHR1cmVGb3JtYXQgfSBmcm9tICcuL2VudW1zL1RleHR1cmVGb3JtYXQnO1xuaW1wb3J0IHsgVGV4dHVyZVdyYXBNb2RlIH0gZnJvbSAnLi9lbnVtcy9UZXh0dXJlV3JhcE1vZGUnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZSc7XG5cbi8qKlxuICogQ3ViZSB0ZXh0dXJlLlxuICovXG5leHBvcnQgY2xhc3MgVGV4dHVyZUN1YmUgZXh0ZW5kcyBUZXh0dXJlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBUZXh0dXJlQ3ViZS5cbiAgICogQHBhcmFtIGVuZ2luZSBEZWZpbmUgdGhlIGVuZ2luZSB0byB1c2UgdG8gcmVuZGVyIHRoaXMgdGV4dHVyZS5cbiAgICogQHBhcmFtIHNpemUgVGV4dHVyZSBzaXplLiB0ZXh0dXJlIHdpZHRoIG11c3QgYmUgZXF1YWwgdG8gaGVpZ2h0IGluIGN1YmUgdGV4dHVyZS5cbiAgICogQHBhcmFtIGZvcm1hdCBUZXh0dXJlIGZvcm1hdCxkZWZhdWx0IFRleHR1cmVGb3JtYXQuUjhHOEI4QTguXG4gICAqIEBwYXJhbSBtaXBtYXAgV2hldGhlciB0byB1c2UgbXVsdGktbGV2ZWwgdGV4dHVyZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVuZ2luZTogRW5naW5lLCBzaXplOiBudW1iZXIsIGZvcm1hdDogVGV4dHVyZUZvcm1hdCA9IFRleHR1cmVGb3JtYXQuUjhHOEI4QTgsIG1pcG1hcDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fbWlwbWFwID0gbWlwbWFwO1xuICAgIHRoaXMuX3dpZHRoID0gc2l6ZTtcbiAgICB0aGlzLl9oZWlnaHQgPSBzaXplO1xuICAgIHRoaXMuX2Zvcm1hdCA9IGZvcm1hdDtcbiAgICB0aGlzLl9taXBtYXBDb3VudCA9IHRoaXMuX2dldE1pcG1hcENvdW50KCk7XG5cbiAgICB0aGlzLmZpbHRlck1vZGUgPSBUZXh0dXJlRmlsdGVyTW9kZS5CaWxpbmVhcjtcbiAgICB0aGlzLndyYXBNb2RlVSA9IHRoaXMud3JhcE1vZGVWID0gVGV4dHVyZVdyYXBNb2RlLkNsYW1wO1xuXG4gICAgdGhpcy5fZ2wgPSBlbmdpbmUuZ2w7XG4gICAgdGhpcy5fZ2xUZXh0dXJlID0gdGhpcy5fZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgIHRoaXMuX2dsVGFyZ2V0ID0gdGhpcy5fZ2wuVEVYVFVSRV9DVUJFX01BUDtcbiAgICB0aGlzLl9mb3JtYXREZXRhaWwgPSBUZXh0dXJlLl9nZXRGb3JtYXREZXRhaWwoZm9ybWF0LCB0aGlzLl9nbCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRleHR1cmUgYmFzZWQgb24gcGl4ZWwgYnVmZmVyLlxuICAgKiBAcGFyYW0gZmFjZSBXaGljaCBzaWRlIG9mIHRoZSBjdWJlLlxuICAgKiBAcGFyYW0gY29sb3JCdWZmZXIgQ29sb3IgYnVmZmVyLlxuICAgKiBAcGFyYW0gbWlwTGV2ZWwgTWlwIGxldmVsLlxuICAgKi9cbiAgc2V0UGl4ZWxCdWZmZXIoXG4gICAgZmFjZTogbnVtYmVyLFxuICAgIGNvbG9yQnVmZmVyOiBBcnJheUJ1ZmZlclZpZXcsXG4gICAgbWlwTGV2ZWw6IG51bWJlciA9IDAsXG4gICAgLy8geDogbnVtYmVyID0gMCxcbiAgICAvLyB5OiBudW1iZXIgPSAwLFxuICAgIC8vIHdpZHRoPzogbnVtYmVyLFxuICAgIC8vIGhlaWdodD86IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCB7IGludGVybmFsRm9ybWF0LCBiYXNlRm9ybWF0LCBkYXRhVHlwZSB9ID0gdGhpcy5fZm9ybWF0RGV0YWlsO1xuXG4gICAgZ2wuYmluZFRleHR1cmUodGhpcy5fZ2xUYXJnZXQsIHRoaXMuX2dsVGV4dHVyZSk7XG5cbiAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCAwKTtcbiAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIDApO1xuXG4gICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgIGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGZhY2UsXG4gICAgICBtaXBMZXZlbCxcbiAgICAgIGludGVybmFsRm9ybWF0LFxuICAgICAgdGhpcy5fd2lkdGgsXG4gICAgICB0aGlzLl9oZWlnaHQsXG4gICAgICAwLFxuICAgICAgYmFzZUZvcm1hdCxcbiAgICAgIGRhdGFUeXBlLFxuICAgICAgY29sb3JCdWZmZXIsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHR1cmUgYWNjb3JkaW5nIHRvIHRoZSBwaWN0dXJlLlxuICAgKiBAcGFyYW0gZmFjZSBXaGljaCBzaWRlIG9mIHRoZSBjdWJlLlxuICAgKiBAcGFyYW0gaW1hZ2VTb3VyY2UgSW1hZ2Ugc291cmNlLlxuICAgKiBAcGFyYW0gbWlwTGV2ZWwgTWlwIGxldmVsLlxuICAgKi9cbiAgc2V0SW1hZ2VTb3VyY2UoXG4gICAgZmFjZTogbnVtYmVyLFxuICAgIGltYWdlU291cmNlOiBUZXhJbWFnZVNvdXJjZSB8IG51bGwsXG4gICAgbWlwTGV2ZWw6IG51bWJlcixcbiAgICAvLyBmbGlwWTogYm9vbGVhbixcbiAgICAvLyBwcmVtdWx0aXBseUFscGhhOiBib29sZWFuLFxuICAgIC8vIHg6IG51bWJlcixcbiAgICAvLyB5OiBudW1iZXIsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgY29uc3QgeyBiYXNlRm9ybWF0LCBkYXRhVHlwZSwgaW50ZXJuYWxGb3JtYXQgfSA9IHRoaXMuX2Zvcm1hdERldGFpbDtcblxuICAgIGdsLmJpbmRUZXh0dXJlKHRoaXMuX2dsVGFyZ2V0LCB0aGlzLl9nbFRleHR1cmUpO1xuICAgIGdsLnRleEltYWdlMkQoZmFjZSwgbWlwTGV2ZWwsIGludGVybmFsRm9ybWF0LCBiYXNlRm9ybWF0LCBkYXRhVHlwZSwgaW1hZ2VTb3VyY2UpO1xuICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfQ1VCRV9NQVApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9FbmdpbmUnO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbCc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuLi9zaGFkZXInO1xuaW1wb3J0IHsgVGV4dHVyZUN1YmUgfSBmcm9tICcuLi90ZXh0dXJlL1RleHR1cmVDdWJlJztcblxudHlwZSBJRmFjZUluZm8gPSB7XG4gIHRhcmdldDogbnVtYmVyO1xuICB1cmw6IHN0cmluZztcbn07XG5cbi8qKlxuICogQSBza3lib3ggbWF0ZXJpYWwgYnVpbHQgd2l0aCBhIGN1YmUgdGV4dHVyZSwgdXNlZCB0byBkaXNwbGF5IHRoZSBzdGFycnkgc2t5LCBldGMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTa3lCb3hNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcbiAgLyoqIEN1YmUgdGV4dHVyZS4gKi9cbiAgdGV4dHVyZUN1YmU6IFRleHR1cmVDdWJlO1xuICAvKiogU2l4IHNpZGVkIGluZm9ybWF0aW9uIGFycmF5LiAqL1xuICBmYWNlSW5mb0FycjogSUZhY2VJbmZvW107XG4gIC8qKiBHZXQgdGhlIHNhbXBsZXIgZm9yIHRoZSBjdWJlIHRleHR1cmUgaW4gdGhlIHNoYWRlci4gKi9cbiAgc3RhdGljIF9za3lib3hwcm9wID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X1NreWJveCcpO1xuXG4gIC8vIFRPRE86IOaKvVJlZk9iamVjdFxuICBjb25zdHJ1Y3RvcihlbmdpbmU6IEVuZ2luZSwgZmFjZUluZm9BcnI6IElGYWNlSW5mb1tdKSB7XG4gICAgc3VwZXIoZW5naW5lLCBTaGFkZXIuZmluZCgnc2t5Ym94JykpO1xuXG4gICAgY29uc3Qgc2hhZGVyRGF0YSA9IHRoaXMuc2hhZGVyRGF0YTtcbiAgICB0aGlzLnRleHR1cmVDdWJlID0gbmV3IFRleHR1cmVDdWJlKGVuZ2luZSwgMTAyNCk7XG4gICAgdGhpcy5mYWNlSW5mb0FyciA9IGZhY2VJbmZvQXJyO1xuICAgIGNvbnN0IGdsID0gZW5naW5lLmdsO1xuXG4gICAgdGhpcy5mYWNlSW5mb0Fyci5mb3JFYWNoKChmYWNlSW5mbykgPT4ge1xuICAgICAgY29uc3QgeyB0YXJnZXQsIHVybCB9ID0gZmFjZUluZm87XG4gICAgICBjb25zdCBsZXZlbCA9IDA7XG5cbiAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICBpbWFnZS5zcmMgPSB1cmw7XG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnO1xuICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnRleHR1cmVDdWJlLnNldEltYWdlU291cmNlKHRhcmdldCwgaW1hZ2UsIGxldmVsKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFX0NVQkVfTUFQLCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUl9NSVBNQVBfTElORUFSKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBzaGFkZXJEYXRhLnNldFRleHR1cmUoU2t5Qm94TWF0ZXJpYWwuX3NreWJveHByb3AsIHRoaXMudGV4dHVyZUN1YmUpO1xuICB9XG59XG4iLCIvKipcbiAqIEJ1ZmZlciBiaW5kaW5nIGZsYWcuXG4gKi9cbmV4cG9ydCBlbnVtIEJ1ZmZlckJpbmRGbGFnIHtcbiAgLyoqIFZlcnRleCBidWZmZXIgYmluZGluZyBmbGFnICovXG4gIFZlcnRleEJ1ZmZlcixcbiAgLyoqIEluZGV4IGJ1ZmZlciBiaW5kaW5nIGZsYWcgKi9cbiAgSW5kZXhCdWZmZXIsXG59XG4iLCIvKipcbiAqIEJ1ZmZlciB1c2FnZS5cbiAqL1xuZXhwb3J0IGVudW0gQnVmZmVyVXNhZ2Uge1xuICAvKiogVGhlIGJ1ZmZlciBjb250ZW50IGFyZSBpbnRlbmRlZCB0byBiZSBzcGVjaWZpZWQgb25jZSwgYW5kIHVzZWQgbWFueSB0aW1lcyAqL1xuICBTdGF0aWMsXG4gIC8qKiBUaGUgYnVmZmVyIGNvbnRlbnRzIGFyZSBpbnRlbmRlZCB0byBiZSByZXNwZWNpZmllZCByZXBlYXRlZGx5LCBhbmQgdXNlZCBtYW55IHRpbWVzICovXG4gIER5bmFtaWMsXG4gIC8qKiBUaGUgYnVmZmVyIGNvbnRlbnRzIGFyZSBpbnRlbmRlZCB0byBiZSBzcGVjaWZpZWQgb25jZSwgYW5kIHVzZWQgYXQgbW9zdCBhIGZldyB0aW1lcyAqL1xuICBTdHJlYW0sXG59XG4iLCIvKipcbiAqIFZlcnRleCBlbGVtZW50IGZvcm1hdC5cbiAqL1xuZXhwb3J0IGVudW0gVmVydGV4RWxlbWVudEZvcm1hdCB7XG4gIC8qKiAzMi1iaXQgZmxvYXQgKi9cbiAgRmxvYXQsXG4gIC8qKiBUd28tZGltZW5zaW9uYWwgMzItYml0IGZsb2F0ICovXG4gIFZlY3RvcjIsXG4gIC8qKiBUaHJlZS1kaW1lbnNpb25hbCAzMi1iaXQgZmxvYXQgKi9cbiAgVmVjdG9yMyxcbiAgLyoqIEZvdXItZGltZW5zaW9uYWwgMzItYml0IGZsb2F0ICovXG4gIFZlY3RvcjQsXG4gIC8qKiBGb3VyLWRpbWVuc2lvbmFsIDgtYml0IGludGVnZXIscmFuZ2UgaXMgWy0xMjgsMTI3XSAqL1xuICBCeXRlNCxcbiAgLyoqIEZvdXItZGltZW5zaW9uYWwgOC1iaXQgVW5zaWduZWQgaW50ZWdlciwgcmFuZ2UgaXMgWzAsMjU1XSAqL1xuICBVQnl0ZTQsXG4gIC8qKiBGb3VyLWRpbWVuc2lvbmFsIDgtYml0IE5vcm1hbGl6ZWQgaW50ZWdlciwgcmFuZ2UgaXMgWy0xLDFdICovXG4gIE5vcm1hbGl6ZWRCeXRlNCxcbiAgLyoqIEZvdXItZGltZW5zaW9uYWwgOC1iaXQgTm9ybWFsaXplZCB1bnNpZ25lZCBpbnRlZ2VyLCByYW5nZSBpcyBbMCwxXSAqL1xuICBOb3JtYWxpemVkVUJ5dGU0LFxuICAvKiogVHdvLWRpbWVuc2lvbmFsIDE2LWJpdCBpbnRlZ2VyLCByYW5nZSBpc1stMzI3NjgsIDMyNzY3XSAqL1xuICBTaG9ydDIsXG4gIC8qKiBUd28tZGltZW5zaW9uYWwgMTYtYml0IFVuc2lnbmVkIGludGVnZXIsIHJhbmdlIGlzIFswLCA2NTUzNV0gKi9cbiAgVVNob3J0MixcbiAgLyoqIFR3by1kaW1lbnNpb25hbCAxNi1iaXQgVW5zaWduZWQgaW50ZWdlciwgcmFuZ2UgaXMgWy0xLCAxXSAqL1xuICBOb3JtYWxpemVkU2hvcnQyLFxuICAvKiogVHdvLWRpbWVuc2lvbmFsIDE2LWJpdCBOb3JtYWxpemVkIHVuc2lnbmVkIGludGVnZXIsIHJhbmdlIGlzIFswLCAxXSAqL1xuICBOb3JtYWxpemVkVVNob3J0MixcbiAgLyoqIEZvdXItZGltZW5zaW9uYWwgMTYtYml0IGludGVnZXIsIHJhbmdlIGlzIFstMzI3NjgsIDMyNzY3XSAqL1xuICBTaG9ydDQsXG4gIC8qKiBGb3VyLWRpbWVuc2lvbmFsIDE2LWJpdCBVbnNpZ25lZCBpbnRlZ2VyLCByYW5nZSBpcyBbMCwgNjU1MzVdICovXG4gIFVTaG9ydDQsXG4gIC8qKiBGb3VyLWRpbWVuc2lvbmFsIDE2LWJpdCBOb3JtYWxpemVkIGludGVnZXIsIHJhbmdlIGlzWy0xLCAxXSAqL1xuICBOb3JtYWxpemVkU2hvcnQ0LFxuICAvKiogRm91ci1kaW1lbnNpb25hbCAxNi1iaXQgTm9ybWFsaXplZCB1bnNpZ25lZCBpbnRlZ2VyLCByYW5nZSBpcyBbMCwgMV0gKi9cbiAgTm9ybWFsaXplZFVTaG9ydDQsXG59XG4iLCIvKipcbiAqIERhdGEgdHlwZSBlbnVtZXJhdGlvblxuICovXG5leHBvcnQgZW51bSBEYXRhVHlwZSB7XG4gIC8qKiBGbG9hdCAqL1xuICBGTE9BVCA9IDUxMjYsIC8vIGdsLkZMT0FUXG4gIC8qKiBGbG9hdGluZy1wb2ludCB0d28tZGltZW5zaW9uYWwgdmVjdG9yICovXG4gIEZMT0FUX1ZFQzIgPSAzNTY2NCwgLy8gZ2wuRkxPQVRfVkVDMlxuICAvKiogRmxvYXRpbmctcG9pbnQgdGhyZWUtZGltZW5zaW9uYWwgdmVjdG9yICovXG4gIEZMT0FUX1ZFQzMgPSAzNTY2NSwgLy8gZ2wuRkxPQVRfVkVDM1xuICAvKiogRmxvYXRpbmctcG9pbnQgZm91ci1kaW1lbnNpb25hbCB2ZWN0b3IgKi9cbiAgRkxPQVRfVkVDNCA9IDM1NjY2LCAvLyBnbC5GTE9BVF9WRUM0XG5cbiAgLyoqIEludGVnZXIgKi9cbiAgSU5UID0gNTEyNCwgLy8gZ2wuSU5UXG4gIC8qKiBJbnRlZ2VyIHR3by1kaW1lbnNpb25hbCB2ZWN0b3IgKi9cbiAgSU5UX1ZFQzIgPSAzNTY2NywgLy8gZ2wuSU5UX1ZFQzJcbiAgLyoqIEludGVnZXIgdGhyZWUtZGltZW5zaW9uYWwgdmVjdG9yICovXG4gIElOVF9WRUMzID0gMzU2NjgsIC8vIGdsLklOVF9WRUMzXG4gIC8qKiBJbnRlZ2VyIGZvdXItZGltZW5zaW9uYWwgdmVjdG9yICovXG4gIElOVF9WRUM0ID0gMzU2NjksIC8vIGdsLklOVF9WRUM0XG5cbiAgLyoqIEJvb2xlYW4gKi9cbiAgQk9PTCA9IDM1NjcwLCAvLyBnbC5CT09MXG4gIC8qKiBCb29sZWFuIHR3by1kaW1lbnNpb25hbCB2ZWN0b3IgKi9cbiAgQk9PTF9WRUMyID0gMzU2NzEsIC8vIGdsLkJPT0xfVkVDMlxuICAvKiogQm9vbGVhbiB0aHJlZS1kaW1lbnNpb25hbCB2ZWN0b3IgKi9cbiAgQk9PTF9WRUMzID0gMzU2NzIsIC8vIGdsLkJPT0xfVkVDM1xuICAvKiogQm9vbGVhbiBmb3VyLWRpbWVuc2lvbmFsIHZlY3RvciAqL1xuICBCT09MX1ZFQzQgPSAzNTY3MywgLy8gZ2wuQk9PTF9WRUM0XG5cbiAgLyoqIFNlY29uZC1vcmRlciBtYXRyaXggKi9cbiAgRkxPQVRfTUFUMiA9IDM1Njc0LCAvLyBnbC5GTE9BVF9NQVQyXG4gIC8qKiBUaGlyZC1vcmRlciBtYXRyaXggKi9cbiAgRkxPQVRfTUFUMyA9IDM1Njc1LCAvLyBnbC5GTE9BVF9NQVQzXG4gIC8qKiBGb3VydGgtb3JkZXIgbWF0cml4ICovXG4gIEZMT0FUX01BVDQgPSAzNTY3NiwgLy8gZ2wuRkxPQVRfTUFUNFxuXG4gIC8qKiBGbG9hdCBhcnJheSAqL1xuICBGTE9BVF9BUlJBWSA9IDM1Njc3LCAvLyBnbC5GTE9BVF9BUlJBWVxuICAvKiogRmxvYXRpbmctcG9pbnQgdHdvLWRpbWVuc2lvbmFsIHZlY3RvciBhcnJheSAqL1xuICBGTE9BVF9WRUMyX0FSUkFZID0gMTAwMDAwLFxuICAvKiogRmxvYXRpbmctcG9pbnQgdGhyZWUtZGltZW5zaW9uYWwgdmVjdG9yIGFycmF5ICovXG4gIEZMT0FUX1ZFQzNfQVJSQVksXG4gIC8qKiBGbG9hdGluZy1wb2ludCBmb3VyLWRpbWVuc2lvbmFsIHZlY3RvciBhcnJheSAqL1xuICBGTE9BVF9WRUM0X0FSUkFZLFxuXG4gIC8qKiBJbnRlZ2VyIGFycmF5ICovXG4gIElOVF9BUlJBWSxcbiAgLyoqIEludGVnZXIgdHdvLWRpbWVuc2lvbmFsIHZlY3RvciBhcnJheSAqL1xuICBJTlRfVkVDMl9BUlJBWSxcbiAgLyoqIEludGVnZXIgdGhyZWUtZGltZW5zaW9uYWwgdmVjdG9yIGFycmF5ICovXG4gIElOVF9WRUMzX0FSUkFZLFxuICAvKiogSW50ZWdlciBmb3VyLWRpbWVuc2lvbmFsIHZlY3RvciBhcnJheSAqL1xuICBJTlRfVkVDNF9BUlJBWSxcblxuICAvKiogU2Vjb25kLW9yZGVyIG1hdHJpeCBhcnJheSAqL1xuICBGTE9BVF9NQVQyX0FSUkFZLFxuICAvKiogVGhpcmQtb3JkZXIgbWF0cml4IGFycmF5ICovXG4gIEZMT0FUX01BVDNfQVJSQVksXG4gIC8qKiBGb3VydGgtb3JkZXIgbWF0cml4IGFycmF5ICovXG4gIEZMT0FUX01BVDRfQVJSQVksXG5cbiAgLyoqIDJEIHRleHR1cmUgc2FtcGxlciBhcnJheSAqL1xuICBTQU1QTEVSXzJEX0FSUkFZLFxuICAvKiogQ3ViZSBtYXAgdGV4dHVyZSBzYW1wbGVyIGFycmF5ICovXG4gIFNBTVBMRVJfQ1VCRV9BUlJBWSxcblxuICAvKiogMkQgc2FtcGxlciAqL1xuICBTQU1QTEVSXzJEID0gMzU2NzgsIC8vIGdsLlNBTVBMRVJfMkRcbiAgLyoqIEN1YmUgbWFwIFRleHR1cmUgc2FtcGxlciAqL1xuICBTQU1QTEVSX0NVQkUgPSAzNTY4MCwgLy8gZ2wuU0FNUExFUl9DVUJFXG5cbiAgLyoqIEJ5dGUgKi9cbiAgQllURSA9IDUxMjAsIC8vIGdsLkJZVEVcbiAgLyoqIFVuc2lnbmVkIGJ5dGUgKi9cbiAgVU5TSUdORURfQllURSA9IDUxMjEsIC8vIGdsLlVOU0lHTkVEX0JZVEVcbiAgLyoqIFNob3J0ICovXG4gIFNIT1JUID0gNTEyMiwgLy8gZ2wuU0hPUlRcbiAgLyoqIFVuc2lnbmVkIHNob3J0ICovXG4gIFVOU0lHTkVEX1NIT1JUID0gNTEyMywgLy8gZ2wuVU5TSUdORURfU0hPUlRcbiAgLyoqIFVuc2lnbmVkIGludCAqL1xuICBVTlNJR05FRF9JTlQgPSA1MTI1LCAvLyBnbC5VTlNJR05FRF9JTlRcblxuICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggPSAzNDA2OSxcbiAgVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YLFxuICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ksXG4gIFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWSxcbiAgVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aLFxuICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1osXG59XG5cbi8qKlxuICogR0wgQ2FwYWJpbGl0aWVzXG4gKiBTb21lIGNhcGFiaWxpdGllcyBjYW4gYmUgc21vb3RoZWQgb3V0IGJ5IGV4dGVuc2lvbiwgYW5kIHNvbWUgY2FwYWJpbGl0aWVzIG11c3QgdXNlIFdlYkdMIDIuMC5cbiAqICovXG5leHBvcnQgZW51bSBHTENhcGFiaWxpdHlUeXBlIHtcbiAgc2hhZGVyVmVydGV4SUQgPSAnc2hhZGVyVmVydGV4SUQnLFxuICBzdGFuZGFyZERlcml2YXRpdmVzID0gJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycsXG4gIHNoYWRlclRleHR1cmVMb2QgPSAnRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCcsXG4gIGVsZW1lbnRJbmRleFVpbnQgPSAnT0VTX2VsZW1lbnRfaW5kZXhfdWludCcsXG4gIGRlcHRoVGV4dHVyZSA9ICdXRUJHTF9kZXB0aF90ZXh0dXJlJyxcbiAgZHJhd0J1ZmZlcnMgPSAnV0VCR0xfZHJhd19idWZmZXJzJyxcbiAgdmVydGV4QXJyYXlPYmplY3QgPSAnT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLFxuICBpbnN0YW5jZWRBcnJheXMgPSAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycsXG4gIG11bHRpcGxlU2FtcGxlID0gJ211bHRpcGxlU2FtcGxlT25seVN1cHBvcnRlZEluV2ViR0wyJyxcbiAgdGV4dHVyZUZsb2F0ID0gJ09FU190ZXh0dXJlX2Zsb2F0JyxcbiAgdGV4dHVyZUZsb2F0TGluZWFyID0gJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicsXG4gIHRleHR1cmVIYWxmRmxvYXQgPSAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcsXG4gIHRleHR1cmVIYWxmRmxvYXRMaW5lYXIgPSAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInLFxuICBXRUJHTF9jb2xvckJ1ZmZlckZsb2F0ID0gJ1dFQkdMX2NvbG9yX2J1ZmZlcl9mbG9hdCcsXG4gIGNvbG9yQnVmZmVyRmxvYXQgPSAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcsXG4gIGNvbG9yQnVmZmVySGFsZkZsb2F0ID0gJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcsXG4gIHRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpYyA9ICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnLFxuICBibGVuZE1pbk1heCA9ICdFWFRfYmxlbmRfbWlubWF4JyxcblxuICBhc3RjID0gJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJyxcbiAgYXN0Y193ZWJraXQgPSAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJyxcbiAgZXRjID0gJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMnLFxuICBldGNfd2Via2l0ID0gJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjJyxcbiAgZXRjMSA9ICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMScsXG4gIGV0YzFfd2Via2l0ID0gJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMScsXG4gIHB2cnRjID0gJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycsXG4gIHB2cnRjX3dlYmtpdCA9ICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyxcbiAgczN0YyA9ICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycsXG4gIHMzdGNfd2Via2l0ID0gJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycsXG4gIC8vIGF0YyA9IFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2F0Y1wiLFxuICAvLyBzM3RjX3NyZ2IgPSBcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjX3NyZ2JcIlxufVxuXG5leHBvcnQgdHlwZSBUeXBlZEFycmF5ID1cbiAgfCBJbnQ4QXJyYXlcbiAgfCBVaW50OEFycmF5XG4gIHwgSW50MTZBcnJheVxuICB8IFVpbnQxNkFycmF5XG4gIHwgSW50MzJBcnJheVxuICB8IFVpbnQzMkFycmF5XG4gIHwgVWludDhDbGFtcGVkQXJyYXlcbiAgfCBGbG9hdDMyQXJyYXlcbiAgfCBGbG9hdDY0QXJyYXk7XG4iLCIvKipcbiAqIEluZGV4IGZvcm1hdC5cbiAqL1xuZXhwb3J0IGVudW0gSW5kZXhGb3JtYXQge1xuICAvKiogOCBiaXQgKi9cbiAgVUludDgsXG4gIC8qKiAxNiBiaXQgKi9cbiAgVUludDE2LFxuICAvKiogMzIgYml0ICovXG4gIFVJbnQzMixcbn1cbiIsImltcG9ydCB7IEJ1ZmZlclVzYWdlIH0gZnJvbSAnLi9lbnVtcy9CdWZmZXJVc2FnZSc7XG5pbXBvcnQgeyBWZXJ0ZXhFbGVtZW50Rm9ybWF0IH0gZnJvbSAnLi9lbnVtcy9WZXJ0ZXhFbGVtZW50Rm9ybWF0JztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vYmFzZS9Db25zdGFudCc7XG5pbXBvcnQgeyBJbmRleEZvcm1hdCB9IGZyb20gJy4vZW51bXMvSW5kZXhGb3JtYXQnO1xuXG4vKipcbiAqIEluZm9ybWF0aW9uIGFib3V0IGEgc2luZ2xlIHZlcnRleCBlbGVtZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRJbmZvIHtcbiAgLyoqIE51bWJlciBvZiBjb21wb25lbnRzIHBlciB2ZXJ0ZXguICovXG4gIHNpemU6IG51bWJlcjtcbiAgLyoqIFR5cGUgb2YgZGF0YS4gKi9cbiAgdHlwZTogRGF0YVR5cGU7XG4gIC8qKiBXaGV0aGVyIG5vcm1hbGl6YXRpb24gaXMgcmVxdWlyZWQuICovXG4gIG5vcm1hbGl6ZWQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIHByb2Nlc3NpbmcgQnVmZmVycy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJ1ZmZlclV0aWwge1xuICAvKipcbiAgICogT2J0YWluIHRoZSB1c2FnZSBvZiBCdWZmZXIgYWNjb3JkaW5nIHRvIHRoZSBpbmNvbWluZyBlbnVtZXJhdGlvbi5cbiAgICogQHBhcmFtIGdsIFdlYkdMIHJlbmRlcmluZyBjb250ZXh0LlxuICAgKiBAcGFyYW0gYnVmZmVyVXNhZ2UgQnVmZmVyIHVzYWdlLlxuICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIGNvZGUgdXNlZCBieSB0aGUgaW50ZXJuYWwgYnVmZmVyIG9mIGdsLlxuICAgKi9cbiAgc3RhdGljIF9nZXRHTEJ1ZmZlclVzYWdlKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGJ1ZmZlclVzYWdlOiBCdWZmZXJVc2FnZSk6IG51bWJlciB7XG4gICAgc3dpdGNoIChidWZmZXJVc2FnZSkge1xuICAgICAgY2FzZSBCdWZmZXJVc2FnZS5TdGF0aWM6XG4gICAgICAgIHJldHVybiBnbC5TVEFUSUNfRFJBVztcbiAgICAgIGNhc2UgQnVmZmVyVXNhZ2UuRHluYW1pYzpcbiAgICAgICAgcmV0dXJuIGdsLkRZTkFNSUNfRFJBVztcbiAgICAgIGNhc2UgQnVmZmVyVXNhZ2UuU3RyZWFtOlxuICAgICAgICByZXR1cm4gZ2wuU1RSRUFNX0RSQVc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBpbmRleCB0eXBlIGNvZGUuXG4gICAqIEBwYXJhbSBpbmRleEZvcm1hdCBJbmRleCB0eXBlIGVudW1lcmF0aW9uLlxuICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIGNvZGUgdXNlZCBieSB0aGUgaW50ZXJuYWwgdHlwZSBvZiBnbC5cbiAgICovXG4gIHN0YXRpYyBfZ2V0R0xJbmRleFR5cGUoaW5kZXhGb3JtYXQ6IEluZGV4Rm9ybWF0KTogRGF0YVR5cGUge1xuICAgIHN3aXRjaCAoaW5kZXhGb3JtYXQpIHtcbiAgICAgIGNhc2UgSW5kZXhGb3JtYXQuVUludDg6XG4gICAgICAgIHJldHVybiBEYXRhVHlwZS5VTlNJR05FRF9CWVRFO1xuICAgICAgY2FzZSBJbmRleEZvcm1hdC5VSW50MTY6XG4gICAgICAgIHJldHVybiBEYXRhVHlwZS5VTlNJR05FRF9TSE9SVDtcbiAgICAgIGNhc2UgSW5kZXhGb3JtYXQuVUludDMyOlxuICAgICAgICByZXR1cm4gRGF0YVR5cGUuVU5TSUdORURfSU5UO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZ2wgaW5kZXggYnl0ZSBjb3VudC5cbiAgICogQHBhcmFtIGluZGV4Rm9ybWF0IEluZGV4IHR5cGUgZW51bWVyYXRpb24uXG4gICAqIEByZXR1cm5zIEluZGV4IGJ5dGUgY291bnQuXG4gICAqL1xuICBzdGF0aWMgX2dldEdMSW5kZXhCeXRlQ291bnQoaW5kZXhGb3JtYXQ6IEluZGV4Rm9ybWF0KTogRGF0YVR5cGUge1xuICAgIHN3aXRjaCAoaW5kZXhGb3JtYXQpIHtcbiAgICAgIGNhc2UgSW5kZXhGb3JtYXQuVUludDg6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSBJbmRleEZvcm1hdC5VSW50MTY6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSBJbmRleEZvcm1hdC5VSW50MzI6XG4gICAgICAgIHJldHVybiA0O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHZlcnRleCBpbmZvcm1hdGlvbiBiYXNlZCBvbiB0aGUgZWxlbWVudCdzIHZlcnRleCBmb3JtYXQuXG4gICAqL1xuICBzdGF0aWMgX2dldEVsZW1lbnRJbmZvKGZvcm1hdDogVmVydGV4RWxlbWVudEZvcm1hdCk6IEVsZW1lbnRJbmZvIHtcbiAgICBsZXQgc2l6ZTogbnVtYmVyO1xuICAgIGxldCB0eXBlOiBEYXRhVHlwZTtcbiAgICBsZXQgbm9ybWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5GbG9hdDpcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5GTE9BVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuVmVjdG9yMjpcbiAgICAgICAgc2l6ZSA9IDI7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5GTE9BVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuVmVjdG9yMzpcbiAgICAgICAgc2l6ZSA9IDM7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5GTE9BVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuVmVjdG9yNDpcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5GTE9BVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuQnl0ZTQ6XG4gICAgICAgIHNpemUgPSA0O1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuQllURTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuVUJ5dGU0OlxuICAgICAgICBzaXplID0gNDtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLlVOU0lHTkVEX0JZVEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWZXJ0ZXhFbGVtZW50Rm9ybWF0Lk5vcm1hbGl6ZWRCeXRlNDpcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5CWVRFO1xuICAgICAgICBub3JtYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuTm9ybWFsaXplZFVCeXRlNDpcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5VTlNJR05FRF9CWVRFO1xuICAgICAgICBub3JtYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuU2hvcnQyOlxuICAgICAgICBzaXplID0gMjtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLlNIT1JUO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5VU2hvcnQyOlxuICAgICAgICBzaXplID0gMjtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLlVOU0lHTkVEX1NIT1JUO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5Ob3JtYWxpemVkU2hvcnQyOlxuICAgICAgICBzaXplID0gMjtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLlNIT1JUO1xuICAgICAgICBub3JtYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuTm9ybWFsaXplZFVTaG9ydDI6XG4gICAgICAgIHNpemUgPSAyO1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuVU5TSUdORURfU0hPUlQ7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5TaG9ydDQ6XG4gICAgICAgIHNpemUgPSA0O1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuU0hPUlQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWZXJ0ZXhFbGVtZW50Rm9ybWF0LlVTaG9ydDQ6XG4gICAgICAgIHNpemUgPSA0O1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuVU5TSUdORURfU0hPUlQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWZXJ0ZXhFbGVtZW50Rm9ybWF0Lk5vcm1hbGl6ZWRTaG9ydDQ6XG4gICAgICAgIHNpemUgPSA0O1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuU0hPUlQ7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5Ob3JtYWxpemVkVVNob3J0NDpcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5VTlNJR05FRF9TSE9SVDtcbiAgICAgICAgbm9ybWFsaXplZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiB7IHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQnVmZmVyQmluZEZsYWcgfSBmcm9tICcuL2VudW1zL0J1ZmZlckJpbmRGbGFnJztcbmltcG9ydCB7IEJ1ZmZlclVzYWdlIH0gZnJvbSAnLi9lbnVtcy9CdWZmZXJVc2FnZSc7XG5pbXBvcnQgeyBCdWZmZXJVdGlsIH0gZnJvbSAnLi9CdWZmZXJVdGlsJztcblxuLyoqXG4gKiBCdWZmZXIgYmFzZSBjbGFzcyxcbiAqIHdoaWNoIGNhbiBiZSBhbiBhcnJheSBvZiB2ZXJ0ZXggYnVmZmVycyBvciBhbiBhcnJheSBvZiBpbmRleCBidWZmZXJzLlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyIHtcbiAgLy8gVE9ETzog5oqKZ2zmjILovb3liLBSZWZPYmplY3RcbiAgX2dsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gIF9nbEJpbmRUYXJnZXQ6IG51bWJlcjtcbiAgX2dsQnVmZmVyVXNhZ2U6IG51bWJlcjtcbiAgX25hdGl2ZUJ1ZmZlcjogV2ViR0xCdWZmZXI7XG5cbiAgcHJpdmF0ZSBfdHlwZTogQnVmZmVyQmluZEZsYWc7XG4gIHByaXZhdGUgX2J5dGVMZW5ndGg6IG51bWJlcjtcbiAgcHJpdmF0ZSBfYnVmZmVyVXNhZ2U6IEJ1ZmZlclVzYWdlO1xuXG4gIC8qKlxuICAgKiBCdWZmZXIgYmluZGluZyBmbGFnLlxuICAgKi9cbiAgZ2V0IHR5cGUoKTogQnVmZmVyQmluZEZsYWcge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ5dGUgbGVuZ3RoLlxuICAgKi9cbiAgZ2V0IGJ5dGVMZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWZmZXIgdXNhZ2UuXG4gICAqL1xuICBnZXQgYnVmZmVyVXNhZ2UoKTogQnVmZmVyVXNhZ2Uge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXJVc2FnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgQnVmZmVyLlxuICAgKiBAcGFyYW0gZ2wgLSBXZWJHTFJlbmRlcmluZ0NvbnRleHRcbiAgICogQHBhcmFtIHR5cGUgLSBCdWZmZXIgYmluZGluZyBmbGFnXG4gICAqIEBwYXJhbSBieXRlTGVuZ3RoIC0gQnl0ZSBsZW5ndGhcbiAgICogQHBhcmFtIGJ1ZmZlclVzYWdlIC0gQnVmZmVyIHVzYWdlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0eXBlOiBCdWZmZXJCaW5kRmxhZywgYnl0ZUxlbmd0aDogbnVtYmVyLCBidWZmZXJVc2FnZT86IEJ1ZmZlclVzYWdlKTtcblxuICAvKipcbiAgICogQ3JlYXRlIEJ1ZmZlci5cbiAgICogQHBhcmFtIGdsIC0gV2ViR0xSZW5kZXJpbmdDb250ZXh0XG4gICAqIEBwYXJhbSB0eXBlIC0gQnVmZmVyIGJpbmRpbmcgZmxhZ1xuICAgKiBAcGFyYW0gZGF0YSAtIEJ5dGVcbiAgICogQHBhcmFtIGJ1ZmZlclVzYWdlIC0gQnVmZmVyIHVzYWdlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxuICAgIHR5cGU6IEJ1ZmZlckJpbmRGbGFnLFxuICAgIGRhdGE6IEFycmF5QnVmZmVyIHwgQXJyYXlCdWZmZXJWaWV3LFxuICAgIGJ1ZmZlclVzYWdlPzogQnVmZmVyVXNhZ2UsXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcbiAgICB0eXBlOiBCdWZmZXJCaW5kRmxhZyxcbiAgICBieXRlTGVuZ3RoT3JEYXRhOiBudW1iZXIgfCBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldyxcbiAgICBidWZmZXJVc2FnZTogQnVmZmVyVXNhZ2UgPSBCdWZmZXJVc2FnZS5TdGF0aWMsXG4gICkge1xuICAgIHRoaXMuX2dsID0gZ2w7XG4gICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgdGhpcy5fYnVmZmVyVXNhZ2UgPSBidWZmZXJVc2FnZTtcblxuICAgIGNvbnN0IGdsQnVmZmVyVXNhZ2UgPSBCdWZmZXJVdGlsLl9nZXRHTEJ1ZmZlclVzYWdlKGdsLCBidWZmZXJVc2FnZSk7XG4gICAgY29uc3QgZ2xCaW5kVGFyZ2V0ID0gdHlwZSA9PT0gQnVmZmVyQmluZEZsYWcuVmVydGV4QnVmZmVyID8gZ2wuQVJSQVlfQlVGRkVSIDogZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVI7XG5cbiAgICB0aGlzLl9uYXRpdmVCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICB0aGlzLl9nbEJ1ZmZlclVzYWdlID0gZ2xCdWZmZXJVc2FnZTtcbiAgICB0aGlzLl9nbEJpbmRUYXJnZXQgPSBnbEJpbmRUYXJnZXQ7XG5cbiAgICB0aGlzLmJpbmQoKTtcbiAgICBpZiAodHlwZW9mIGJ5dGVMZW5ndGhPckRhdGEgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLl9ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aE9yRGF0YTtcbiAgICAgIGdsLmJ1ZmZlckRhdGEoZ2xCaW5kVGFyZ2V0LCBieXRlTGVuZ3RoT3JEYXRhLCBnbEJ1ZmZlclVzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhPckRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIGdsLmJ1ZmZlckRhdGEoZ2xCaW5kVGFyZ2V0LCBieXRlTGVuZ3RoT3JEYXRhLCBnbEJ1ZmZlclVzYWdlKTtcbiAgICB9XG4gICAgZ2wuYmluZEJ1ZmZlcihnbEJpbmRUYXJnZXQsIG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgYnVmZmVyLlxuICAgKi9cbiAgYmluZCgpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGdsLmJpbmRCdWZmZXIodGhpcy5fZ2xCaW5kVGFyZ2V0LCB0aGlzLl9uYXRpdmVCdWZmZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBidWZmZXIgZGF0YS5cbiAgICogQHBhcmFtIGRhdGEgLSBJbnB1dCBidWZmZXIgZGF0YVxuICAgKi9cbiAgc2V0RGF0YShkYXRhOiBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldCBidWZmZXIgZGF0YS5cbiAgICogQHBhcmFtIGRhdGEgLSBJbnB1dCBidWZmZXIgZGF0YVxuICAgKiBAcGFyYW0gYnVmZmVyQnl0ZU9mZnNldCAtIGJ1ZmZlciBieXRlIG9mZnNldFxuICAgKi9cbiAgc2V0RGF0YShkYXRhOiBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldywgYnVmZmVyQnl0ZU9mZnNldDogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGJ1ZmZlciBkYXRhLlxuICAgKiBAcGFyYW0gZGF0YSAtIElucHV0IGJ1ZmZlciBkYXRhXG4gICAqIEBwYXJhbSBidWZmZXJCeXRlT2Zmc2V0IC0gQnVmZmVyIGJ5dGUgb2Zmc2V0XG4gICAqIEBwYXJhbSBkYXRhT2Zmc2V0IC0gQnVmZmVyIGJ5dGUgb2Zmc2V0XG4gICAqIEBwYXJhbSBkYXRhTGVuZ3RoIC0gRGF0YSBsZW5ndGhcbiAgICovXG4gIHNldERhdGEoZGF0YTogQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcsIGJ1ZmZlckJ5dGVPZmZzZXQ6IG51bWJlciwgZGF0YU9mZnNldDogbnVtYmVyLCBkYXRhTGVuZ3RoPzogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGJ1ZmZlciBkYXRhLlxuICAgKiBAcGFyYW0gZGF0YSAtIElucHV0IGJ1ZmZlciBkYXRhXG4gICAqIEBwYXJhbSBidWZmZXJCeXRlT2Zmc2V0IC0gQnVmZmVyIGJ5dGUgb2Zmc2V0XG4gICAqIEBwYXJhbSBkYXRhT2Zmc2V0IC0gQnVmZmVyIGJ5dGUgb2Zmc2V0XG4gICAqIEBwYXJhbSBkYXRhTGVuZ3RoIC0gRGF0YSBsZW5ndGhcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBVcGRhdGUgc3RyYXRlZ3k6IE5vbmUvRGlzY2FyZC9Ob092ZXJ3cml0ZVxuICAgKi9cbiAgc2V0RGF0YShkYXRhOiBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldywgYnVmZmVyQnl0ZU9mZnNldDogbnVtYmVyLCBkYXRhT2Zmc2V0OiBudW1iZXIsIGRhdGFMZW5ndGg6IG51bWJlcik6IHZvaWQ7XG5cbiAgc2V0RGF0YShcbiAgICBkYXRhOiBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldyxcbiAgICBidWZmZXJCeXRlT2Zmc2V0OiBudW1iZXIgPSAwLFxuICAgIGRhdGFPZmZzZXQ6IG51bWJlciA9IDAsXG4gICAgZGF0YUxlbmd0aD86IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IGdsQmluZFRhcmdldDogbnVtYmVyID0gdGhpcy5fZ2xCaW5kVGFyZ2V0O1xuICAgIHRoaXMuYmluZCgpO1xuXG4gICAgLy8g5q+P5Liq5YWD57Sg5omA5Y2g55So55qE5a2X6IqC5pWwXG4gICAgY29uc3QgYnl0ZVNpemUgPSAoPFVpbnQ4QXJyYXk+ZGF0YSkuQllURVNfUEVSX0VMRU1FTlQgfHwgMTtcbiAgICBjb25zdCBkYXRhQnl0ZUxlbmd0aCA9IGRhdGFMZW5ndGggPyBieXRlU2l6ZSAqIGRhdGFMZW5ndGggOiBkYXRhLmJ5dGVMZW5ndGg7XG5cbiAgICBpZiAoZGF0YU9mZnNldCAhPT0gMCB8fCBkYXRhQnl0ZUxlbmd0aCA8IGRhdGEuYnl0ZUxlbmd0aCkge1xuICAgICAgY29uc3QgaXNBcnJheUJ1ZmZlclZpZXcgPSAoPEFycmF5QnVmZmVyVmlldz5kYXRhKS5ieXRlT2Zmc2V0ICE9PSB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBzdWJEYXRhID0gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICAgIGlzQXJyYXlCdWZmZXJWaWV3ID8gKDxBcnJheUJ1ZmZlclZpZXc+ZGF0YSkuYnVmZmVyIDogPEFycmF5QnVmZmVyPmRhdGEsXG4gICAgICAgIGRhdGFPZmZzZXQgKiBieXRlU2l6ZSxcbiAgICAgICAgZGF0YUJ5dGVMZW5ndGgsXG4gICAgICApO1xuICAgICAgZ2wuYnVmZmVyU3ViRGF0YShnbEJpbmRUYXJnZXQsIGJ1ZmZlckJ5dGVPZmZzZXQsIHN1YkRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbC5idWZmZXJTdWJEYXRhKGdsQmluZFRhcmdldCwgYnVmZmVyQnl0ZU9mZnNldCwgZGF0YSk7XG4gICAgfVxuICAgIGdsLmJpbmRCdWZmZXIoZ2xCaW5kVGFyZ2V0LCBudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYnVmZmVyIGRhdGEuXG4gICAqIEBwYXJhbSBkYXRhIC0gT3V0cHV0IGJ1ZmZlciBkYXRhXG4gICAqL1xuICBnZXREYXRhKGRhdGE6IEFycmF5QnVmZmVyVmlldyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEdldCBidWZmZXIgZGF0YS5cbiAgICogQHBhcmFtIGRhdGEgLSBPdXRwdXQgYnVmZmVyIGRhdGFcbiAgICogQHBhcmFtIGJ1ZmZlckJ5dGVPZmZzZXQgLSBCdWZmZXIgYnl0ZSBvZmZzZXRcbiAgICovXG4gIGdldERhdGEoZGF0YTogQXJyYXlCdWZmZXJWaWV3LCBidWZmZXJCeXRlT2Zmc2V0OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBHZXQgYnVmZmVyIGRhdGEuXG4gICAqIEBwYXJhbSBkYXRhIC0gT3V0cHV0IGJ1ZmZlciBkYXRhXG4gICAqIEBwYXJhbSBidWZmZXJCeXRlT2Zmc2V0IC0gQnVmZmVyIGJ5dGUgb2Zmc2V0XG4gICAqIEBwYXJhbSBkYXRhT2Zmc2V0IC0gT3V0cHV0IGRhdGEgb2Zmc2V0XG4gICAqIEBwYXJhbSBkYXRhTGVuZ3RoIC0gT3V0cHV0IGRhdGEgbGVuZ3RoXG4gICAqL1xuICBnZXREYXRhKGRhdGE6IEFycmF5QnVmZmVyVmlldywgYnVmZmVyQnl0ZU9mZnNldDogbnVtYmVyLCBkYXRhT2Zmc2V0OiBudW1iZXIsIGRhdGFMZW5ndGg6IG51bWJlcik6IHZvaWQ7XG5cbiAgZ2V0RGF0YShkYXRhOiBBcnJheUJ1ZmZlclZpZXcsIGJ1ZmZlckJ5dGVPZmZzZXQ6IG51bWJlciA9IDAsIGRhdGFPZmZzZXQ6IG51bWJlciA9IDAsIGRhdGFMZW5ndGg/OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aHJvdyAnQnVmZmVyIGlzIHdyaXRlLW9ubHkgb24gV2ViR0wxLjAgcGxhdGZvcm1zLic7XG4gIH1cbn1cbiIsIi8qKlxuICogTWVzaCB0b3BvbG9neS5cbiAqL1xuZXhwb3J0IGVudW0gTWVzaFRvcG9sb2d5IHtcbiAgLyoqIERyYXdzIGEgc2luZ2xlIGRvdCAqL1xuICBQb2ludHMgPSAwLFxuICAvKiogRHJhd3MgYSBsaW5lIGJldHdlZW4gYSBwYWlyIG9mIHZlcnRpY2VzICovXG4gIExpbmVzID0gMSxcbiAgLyoqIERyYXdzIGEgc3RyYWlnaHQgbGluZSB0byB0aGUgbmV4dCB2ZXJ0ZXgsIGFuZCBjb25uZWN0cyB0aGUgbGFzdCB2ZXJ0ZXggYmFjayB0byB0aGUgZmlyc3QgKi9cbiAgTGluZUxvb3AgPSAyLFxuICAvKiogRHJhd3MgYSBzdHJhaWdodCBsaW5lIHRvIHRoZSBuZXh0IHZlcnRleC4gKi9cbiAgTGluZVN0cmlwID0gMyxcbiAgLyoqIERyYXdzIGEgdHJpYW5nbGUgZm9yIGEgZ3JvdXAgb2YgdGhyZWUgdmVydGljZXMgKi9cbiAgVHJpYW5nbGVzID0gNCxcbiAgLyoqIERyYXdzIGEgdHJpYW5nbGUgc3RyaXAgKi9cbiAgVHJpYW5nbGVTdHJpcCA9IDUsXG4gIC8qKiBEcmF3cyBhIHRyaWFuZ2xlIGZhbiAqL1xuICBUcmlhbmdsZUZhbiA9IDYsXG59XG4iLCJpbXBvcnQgeyBJbmRleEZvcm1hdCB9IGZyb20gJy4vZW51bXMvSW5kZXhGb3JtYXQnO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnLi9CdWZmZXInO1xuXG4vKipcbiAqIEluZGV4IGJ1ZmZlciBiaW5kaW5nLlxuICovXG5leHBvcnQgY2xhc3MgSW5kZXhCdWZmZXJCaW5kaW5nIHtcbiAgLyoqIEluZGV4IGJ1ZmZlciBib3VuZCBidWZmZXIuICovXG4gIF9idWZmZXI6IEJ1ZmZlcjtcbiAgLyoqIEluZGV4IGZvcm1hdC4gKi9cbiAgX2Zvcm1hdDogSW5kZXhGb3JtYXQ7XG5cbiAgLyoqXG4gICAqIEluZGV4IGJ1ZmZlci5cbiAgICovXG4gIGdldCBidWZmZXIoKTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGV4IGJ1ZmZlciBmb3JtYXQuXG4gICAqL1xuICBnZXQgZm9ybWF0KCk6IEluZGV4Rm9ybWF0IHtcbiAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBpbmRleCBidWZmZXIgYmluZGluZy5cbiAgICogQHBhcmFtIGJ1ZmZlciAtIEluZGV4IGJ1ZmZlclxuICAgKiBAcGFyYW0gZm9ybWF0IC0gSW5kZXggYnVmZmVyIGZvcm1hdFxuICAgKi9cbiAgY29uc3RydWN0b3IoYnVmZmVyOiBCdWZmZXIsIGZvcm1hdDogSW5kZXhGb3JtYXQpIHtcbiAgICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy5fZm9ybWF0ID0gZm9ybWF0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXNoVG9wb2xvZ3kgfSBmcm9tICcuL2VudW1zL01lc2hUb3BvbG9neSc7XG5cbi8qKlxuICogU3ViLW1lc2gsIG1haW5seSBjb250YWlucyBkcmF3aW5nIGluZm9ybWF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU3ViTWVzaCB7XG4gIC8qKiBTdGFydCBkcmF3aW5nIG9mZnNldC4gKi9cbiAgc3RhcnQ6IG51bWJlcjtcbiAgLyoqIERyYXdpbmcgY291bnQuICovXG4gIGNvdW50OiBudW1iZXI7XG4gIC8qKiBEcmF3aW5nIHRvcG9sb2d5LiAqL1xuICB0b3BvbG9neTogTWVzaFRvcG9sb2d5O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzdWItbWVzaC5cbiAgICogQHBhcmFtIHN0YXJ0IC0gU3RhcnQgZHJhd2luZyBvZmZzZXRcbiAgICogQHBhcmFtIGNvdW50IC0gRHJhd2luZyBjb3VudFxuICAgKiBAcGFyYW0gdG9wb2xvZ3kgLSBEcmF3aW5nIHRvcG9sb2d5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihzdGFydDogbnVtYmVyID0gMCwgY291bnQ6IG51bWJlciA9IDAsIHRvcG9sb2d5OiBNZXNoVG9wb2xvZ3kgPSBNZXNoVG9wb2xvZ3kuVHJpYW5nbGVzKSB7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICB0aGlzLnRvcG9sb2d5ID0gdG9wb2xvZ3k7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJ1ZmZlclV0aWwgfSBmcm9tICcuLi9ncmFwaGljL0J1ZmZlclV0aWwnO1xuaW1wb3J0IHsgSW5kZXhCdWZmZXJCaW5kaW5nIH0gZnJvbSAnLi4vZ3JhcGhpYy9JbmRleEJ1ZmZlckJpbmRpbmcnO1xuaW1wb3J0IHsgVmVydGV4QnVmZmVyQmluZGluZyB9IGZyb20gJy4uL2dyYXBoaWMvVmVydGV4QnVmZmVyQmluZGluZyc7XG5pbXBvcnQgeyBWZXJ0ZXhFbGVtZW50IH0gZnJvbSAnLi4vZ3JhcGhpYy9WZXJ0ZXhFbGVtZW50JztcbmltcG9ydCB7IFN1Yk1lc2ggfSBmcm9tICcuLi9ncmFwaGljL1N1Yk1lc2gnO1xuaW1wb3J0IHsgU2hhZGVyUHJvZ3JhbSB9IGZyb20gJy4uL3NoYWRlci9TaGFkZXJQcm9ncmFtJztcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi4vUmVuZGVyZXInO1xuaW1wb3J0IHsgTWVzaFRvcG9sb2d5IH0gZnJvbSAnLi9lbnVtcy9NZXNoVG9wb2xvZ3knO1xuXG4vKipcbiAqIEdyaWQgYWJzdHJhY3QgY2xhc3MuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNZXNoIHtcbiAgLyoqIE5hbWUuICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqIFZlcnRleCBlbnRpdHkgcmVjb3JkIHRhYmxlLCB1c2VkIGZvciBjYWNoaW5nLiAqL1xuICBfdmVydGV4RWxlbWVudE1hcDogUmVjb3JkPHN0cmluZywgVmVydGV4RWxlbWVudD4gPSB7fTtcbiAgLyoqIFRoZSBzdG9yYWdlIHR5cGUgb2YgdGhlIGluZGV4LCBmb3IgZXhhbXBsZTogVUludDguICovXG4gIF9nbEluZGV4VHlwZTogbnVtYmVyO1xuICAvKiogRWFjaCBpbmRleCBvY2N1cGllcyBzZXZlcmFsIGJ5dGVzLCA4IGJpdHMgcGVyIGJ5dGUuICovXG4gIF9nbEluZGV4Qnl0ZUNvdW50OiBudW1iZXI7XG4gIC8qKiBBIHBsYXRmb3JtIHRoYXQgcHJvdmlkZXMgcmVuZGVyaW5nIGNhcGFiaWxpdGllcy4gKi9cbiAgX3BsYXRmb3JtUHJpbWl0aXZlOiBSZW5kZXJlcjtcbiAgLyoqIEEgTWVzaCBtYXkgY29uc2lzdCBvZiBtdWx0aXBsZSB2ZXJ0ZXggaW5zdGFuY2VzLiAqL1xuICBfaW5zdGFuY2VDb3VudDogbnVtYmVyID0gMDtcbiAgLyoqIFRoZSB2ZXJ0ZXggYnVmZmVyIGNvcnJlc3BvbmRpbmcgdG8gdGhlIG1lc2guICovXG4gIF92ZXJ0ZXhCdWZmZXJCaW5kaW5nczogVmVydGV4QnVmZmVyQmluZGluZ1tdID0gW107XG4gIC8qKiBUaGUgaW5kZXggYnVmZmVyIGNvcnJlc3BvbmRpbmcgdG8gdGhlIG1lc2ggKi9cbiAgX2luZGV4QnVmZmVyQmluZGluZzogSW5kZXhCdWZmZXJCaW5kaW5nID0gbnVsbDtcbiAgLyoqIEFycmF5IG9mIHZlcnRleCBlbGVtZW50cy4gKi9cbiAgX3ZlcnRleEVsZW1lbnRzOiBWZXJ0ZXhFbGVtZW50W10gPSBbXTtcblxuICBwcm90ZWN0ZWQgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcbiAgLyoqIERyYXdpbmcgaW5mb3JtYXRpb24gZm9yIGVhY2ggZWxlbWVudC4gKi9cbiAgcHJpdmF0ZSBfc3ViTWVzaGVzOiBTdWJNZXNoW10gPSBbXTtcblxuICAvKipcbiAgICogRmlyc3Qgc3ViLW1lc2guIFJlbmRlcmVkIHVzaW5nIHRoZSBmaXJzdCBtYXRlcmlhbC5cbiAgICovXG4gIGdldCBzdWJNZXNoKCk6IFN1Yk1lc2ggfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fc3ViTWVzaGVzWzBdIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQSBjb2xsZWN0aW9uIG9mIHN1Yi1tZXNoLCBlYWNoIHN1Yi1tZXNoIGNhbiBiZSByZW5kZXJlZCB3aXRoIGFuIGluZGVwZW5kZW50IG1hdGVyaWFsLlxuICAgKi9cbiAgZ2V0IHN1Yk1lc2hlcygpOiBSZWFkb25seTxTdWJNZXNoW10+IHtcbiAgICByZXR1cm4gdGhpcy5fc3ViTWVzaGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBzdWItbWVzaCwgZWFjaCBzdWItbWVzaCBjYW4gY29ycmVzcG9uZCB0byBhbiBpbmRlcGVuZGVudCBtYXRlcmlhbC5cbiAgICogQHBhcmFtIHN1Yk1lc2ggLSBTdGFydCBkcmF3aW5nIG9mZnNldCwgaWYgdGhlIGluZGV4IGJ1ZmZlciBpcyBzZXQsIGl0IG1lYW5zIHRoZSBvZmZzZXQgaW4gdGhlIGluZGV4IGJ1ZmZlciwgaWYgbm90IHNldCwgaXQgbWVhbnMgdGhlIG9mZnNldCBpbiB0aGUgdmVydGV4IGJ1ZmZlclxuICAgKiBAcmV0dXJucyBTdWItbWVzaFxuICAgKi9cbiAgYWRkU3ViTWVzaChzdWJNZXNoOiBTdWJNZXNoKTogU3ViTWVzaDtcblxuICAvKipcbiAgICogQWRkIHN1Yi1tZXNoLCBlYWNoIHN1Yi1tZXNoIGNhbiBjb3JyZXNwb25kIHRvIGFuIGluZGVwZW5kZW50IG1hdGVyaWFsLlxuICAgKiBAcGFyYW0gc3RhcnQgLSBTdGFydCBkcmF3aW5nIG9mZnNldCwgaWYgdGhlIGluZGV4IGJ1ZmZlciBpcyBzZXQsIGl0IG1lYW5zIHRoZSBvZmZzZXQgaW4gdGhlIGluZGV4IGJ1ZmZlciwgaWYgbm90IHNldCwgaXQgbWVhbnMgdGhlIG9mZnNldCBpbiB0aGUgdmVydGV4IGJ1ZmZlclxuICAgKiBAcGFyYW0gY291bnQgLSBEcmF3aW5nIGNvdW50LCBpZiB0aGUgaW5kZXggYnVmZmVyIGlzIHNldCwgaXQgbWVhbnMgdGhlIGNvdW50IGluIHRoZSBpbmRleCBidWZmZXIsIGlmIG5vdCBzZXQsIGl0IG1lYW5zIHRoZSBjb3VudCBpbiB0aGUgdmVydGV4IGJ1ZmZlclxuICAgKiBAcGFyYW0gdG9wb2xvZ3kgLSBEcmF3aW5nIHRvcG9sb2d5LCBkZWZhdWx0IGlzIE1lc2hUb3BvbG9neS5UcmlhbmdsZXNcbiAgICogQHJldHVybnMgU3ViLW1lc2hcbiAgICovXG4gIGFkZFN1Yk1lc2goc3RhcnQ6IG51bWJlciwgY291bnQ6IG51bWJlciwgdG9wb2xvZ3k/OiBNZXNoVG9wb2xvZ3kpOiBTdWJNZXNoO1xuXG4gIGFkZFN1Yk1lc2goXG4gICAgc3RhcnRPclN1Yk1lc2g6IG51bWJlciB8IFN1Yk1lc2gsXG4gICAgY291bnQ/OiBudW1iZXIsXG4gICAgdG9wb2xvZ3k6IE1lc2hUb3BvbG9neSA9IE1lc2hUb3BvbG9neS5UcmlhbmdsZXMsXG4gICk6IFN1Yk1lc2gge1xuICAgIGlmICh0eXBlb2Ygc3RhcnRPclN1Yk1lc2ggPT09ICdudW1iZXInKSB7XG4gICAgICBzdGFydE9yU3ViTWVzaCA9IG5ldyBTdWJNZXNoKHN0YXJ0T3JTdWJNZXNoLCBjb3VudCwgdG9wb2xvZ3kpO1xuICAgIH1cbiAgICB0aGlzLl9zdWJNZXNoZXMucHVzaChzdGFydE9yU3ViTWVzaCk7XG4gICAgcmV0dXJuIHN0YXJ0T3JTdWJNZXNoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBzdWItbWVzaC5cbiAgICogQHBhcmFtIHN1Yk1lc2ggLSBTdWItbWVzaCBuZWVkcyB0byBiZSByZW1vdmVkXG4gICAqL1xuICByZW1vdmVTdWJNZXNoKHN1Yk1lc2g6IFN1Yk1lc2gpOiB2b2lkIHtcbiAgICBjb25zdCBzdWJNZXNoZXMgPSB0aGlzLl9zdWJNZXNoZXM7XG4gICAgY29uc3QgaW5kZXggPSBzdWJNZXNoZXMuaW5kZXhPZihzdWJNZXNoKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdWJNZXNoZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIHN1Yi1tZXNoLlxuICAgKi9cbiAgY2xlYXJTdWJNZXNoKCk6IHZvaWQge1xuICAgIHRoaXMuX3N1Yk1lc2hlcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbmFtZT86IHN0cmluZykge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuX3BsYXRmb3JtUHJpbWl0aXZlID0gbmV3IFJlbmRlcmVyKGdsLCB0aGlzKTtcbiAgfVxuXG4gIF9jbGVhclZlcnRleEVsZW1lbnRzKCk6IHZvaWQge1xuICAgIC8vIOi/meS4qua4heepuuaWueazleWmmeWVilxuICAgIHRoaXMuX3ZlcnRleEVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgY29uc3QgdmVydGV4RWxlbWVudE1hcCA9IHRoaXMuX3ZlcnRleEVsZW1lbnRNYXA7XG4gICAgZm9yIChjb25zdCBrIGluIHZlcnRleEVsZW1lbnRNYXApIHtcbiAgICAgIGRlbGV0ZSB2ZXJ0ZXhFbGVtZW50TWFwW2tdO1xuICAgIH1cbiAgfVxuXG4gIF9hZGRWZXJ0ZXhFbGVtZW50KGVsZW1lbnQ6IFZlcnRleEVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb25zdCB7IHNlbWFudGljIH0gPSBlbGVtZW50O1xuICAgIHRoaXMuX3ZlcnRleEVsZW1lbnRNYXBbc2VtYW50aWNdID0gZWxlbWVudDtcbiAgICB0aGlzLl92ZXJ0ZXhFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICB9XG5cbiAgX2RyYXcoc2hhZGVyUHJvZ3JhbTogU2hhZGVyUHJvZ3JhbSwgc3ViTWVzaDogU3ViTWVzaCk6IHZvaWQge1xuICAgIC8vIHRoaXMuX3BsYXRmb3JtUHJpbWl0aXZlLmRyYXcoc2hhZGVyUHJvZ3JhbSwgc3ViTWVzaCk7XG4gICAgdGhpcy5fcGxhdGZvcm1QcmltaXRpdmUudGVzdERyYXcoc2hhZGVyUHJvZ3JhbSk7XG4gIH1cblxuICBfb25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX3ZlcnRleEJ1ZmZlckJpbmRpbmdzID0gbnVsbDtcbiAgICB0aGlzLl9pbmRleEJ1ZmZlckJpbmRpbmcgPSBudWxsO1xuICAgIHRoaXMuX3ZlcnRleEVsZW1lbnRzID0gbnVsbDtcbiAgICB0aGlzLl92ZXJ0ZXhFbGVtZW50TWFwID0gbnVsbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBfc2V0VmVydGV4RWxlbWVudHMoZWxlbWVudHM6IFZlcnRleEVsZW1lbnRbXSk6IHZvaWQge1xuICAgIHRoaXMuX2NsZWFyVmVydGV4RWxlbWVudHMoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgdGhpcy5fYWRkVmVydGV4RWxlbWVudChlbGVtZW50c1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIF9zZXRWZXJ0ZXhCdWZmZXJCaW5kaW5nKGluZGV4OiBudW1iZXIsIGJpbmRpbmc6IFZlcnRleEJ1ZmZlckJpbmRpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl92ZXJ0ZXhCdWZmZXJCaW5kaW5nc1tpbmRleF0gPSBiaW5kaW5nO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9zZXRJbmRleEJ1ZmZlckJpbmRpbmcoYmluZGluZzogSW5kZXhCdWZmZXJCaW5kaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgIGlmIChiaW5kaW5nKSB7XG4gICAgICB0aGlzLl9pbmRleEJ1ZmZlckJpbmRpbmcgPSBiaW5kaW5nO1xuICAgICAgdGhpcy5fZ2xJbmRleFR5cGUgPSBCdWZmZXJVdGlsLl9nZXRHTEluZGV4VHlwZShiaW5kaW5nLmZvcm1hdCk7XG4gICAgICB0aGlzLl9nbEluZGV4Qnl0ZUNvdW50ID0gQnVmZmVyVXRpbC5fZ2V0R0xJbmRleEJ5dGVDb3VudChiaW5kaW5nLmZvcm1hdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2luZGV4QnVmZmVyQmluZGluZyA9IG51bGw7XG4gICAgICB0aGlzLl9nbEluZGV4VHlwZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJy4vQnVmZmVyJztcblxuLyoqXG4gKiBWZXJ0ZXggYnVmZmVyIGJpbmRpbmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBWZXJ0ZXhCdWZmZXJCaW5kaW5nIHtcbiAgLyoqIEJ1ZmZlciB0byB3aGljaCB2ZXJ0ZXggZWxlbWVudHMgYXJlIGJvdW5kLiAqL1xuICBfYnVmZmVyOiBCdWZmZXI7XG4gIC8qKiBTcGFuIGJldHdlZW4gZWFjaCB2ZXJ0ZXguICovXG4gIF9zdHJpZGU6IG51bWJlcjtcblxuICAvKipcbiAgICogVmVydGV4IGJ1ZmZlci5cbiAgICovXG4gIGdldCBidWZmZXIoKTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcnRleCBidWZmZXIgc3RyaWRlLlxuICAgKi9cbiAgZ2V0IHN0cmlkZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdHJpZGU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHZlcnRleCBidWZmZXIuXG4gICAqIEBwYXJhbSBidWZmZXIgLSBWZXJ0ZXggYnVmZmVyXG4gICAqIEBwYXJhbSBzdHJpZGUgLSBWZXJ0ZXggYnVmZmVyIHN0cmlkZVxuICAgKi9cbiAgY29uc3RydWN0b3IoYnVmZmVyOiBCdWZmZXIsIHN0cmlkZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fYnVmZmVyID0gYnVmZmVyO1xuICAgIHRoaXMuX3N0cmlkZSA9IHN0cmlkZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVmVydGV4RWxlbWVudEZvcm1hdCB9IGZyb20gJy4vZW51bXMvVmVydGV4RWxlbWVudEZvcm1hdCc7XG5pbXBvcnQgeyBFbGVtZW50SW5mbywgQnVmZmVyVXRpbCB9IGZyb20gJy4vQnVmZmVyVXRpbCc7XG5cbi8qKlxuICogVmVydGV4IGVsZW1lbnRzIGNvbnRhaW4gY29vcmRpbmF0ZSBpbmZvcm1hdGlvbiwgdGV4dHVyZSBpbmZvcm1hdGlvbiwgbm9ybWFsIHZlY3RvciBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFZlcnRleEVsZW1lbnQge1xuICBfZ2xFbGVtZW50SW5mbzogRWxlbWVudEluZm87XG5cbiAgcHJpdmF0ZSBfc2VtYW50aWM6IHN0cmluZztcbiAgcHJpdmF0ZSBfb2Zmc2V0OiBudW1iZXI7XG4gIHByaXZhdGUgX2Zvcm1hdDogVmVydGV4RWxlbWVudEZvcm1hdDtcbiAgcHJpdmF0ZSBfYmluZGluZ0luZGV4OiBudW1iZXI7XG4gIHByaXZhdGUgX2luc3RhbmNlU3RlcFJhdGU6IG51bWJlcjtcblxuICAvKipcbiAgICogVmVydGV4IHNlbWFudGljLlxuICAgKi9cbiAgZ2V0IHNlbWFudGljKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbWFudGljO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcnRleCBkYXRhIGJ5dGUgb2Zmc2V0LlxuICAgKi9cbiAgZ2V0IG9mZnNldCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9vZmZzZXQ7XG4gIH1cblxuICAvKipcbiAgICogVmVydGV4IGRhdGEgZm9ybWF0LlxuICAgKi9cbiAgZ2V0IGZvcm1hdCgpOiBWZXJ0ZXhFbGVtZW50Rm9ybWF0IHtcbiAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcnRleCBidWZmZXIgYmluZGluZyBpbmRleC5cbiAgICovXG4gIGdldCBiaW5kaW5nSW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYmluZGluZ0luZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbmNlIGNhZGVuY2UsIHRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIGRyYXduIGZvciBlYWNoIHZlcnRleCBpbiB0aGUgYnVmZmVyLCBub24taW5zdGFuY2UgZWxlbWVudHMgbXVzdCBiZSAwLlxuICAgKi9cbiAgZ2V0IGluc3RhbmNlU3RlcFJhdGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VTdGVwUmF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdmVydGV4IGVsZW1lbnQuXG4gICAqIEBwYXJhbSBzZW1hbnRpYyAtIElucHV0IHZlcnRleCBzZW1hbnRpY1xuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVmVydGV4IGRhdGEgYnl0ZSBvZmZzZXRcbiAgICogQHBhcmFtIGZvcm1hdCAtIFZlcnRleCBkYXRhIGZvcm1hdFxuICAgKiBAcGFyYW0gYmluZGluZ0luZGV4IC0gVmVydGV4IGJ1ZmZlciBiaW5kaW5nIGluZGV4XG4gICAqIEBwYXJhbSBpbnN0YW5jZVN0ZXBSYXRlIC0gSW5zdGFuY2UgY2FkZW5jZSwgdGhlIG51bWJlciBvZiBpbnN0YW5jZXMgZHJhd24gZm9yIGVhY2ggdmVydGV4IGluIHRoZSBidWZmZXIsIG5vbi1pbnN0YW5jZSBlbGVtZW50cyBtdXN0IGJlIDAuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBzZW1hbnRpYzogc3RyaW5nLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIGZvcm1hdDogVmVydGV4RWxlbWVudEZvcm1hdCxcbiAgICBiaW5kaW5nSW5kZXg6IG51bWJlcixcbiAgICBpbnN0YW5jZVN0ZXBSYXRlOiBudW1iZXIgPSAwLFxuICApIHtcbiAgICB0aGlzLl9zZW1hbnRpYyA9IHNlbWFudGljO1xuICAgIHRoaXMuX29mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLl9mb3JtYXQgPSBmb3JtYXQ7XG4gICAgdGhpcy5fYmluZGluZ0luZGV4ID0gYmluZGluZ0luZGV4O1xuICAgIHRoaXMuX2dsRWxlbWVudEluZm8gPSBCdWZmZXJVdGlsLl9nZXRFbGVtZW50SW5mbyh0aGlzLmZvcm1hdCk7XG4gICAgdGhpcy5faW5zdGFuY2VTdGVwUmF0ZSA9IE1hdGguZmxvb3IoaW5zdGFuY2VTdGVwUmF0ZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMsIFZlY3RvcjIgfSBmcm9tICdAL21hdGgnO1xuaW1wb3J0IHtcbiAgTWVzaCxcbiAgSW5kZXhGb3JtYXQsXG4gIFZlcnRleEVsZW1lbnQsXG4gIFZlcnRleEVsZW1lbnRGb3JtYXQsXG4gIEJ1ZmZlcixcbiAgQnVmZmVyQmluZEZsYWcsXG4gIEJ1ZmZlclVzYWdlLFxuICBWZXJ0ZXhCdWZmZXJCaW5kaW5nLFxuICBJbmRleEJ1ZmZlckJpbmRpbmcsXG59IGZyb20gJy4uL2dyYXBoaWMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIG1vZGVsIGZyb20gYW4gYXJyYXkgb2YgaW5mb3JtYXRpb24gc3VjaCBhcyB2ZXJ0aWNlcywgaW5kaWNlcywgbm9ybWFsIHZlY3RvcnMsIGV0Yy5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vZGVsTWVzaCBleHRlbmRzIE1lc2gge1xuICAvKiogVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBpbiB0aGUgbW9kZWwuICovXG4gIHByaXZhdGUgX3ZlcnRleENvdW50OiBudW1iZXIgPSAwO1xuICAvKiogQXZhaWxhYmlsaXR5IG9mIHRoZSBtb2RlbC4gKi9cbiAgcHJpdmF0ZSBfYWNjZXNzaWJsZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgcHJpdmF0ZSBfdmVydGljZXNGbG9hdDMyOiBGbG9hdDMyQXJyYXkgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBfdmVydGljZXNVaW50ODogVWludDhBcnJheSB8IG51bGwgPSBudWxsO1xuXG4gIC8qKiBBIHZlcnRleCBoYXMgc2V2ZXJhbCBlbGVtZW50cywgeHl6IGlzIDMuICovXG4gIHByaXZhdGUgX2VsZW1lbnRDb3VudDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfbGFzdFVwbG9hZFZlcnRleENvdW50OiBudW1iZXIgPSAtMTtcbiAgLyoqIEluZGV4IGZvcm1hdC4gKi9cbiAgcHJpdmF0ZSBfaW5kaWNlc0Zvcm1hdDogSW5kZXhGb3JtYXQgPSBudWxsO1xuICAvKiogSW5kZXggdHlwZSBhcnJheS4gKi9cbiAgcHJpdmF0ZSBfaW5kaWNlczogVWludDhBcnJheSB8IFVpbnQxNkFycmF5IHwgVWludDMyQXJyYXkgfCBudWxsID0gbnVsbDtcbiAgLyoqIEFycmF5IG9mIHZlcnRleCBwb3NpdGlvbnMuICovXG4gIHByaXZhdGUgX3Bvc2l0aW9uczogVmVjdG9yM1tdID0gW107XG4gIC8qKiBBcnJheSBvZiBub3JtYWwgdmVjdG9ycy4gKi9cbiAgcHJpdmF0ZSBfbm9ybWFsczogVmVjdG9yM1tdIHwgbnVsbCA9IG51bGw7XG4gIC8qKiBBcnJheSBvZiB0ZXh0dXJlIGNvb3JkaW5hdGVzICovXG4gIHByaXZhdGUgX3V2OiBWZWN0b3IyW10gfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogV2hldGhlciB0byBhY2Nlc3MgZGF0YSBvZiB0aGUgbWVzaC5cbiAgICovXG4gIGdldCBhY2Nlc3NpYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hY2Nlc3NpYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcnRleCBjb3VudCBvZiBjdXJyZW50IG1lc2guXG4gICAqL1xuICBnZXQgdmVydGV4Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdmVydGV4Q291bnQ7XG4gIH1cblxuICAvLyBUT0RPOiDov5nkuKrkuZ/lupTor6Xmir3liLBSZWZPYmplY3QuXG4gIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG5hbWU/OiBzdHJpbmcpIHtcbiAgICBzdXBlcihnbCk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZlcnRleCBwb3NpdGlvbiBpbmZvcm1hdGlvbiBvZiB0aGUgbW9kZWwuXG4gICAqIEBwYXJhbSBwb3NpdGlvbnMgQXJyYXkgb2YgbW9kZWwgdmVydGV4IGNvb3JkaW5hdGVzLlxuICAgKi9cbiAgc2V0UG9zaXRpb25zKHBvc2l0aW9uczogVmVjdG9yM1tdKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9hY2Nlc3NpYmxlKSB7XG4gICAgICB0aHJvdyAnTm90IGFsbG93ZWQgdG8gYWNjZXNzIGRhdGEgd2hpbGUgYWNjZXNzaWJsZSBpcyBmYWxzZS4nO1xuICAgIH1cbiAgICB0aGlzLl9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgdGhpcy5fdmVydGV4Q291bnQgPSBwb3NpdGlvbnMubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdmVydGV4IHBvc2l0aW9uIGluZm9ybWF0aW9uIG9mIHRoZSBtb2RlbC5cbiAgICogQHJldHVybnMgQXJyYXkgb2YgbW9kZWwgdmVydGV4IGNvb3JkaW5hdGVzLlxuICAgKi9cbiAgZ2V0UG9zdGlvbnMoKTogVmVjdG9yM1tdIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBtb2RlbCBub3JtYWwgdmVjdG9yLlxuICAgKiBAcGFyYW0gbm9ybWFscyBBcnJheSBvZiBub3JtYWwgdmVjdG9ycy5cbiAgICovXG4gIHNldE5vcm1hbHMobm9ybWFsczogVmVjdG9yM1tdKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9hY2Nlc3NpYmxlKSB7XG4gICAgICB0aHJvdyAnTm90IGFsbG93ZWQgdG8gYWNjZXNzIGRhdGEgd2hpbGUgYWNjZXNzaWJsZSBpcyBmYWxzZS4nO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxzLmxlbmd0aCAhPT0gdGhpcy5fdmVydGV4Q291bnQpIHtcbiAgICAgIHRocm93ICdUaGUgYXJyYXkgcHJvdmlkZWQgbmVlZHMgdG8gYmUgdGhlIHNhbWUgc2l6ZSBhcyB2ZXJ0ZXggY291bnQuJztcbiAgICB9XG5cbiAgICB0aGlzLl9ub3JtYWxzID0gbm9ybWFscztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbW9kZWwgbm9ybWFsIHZlY3Rvci5cbiAgICogQHJldHVybnMgQXJyYXkgb2Ygbm9ybWFsIHZlY3RvcnMuXG4gICAqL1xuICBnZXROb3JtYWxzKCk6IFZlY3RvcjNbXSB7XG4gICAgcmV0dXJuIHRoaXMuX25vcm1hbHM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRleHR1cmUgY29vcmRpbmF0ZXMuXG4gICAqIEBwYXJhbSB1diBUZXh0dXJlIGNvb3JkaW5hdGVzLlxuICAgKi9cbiAgc2V0VVZzKHV2OiBWZWN0b3IyW10pOiB2b2lkIHtcbiAgICB0aGlzLl91diA9IHV2O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0ZXh0dXJlIGNvb3JkaW5hdGVzLlxuICAgKiBAcmV0dXJucyBUZXh0dXJlIGNvb3JkaW5hdGVzLlxuICAgKi9cbiAgZ2V0VVZzKCk6IFZlY3RvcjJbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3V2O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBpbmRpY2VzIGZvciB0aGUgbWVzaC5cbiAgICogQHBhcmFtIGluZGljZXMgLSBUaGUgaW5kaWNlcyBmb3IgdGhlIG1lc2guXG4gICAqL1xuICBzZXRJbmRpY2VzKGluZGljZXM6IFVpbnQ4QXJyYXkgfCBVaW50MTZBcnJheSB8IFVpbnQzMkFycmF5KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9hY2Nlc3NpYmxlKSB7XG4gICAgICB0aHJvdyAnTm90IGFsbG93ZWQgdG8gYWNjZXNzIGRhdGEgd2hpbGUgYWNjZXNzaWJsZSBpcyBmYWxzZS4nO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pbmRpY2VzICE9PSBpbmRpY2VzKSB7XG4gICAgICB0aGlzLl9pbmRpY2VzID0gaW5kaWNlcztcbiAgICAgIGlmIChpbmRpY2VzIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICB0aGlzLl9pbmRpY2VzRm9ybWF0ID0gSW5kZXhGb3JtYXQuVUludDg7XG4gICAgICB9IGVsc2UgaWYgKGluZGljZXMgaW5zdGFuY2VvZiBVaW50MTZBcnJheSkge1xuICAgICAgICB0aGlzLl9pbmRpY2VzRm9ybWF0ID0gSW5kZXhGb3JtYXQuVUludDE2O1xuICAgICAgfSBlbHNlIGlmIChpbmRpY2VzIGluc3RhbmNlb2YgVWludDMyQXJyYXkpIHtcbiAgICAgICAgdGhpcy5faW5kaWNlc0Zvcm1hdCA9IEluZGV4Rm9ybWF0LlVJbnQzMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGluZGljZXMgZm9yIHRoZSBtZXNoLlxuICAgKi9cbiAgZ2V0SW5kaWNlcygpOiBVaW50OEFycmF5IHwgVWludDE2QXJyYXkgfCBVaW50MzJBcnJheSB7XG4gICAgaWYgKCF0aGlzLl9hY2Nlc3NpYmxlKSB7XG4gICAgICB0aHJvdyAnTm90IGFsbG93ZWQgdG8gYWNjZXNzIGRhdGEgd2hpbGUgYWNjZXNzaWJsZSBpcyBmYWxzZS4nO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faW5kaWNlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgTWVzaCBEYXRhIHRvIHRoZSBncmFwaGljcyBBUEkuXG4gICAqL1xuICB1cGxvYWREYXRhKG5vTG9uZ2VyQWNjZXNzaWJsZTogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2FjY2Vzc2libGUpIHtcbiAgICAgIHRocm93ICdOb3QgYWxsb3dlZCB0byBhY2Nlc3MgZGF0YSB3aGlsZSBhY2Nlc3NpYmxlIGlzIGZhbHNlLic7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlVmVydGV4RWxlbWVudHMoKTtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgLy8gcG9zaXRpb25z55qEVmVjdG9yM+eahOS4quaVsFxuICAgIGNvbnN0IHsgX3ZlcnRleENvdW50OiB2ZXJ0ZXhDb3VudCB9ID0gdGhpcztcbiAgICBjb25zdCB2ZXJ0ZXhDb3VudENoYW5nZSA9IHRoaXMuX2xhc3RVcGxvYWRWZXJ0ZXhDb3VudCAhPT0gdmVydGV4Q291bnQ7XG5cbiAgICBjb25zdCB2ZXJ0ZXhCdWZmZXIgPSB0aGlzLl92ZXJ0ZXhCdWZmZXJCaW5kaW5nc1swXT8uX2J1ZmZlcjtcbiAgICBpZiAodmVydGV4Q291bnRDaGFuZ2UpIHtcbiAgICAgIC8vIOS4gOe7hOaVsOaNruacieWkmuWwkeS4quWFg+e0oO+8jOavlOWmgu+8mumhtueCuSgzKSArIOazleWQkemHjygzKSArIOe6ueeQhigyKSA9IDhcbiAgICAgIGNvbnN0IGVsZW1lbnRDb3VudCA9IHRoaXMuX2VsZW1lbnRDb3VudDtcbiAgICAgIC8vIEZsb2F0MzJBcnJheeaVsOe7hOivpee7meWkmuWwkeepuumXtFxuICAgICAgY29uc3QgdmVydGV4RmxvYXRDb3VudCA9IGVsZW1lbnRDb3VudCAqIHZlcnRleENvdW50O1xuICAgICAgY29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KHZlcnRleEZsb2F0Q291bnQpO1xuICAgICAgdGhpcy5fdmVydGljZXNGbG9hdDMyID0gdmVydGljZXM7XG4gICAgICAvLyDov5nkuKrkuJzopb/mnInku4DkuYjnlKjlrp7lnKjmkJ7kuI3mmI7nmb3vvJ9cbiAgICAgIHRoaXMuX3ZlcnRpY2VzVWludDggPSBuZXcgVWludDhBcnJheSh2ZXJ0aWNlcy5idWZmZXIpO1xuICAgICAgdGhpcy5fdXBkYXRlVmVydGljZXModmVydGljZXMpO1xuXG4gICAgICBjb25zdCBuZXdWZXJ0ZXhCdWZmZXIgPSBuZXcgQnVmZmVyKFxuICAgICAgICBnbCxcbiAgICAgICAgQnVmZmVyQmluZEZsYWcuVmVydGV4QnVmZmVyLFxuICAgICAgICB2ZXJ0aWNlcyxcbiAgICAgICAgbm9Mb25nZXJBY2Nlc3NpYmxlID8gQnVmZmVyVXNhZ2UuU3RhdGljIDogQnVmZmVyVXNhZ2UuRHluYW1pYyxcbiAgICAgICk7XG4gICAgICAvLyDlm6DkuLrmmK9GbG9hdDMyQXJyYXnvvIwzMuS9je+8jDTkuKrlrZfoioLvvIzmlYVzdHJpZGXkuLplbGVtZW50Q291bnQgKiA0XG4gICAgICB0aGlzLl9zZXRWZXJ0ZXhCdWZmZXJCaW5kaW5nKDAsIG5ldyBWZXJ0ZXhCdWZmZXJCaW5kaW5nKG5ld1ZlcnRleEJ1ZmZlciwgZWxlbWVudENvdW50ICogNCkpO1xuICAgICAgdGhpcy5fbGFzdFVwbG9hZFZlcnRleENvdW50ID0gdmVydGV4Q291bnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy5fdmVydGljZXNGbG9hdDMyO1xuICAgICAgdGhpcy5fdXBkYXRlVmVydGljZXModmVydGljZXMpO1xuICAgICAgdmVydGV4QnVmZmVyLnNldERhdGEodmVydGljZXMpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgX2luZGljZXMgfSA9IHRoaXM7XG4gICAgY29uc3QgaW5kZXhCdWZmZXIgPSB0aGlzLl9pbmRleEJ1ZmZlckJpbmRpbmc/Ll9idWZmZXI7XG4gICAgaWYgKF9pbmRpY2VzKSB7XG4gICAgICBpZiAoIWluZGV4QnVmZmVyIHx8IF9pbmRpY2VzLmJ5dGVMZW5ndGggIT0gaW5kZXhCdWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICBjb25zdCBuZXdJbmRleEJ1ZmZlciA9IG5ldyBCdWZmZXIoZ2wsIEJ1ZmZlckJpbmRGbGFnLkluZGV4QnVmZmVyLCBfaW5kaWNlcyk7XG4gICAgICAgIHRoaXMuX3NldEluZGV4QnVmZmVyQmluZGluZyhuZXcgSW5kZXhCdWZmZXJCaW5kaW5nKG5ld0luZGV4QnVmZmVyLCB0aGlzLl9pbmRpY2VzRm9ybWF0KSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpbmRleEJ1ZmZlcikge1xuICAgICAgdGhpcy5fc2V0SW5kZXhCdWZmZXJCaW5kaW5nKG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJ0ZXggZWxlbWVudHMgYXJlIGNvbXBvc2VkIG9mIHZlcnRleCBjb29yZGluYXRlcywgdGV4dHVyZSBjb29yZGluYXRlcywgbm9ybWFsIHZlY3RvcnMgYW5kIG90aGVyIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBfdXBkYXRlVmVydGV4RWxlbWVudHMoKTogdm9pZCB7XG4gICAgdGhpcy5fY2xlYXJWZXJ0ZXhFbGVtZW50cygpO1xuICAgIC8vIOWboOS4uumhtueCueWFg+e0oOaYr+W/hemhu+acieeahO+8gVxuICAgIHRoaXMuX2FkZFZlcnRleEVsZW1lbnQoUE9TSVRJT05fVkVSVEVYX0VMRU1FTlQpO1xuICAgIC8vIDMgKiA0ID0gMTJcbiAgICBsZXQgb2Zmc2V0ID0gMTI7XG4gICAgbGV0IGVsZW1lbnRDb3VudCA9IDM7XG4gICAgaWYgKHRoaXMuX25vcm1hbHMpIHtcbiAgICAgIHRoaXMuX2FkZFZlcnRleEVsZW1lbnQobmV3IFZlcnRleEVsZW1lbnQoJ05PUk1BTCcsIG9mZnNldCwgVmVydGV4RWxlbWVudEZvcm1hdC5WZWN0b3IzLCAwKSk7XG4gICAgICBvZmZzZXQgKz0gMTI7XG4gICAgICBlbGVtZW50Q291bnQgKz0gMztcbiAgICB9XG4gICAgaWYgKHRoaXMuX3V2KSB7XG4gICAgICB0aGlzLl9hZGRWZXJ0ZXhFbGVtZW50KG5ldyBWZXJ0ZXhFbGVtZW50KCdURVhDT09SRF8wJywgb2Zmc2V0LCBWZXJ0ZXhFbGVtZW50Rm9ybWF0LlZlY3RvcjIsIDApKTtcbiAgICAgIG9mZnNldCArPSA4O1xuICAgICAgZWxlbWVudENvdW50ICs9IDI7XG4gICAgfVxuICAgIC8vICEg57Si5byV5L+h5oGv5rKh5aSE55CGXG5cbiAgICB0aGlzLl9lbGVtZW50Q291bnQgPSBlbGVtZW50Q291bnQ7XG4gIH1cblxuICAvKipcbiAgICogRmlsbCB0aGUgdm9pZCBGbG9hdDMyQXJyYXkgd2l0aCBwb3N0aW9uLCBub3JtYWwgYW5kIHV2cy5cbiAgICogQHBhcmFtIHZlcnRpY2VzIHZvaWQgRmxvYXQzMkFycmF5XG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVWZXJ0aWNlcyh2ZXJ0aWNlczogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgY29uc3QgeyBfZWxlbWVudENvdW50LCBfdmVydGV4Q291bnQsIF9wb3NpdGlvbnMsIF9ub3JtYWxzLCBfdXYgfSA9IHRoaXM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IF92ZXJ0ZXhDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBzdGFydCA9IF9lbGVtZW50Q291bnQgKiBpO1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBfcG9zaXRpb25zW2ldO1xuICAgICAgdmVydGljZXNbc3RhcnRdID0gcG9zaXRpb24ueDtcbiAgICAgIHZlcnRpY2VzW3N0YXJ0ICsgMV0gPSBwb3NpdGlvbi55O1xuICAgICAgdmVydGljZXNbc3RhcnQgKyAyXSA9IHBvc2l0aW9uLno7XG4gICAgfVxuXG4gICAgbGV0IG9mZnNldCA9IDM7XG5cbiAgICBpZiAoX25vcm1hbHMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX3ZlcnRleENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBfZWxlbWVudENvdW50ICogaSArIG9mZnNldDtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gX25vcm1hbHNbaV07XG4gICAgICAgIGlmIChub3JtYWwpIHtcbiAgICAgICAgICB2ZXJ0aWNlc1tzdGFydF0gPSBub3JtYWwueDtcbiAgICAgICAgICB2ZXJ0aWNlc1tzdGFydCArIDFdID0gbm9ybWFsLnk7XG4gICAgICAgICAgdmVydGljZXNbc3RhcnQgKyAyXSA9IG5vcm1hbC56O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvZmZzZXQgKz0gMztcbiAgICB9XG5cbiAgICBpZiAoX3V2KSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IF92ZXJ0ZXhDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gX2VsZW1lbnRDb3VudCAqIGkgKyBvZmZzZXQ7XG4gICAgICAgIGNvbnN0IHV2ID0gX3V2W2ldO1xuICAgICAgICBpZiAodXYpIHtcbiAgICAgICAgICB2ZXJ0aWNlc1tzdGFydF0gPSB1di54O1xuICAgICAgICAgIHZlcnRpY2VzW3N0YXJ0ICsgMV0gPSB1di55O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvZmZzZXQgKz0gMjtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgUE9TSVRJT05fVkVSVEVYX0VMRU1FTlQgPSBuZXcgVmVydGV4RWxlbWVudCgnUE9TSVRJT04nLCAwLCBWZXJ0ZXhFbGVtZW50Rm9ybWF0LlZlY3RvcjMsIDApO1xuIiwiaW1wb3J0IHsgVmVjdG9yMiwgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgnO1xuaW1wb3J0IHsgTW9kZWxNZXNoIH0gZnJvbSAnLi9Nb2RlbE1lc2gnO1xuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi4vRW5naW5lJztcblxuLyoqXG4gKiBDcmVhdGUgYSBNZXNoIG9mIFNpbXBsZSBHZW9tZXRyeS5cbiAqL1xuZXhwb3J0IGNsYXNzIFByaW1pdGl2ZU1lc2gge1xuICAvKipcbiAgICogQ3JlYXRlIGEgY3Vib2lkIG1lc2guXG4gICAqIEBwYXJhbSB3aWR0aCAtIEN1Ym9pZCB3aWR0aFxuICAgKiBAcGFyYW0gaGVpZ2h0IC0gQ3Vib2lkIGhlaWdodFxuICAgKiBAcGFyYW0gZGVwdGggLSBDdWJvaWQgZGVwdGhcbiAgICogQHJldHVybnMgQ3Vib2lkIG1vZGVsIG1lc2hcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVDdWJvaWQoZW5naW5lOiBFbmdpbmUsIHdpZHRoOiBudW1iZXIgPSAxLCBoZWlnaHQ6IG51bWJlciA9IDEsIGRlcHRoOiBudW1iZXIgPSAxKTogTW9kZWxNZXNoIHtcbiAgICBjb25zdCBnbCA9IGVuZ2luZS5nbDtcbiAgICBjb25zdCBtZXNoID0gbmV3IE1vZGVsTWVzaChnbCwgJ0N1Ym9pZCcpO1xuXG4gICAgY29uc3QgaGFsZldpZHRoOiBudW1iZXIgPSB3aWR0aCAvIDI7XG4gICAgY29uc3QgaGFsZkhlaWdodDogbnVtYmVyID0gaGVpZ2h0IC8gMjtcbiAgICBjb25zdCBoYWxmRGVwdGg6IG51bWJlciA9IGRlcHRoIC8gMjtcblxuICAgIGNvbnN0IHBvc2l0aW9uczogVmVjdG9yM1tdID0gbmV3IEFycmF5KDI0KTtcbiAgICBjb25zdCBub3JtYWxzOiBWZWN0b3IzW10gPSBuZXcgQXJyYXkoMjQpO1xuICAgIGNvbnN0IHV2czogVmVjdG9yMltdID0gbmV3IEFycmF5KDI0KTtcblxuICAgIC8vIFVwXG4gICAgcG9zaXRpb25zWzBdID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgaGFsZkhlaWdodCwgLWhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzFdID0gbmV3IFZlY3RvcjMoaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbMl0gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIGhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzNdID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgaGFsZkhlaWdodCwgaGFsZkRlcHRoKTtcbiAgICBub3JtYWxzWzBdID0gbmV3IFZlY3RvcjMoMCwgMSwgMCk7XG4gICAgbm9ybWFsc1sxXSA9IG5ldyBWZWN0b3IzKDAsIDEsIDApO1xuICAgIG5vcm1hbHNbMl0gPSBuZXcgVmVjdG9yMygwLCAxLCAwKTtcbiAgICBub3JtYWxzWzNdID0gbmV3IFZlY3RvcjMoMCwgMSwgMCk7XG4gICAgdXZzWzBdID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgdXZzWzFdID0gbmV3IFZlY3RvcjIoMSwgMCk7XG4gICAgdXZzWzJdID0gbmV3IFZlY3RvcjIoMSwgMSk7XG4gICAgdXZzWzNdID0gbmV3IFZlY3RvcjIoMCwgMSk7XG4gICAgLy8gRG93blxuICAgIHBvc2l0aW9uc1s0XSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbNV0gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbNl0gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCBoYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1s3XSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCBoYWxmRGVwdGgpO1xuICAgIG5vcm1hbHNbNF0gPSBuZXcgVmVjdG9yMygwLCAtMSwgMCk7XG4gICAgbm9ybWFsc1s1XSA9IG5ldyBWZWN0b3IzKDAsIC0xLCAwKTtcbiAgICBub3JtYWxzWzZdID0gbmV3IFZlY3RvcjMoMCwgLTEsIDApO1xuICAgIG5vcm1hbHNbN10gPSBuZXcgVmVjdG9yMygwLCAtMSwgMCk7XG4gICAgdXZzWzRdID0gbmV3IFZlY3RvcjIoMCwgMSk7XG4gICAgdXZzWzVdID0gbmV3IFZlY3RvcjIoMSwgMSk7XG4gICAgdXZzWzZdID0gbmV3IFZlY3RvcjIoMSwgMCk7XG4gICAgdXZzWzddID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgLy8gTGVmdFxuICAgIHBvc2l0aW9uc1s4XSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIGhhbGZIZWlnaHQsIC1oYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1s5XSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIGhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzEwXSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCBoYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1sxMV0gPSBuZXcgVmVjdG9yMygtaGFsZldpZHRoLCAtaGFsZkhlaWdodCwgLWhhbGZEZXB0aCk7XG4gICAgbm9ybWFsc1s4XSA9IG5ldyBWZWN0b3IzKC0xLCAwLCAwKTtcbiAgICBub3JtYWxzWzldID0gbmV3IFZlY3RvcjMoLTEsIDAsIDApO1xuICAgIG5vcm1hbHNbMTBdID0gbmV3IFZlY3RvcjMoLTEsIDAsIDApO1xuICAgIG5vcm1hbHNbMTFdID0gbmV3IFZlY3RvcjMoLTEsIDAsIDApO1xuICAgIHV2c1s4XSA9IG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIHV2c1s5XSA9IG5ldyBWZWN0b3IyKDEsIDApO1xuICAgIHV2c1sxMF0gPSBuZXcgVmVjdG9yMigxLCAxKTtcbiAgICB1dnNbMTFdID0gbmV3IFZlY3RvcjIoMCwgMSk7XG4gICAgLy8gUmlnaHRcbiAgICBwb3NpdGlvbnNbMTJdID0gbmV3IFZlY3RvcjMoaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbMTNdID0gbmV3IFZlY3RvcjMoaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCBoYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1sxNF0gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCBoYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1sxNV0gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBub3JtYWxzWzEyXSA9IG5ldyBWZWN0b3IzKDEsIDAsIDApO1xuICAgIG5vcm1hbHNbMTNdID0gbmV3IFZlY3RvcjMoMSwgMCwgMCk7XG4gICAgbm9ybWFsc1sxNF0gPSBuZXcgVmVjdG9yMygxLCAwLCAwKTtcbiAgICBub3JtYWxzWzE1XSA9IG5ldyBWZWN0b3IzKDEsIDAsIDApO1xuICAgIHV2c1sxMl0gPSBuZXcgVmVjdG9yMigxLCAwKTtcbiAgICB1dnNbMTNdID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgdXZzWzE0XSA9IG5ldyBWZWN0b3IyKDAsIDEpO1xuICAgIHV2c1sxNV0gPSBuZXcgVmVjdG9yMigxLCAxKTtcbiAgICAvLyBGcm9udFxuICAgIHBvc2l0aW9uc1sxNl0gPSBuZXcgVmVjdG9yMygtaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCBoYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1sxN10gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIGhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzE4XSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzE5XSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCBoYWxmRGVwdGgpO1xuICAgIG5vcm1hbHNbMTZdID0gbmV3IFZlY3RvcjMoMCwgMCwgMSk7XG4gICAgbm9ybWFsc1sxN10gPSBuZXcgVmVjdG9yMygwLCAwLCAxKTtcbiAgICBub3JtYWxzWzE4XSA9IG5ldyBWZWN0b3IzKDAsIDAsIDEpO1xuICAgIG5vcm1hbHNbMTldID0gbmV3IFZlY3RvcjMoMCwgMCwgMSk7XG4gICAgdXZzWzE2XSA9IG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIHV2c1sxN10gPSBuZXcgVmVjdG9yMigxLCAwKTtcbiAgICB1dnNbMThdID0gbmV3IFZlY3RvcjIoMSwgMSk7XG4gICAgdXZzWzE5XSA9IG5ldyBWZWN0b3IyKDAsIDEpO1xuICAgIC8vIEJhY2tcbiAgICBwb3NpdGlvbnNbMjBdID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgaGFsZkhlaWdodCwgLWhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzIxXSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgaGFsZkhlaWdodCwgLWhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzIyXSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIC1oYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1syM10gPSBuZXcgVmVjdG9yMygtaGFsZldpZHRoLCAtaGFsZkhlaWdodCwgLWhhbGZEZXB0aCk7XG4gICAgbm9ybWFsc1syMF0gPSBuZXcgVmVjdG9yMygwLCAwLCAtMSk7XG4gICAgbm9ybWFsc1syMV0gPSBuZXcgVmVjdG9yMygwLCAwLCAtMSk7XG4gICAgbm9ybWFsc1syMl0gPSBuZXcgVmVjdG9yMygwLCAwLCAtMSk7XG4gICAgbm9ybWFsc1syM10gPSBuZXcgVmVjdG9yMygwLCAwLCAtMSk7XG4gICAgdXZzWzIwXSA9IG5ldyBWZWN0b3IyKDEsIDApO1xuICAgIHV2c1syMV0gPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICB1dnNbMjJdID0gbmV3IFZlY3RvcjIoMCwgMSk7XG4gICAgdXZzWzIzXSA9IG5ldyBWZWN0b3IyKDEsIDEpO1xuXG4gICAgY29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSgzNik7XG5cbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAvLyBVcFxuICAgIGluZGljZXNbMF0gPSAwLCBpbmRpY2VzWzFdID0gMiwgaW5kaWNlc1syXSA9IDEsIGluZGljZXNbM10gPSAyLCBpbmRpY2VzWzRdID0gMCwgaW5kaWNlc1s1XSA9IDMsXG4gICAgLy8gRG93blxuICAgIGluZGljZXNbNl0gPSA0LCBpbmRpY2VzWzddID0gNiwgaW5kaWNlc1s4XSA9IDcsIGluZGljZXNbOV0gPSA2LCBpbmRpY2VzWzEwXSA9IDQsIGluZGljZXNbMTFdID0gNSxcbiAgICAvLyBMZWZ0XG4gICAgaW5kaWNlc1sxMl0gPSA4LCBpbmRpY2VzWzEzXSA9IDEwLCBpbmRpY2VzWzE0XSA9IDksIGluZGljZXNbMTVdID0gMTAsIGluZGljZXNbMTZdID0gOCwgaW5kaWNlc1sxN10gPSAxMSxcbiAgICAvLyBSaWdodFxuICAgIGluZGljZXNbMThdID0gMTIsIGluZGljZXNbMTldID0gMTQsIGluZGljZXNbMjBdID0gMTUsIGluZGljZXNbMjFdID0gMTQsIGluZGljZXNbMjJdID0gMTIsIGluZGljZXNbMjNdID0gMTMsXG4gICAgLy8gRnJvbnRcbiAgICBpbmRpY2VzWzI0XSA9IDE2LCBpbmRpY2VzWzI1XSA9IDE4LCBpbmRpY2VzWzI2XSA9IDE3LCBpbmRpY2VzWzI3XSA9IDE4LCBpbmRpY2VzWzI4XSA9IDE2LCBpbmRpY2VzWzI5XSA9IDE5LFxuICAgIC8vIEJhY2tcbiAgICBpbmRpY2VzWzMwXSA9IDIwLCBpbmRpY2VzWzMxXSA9IDIyLCBpbmRpY2VzWzMyXSA9IDIzLCBpbmRpY2VzWzMzXSA9IDIyLCBpbmRpY2VzWzM0XSA9IDIwLCBpbmRpY2VzWzM1XSA9IDIxO1xuXG4gICAgUHJpbWl0aXZlTWVzaC5faW5pdGlhbGl6ZShtZXNoLCBwb3NpdGlvbnMsIG5vcm1hbHMsIHV2cywgaW5kaWNlcyk7XG4gICAgcmV0dXJuIG1lc2g7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGVuZ2luZSDlvJXmk47lrp7kvotcbiAgICogQHBhcmFtIGxldmVsIOato+Wbm+mdouS9k+mAkuW9kuWIh+WIhuetiee6p1xuICAgKiBAcmV0dXJucyDnkIPnvZHmoLzlrp7kvotcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVTcGhlcmVCeVNsaWNlVGV0cmFoZWRyb24oZW5naW5lOiBFbmdpbmUsIGxldmVsID0gMCk6IE1vZGVsTWVzaCB7XG4gICAgY29uc3QgZ2wgPSBlbmdpbmUuZ2w7XG4gICAgY29uc3QgbWVzaCA9IG5ldyBNb2RlbE1lc2goZ2wsICdTcGhlcmUnKTtcblxuICAgIGNvbnN0IG5lZ2F0aXZlUm9vdFR3b092ZXJUaHJlZSA9IC1NYXRoLnNxcnQoMi4wKSAvIDMuMDtcbiAgICBjb25zdCBuZWdhdGl2ZU9uZVRoaXJkID0gLTEuMCAvIDMuMDtcbiAgICBjb25zdCByb290U2l4T3ZlclRocmVlID0gTWF0aC5zcXJ0KDYuMCkgLyAzLjA7XG5cbiAgICBjb25zdCBwb3NpdGlvbnM6IFZlY3RvcjNbXSA9IFtdO1xuICAgIHBvc2l0aW9ucy5wdXNoKG5ldyBWZWN0b3IzKDAsIDAsIDEpKTtcbiAgICBwb3NpdGlvbnMucHVzaChuZXcgVmVjdG9yMygwLCAoMiAqIE1hdGguc3FydCgyKSkgLyAzLCBuZWdhdGl2ZU9uZVRoaXJkKSk7XG4gICAgcG9zaXRpb25zLnB1c2gobmV3IFZlY3RvcjMoLXJvb3RTaXhPdmVyVGhyZWUsIG5lZ2F0aXZlUm9vdFR3b092ZXJUaHJlZSwgbmVnYXRpdmVPbmVUaGlyZCkpO1xuICAgIHBvc2l0aW9ucy5wdXNoKG5ldyBWZWN0b3IzKHJvb3RTaXhPdmVyVGhyZWUsIG5lZ2F0aXZlUm9vdFR3b092ZXJUaHJlZSwgbmVnYXRpdmVPbmVUaGlyZCkpO1xuXG4gICAgbGV0IGluZGljZXM6IGFueSA9IFtdO1xuICAgIFByaW1pdGl2ZU1lc2guc3ViZGl2aWRlKHBvc2l0aW9ucywgaW5kaWNlcywgWzAsIDEsIDJdLCBsZXZlbCk7XG4gICAgUHJpbWl0aXZlTWVzaC5zdWJkaXZpZGUocG9zaXRpb25zLCBpbmRpY2VzLCBbMCwgMiwgM10sIGxldmVsKTtcbiAgICBQcmltaXRpdmVNZXNoLnN1YmRpdmlkZShwb3NpdGlvbnMsIGluZGljZXMsIFswLCAzLCAxXSwgbGV2ZWwpO1xuICAgIFByaW1pdGl2ZU1lc2guc3ViZGl2aWRlKHBvc2l0aW9ucywgaW5kaWNlcywgWzEsIDMsIDJdLCBsZXZlbCk7XG5cbiAgICBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KGluZGljZXMpO1xuXG4gICAgUHJpbWl0aXZlTWVzaC5faW5pdGlhbGl6ZShtZXNoLCBwb3NpdGlvbnMsIG51bGwsIG51bGwsIGluZGljZXMpO1xuICAgIHJldHVybiBtZXNoO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHNwaGVyZSBtZXNoLlxuICAgKiBAcGFyYW0gZW5naW5lIC0gRW5naW5lXG4gICAqIEBwYXJhbSByYWRpdXMgLSBTcGhlcmUgcmFkaXVzXG4gICAqIEBwYXJhbSBzZWdtZW50cyAtIE51bWJlciBvZiBzZWdtZW50c1xuICAgKiBAcmV0dXJucyBTcGhlcmUgbW9kZWwgbWVzaFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVNwaGVyZUJ5UGFyYW1FcXVhdGlvbihlbmdpbmU6IEVuZ2luZSwgcmFkaXVzOiBudW1iZXIgPSAwLjUsIHNlZ21lbnRzOiBudW1iZXIgPSAxOCk6IE1vZGVsTWVzaCB7XG4gICAgY29uc3QgbWVzaCA9IG5ldyBNb2RlbE1lc2goZW5naW5lLmdsKTtcbiAgICBzZWdtZW50cyA9IE1hdGgubWF4KDIsIE1hdGguZmxvb3Ioc2VnbWVudHMpKTtcblxuICAgIGNvbnN0IGNvdW50ID0gc2VnbWVudHMgKyAxO1xuICAgIGNvbnN0IHZlcnRleENvdW50ID0gY291bnQgKiBjb3VudDtcbiAgICBjb25zdCByZWN0YW5nbGVDb3VudCA9IHNlZ21lbnRzICogc2VnbWVudHM7XG4gICAgY29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheShyZWN0YW5nbGVDb3VudCAqIDYpO1xuICAgIGNvbnN0IHRoZXRhUmFuZ2UgPSBNYXRoLlBJO1xuICAgIGNvbnN0IGFscGhhUmFuZ2UgPSB0aGV0YVJhbmdlICogMjtcbiAgICBjb25zdCBjb3VudFJlY2lwcm9jYWwgPSAxLjAgLyBjb3VudDtcbiAgICBjb25zdCBzZWdtZW50c1JlY2lwcm9jYWwgPSAxLjAgLyBzZWdtZW50cztcblxuICAgIGNvbnN0IHBvc2l0aW9uczogVmVjdG9yM1tdID0gbmV3IEFycmF5KHZlcnRleENvdW50KTtcbiAgICBjb25zdCBub3JtYWxzOiBWZWN0b3IzW10gPSBuZXcgQXJyYXkodmVydGV4Q291bnQpO1xuICAgIGNvbnN0IHV2czogVmVjdG9yMltdID0gbmV3IEFycmF5KHZlcnRleENvdW50KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7ICsraSkge1xuICAgICAgY29uc3QgeCA9IGkgJSBjb3VudDtcbiAgICAgIGNvbnN0IHkgPSAoaSAqIGNvdW50UmVjaXByb2NhbCkgfCAwO1xuICAgICAgY29uc3QgdSA9IHggKiBzZWdtZW50c1JlY2lwcm9jYWw7XG4gICAgICBjb25zdCB2ID0geSAqIHNlZ21lbnRzUmVjaXByb2NhbDtcbiAgICAgIGNvbnN0IGFscGhhRGVsdGEgPSB1ICogYWxwaGFSYW5nZTtcbiAgICAgIGNvbnN0IHRoZXRhRGVsdGEgPSB2ICogdGhldGFSYW5nZTtcbiAgICAgIGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4odGhldGFEZWx0YSk7XG5cbiAgICAgIGxldCBwb3NYID0gLXJhZGl1cyAqIE1hdGguY29zKGFscGhhRGVsdGEpICogc2luVGhldGE7XG4gICAgICBsZXQgcG9zWSA9IHJhZGl1cyAqIE1hdGguY29zKHRoZXRhRGVsdGEpO1xuICAgICAgbGV0IHBvc1ogPSByYWRpdXMgKiBNYXRoLnNpbihhbHBoYURlbHRhKSAqIHNpblRoZXRhO1xuXG4gICAgICAvLyBQb3NpdGlvblxuICAgICAgcG9zaXRpb25zW2ldID0gbmV3IFZlY3RvcjMocG9zWCwgcG9zWSwgcG9zWik7XG4gICAgICAvLyBOb3JtYWxcbiAgICAgIG5vcm1hbHNbaV0gPSBuZXcgVmVjdG9yMyhwb3NYLCBwb3NZLCBwb3NaKTtcbiAgICAgIC8vIFRleGNvb3JkXG4gICAgICB1dnNbaV0gPSBuZXcgVmVjdG9yMih1LCB2KTtcbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlY3RhbmdsZUNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHggPSBpICUgc2VnbWVudHM7XG4gICAgICBjb25zdCB5ID0gKGkgKiBzZWdtZW50c1JlY2lwcm9jYWwpIHwgMDtcblxuICAgICAgY29uc3QgYSA9IHkgKiBjb3VudCArIHg7XG4gICAgICBjb25zdCBiID0gYSArIDE7XG4gICAgICBjb25zdCBjID0gYSArIGNvdW50O1xuICAgICAgY29uc3QgZCA9IGMgKyAxO1xuXG4gICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGI7XG4gICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGE7XG4gICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGQ7XG4gICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGE7XG4gICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGM7XG4gICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGQ7XG4gICAgfVxuXG4gICAgUHJpbWl0aXZlTWVzaC5faW5pdGlhbGl6ZShtZXNoLCBwb3NpdGlvbnMsIG5vcm1hbHMsIHV2cywgaW5kaWNlcyk7XG4gICAgcmV0dXJuIG1lc2g7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGVuZ2luZSAtIEVuZ2luZVxuICAgKiBAcGFyYW0gd2lkdGggLSBQbGFuZSB3aWR0aFxuICAgKiBAcGFyYW0gaGVpZ2h0IC0gUGxhbmUgaGVpZ2h0XG4gICAqIEBwYXJhbSBob3Jpem9udGFsU2VnbWVudHMgLSBQbGFuZSBob3Jpem9udGFsIHNlZ21lbnRzXG4gICAqIEBwYXJhbSB2ZXJ0aWNhbFNlZ21lbnRzIC0gUGxhbmUgdmVydGljYWwgc2VnbWVudHNcbiAgICogQHBhcmFtIG5vTG9uZ2VyQWNjZXNzaWJsZSAtIEFjY2Vzc2libGVcbiAgICogQHJldHVybnMgUGxhbmUgbWVzaFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVBsYW5lKFxuICAgIGVuZ2luZTogRW5naW5lLFxuICAgIHdpZHRoOiBudW1iZXIgPSAxLFxuICAgIGhlaWdodDogbnVtYmVyID0gMSxcbiAgICBob3Jpem9udGFsU2VnbWVudHM6IG51bWJlciA9IDEsXG4gICAgdmVydGljYWxTZWdtZW50czogbnVtYmVyID0gMSxcbiAgICBub0xvbmdlckFjY2Vzc2libGU6IGJvb2xlYW4gPSB0cnVlLFxuICApIHtcbiAgICAvLyBUT0RPOiDnm7TmjqXkvKDlhaXlvJXmk47vvIzkuI3mj5DljrtnbOS6hlxuICAgIGNvbnN0IG1lc2ggPSBuZXcgTW9kZWxNZXNoKGVuZ2luZS5nbCk7XG4gICAgaG9yaXpvbnRhbFNlZ21lbnRzID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihob3Jpem9udGFsU2VnbWVudHMpKTtcbiAgICB2ZXJ0aWNhbFNlZ21lbnRzID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcih2ZXJ0aWNhbFNlZ21lbnRzKSk7XG5cbiAgICBjb25zdCBob3Jpem9udGFsQ291bnQgPSBob3Jpem9udGFsU2VnbWVudHMgKyAxO1xuICAgIGNvbnN0IHZlcnRpY2FsQ291bnQgPSB2ZXJ0aWNhbFNlZ21lbnRzICsgMTtcbiAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XG4gICAgY29uc3QgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG4gICAgY29uc3QgZ3JpZFdpZHRoID0gd2lkdGggLyBob3Jpem9udGFsU2VnbWVudHM7XG4gICAgY29uc3QgZ3JpZEhlaWdodCA9IGhlaWdodCAvIHZlcnRpY2FsU2VnbWVudHM7XG4gICAgY29uc3QgdmVydGV4Q291bnQgPSBob3Jpem9udGFsQ291bnQgKiB2ZXJ0aWNhbENvdW50O1xuICAgIGNvbnN0IHJlY3RhbmdsZUNvdW50ID0gdmVydGljYWxTZWdtZW50cyAqIGhvcml6b250YWxTZWdtZW50cztcbiAgICBjb25zdCBpbmRpY2VzID0gUHJpbWl0aXZlTWVzaC5fZ2VuZXJhdGVJbmRpY2VzKGVuZ2luZSwgdmVydGV4Q291bnQsIHJlY3RhbmdsZUNvdW50ICogNik7XG4gICAgY29uc3QgaG9yaXpvbnRhbENvdW50UmVjaXByb2NhbCA9IDEuMCAvIGhvcml6b250YWxDb3VudDtcbiAgICBjb25zdCBob3Jpem9udGFsU2VnbWVudHNSZWNpcHJvY2FsID0gMS4wIC8gaG9yaXpvbnRhbFNlZ21lbnRzO1xuICAgIGNvbnN0IHZlcnRpY2FsU2VnbWVudHNSZWNpcHJvY2FsID0gMS4wIC8gdmVydGljYWxTZWdtZW50cztcblxuICAgIGNvbnN0IHBvc2l0aW9uczogVmVjdG9yM1tdID0gbmV3IEFycmF5KHZlcnRleENvdW50KTtcbiAgICBjb25zdCBub3JtYWxzOiBWZWN0b3IzW10gPSBuZXcgQXJyYXkodmVydGV4Q291bnQpO1xuICAgIGNvbnN0IHV2czogVmVjdG9yMltdID0gbmV3IEFycmF5KHZlcnRleENvdW50KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7ICsraSkge1xuICAgICAgY29uc3QgeCA9IGkgJSBob3Jpem9udGFsQ291bnQ7XG4gICAgICBjb25zdCB6ID0gKGkgKiBob3Jpem9udGFsQ291bnRSZWNpcHJvY2FsKSB8IDA7XG5cbiAgICAgIC8vIFBvc2l0aW9uXG4gICAgICBwb3NpdGlvbnNbaV0gPSBuZXcgVmVjdG9yMyh4ICogZ3JpZFdpZHRoIC0gaGFsZldpZHRoLCAwLCB6ICogZ3JpZEhlaWdodCAtIGhhbGZIZWlnaHQpO1xuICAgICAgLy8gTm9ybWFsXG4gICAgICBub3JtYWxzW2ldID0gbmV3IFZlY3RvcjMoMCwgMSwgMCk7XG4gICAgICAvLyBUZXhjb29yZFxuICAgICAgdXZzW2ldID0gbmV3IFZlY3RvcjIoeCAqIGhvcml6b250YWxTZWdtZW50c1JlY2lwcm9jYWwsIHogKiB2ZXJ0aWNhbFNlZ21lbnRzUmVjaXByb2NhbCk7XG4gICAgfVxuXG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWN0YW5nbGVDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCB4ID0gaSAlIGhvcml6b250YWxTZWdtZW50cztcbiAgICAgIGNvbnN0IHkgPSAoaSAqIGhvcml6b250YWxTZWdtZW50c1JlY2lwcm9jYWwpIHwgMDtcblxuICAgICAgY29uc3QgYSA9IHkgKiBob3Jpem9udGFsQ291bnQgKyB4O1xuICAgICAgY29uc3QgYiA9IGEgKyAxO1xuICAgICAgY29uc3QgYyA9IGEgKyBob3Jpem9udGFsQ291bnQ7XG4gICAgICBjb25zdCBkID0gYyArIDE7XG5cbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYTtcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYztcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYjtcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYztcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gZDtcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYjtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiDliqDkuIrmmK/lkKblj6/ojrflj5blj4LmlbDvvIFcbiAgICBQcmltaXRpdmVNZXNoLl9pbml0aWFsaXplKG1lc2gsIHBvc2l0aW9ucywgbm9ybWFscywgdXZzLCBpbmRpY2VzKTtcbiAgICByZXR1cm4gbWVzaDtcbiAgfVxuXG4gIHN0YXRpYyBzdWJkaXZpZGUocG9zaXRpb25zOiBWZWN0b3IzW10sIGluZGljZXM6IG51bWJlcltdLCB0cmlhbmdsZTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBsZXZlbCA9IDApIHtcbiAgICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgICBsZXQgdG1wMSA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICBsZXQgdG1wMiA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICBsZXQgdG1wMyA9IG5ldyBWZWN0b3IzKCk7XG5cbiAgICAgIFZlY3RvcjMuYWRkKHBvc2l0aW9uc1t0cmlhbmdsZVswXV0sIHBvc2l0aW9uc1t0cmlhbmdsZVsxXV0sIHRtcDEpO1xuICAgICAgVmVjdG9yMy5zY2FsZSh0bXAxLCAwLjUsIHRtcDEpO1xuICAgICAgVmVjdG9yMy5hZGQocG9zaXRpb25zW3RyaWFuZ2xlWzFdXSwgcG9zaXRpb25zW3RyaWFuZ2xlWzJdXSwgdG1wMik7XG4gICAgICBWZWN0b3IzLnNjYWxlKHRtcDIsIDAuNSwgdG1wMik7XG4gICAgICBWZWN0b3IzLmFkZChwb3NpdGlvbnNbdHJpYW5nbGVbMl1dLCBwb3NpdGlvbnNbdHJpYW5nbGVbMF1dLCB0bXAzKTtcbiAgICAgIFZlY3RvcjMuc2NhbGUodG1wMywgMC41LCB0bXAzKTtcblxuICAgICAgcG9zaXRpb25zLnB1c2godG1wMS5ub3JtYWxpemUoKSwgdG1wMi5ub3JtYWxpemUoKSwgdG1wMy5ub3JtYWxpemUoKSk7XG5cbiAgICAgIGxldCBpMDEgPSBwb3NpdGlvbnMubGVuZ3RoIC0gMztcbiAgICAgIGxldCBpMTIgPSBwb3NpdGlvbnMubGVuZ3RoIC0gMjtcbiAgICAgIGxldCBpMjAgPSBwb3NpdGlvbnMubGVuZ3RoIC0gMTtcblxuICAgICAgY29uc3QgbmV3TGV2ZWwgPSBsZXZlbCAtIDE7XG4gICAgICBQcmltaXRpdmVNZXNoLnN1YmRpdmlkZShwb3NpdGlvbnMsIGluZGljZXMsIFt0cmlhbmdsZVswXSwgaTAxLCBpMjBdLCBuZXdMZXZlbCk7XG4gICAgICBQcmltaXRpdmVNZXNoLnN1YmRpdmlkZShwb3NpdGlvbnMsIGluZGljZXMsIFtpMDEsIHRyaWFuZ2xlWzFdLCBpMTJdLCBuZXdMZXZlbCk7XG4gICAgICBQcmltaXRpdmVNZXNoLnN1YmRpdmlkZShwb3NpdGlvbnMsIGluZGljZXMsIFtpMDEsIGkxMiwgaTIwXSwgbmV3TGV2ZWwpO1xuICAgICAgUHJpbWl0aXZlTWVzaC5zdWJkaXZpZGUocG9zaXRpb25zLCBpbmRpY2VzLCBbaTIwLCBpMTIsIHRyaWFuZ2xlWzJdXSwgbmV3TGV2ZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRpY2VzLnB1c2goLi4udHJpYW5nbGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBY2NvcmRpbmcgYSBzZXJpZXMgb2YgZGF0YSB0aSBpbml0aWFsaXplIG1lc2hcbiAgICogQHBhcmFtIG1lc2ggb2JqZWN0J3MgbWVzaFxuICAgKiBAcGFyYW0gcG9zaXRpb25zIG9iamVjdCdzIHBvc2l0aW9uIGFycmF5XG4gICAqIEBwYXJhbSBub3JtYWxzIG9iamVjdCdzIG5vcm1hbHMgYXJyYXlcbiAgICogQHBhcmFtIHV2IG9iamVjdCdzIHV2IGFycmF5XG4gICAqIEBwYXJhbSBpbmRpY2VzIG9iamVjdCdzIGluZGljZXMgYXJyYXlcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF9pbml0aWFsaXplKFxuICAgIG1lc2g6IE1vZGVsTWVzaCxcbiAgICBwb3NpdGlvbnM6IFZlY3RvcjNbXSxcbiAgICBub3JtYWxzOiBWZWN0b3IzW10gfCBudWxsLFxuICAgIHV2czogVmVjdG9yMltdIHwgbnVsbCxcbiAgICBpbmRpY2VzOiBVaW50MTZBcnJheSB8IFVpbnQzMkFycmF5LFxuICApIHtcbiAgICBtZXNoLnNldFBvc2l0aW9ucyhwb3NpdGlvbnMpO1xuICAgIG1lc2guc2V0SW5kaWNlcyhpbmRpY2VzKTtcbiAgICAvLyDlm6DkuLrkuI3kuIDlrpropoHmmL7npLrmjIflrprms5XlkJHph4/lkoznurnnkIblnZDmoIdcbiAgICBpZiAobm9ybWFscykgbWVzaC5zZXROb3JtYWxzKG5vcm1hbHMpO1xuICAgIGlmICh1dnMpIG1lc2guc2V0VVZzKHV2cyk7XG5cbiAgICBtZXNoLnVwbG9hZERhdGEoKTtcbiAgICBtZXNoLmFkZFN1Yk1lc2goMCwgaW5kaWNlcy5sZW5ndGgpO1xuICB9XG5cbiAgLy8gVE9ETzog5a+56aG254K55pWw6YeP5pyJ6KaB5rGC77yM6ICM5LiU6L+Y5rKh5pyJ5YW85a65V2ViR0wyIVxuICBwcml2YXRlIHN0YXRpYyBfZ2VuZXJhdGVJbmRpY2VzKGVuZ2luZTogRW5naW5lLCB2ZXJ0ZXhDb3VudDogbnVtYmVyLCBpbmRleENvdW50OiBudW1iZXIpOiBVaW50MTZBcnJheSB8IFVpbnQzMkFycmF5IHtcbiAgICBsZXQgaW5kaWNlczogVWludDE2QXJyYXkgfCBVaW50MzJBcnJheSA9IG51bGw7XG4gICAgaWYgKHZlcnRleENvdW50ID4gNjU1MzUpIHtcbiAgICAgIHRocm93IEVycm9yKCdUaGUgdmVydGV4IGNvdW50IGlzIG92ZXIgbGltaXQuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoaW5kZXhDb3VudCk7XG4gICAgfVxuICAgIHJldHVybiBpbmRpY2VzO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgZWFydGhVcmwgPSBgaHR0cDovLzEyMS4xOTkuMTYwLjIwMi9pbWFnZXMvZWFydGguanBnYDtcbiIsImltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vY29yZSc7XG5cbmV4cG9ydCBjb25zdCBza3lTdGFyQ29uZmlnID0gW1xuICB7XG4gICAgdGFyZ2V0OiBEYXRhVHlwZS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gsXG4gICAgdXJsOiAnaHR0cDovLzEyMS4xOTkuMTYwLjIwMi9pbWFnZXMvc2t5Ym94L3R5Y2hvMnQzXzgwX214LmpwZycsXG4gIH0sXG4gIHtcbiAgICB0YXJnZXQ6IERhdGFUeXBlLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWCxcbiAgICB1cmw6ICdodHRwOi8vMTIxLjE5OS4xNjAuMjAyL2ltYWdlcy9za3lib3gvdHljaG8ydDNfODBfcHguanBnJyxcbiAgfSxcbiAge1xuICAgIHRhcmdldDogRGF0YVR5cGUuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9ZLFxuICAgIHVybDogJ2h0dHA6Ly8xMjEuMTk5LjE2MC4yMDIvaW1hZ2VzL3NreWJveC90eWNobzJ0M184MF9weS5qcGcnLFxuICB9LFxuICB7XG4gICAgdGFyZ2V0OiBEYXRhVHlwZS5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1ksXG4gICAgdXJsOiAnaHR0cDovLzEyMS4xOTkuMTYwLjIwMi9pbWFnZXMvc2t5Ym94L3R5Y2hvMnQzXzgwX215LmpwZycsXG4gIH0sXG4gIHtcbiAgICB0YXJnZXQ6IERhdGFUeXBlLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWixcbiAgICB1cmw6ICdodHRwOi8vMTIxLjE5OS4xNjAuMjAyL2ltYWdlcy9za3lib3gvdHljaG8ydDNfODBfbXouanBnJyxcbiAgfSxcbiAge1xuICAgIHRhcmdldDogRGF0YVR5cGUuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9aLFxuICAgIHVybDogJ2h0dHA6Ly8xMjEuMTk5LjE2MC4yMDIvaW1hZ2VzL3NreWJveC90eWNobzJ0M184MF9wei5qcGcnLFxuICB9LFxuXTtcbiIsImltcG9ydCB7IENvbG9yLCBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aCc7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuL0VuZ2luZSc7XG5pbXBvcnQgeyBCYWNrZ3JvdW5kTW9kZSB9IGZyb20gJy4vZW51bXMvQmFja2dyb3VuZE1vZGUnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4vZ3JhcGhpYyc7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vbWF0ZXJpYWwnO1xuaW1wb3J0IHsgU2t5Qm94TWF0ZXJpYWwgfSBmcm9tICcuL21hdGVyaWFsL1NreUJveE1hdGVyaWFsJztcbmltcG9ydCB7IE1vZGVsTWVzaCB9IGZyb20gJy4vbWVzaCc7XG5pbXBvcnQgeyBza3lTdGFyQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcblxuLyoqXG4gKiBCYWNrZ3JvdW5kIG9mIHRoZSBzY2VuZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhY2tncm91bmQge1xuICAvKipcbiAgICogVGhlIHBhdHRlcm4gb2YgdGhlIGJhY2tncm91bmQsIHdoaWNoIG1heSBiZSBhIHNpbmdsZSBjb2xvciwgYSBza3lib3ggb3IgYSBwaWN0dXJlIHRleHR1cmUuXG4gICAqL1xuICBtb2RlOiBCYWNrZ3JvdW5kTW9kZSA9IEJhY2tncm91bmRNb2RlLlNvbGlkQ29sb3I7XG5cbiAgLyoqIEdyaWQgZm9yIGJhY2tncm91bmQuICovXG4gIF9tZXNoOiBNZXNoO1xuICAvKiogVGhlIG1hdGVyaWFsIHVzZWQgZm9yIHRoZSBiYWNrZ3JvdW5kLiAqL1xuICBfbWF0ZXJpYWw6IE1hdGVyaWFsO1xuXG4gIC8qKiBGaXhlZCBjb2xvciBiZWZvcmUgc2t5Ym94IG9yIHRleHR1cmUgaXMgbG9hZGVkIHN1Y2Nlc3NmdWxseS4gKi9cbiAgc29saWRDb2xvcjogQ29sb3IgPSBuZXcgQ29sb3IoMC4yNSwgMC4yNSwgMC4yNSwgMS4wKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbmdpbmU6IEVuZ2luZSkge1xuICAgIHRoaXMuX21lc2ggPSB0aGlzLl9jcmVhdGVQbGFuZSh0aGlzLl9lbmdpbmUpO1xuICAgIHRoaXMuX21hdGVyaWFsID0gbmV3IFNreUJveE1hdGVyaWFsKHRoaXMuX2VuZ2luZSwgc2t5U3RhckNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogQmFja2dyb3VuZCB3aXRoIGZsYXQgZ3JpZC5cbiAgICogQHBhcmFtIGVuZ2luZSBFbmdpbmUgaW5zdGFuY2UuXG4gICAqIEByZXR1cm5zIE1lc2hcbiAgICovXG4gIHByaXZhdGUgX2NyZWF0ZVBsYW5lKGVuZ2luZTogRW5naW5lKTogTW9kZWxNZXNoIHtcbiAgICBjb25zdCBtZXNoID0gbmV3IE1vZGVsTWVzaChlbmdpbmUuZ2wpO1xuICAgIC8vIGNvbnN0IGluZGljZXMgPSBuZXcgVWludDhBcnJheShbMCwgMywgMSwgMSwgMywgMl0pO1xuXG4gICAgY29uc3QgcG9zaXRpb25zOiBWZWN0b3IzW10gPSBbXG4gICAgICBuZXcgVmVjdG9yMygtMSwgLTEsIDApLFxuICAgICAgbmV3IFZlY3RvcjMoMSwgLTEsIDApLFxuICAgICAgbmV3IFZlY3RvcjMoLTEsIDEsIDApLFxuICAgICAgbmV3IFZlY3RvcjMoLTEsIDEsIDApLFxuICAgICAgbmV3IFZlY3RvcjMoMSwgLTEsIDApLFxuICAgICAgbmV3IFZlY3RvcjMoMSwgMSwgMCksXG4gICAgXTtcblxuICAgIG1lc2guc2V0UG9zaXRpb25zKHBvc2l0aW9ucyk7XG4gICAgLy8gbWVzaC5zZXRJbmRpY2VzKGluZGljZXMpO1xuXG4gICAgbWVzaC51cGxvYWREYXRhKGZhbHNlKTtcbiAgICBtZXNoLmFkZFN1Yk1lc2goMCwgNik7XG4gICAgcmV0dXJuIG1lc2g7XG4gIH1cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMsIE1hdGhVdGlsIH0gZnJvbSAnLi4vbWF0aCc7XG5cbi8qKiBQcmV2ZW50IGdpbWJhbCBsb2NrLiAqL1xuY29uc3QgRVNQID0gTWF0aFV0aWwuemVyb1RvbGVyYW5jZTtcblxuLyoqXG4gKiBTcGhlcmljYWwuXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGhlcmljYWwge1xuICAvKiogU3BoZXJpY2FsIHJhZGl1cy4gKi9cbiAgcHVibGljIHJhZGl1czogbnVtYmVyO1xuICAvKiogSW4gdGhlIHhveSBwbGFuZSwgdGhlIGFuZ2xlIHdpdGggdGhlIHgtYXhpcy4gKi9cbiAgcHVibGljIHBoaTogbnVtYmVyO1xuICAvKiogQW5nbGUgd2l0aCB6LWF4aXMuICovXG4gIHB1YmxpYyB0aGV0YTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBCdWlsZCB0aGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgc3BoZXJlLlxuICAgKiBAcGFyYW0gcmFkaXVzIFNwaGVyaWNhbCByYWRpdXMsIGRlZmF1bHQgaXMgMS4wLlxuICAgKiBAcGFyYW0gcGhpIEFuZ2xlIHdpdGggdGhlIHgtYXhpcywgZGVmYXVsdCBpcyAwLlxuICAgKiBAcGFyYW0gdGhldGEgQW5nbGUgd2l0aCB0aGUgei1heGlzLCBkZWZhdWx0IGlzIDAuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyYWRpdXM/OiBudW1iZXIsIHBoaT86IG51bWJlciwgdGhldGE/OiBudW1iZXIpIHtcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cyAhPT0gdW5kZWZpbmVkID8gcmFkaXVzIDogMS4wO1xuICAgIHRoaXMucGhpID0gcGhpICE9PSB1bmRlZmluZWQgPyBwaGkgOiAwO1xuICAgIHRoaXMudGhldGEgPSB0aGV0YSAhPT0gdW5kZWZpbmVkID8gdGhldGEgOiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzcGhlcmljYWwgc3RhdGVcbiAgICogQHBhcmFtIHJhZGl1cyBTcGhlcmljYWwgcmFkaXVzLlxuICAgKiBAcGFyYW0gcGhpIEFuZ2xlIHdpdGggdGhlIHgtYXhpcy5cbiAgICogQHBhcmFtIHRoZXRhIEFuZ2xlIHdpdGggdGhlIHotYXhpcy5cbiAgICogQHJldHVybnMgU3BoZXJpY2FsLlxuICAgKi9cbiAgc2V0KHJhZGl1czogbnVtYmVyLCBwaGk6IG51bWJlciwgdGhldGE6IG51bWJlcikge1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgIHRoaXMucGhpID0gcGhpO1xuICAgIHRoaXMudGhldGEgPSB0aGV0YTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWFrZVNhZmUoKSB7XG4gICAgdGhpcy5waGkgPSBNYXRoVXRpbC5jbGFtcCh0aGlzLnBoaSwgRVNQLCBNYXRoLlBJIC0gRVNQKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgc3BoZXJlIHN0YXRlIGZyb20gdmVjdG9yLlxuICAgKiBAcGFyYW0gdjMgVmVjdG9yMy5cbiAgICogQHJldHVybnMgU3BoZXJpY2FsLlxuICAgKi9cbiAgc2V0RnJvbVZlYzModjM6IFZlY3RvcjMpIHtcbiAgICB0aGlzLnJhZGl1cyA9IHYzLmxlbmd0aCgpO1xuICAgIGlmICh0aGlzLnJhZGl1cyA9PT0gMCkge1xuICAgICAgdGhpcy50aGV0YSA9IDA7XG4gICAgICB0aGlzLnBoaSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKHYzLngsIHYzLnopO1xuICAgICAgdGhpcy5waGkgPSBNYXRoLmFjb3MoTWF0aFV0aWwuY2xhbXAodjMueSAvIHRoaXMucmFkaXVzLCAtMSwgMSkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBWZWN0b3IzIGZyb20gc3BoZXJlIHN0YXRlLlxuICAgKiBAcGFyYW0gdjMgVmVjdG9yMy5cbiAgICogQHJldHVybnMgU3BoZXJpY2FsLlxuICAgKi9cbiAgc2V0VG9WZWMzKHYzOiBWZWN0b3IzKSB7XG4gICAgY29uc3Qgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4odGhpcy5waGkpICogdGhpcy5yYWRpdXM7XG4gICAgdjMuc2V0VmFsdWUoXG4gICAgICBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbih0aGlzLnRoZXRhKSxcbiAgICAgIE1hdGguY29zKHRoaXMucGhpKSAqIHRoaXMucmFkaXVzLFxuICAgICAgc2luUGhpUmFkaXVzICogTWF0aC5jb3ModGhpcy50aGV0YSksXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuLi9jb3JlL0NhbWVyYSc7XG5pbXBvcnQgeyBNYXRyaXg0LCBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aCc7XG5pbXBvcnQgeyBTcGhlcmljYWwgfSBmcm9tICcuL1NwaGVyaWNhbCc7XG5cbnR5cGUgTW91c2VXaGVlbEV2ZW50ID0gYW55O1xuXG4vKipcbiAqIE9yYml0YWwgY29udHJvbHMgZm9yIHpvb21pbmcgYXJvdW5kIGEgY2VudGVyIHBvaW50LlxuICovXG5leHBvcnQgY2xhc3MgT3JiaXRDb250cm9sIHtcbiAgLyoqIENhbWVyYSBpbnN0YW5jZSwgdGhlIGVzc2VuY2Ugb2Ygb3JiaXQgY29udHJvbCBpcyB0byBjaGFuZ2UgdGhlIGNhbWVyYSBwb3NpdGlvbi4gKi9cbiAgY2FtZXJhOiBDYW1lcmE7XG4gIC8qKiBET00gZWxlbWVudCwgbWFpbmx5IHVzZWQgdG8gbGlzdGVuIGZvciBtb3VzZSB1cCBldmVudHMuICovXG4gIGRvbUVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgRG9jdW1lbnQ7XG4gIC8qKiBDYW52YXMgZWxlbWVudCwgbWFpbmx5IHVzZWQgdG8gbW9uaXRvciBtb3VzZSBtb3ZlbWVudCBldmVudHMuICovXG4gIG1haW5FbGVtZW50OiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgLyoqIENhbWVyYSBmcnVzdHVtIGFuZ2xlLiAqL1xuICBmb3Y6IG51bWJlcjtcbiAgLyoqIFdoZXJlIHRoZSBjYW1lcmEgaXMgbG9va2luZy4gKi9cbiAgdGFyZ2V0OiBWZWN0b3IzO1xuICAvKiogQ2FtZXJhIHVwLiAqL1xuICB1cDogVmVjdG9yMztcbiAgLyoqIFRoZSBtaW5pbXVtIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSB0byB0aGUgb2JqZWN0LiAqL1xuICBtaW5EaXN0YW5jZTogbnVtYmVyO1xuICAvKiogVGhlIG1heGltdW0gZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSBvYmplY3QuICovXG4gIG1heERpc3RhbmNlOiBudW1iZXI7XG4gIC8qKiBUaGUgc21hbGxlc3Qgem9vbSBzY2FsZSBvZiB0aGUgY2FtZXJhLiAqL1xuICBtaW5ab29tOiBudW1iZXI7XG4gIC8qKiBUaGUgbWF4aW11bSB6b29tIHNjYWxlIG9mIHRoZSBjYW1lcmEuICovXG4gIG1heFpvb206IG51bWJlcjtcbiAgLyoqIFNjYWxpbmcgZmFjdG9yLiAqL1xuICB6b29tRmFjdG9yOiBudW1iZXI7XG4gIC8qKiBNaW4gcG9sYXIgYW5nbGUuICovXG4gIG1pblBvbGFyQW5nbGU6IG51bWJlcjtcbiAgLyoqIE1heCBwb2xhciBhbmdsZS4gKi9cbiAgbWF4UG9sYXJBbmdsZTogbnVtYmVyO1xuICAvKiogTWluIGF6aW11dGggYW5nbGUuICovXG4gIG1pbkF6aW11dGhBbmdsZTogbnVtYmVyO1xuICAvKiogTWF4IGF6aW11dGggYW5nbGUuICovXG4gIG1heEF6aW11dGhBbmdsZTogbnVtYmVyO1xuICAvKiogV2hldGhlciB0byBlbmFibGUgZGFtcGluZy4gKi9cbiAgZW5hYmxlRGFtcGluZzogYm9vbGVhbjtcbiAgLyoqIFdoZXRoZXIgdG8gZW5hYmxlIHJvdGF0ZS4gKi9cbiAgZW5hYmxlUm90YXRlOiBib29sZWFuO1xuICAvKiogV2hldGhlciB0byBlbmFibGUgem9vbS4gKi9cbiAgZW5hYmxlWm9vbTogYm9vbGVhbjtcbiAgLyoqIFdoZXRoZXIgdG8gZW5hYmxlIHBhbi4gKi9cbiAgZW5hYmxlUGFuOiBib29sZWFuO1xuICAvKiogRGFtcGluZyBmYWN0b3IgKi9cbiAgZGFtcGluZ0ZhY3RvcjogbnVtYmVyO1xuICAvKiogWm9vbSBzcGVlZCAqL1xuICB6b29tU3BlZWQ6IG51bWJlcjtcbiAgLyoqIFdoZXRoZXIgdG8gYXV0byByb3RhdGUuICovXG4gIGF1dG9Sb3RhdGU6IGJvb2xlYW47XG4gIC8qKiBBdXRvIHJvdGF0ZSBzcGVlZC4gKi9cbiAgYXV0b1JvdGF0ZVNwZWVkOiBudW1iZXIgPSBNYXRoLlBJO1xuICAvKiogUm90YXRlIHNwZWVkLiAqL1xuICByb3RhdGVTcGVlZDogbnVtYmVyO1xuICAvKiogQ2xpY2tpbmcgdGhlIGNvcnJlc3BvbmRpbmcga2V5IHdpdGggdGhlIG1vdXNlIGlzIGFjdHVhbGx5IHRoZSBrZXkgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCBidXR0b24sIHRoZSBzY3JvbGwgd2hlZWwgYW5kIHRoZSByaWdodCBidXR0b24uICovXG4gIG1vdXNlQnV0dG9uczogeyBPUkJJVDogbnVtYmVyOyBaT09NOiBudW1iZXI7IFBBTjogbnVtYmVyIH07XG4gIC8qKiBXaGF0IHN0YXRlIGlzIHRoZSBjdXJyZW50IGNvbnRyb2xsZXIgaW4uICovXG4gIFNUQVRFOiB7XG4gICAgUk9UQVRFOiBudW1iZXI7XG4gICAgWk9PTTogbnVtYmVyO1xuICAgIE5PTkU6IG51bWJlcjtcbiAgICBQQU46IG51bWJlcjtcbiAgfTtcbiAgLyoqIENvbnRhaW5zIG1vdXNlbW92ZSBhbmQgbW91c2V1cC4gKi9cbiAgbW91c2VVcEV2ZW50czogeyBsaXN0ZW5lcjogYW55OyB0eXBlOiBzdHJpbmcgfVtdO1xuICAvKiogQ29udGFpbnMgbW91c2Vkb3duIGFuZCB3aGVlbC4gKi9cbiAgY29uc3RFdmVudHM6IHsgbGlzdGVuZXI6IGFueTsgdHlwZTogc3RyaW5nOyBlbGVtZW50PzogV2luZG93IH1bXTtcblxuICBwcml2YXRlIF9wb3NpdGlvbjogVmVjdG9yMztcbiAgcHJpdmF0ZSBfb2Zmc2V0OiBWZWN0b3IzO1xuICBwcml2YXRlIF9zcGhlcmljYWw6IFNwaGVyaWNhbDtcbiAgcHJpdmF0ZSBfc3BoZXJpY2FsRGVsdGE6IFNwaGVyaWNhbDtcbiAgcHJpdmF0ZSBfc3BoZXJpY2FsRHVtcDogU3BoZXJpY2FsO1xuICBwcml2YXRlIF96b29tRnJhZzogbnVtYmVyO1xuICBwcml2YXRlIF9zY2FsZTogbnVtYmVyO1xuICBwcml2YXRlIF9wYW5PZmZzZXQ6IFZlY3RvcjM7XG4gIHByaXZhdGUgX2lzTW91c2VVcDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfdlBhbjogVmVjdG9yMztcbiAgcHJpdmF0ZSBfc3RhdGU6IGFueTtcbiAgcHJpdmF0ZSBfcm90YXRlU3RhcnQ6IFZlY3RvcjI7XG4gIHByaXZhdGUgX3JvdGF0ZUVuZDogVmVjdG9yMjtcbiAgcHJpdmF0ZSBfcm90YXRlRGVsdGE6IFZlY3RvcjI7XG4gIHByaXZhdGUgX3BhblN0YXJ0OiBWZWN0b3IyO1xuICBwcml2YXRlIF9wYW5FbmQ6IFZlY3RvcjI7XG4gIHByaXZhdGUgX3BhbkRlbHRhOiBWZWN0b3IyO1xuICBwcml2YXRlIF96b29tU3RhcnQ6IFZlY3RvcjI7XG4gIHByaXZhdGUgX3pvb21FbmQ6IFZlY3RvcjI7XG4gIHByaXZhdGUgX3pvb21EZWx0YTogVmVjdG9yMjtcblxuICBjb25zdHJ1Y3RvcihjYW1lcmE6IENhbWVyYSkge1xuICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvY3VtZW50O1xuICAgIHRoaXMubWFpbkVsZW1lbnQgPSBjYW1lcmEuZW5naW5lLmNhbnZhcy5fY2FudmFzO1xuICAgIHRoaXMuZm92ID0gNDU7XG4gICAgdGhpcy50YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuICAgIHRoaXMudXAgPSBuZXcgVmVjdG9yMygwLCAxLCAwKTtcbiAgICB0aGlzLm1pbkRpc3RhbmNlID0gMC4xO1xuICAgIHRoaXMubWF4RGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICB0aGlzLm1pblpvb20gPSAwLjA7XG4gICAgdGhpcy5tYXhab29tID0gSW5maW5pdHk7XG4gICAgdGhpcy5taW5Qb2xhckFuZ2xlID0gMDtcbiAgICB0aGlzLm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJO1xuICAgIHRoaXMubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5O1xuICAgIHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7XG4gICAgdGhpcy5lbmFibGVEYW1waW5nID0gdHJ1ZTtcbiAgICB0aGlzLmRhbXBpbmdGYWN0b3IgPSAwLjE7XG4gICAgdGhpcy56b29tRmFjdG9yID0gMC4yO1xuICAgIHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XG4gICAgdGhpcy56b29tU3BlZWQgPSAxLjA7XG4gICAgdGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuICAgIHRoaXMucm90YXRlU3BlZWQgPSAxLjA7XG4gICAgdGhpcy5lbmFibGVQYW4gPSB0cnVlO1xuICAgIHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMubW91c2VCdXR0b25zID0ge1xuICAgICAgT1JCSVQ6IDAsXG4gICAgICBaT09NOiAxLFxuICAgICAgUEFOOiAyLFxuICAgIH07XG5cbiAgICAvLyBSZXVzZSBvYmplY3RzIHRvIHByZXZlbnQgZXhjZXNzaXZlIHN0YWNrIGFsbG9jYXRpb24uXG4gICAgLy8gdXBkYXRlXG4gICAgdGhpcy5fcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuICAgIHRoaXMuX29mZnNldCA9IG5ldyBWZWN0b3IzKCk7XG4gICAgdGhpcy5fc3BoZXJpY2FsID0gbmV3IFNwaGVyaWNhbCgpO1xuICAgIHRoaXMuX3NwaGVyaWNhbERlbHRhID0gbmV3IFNwaGVyaWNhbCgpO1xuICAgIHRoaXMuX3NwaGVyaWNhbER1bXAgPSBuZXcgU3BoZXJpY2FsKCk7XG4gICAgdGhpcy5fem9vbUZyYWcgPSAwO1xuICAgIHRoaXMuX3NjYWxlID0gMTtcbiAgICB0aGlzLl9wYW5PZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuICAgIHRoaXMuX2lzTW91c2VVcCA9IHRydWU7XG5cbiAgICAvLyBwYW5cbiAgICB0aGlzLl92UGFuID0gbmV3IFZlY3RvcjMoKTtcblxuICAgIC8vIHN0YXRlXG4gICAgdGhpcy5fcm90YXRlU3RhcnQgPSBuZXcgVmVjdG9yMigpO1xuICAgIHRoaXMuX3JvdGF0ZUVuZCA9IG5ldyBWZWN0b3IyKCk7XG4gICAgdGhpcy5fcm90YXRlRGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG4gICAgdGhpcy5fcGFuU3RhcnQgPSBuZXcgVmVjdG9yMigpO1xuICAgIHRoaXMuX3BhbkVuZCA9IG5ldyBWZWN0b3IyKCk7XG4gICAgdGhpcy5fcGFuRGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG4gICAgdGhpcy5fem9vbVN0YXJ0ID0gbmV3IFZlY3RvcjIoKTtcbiAgICB0aGlzLl96b29tRW5kID0gbmV3IFZlY3RvcjIoKTtcbiAgICB0aGlzLl96b29tRGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG4gICAgdGhpcy5TVEFURSA9IHtcbiAgICAgIE5PTkU6IC0xLFxuICAgICAgUk9UQVRFOiAwLFxuICAgICAgWk9PTTogMSxcbiAgICAgIFBBTjogMixcbiAgICB9O1xuICAgIHRoaXMuX3N0YXRlID0gdGhpcy5TVEFURS5OT05FO1xuXG4gICAgdGhpcy5jb25zdEV2ZW50cyA9IFtcbiAgICAgIHsgdHlwZTogJ21vdXNlZG93bicsIGxpc3RlbmVyOiB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcykgfSxcbiAgICAgIHsgdHlwZTogJ3doZWVsJywgbGlzdGVuZXI6IHRoaXMub25Nb3VzZVdoZWVsLmJpbmQodGhpcykgfSxcbiAgICBdO1xuXG4gICAgdGhpcy5tb3VzZVVwRXZlbnRzID0gW1xuICAgICAgeyB0eXBlOiAnbW91c2Vtb3ZlJywgbGlzdGVuZXI6IHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKSB9LFxuICAgICAgeyB0eXBlOiAnbW91c2V1cCcsIGxpc3RlbmVyOiB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpIH0sXG4gICAgXTtcblxuICAgIC8vIG9uTW91c2VEb3du6YeM6Z2i5aSE55CG5LqGbW91c2Vtb3Zl5ZKMbW91c2V1cOeahOS6i+S7tlxuICAgIHRoaXMuY29uc3RFdmVudHMuZm9yRWFjaCgoZWxlKSA9PiB7XG4gICAgICBpZiAoZWxlLmVsZW1lbnQpIHtcbiAgICAgICAgZWxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihlbGUudHlwZSwgZWxlLmxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1haW5FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZWxlLnR5cGUsIGVsZS5saXN0ZW5lciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBsaWZlIGN5Y2xlIG9mIHRyYWNrIGNvbnRyb2wgZGVzdHJ1Y3Rpb24sIHVzZWQgdG8gcmVtb3ZlIGxpc3RlbmVyIGV2ZW50cy5cbiAgICovXG4gIG9uRGVzdG9yeSgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnN0RXZlbnRzLmZvckVhY2goKGVsZSkgPT4ge1xuICAgICAgaWYgKGVsZS5lbGVtZW50KSB7XG4gICAgICAgIGVsZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlLnR5cGUsIGVsZS5saXN0ZW5lciwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tYWluRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGVsZS50eXBlLCBlbGUubGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHRoaXMuZG9tRWxlbWVudC5ib2R5IDogdGhpcy5kb21FbGVtZW50O1xuICAgIHRoaXMubWFpbkVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm1vdXNlVXBFdmVudHNbMF0udHlwZSwgdGhpcy5tb3VzZVVwRXZlbnRzWzBdLmxpc3RlbmVyLCBmYWxzZSk7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubW91c2VVcEV2ZW50c1sxXS50eXBlLCB0aGlzLm1vdXNlVXBFdmVudHNbMV0ubGlzdGVuZXIsIGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgb3JiaXQgY29udHJvbHMgdGhlIGxpZmUgY3ljbGUsIHVwZGF0aW5nIHRoZSB2aWV3IGJhc2VkIG9uIHRoZSBjdXJyZW50IG1vdXNlIGNoYW5nZXMuXG4gICAqIEBwYXJhbSBkdGltZSBVc2VkIHRvIGNhbGN1bGF0ZSBob3cgbWFueSBkZWdyZWVzIHRvIHJvdGF0ZS5cbiAgICovXG4gIG9uVXBkYXRlKGR0aW1lOiBudW1iZXIpIHtcbiAgICBjb25zdCBwb3NpdGlvbjogVmVjdG9yMyA9IHRoaXMuY2FtZXJhLnRyYW5zZm9ybS5wb3NpdGlvbjtcbiAgICBwb3NpdGlvbi5jbG9uZVRvKHRoaXMuX29mZnNldCk7XG4gICAgdGhpcy5fb2Zmc2V0LnN1YnRyYWN0KHRoaXMudGFyZ2V0KTtcbiAgICB0aGlzLl9zcGhlcmljYWwuc2V0RnJvbVZlYzModGhpcy5fb2Zmc2V0KTtcblxuICAgIGlmICh0aGlzLmF1dG9Sb3RhdGUgJiYgdGhpcy5fc3RhdGUgPT09IHRoaXMuU1RBVEUuTk9ORSkge1xuICAgICAgdGhpcy5yb3RhdGVMZWZ0KHRoaXMuZ2V0QXV0b1JvdGF0aW9uQW5nbGUoZHRpbWUpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zcGhlcmljYWwudGhldGEgKz0gdGhpcy5fc3BoZXJpY2FsRGVsdGEudGhldGE7XG4gICAgdGhpcy5fc3BoZXJpY2FsLnBoaSArPSB0aGlzLl9zcGhlcmljYWxEZWx0YS5waGk7XG5cbiAgICB0aGlzLl9zcGhlcmljYWwudGhldGEgPSBNYXRoLm1heCh0aGlzLm1pbkF6aW11dGhBbmdsZSwgTWF0aC5taW4odGhpcy5tYXhBemltdXRoQW5nbGUsIHRoaXMuX3NwaGVyaWNhbC50aGV0YSkpO1xuICAgIHRoaXMuX3NwaGVyaWNhbC5waGkgPSBNYXRoLm1heCh0aGlzLm1pblBvbGFyQW5nbGUsIE1hdGgubWluKHRoaXMubWF4UG9sYXJBbmdsZSwgdGhpcy5fc3BoZXJpY2FsLnBoaSkpO1xuICAgIHRoaXMuX3NwaGVyaWNhbC5tYWtlU2FmZSgpO1xuXG4gICAgaWYgKHRoaXMuX3NjYWxlICE9PSAxKSB7XG4gICAgICB0aGlzLl96b29tRnJhZyA9IHRoaXMuX3NwaGVyaWNhbC5yYWRpdXMgKiAodGhpcy5fc2NhbGUgLSAxKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zcGhlcmljYWwucmFkaXVzICs9IHRoaXMuX3pvb21GcmFnO1xuICAgIHRoaXMuX3NwaGVyaWNhbC5yYWRpdXMgPSBNYXRoLm1heCh0aGlzLm1pbkRpc3RhbmNlLCBNYXRoLm1pbih0aGlzLm1heERpc3RhbmNlLCB0aGlzLl9zcGhlcmljYWwucmFkaXVzKSk7XG5cbiAgICB0aGlzLnRhcmdldC5hZGQodGhpcy5fcGFuT2Zmc2V0KTtcbiAgICB0aGlzLl9zcGhlcmljYWwuc2V0VG9WZWMzKHRoaXMuX29mZnNldCk7XG4gICAgdGhpcy50YXJnZXQuY2xvbmVUbyh0aGlzLl9wb3NpdGlvbik7XG4gICAgdGhpcy5fcG9zaXRpb24uYWRkKHRoaXMuX29mZnNldCk7XG5cbiAgICB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24gPSB0aGlzLl9wb3NpdGlvbjtcbiAgICB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ubG9va0F0KHRoaXMudGFyZ2V0LCB0aGlzLnVwKTtcblxuICAgIGlmICh0aGlzLmVuYWJsZURhbXBpbmcgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuX3NwaGVyaWNhbER1bXAudGhldGEgKj0gMSAtIHRoaXMuZGFtcGluZ0ZhY3RvcjtcbiAgICAgIHRoaXMuX3NwaGVyaWNhbER1bXAucGhpICo9IDEgLSB0aGlzLmRhbXBpbmdGYWN0b3I7XG4gICAgICB0aGlzLl96b29tRnJhZyAqPSAxIC0gdGhpcy56b29tRmFjdG9yO1xuXG4gICAgICBpZiAodGhpcy5faXNNb3VzZVVwKSB7XG4gICAgICAgIHRoaXMuX3NwaGVyaWNhbERlbHRhLnRoZXRhID0gdGhpcy5fc3BoZXJpY2FsRHVtcC50aGV0YTtcbiAgICAgICAgdGhpcy5fc3BoZXJpY2FsRGVsdGEucGhpID0gdGhpcy5fc3BoZXJpY2FsRHVtcC5waGk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zcGhlcmljYWxEZWx0YS5zZXQoMCwgMCwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NwaGVyaWNhbERlbHRhLnNldCgwLCAwLCAwKTtcbiAgICAgIHRoaXMuX3pvb21GcmFnID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLl9zY2FsZSA9IDE7XG4gICAgdGhpcy5fcGFuT2Zmc2V0LnNldFZhbHVlKDAsIDAsIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBsZWZ0IGFuZCByaWdodCB0cmFuc2xhdGlvbi5cbiAgICogQHBhcmFtIGRpc3RhbmNlIENhbWVyYSB0cmFuc2xhdGlvbiBkaXN0YW5jZS5cbiAgICogQHBhcmFtIHdvcmxkTWF0cml4IENhbWVyYSdzIHdvcmxkIGNvb3JkaW5hdGUgbWF0cml4LlxuICAgKi9cbiAgcGFuTGVmdChkaXN0YW5jZTogbnVtYmVyLCB3b3JsZE1hdHJpeDogTWF0cml4NCkge1xuICAgIGNvbnN0IGUgPSB3b3JsZE1hdHJpeC5lbGVtZW50cztcbiAgICB0aGlzLl92UGFuLnNldFZhbHVlKGVbMF0sIGVbMV0sIGVbMl0pO1xuICAgIHRoaXMuX3ZQYW4uc2NhbGUoZGlzdGFuY2UpO1xuICAgIHRoaXMuX3Bhbk9mZnNldC5hZGQodGhpcy5fdlBhbik7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHVwIGFuZCBkb3duIHRyYW5zbGF0aW9uLlxuICAgKiBAcGFyYW0gZGlzdGFuY2UgQ2FtZXJhIHRyYW5zbGF0aW9uIGRpc3RhbmNlLlxuICAgKiBAcGFyYW0gd29ybGRNYXRyaXggQ2FtZXJhJ3Mgd29ybGQgY29vcmRpbmF0ZSBtYXRyaXguXG4gICAqL1xuICBwYW5VcChkaXN0YW5jZTogbnVtYmVyLCB3b3JsZE1hdHJpeDogTWF0cml4NCkge1xuICAgIGNvbnN0IGUgPSB3b3JsZE1hdHJpeC5lbGVtZW50cztcbiAgICB0aGlzLl92UGFuLnNldFZhbHVlKGVbNF0sIGVbNV0sIGVbNl0pO1xuICAgIHRoaXMuX3ZQYW4uc2NhbGUoZGlzdGFuY2UpO1xuICAgIHRoaXMuX3Bhbk9mZnNldC5hZGQodGhpcy5fdlBhbik7XG4gIH1cblxuICAvKipcbiAgICogUGFuIGFjY29yZGluZyB0byBwYW5MZWZ0IGFuZCBwYW5VcC5cbiAgICogQHBhcmFtIGRlbHRhWCBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBtb3VzZSBhbmQgdGhlIHgtZGlyZWN0aW9uIG9mIHRoZSBwcmV2aW91cyB2aWV3LlxuICAgKiBAcGFyYW0gZGVsdGFZIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIG1vdXNlIGFuZCB0aGUgeS1kaXJlY3Rpb24gb2YgdGhlIHByZXZpb3VzIHZpZXdcbiAgICovXG4gIHBhbihkZWx0YVg6IG51bWJlciwgZGVsdGFZOiBudW1iZXIpIHtcbiAgICAvLyBwZXJzcGVjdGl2ZSBvbmx5XG4gICAgY29uc3QgcG9zaXRpb246IFZlY3RvcjMgPSB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb247XG4gICAgcG9zaXRpb24uY2xvbmVUbyh0aGlzLl92UGFuKTtcbiAgICB0aGlzLl92UGFuLnN1YnRyYWN0KHRoaXMudGFyZ2V0KTtcbiAgICBsZXQgdGFyZ2V0RGlzdGFuY2UgPSB0aGlzLl92UGFuLmxlbmd0aCgpO1xuXG4gICAgdGFyZ2V0RGlzdGFuY2UgKj0gKHRoaXMuZm92IC8gMikgKiAoTWF0aC5QSSAvIDE4MCk7XG4gICAgLy8g5oiR5Lus5Zyo6L+Z6YeM5Y+q5L2/55SoY2xpZW50SGVpZ2h077yM6L+Z5qC357q15qiq5q+U5LiN5Lya5omt5puy6YCf5bqmXG4gICAgdGhpcy5wYW5MZWZ0KC0yICogZGVsdGFYICogKHRhcmdldERpc3RhbmNlIC8gdGhpcy5tYWluRWxlbWVudC5jbGllbnRIZWlnaHQpLCB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ud29ybGRNYXRyaXgpO1xuICAgIHRoaXMucGFuVXAoMiAqIGRlbHRhWSAqICh0YXJnZXREaXN0YW5jZSAvIHRoaXMubWFpbkVsZW1lbnQuY2xpZW50SGVpZ2h0KSwgdGhpcy5jYW1lcmEudHJhbnNmb3JtLndvcmxkTWF0cml4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBab29tIGluIHZpZXcuXG4gICAqIEBwYXJhbSB6b29tU2NhbGUgWm9vbSBzY2FsZS5cbiAgICovXG4gIHpvb21Jbih6b29tU2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIHBlcnNwZWN0aXZlIG9ubHlcbiAgICB0aGlzLl9zY2FsZSAqPSB6b29tU2NhbGU7XG4gIH1cblxuICAvKipcbiAgICogWm9vbSBvdXQgdmlldy5cbiAgICogQHBhcmFtIHpvb21TY2FsZSBab29tIHNjYWxlLlxuICAgKi9cbiAgem9vbU91dCh6b29tU2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIHBlcnNwZWN0aXZlIG9ubHlcbiAgICB0aGlzLl9zY2FsZSAvPSB6b29tU2NhbGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHpvb20gbGV2ZWwuXG4gICAqIEByZXR1cm5zIFpvb20gc2NhbGUuXG4gICAqL1xuICBnZXRab29tU2NhbGUoKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KDAuOTUsIHRoaXMuem9vbVNwZWVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSb3RhdGUgbGVmdCBhbmQgcmlnaHQuXG4gICAqIEBwYXJhbSByYWRpYW4gUm90YXRpb24gYW5nbGUsIHJhZGlhbiBzeXN0ZW0uXG4gICAqL1xuICByb3RhdGVMZWZ0KHJhZGlhbjogbnVtYmVyKSB7XG4gICAgdGhpcy5fc3BoZXJpY2FsRGVsdGEudGhldGEgLT0gcmFkaWFuO1xuICAgIGlmICh0aGlzLmVuYWJsZURhbXBpbmcpIHtcbiAgICAgIHRoaXMuX3NwaGVyaWNhbER1bXAudGhldGEgPSAtcmFkaWFuO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSb3RhdGUgdXAgYW5kIGRvd24uXG4gICAqIEBwYXJhbSByYWRpYW4gUm90YXRpb24gYW5nbGUsIHJhZGlhbiBzeXN0ZW0uXG4gICAqL1xuICByb3RhdGVVcChyYWRpYW46IG51bWJlcikge1xuICAgIHRoaXMuX3NwaGVyaWNhbERlbHRhLnBoaSAtPSByYWRpYW47XG4gICAgaWYgKHRoaXMuZW5hYmxlRGFtcGluZykge1xuICAgICAgdGhpcy5fc3BoZXJpY2FsRHVtcC5waGkgPSAtcmFkaWFuO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYXV0byByb3RhdGlvbiBhbmdsZS5cbiAgICogQHBhcmFtIGR0aW1lIFJlbmRlcmluZyB0aGUgdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGN1cnJlbnQgZnJhbWUgYW5kIHRoZSBwcmV2aW91cyBmcmFtZS5cbiAgICogQHJldHVybnMgQXV0byByb3RhdGUgc3BlZWQuXG4gICAqL1xuICBnZXRBdXRvUm90YXRpb25BbmdsZShkdGltZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuICh0aGlzLmF1dG9Sb3RhdGVTcGVlZCAvIDEwMDApICogZHRpbWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHJvdGF0ZSBzdGFydCB3aGVuIHN0YXRlIGlzIHJvdGF0ZS5cbiAgICogQHBhcmFtIGV2ZW50IE1vdXNlIGV2ZW50LlxuICAgKi9cbiAgaGFuZGxlTW91c2VEb3duUm90YXRlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5fcm90YXRlU3RhcnQuc2V0VmFsdWUoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHpvb20gc3RhcnQgd2hlbiBzdGF0ZSBpcyB6b29tLlxuICAgKiBAcGFyYW0gZXZlbnQgTW91c2UgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVNb3VzZURvd25ab29tKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5fem9vbVN0YXJ0LnNldFZhbHVlKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBwYW4gc3RhcnQgd2hlbiBzdGF0ZSBpcyBwYW4uXG4gICAqIEBwYXJhbSBldmVudCBNb3VzZSBldmVudC5cbiAgICovXG4gIGhhbmRsZU1vdXNlRG93blBhbihldmVudDogTW91c2VFdmVudCkge1xuICAgIHRoaXMuX3BhblN0YXJ0LnNldFZhbHVlKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgcm90YXRpb24gZGlmZmVyZW5jZSB3aGVuIHRoZSBtb3VzZSBpcyBtb3ZlZC5cbiAgICogQHBhcmFtIGV2ZW50IE1vdXNlIGV2ZW50LlxuICAgKi9cbiAgaGFuZGxlTW91c2VNb3ZlUm90YXRlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5fcm90YXRlRW5kLnNldFZhbHVlKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgIFZlY3RvcjIuc3VidHJhY3QodGhpcy5fcm90YXRlRW5kLCB0aGlzLl9yb3RhdGVTdGFydCwgdGhpcy5fcm90YXRlRGVsdGEpO1xuXG4gICAgLy8geOaWueWQkeW5s+enu+eahOeZvuWIhuavlFxuICAgIHRoaXMucm90YXRlTGVmdCgyICogTWF0aC5QSSAqICh0aGlzLl9yb3RhdGVEZWx0YS54IC8gdGhpcy5tYWluRWxlbWVudC5jbGllbnRXaWR0aCkgKiB0aGlzLnJvdGF0ZVNwZWVkKTtcbiAgICAvLyB55pa55ZCR5bmz56e755qE55m+5YiG5q+UXG4gICAgdGhpcy5yb3RhdGVVcCgyICogTWF0aC5QSSAqICh0aGlzLl9yb3RhdGVEZWx0YS55IC8gdGhpcy5tYWluRWxlbWVudC5jbGllbnRIZWlnaHQpICogdGhpcy5yb3RhdGVTcGVlZCk7XG4gICAgLy8g5bCGZW5k6K6+572u5Li65paw55qEc3RhcnRcbiAgICB0aGlzLl9yb3RhdGVFbmQuY2xvbmVUbyh0aGlzLl9yb3RhdGVTdGFydCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSByb3RhdGlvbiBkaWZmZXJlbmNlIHdoZW4gdGhlIG1vdXNlIGlzIG1vdmVkLlxuICAgKiBAcGFyYW0gZXZlbnQgTW91c2UgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVNb3VzZU1vdmVab29tKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5fem9vbUVuZC5zZXRWYWx1ZShldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICBWZWN0b3IyLnN1YnRyYWN0KHRoaXMuX3pvb21FbmQsIHRoaXMuX3pvb21TdGFydCwgdGhpcy5fem9vbURlbHRhKTtcblxuICAgIGlmICh0aGlzLl96b29tRGVsdGEueSA+IDApIHtcbiAgICAgIHRoaXMuem9vbU91dCh0aGlzLmdldFpvb21TY2FsZSgpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3pvb21EZWx0YS55IDwgMCkge1xuICAgICAgdGhpcy56b29tSW4odGhpcy5nZXRab29tU2NhbGUoKSk7XG4gICAgfVxuICAgIC8vIOWwhmVuZOWkjeWItuWIsOaWsOeahHN0YXJ0XG4gICAgdGhpcy5fem9vbUVuZC5jbG9uZVRvKHRoaXMuX3pvb21TdGFydCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBwYW4gZGlmZmVyZW5jZSB3aGVuIHRoZSBtb3VzZSBpcyBtb3ZlZC5cbiAgICogQHBhcmFtIGV2ZW50IE1vdXNlIGV2ZW50LlxuICAgKi9cbiAgaGFuZGxlTW91c2VNb3ZlUGFuKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5fcGFuRW5kLnNldFZhbHVlKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgIFZlY3RvcjIuc3VidHJhY3QodGhpcy5fcGFuRW5kLCB0aGlzLl9wYW5TdGFydCwgdGhpcy5fcGFuRGVsdGEpO1xuXG4gICAgdGhpcy5wYW4odGhpcy5fcGFuRGVsdGEueCwgdGhpcy5fcGFuRGVsdGEueSk7XG5cbiAgICB0aGlzLl9wYW5FbmQuY2xvbmVUbyh0aGlzLl9wYW5TdGFydCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB3aGVlbCBkaWZmZXJlbmNlIHdoZW4gdGhlIG1vdXNlIGlzIG1vdmVkLlxuICAgKiBAcGFyYW0gZXZlbnQgTW91c2UgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVNb3VzZVdoZWVsKGV2ZW50OiBNb3VzZVdoZWVsRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQuZGVsdGFZIDwgMCkge1xuICAgICAgdGhpcy56b29tSW4odGhpcy5nZXRab29tU2NhbGUoKSk7XG4gICAgfSBlbHNlIGlmIChldmVudC5kZWx0YVkgPiAwKSB7XG4gICAgICB0aGlzLnpvb21PdXQodGhpcy5nZXRab29tU2NhbGUoKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byB0aGUgbW91c2UgY2xpY2sgZXZlbnQsXG4gICAqIGFuZCBzZXQgdGhlIGNvbnRleHQgc3RhdGUgdG8gdGhlIG1vdXNlIGNsaWNrIHR5cGUgYWNjb3JkaW5nIHRvIHRoZSBjbGljayB0eXBlLFxuICAgKiBhbmQgdGhlbiBzZWxlY3QgdGhlIGNvcnJlc3BvbmRpbmcgcHJvY2Vzc2luZyBtZXRob2RcbiAgICogQHBhcmFtIGV2ZW50IE1vdXNlIGV2ZW50LlxuICAgKi9cbiAgb25Nb3VzZURvd24oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdGhpcy5faXNNb3VzZVVwID0gZmFsc2U7XG5cbiAgICBzd2l0Y2ggKGV2ZW50LmJ1dHRvbikge1xuICAgICAgY2FzZSB0aGlzLm1vdXNlQnV0dG9ucy5PUkJJVDpcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZURvd25Sb3RhdGUoZXZlbnQpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuU1RBVEUuUk9UQVRFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGhpcy5tb3VzZUJ1dHRvbnMuWk9PTTpcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZURvd25ab29tKGV2ZW50KTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLlNUQVRFLlpPT007XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0aGlzLm1vdXNlQnV0dG9ucy5QQU46XG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VEb3duUGFuKGV2ZW50KTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLlNUQVRFLlBBTjtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3N0YXRlICE9PSB0aGlzLlNUQVRFLk5PTkUpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gdGhpcy5kb21FbGVtZW50LmJvZHkgOiB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgICAvLyBjYW52YXPlhYPntKDnm5HlkKxtb3Zl5LqL5Lu2XG4gICAgICAvLyBvbk1vdXNlTW92ZVxuICAgICAgdGhpcy5tYWluRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMubW91c2VVcEV2ZW50c1swXS50eXBlLCB0aGlzLm1vdXNlVXBFdmVudHNbMF0ubGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgIC8vIOeItue6p+WFg+e0oOebkeWQrOm8oOagh3Vw5LqL5Lu2XG4gICAgICAvLyBvbk1vdXNlVXBcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm1vdXNlVXBFdmVudHNbMV0udHlwZSwgdGhpcy5tb3VzZVVwRXZlbnRzWzFdLmxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vbml0b3IgbW91c2UgbW92ZW1lbnQgZXZlbnRzLFxuICAgKiBzZWxlY3QgdGhlIGNvcnJlc3BvbmRpbmcgbW92ZW1lbnQgcHJvY2Vzc2luZyBtZXRob2QgZm9yIHRoZSBjdXJyZW50IGNvbnRleHQgc3RhdGUuXG4gICAqIEBwYXJhbSBldmVudCBNb3VzZSBldmVudC5cbiAgICovXG4gIG9uTW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHN3aXRjaCAodGhpcy5fc3RhdGUpIHtcbiAgICAgIGNhc2UgdGhpcy5TVEFURS5ST1RBVEU6XG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VNb3ZlUm90YXRlKGV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgdGhpcy5TVEFURS5aT09NOlxuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlTW92ZVpvb20oZXZlbnQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSB0aGlzLlNUQVRFLlBBTjpcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU1vdmVQYW4oZXZlbnQpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuIGZvciB0aGUgbW91c2UgdXAgZXZlbnQsXG4gICAqIHJlbW92ZSB0aGUgY29ycmVzcG9uZGluZyBsaXN0ZW5lciBldmVudCBhbmQgc2V0IHRoZSBjb250ZXh0IHN0YXRlIHRvIG5vbmUuXG4gICAqL1xuICBvbk1vdXNlVXAoKSB7XG4gICAgdGhpcy5faXNNb3VzZVVwID0gdHJ1ZTtcblxuICAgIHRoaXMubW91c2VVcEV2ZW50cy5mb3JFYWNoKChlbGUpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gdGhpcy5kb21FbGVtZW50LmJvZHkgOiB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlLnR5cGUsIGVsZS5saXN0ZW5lciwgZmFsc2UpO1xuICAgICAgdGhpcy5tYWluRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGVsZS50eXBlLCBlbGUubGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3N0YXRlID0gdGhpcy5TVEFURS5OT05FO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byB0aGUgbW91c2Ugd2hlZWwgZXZlbnQsXG4gICAqIHByZXZlbnQgdGhlIGRlZmF1bHQgYmVoYXZpb3IsXG4gICAqIGFuZCBzY2FsZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgZXZlbnQgZXZlbnQgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSBldmVudCBNb3VzZSB3aGVlbCBldmVudC5cbiAgICovXG4gIG9uTW91c2VXaGVlbChldmVudDogTW91c2VXaGVlbEV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIHRoaXMuaGFuZGxlTW91c2VXaGVlbChldmVudCk7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBVdGlsID0ge1xuICBpc0FycmF5OlxuICAgICdpc0FycmF5JyBpbiBBcnJheVxuICAgICAgPyBBcnJheS5pc0FycmF5XG4gICAgICA6ICh2YWx1ZTogYW55KTogYm9vbGVhbiA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgICAgICB9LFxuICBpc0FycmF5TGlrZSh4OiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7XG4gIH0sXG4gIGNsb25lPFQ+KG9iajogVCk6IFQge1xuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGxldCByc3Q7XG4gICAgaWYgKFV0aWwuaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgcnN0ID0gKG9iaiBhcyBhbnkpLnNsaWNlKCk7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IChvYmogYXMgYW55KS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcnN0W2ldID0gVXRpbC5jbG9uZShvYmpbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByc3QgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgayBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgIHJzdFtrXSA9IFV0aWwuY2xvbmUob2JqW2tdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByc3Q7XG4gIH0sXG5cbiAgZG93bmxvYWRCbG9iKGJsb2I6IEJsb2IsIGZpbGVOYW1lOiBzdHJpbmcgPSAnJykge1xuICAgIGxldCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICBsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xuICAgIGEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBhLmhyZWYgPSB1cmw7XG4gICAgYS5kb3dubG9hZCA9IGZpbGVOYW1lO1xuICAgIGEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAoYS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIGEucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhLmNsaWNrKCk7XG4gICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBpc0FycmF5TGlrZSA9IDxUPih4OiBhbnkpOiB4IGlzIEFycmF5TGlrZTxUPiA9PlxuICB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7XG5cbi8qKlxuICogRmFzdGx5IHJlbW92ZSBhbiBlbGVtZW50IGZyb20gYXJyYXkuXG4gKiBAcGFyYW0gYXJyYXkgLSBBcnJheVxuICogQHBhcmFtIGl0ZW0gLSBFbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGcm9tQXJyYXkoYXJyYXk6IGFueVtdLCBpdGVtOiBhbnkpOiBib29sZWFuIHtcbiAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGxhc3QgPSBhcnJheS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggIT09IGxhc3QpIHtcbiAgICBjb25zdCBlbmQgPSBhcnJheVtsYXN0XTtcbiAgICBhcnJheVtpbmRleF0gPSBlbmQ7XG4gIH1cbiAgYXJyYXkubGVuZ3RoLS07XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYW4gb2JqZWN0IG9yIGFycmF5LlxuICogQHBhcmFtIG9iaiBPYmplY3Qgb3IgQXJyYXkuXG4gKiBAcmV0dXJucyBPYmplY3QgdmFsdWUgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBPYmplY3RWYWx1ZXMob2JqOiBhbnkpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKChrZXk6IGFueSkgPT4gb2JqW2tleV0pO1xufVxuIiwiaW1wb3J0IHsgcmVtb3ZlRnJvbUFycmF5IH0gZnJvbSAnLi9iYXNlL1V0aWwnO1xuaW1wb3J0IHsgVXBkYXRlRmxhZ01hbmFnZXIgfSBmcm9tICcuL1VwZGF0ZUZsYWdNYW5hZ2VyJztcblxuLyoqXG4gKiBVc2VkIHRvIHVwZGF0ZSB0YWdzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVXBkYXRlRmxhZyB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2ZsYWdNYW5hZ2VyczogVXBkYXRlRmxhZ01hbmFnZXJbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBEaXNwYXRjaC5cbiAgICogQHBhcmFtIHBhcmFtIC0gUGFyYW1ldGVyXG4gICAqL1xuICBhYnN0cmFjdCBkaXNwYXRjaChwYXJhbT86IE9iamVjdCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENsZWFyLlxuICAgKi9cbiAgY2xlYXJGcm9tTWFuYWdlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5fcmVtb3ZlRnJvbU1hbmFnZXJzKCk7XG4gICAgdGhpcy5fZmxhZ01hbmFnZXJzLmxlbmd0aCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveS5cbiAgICovXG4gIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5fcmVtb3ZlRnJvbU1hbmFnZXJzKCk7XG4gICAgdGhpcy5fZmxhZ01hbmFnZXJzID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbW92ZUZyb21NYW5hZ2VycygpOiB2b2lkIHtcbiAgICBjb25zdCBmbGFnTWFuYWdlcnMgPSB0aGlzLl9mbGFnTWFuYWdlcnM7XG4gICAgZm9yIChsZXQgaSA9IDAsIG4gPSBmbGFnTWFuYWdlcnMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICByZW1vdmVGcm9tQXJyYXkoZmxhZ01hbmFnZXJzW2ldLl91cGRhdGVGbGFncywgdGhpcyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBVcGRhdGVGbGFnIH0gZnJvbSAnLi9VcGRhdGVGbGFnJztcblxuLyoqXG4gKiBVc2VkIHRvIHVwZGF0ZSB0YWdzLlxuICovXG5leHBvcnQgY2xhc3MgQm9vbFVwZGF0ZUZsYWcgZXh0ZW5kcyBVcGRhdGVGbGFnIHtcbiAgLyoqIEZsYWcuICovXG4gIGZsYWcgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgZGlzcGF0Y2goKTogdm9pZCB7XG4gICAgdGhpcy5mbGFnID0gdHJ1ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVXBkYXRlRmxhZyB9IGZyb20gJy4vVXBkYXRlRmxhZyc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBVcGRhdGVGbGFnTWFuYWdlciB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3VwZGF0ZUZsYWdzOiBVcGRhdGVGbGFnW10gPSBbXTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgVXBkYXRlRmxhZy5cbiAgICogQHJldHVybnMgLSBUaGUgVXBkYXRlRmxhZy5cbiAgICovXG4gIGNyZWF0ZUZsYWc8VCBleHRlbmRzIFVwZGF0ZUZsYWc+KHR5cGU6IG5ldyAoKSA9PiBUKTogVCB7XG4gICAgY29uc3QgZmxhZyA9IG5ldyB0eXBlKCk7XG4gICAgdGhpcy5hZGRGbGFnKGZsYWcpO1xuICAgIHJldHVybiBmbGFnO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIFVwZGF0ZUZsYWcuXG4gICAqIEBwYXJhbSBmbGFnIC0gVGhlIFVwZGF0ZUZsYWcuXG4gICAqL1xuICBhZGRGbGFnKGZsYWc6IFVwZGF0ZUZsYWcpOiB2b2lkIHtcbiAgICB0aGlzLl91cGRhdGVGbGFncy5wdXNoKGZsYWcpO1xuICAgIGZsYWcuX2ZsYWdNYW5hZ2Vycy5wdXNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoLlxuICAgKi9cbiAgZGlzcGF0Y2gocGFyYW0/OiBPYmplY3QpOiB2b2lkIHtcbiAgICBjb25zdCB1cGRhdGVGbGFncyA9IHRoaXMuX3VwZGF0ZUZsYWdzO1xuICAgIGZvciAobGV0IGkgPSB1cGRhdGVGbGFncy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdXBkYXRlRmxhZ3NbaV0uZGlzcGF0Y2gocGFyYW0pO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgVmVjdG9yMywgTWF0cml4NCwgUXVhdGVybmlvbiwgTWF0aFV0aWwsIE1hdHJpeDMgfSBmcm9tICcuLi9tYXRoJztcbmltcG9ydCB7IEJvb2xVcGRhdGVGbGFnIH0gZnJvbSAnLi9Cb29sVXBkYXRlRmxhZyc7XG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL0VudGl0eSc7XG5pbXBvcnQgeyBVcGRhdGVGbGFnTWFuYWdlciB9IGZyb20gJy4vVXBkYXRlRmxhZ01hbmFnZXInO1xuXG4vKipcbiAqIFVzZWQgdG8gaW1wbGVtZW50IHRyYW5zZm9ybWF0aW9uIHJlbGF0ZWQgZnVuY3Rpb25zLlxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtIHtcbiAgcHJpdmF0ZSBzdGF0aWMgX3RlbXBRdWF0MDogUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG4gIHByaXZhdGUgc3RhdGljIF90ZW1wVmVjMzA6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuICBwcml2YXRlIHN0YXRpYyBfdGVtcFZlYzMxOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcbiAgcHJpdmF0ZSBzdGF0aWMgX3RlbXBWZWMzMjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG4gIHByaXZhdGUgc3RhdGljIF90ZW1wTWF0MzA6IE1hdHJpeDMgPSBuZXcgTWF0cml4MygpO1xuICBwcml2YXRlIHN0YXRpYyBfdGVtcE1hdDMxOiBNYXRyaXgzID0gbmV3IE1hdHJpeDMoKTtcbiAgcHJpdmF0ZSBzdGF0aWMgX3RlbXBNYXQzMjogTWF0cml4MyA9IG5ldyBNYXRyaXgzKCk7XG4gIHByaXZhdGUgc3RhdGljIF90ZW1wTWF0NDE6IE1hdHJpeDQgPSBuZXcgTWF0cml4NCgpO1xuICBwcml2YXRlIHN0YXRpYyBfdGVtcE1hdDQyOiBNYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTtcblxuICBwcml2YXRlIF9wb3NpdGlvbjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG5cbiAgcHJpdmF0ZSBfcm90YXRpb246IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXG4gIHByaXZhdGUgX3JvdGF0aW9uUXVhdGVybmlvbjogUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cbiAgcHJpdmF0ZSBfc2NhbGU6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygxLCAxLCAxKTtcblxuICBwcml2YXRlIF93b3JsZFBvc2l0aW9uOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblxuICBwcml2YXRlIF93b3JsZFJvdGF0aW9uOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblxuICBwcml2YXRlIF93b3JsZFJvdGF0aW9uUXVhdGVybmlvbjogUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cbiAgcHJpdmF0ZSBfbG9zc3lXb3JsZFNjYWxlOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoMSwgMSwgMSk7XG5cbiAgcHJpdmF0ZSBfbG9jYWxNYXRyaXg6IE1hdHJpeDQgPSBuZXcgTWF0cml4NCgpO1xuXG4gIHByaXZhdGUgX3dvcmxkTWF0cml4OiBNYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTtcbiAgcHJpdmF0ZSBfdXBkYXRlRmxhZ01hbmFnZXI6IFVwZGF0ZUZsYWdNYW5hZ2VyID0gbmV3IFVwZGF0ZUZsYWdNYW5hZ2VyKCk7XG4gIHByaXZhdGUgX2lzUGFyZW50RGlydHk6IGJvb2xlYW4gPSB0cnVlO1xuICBwcml2YXRlIF9wYXJlbnRUcmFuc2Zvcm1DYWNoZTogVHJhbnNmb3JtID0gbnVsbDtcblxuICBwcml2YXRlIF9lbnRpdHk6IEVudGl0eTtcblxuICBwcml2YXRlIF9kaXJ0eUZsYWc6IG51bWJlciA9IFRyYW5zZm9ybUZsYWcuV21XcFdlV3FXcztcblxuICAvKipcbiAgICogTG9jYWwgcG9zaXRpb24uXG4gICAqL1xuICBnZXQgcG9zaXRpb24oKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xuICB9XG5cbiAgc2V0IHBvc2l0aW9uKHZhbHVlOiBWZWN0b3IzKSB7XG4gICAgaWYgKHRoaXMuX3Bvc2l0aW9uICE9PSB2YWx1ZSkge1xuICAgICAgdmFsdWUuY2xvbmVUbyh0aGlzLl9wb3NpdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdvcmxkIHBvc2l0aW9uLlxuICAgKi9cbiAgZ2V0IHdvcmxkUG9zaXRpb24oKTogVmVjdG9yMyB7XG4gICAgY29uc3Qgd29ybGRQb3NpdGlvbiA9IHRoaXMuX3dvcmxkUG9zaXRpb247XG4gICAgaWYgKHRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZyhUcmFuc2Zvcm1GbGFnLldvcmxkUG9zaXRpb24pKSB7XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIHdvcmxkUG9zaXRpb24uX29uVmFsdWVDaGFuZ2VkID0gbnVsbDtcbiAgICAgIC8vIGlmICh0aGlzLl9nZXRQYXJlbnRUcmFuc2Zvcm0oKSkge1xuICAgICAgaWYgKG51bGwpIHtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeC5nZXRUcmFuc2xhdGlvbih3b3JsZFBvc2l0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uLmNsb25lVG8od29ybGRQb3NpdGlvbik7XG4gICAgICB9XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIHdvcmxkUG9zaXRpb24uX29uVmFsdWVDaGFuZ2VkID0gdGhpcy5fb25Xb3JsZFBvc2l0aW9uQ2hhbmdlZDtcbiAgICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuV29ybGRQb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdvcmxkUG9zaXRpb247XG4gIH1cblxuICBzZXQgd29ybGRQb3NpdGlvbih2YWx1ZTogVmVjdG9yMykge1xuICAgIGlmICh0aGlzLl93b3JsZFBvc2l0aW9uICE9PSB2YWx1ZSkge1xuICAgICAgdmFsdWUuY2xvbmVUbyh0aGlzLl93b3JsZFBvc2l0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9jYWwgcm90YXRpb24sIGRlZmluaW5nIHRoZSByb3RhdGlvbiB2YWx1ZSBpbiBkZWdyZWVzLlxuICAgKiBSb3RhdGlvbnMgYXJlIHBlcmZvcm1lZCBhcm91bmQgdGhlIFkgYXhpcywgdGhlIFggYXhpcywgYW5kIHRoZSBaIGF4aXMsIGluIHRoYXQgb3JkZXIuXG4gICAqL1xuICBnZXQgcm90YXRpb24oKTogVmVjdG9yMyB7XG4gICAgY29uc3Qgcm90YXRpb24gPSB0aGlzLl9yb3RhdGlvbjtcbiAgICBpZiAodGhpcy5faXNDb250YWluRGlydHlGbGFnKFRyYW5zZm9ybUZsYWcuTG9jYWxFdWxlcikpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgcm90YXRpb24uX29uVmFsdWVDaGFuZ2VkID0gbnVsbDtcbiAgICAgIHRoaXMuX3JvdGF0aW9uUXVhdGVybmlvbi50b0V1bGVyKHJvdGF0aW9uKTtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgcm90YXRpb24uX29uVmFsdWVDaGFuZ2VkID0gdGhpcy5fb25Sb3RhdGlvbkNoYW5nZWQ7XG4gICAgICByb3RhdGlvbi5zY2FsZShNYXRoVXRpbC5yYWRUb0RlZ3JlZUZhY3Rvcik7IC8vIHJhZGlhbnMgdG8gZGVncmVlc1xuICAgICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Mb2NhbEV1bGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm90YXRpb247XG4gIH1cblxuICBzZXQgcm90YXRpb24odmFsdWU6IFZlY3RvcjMpIHtcbiAgICBpZiAodGhpcy5fcm90YXRpb24gIT09IHZhbHVlKSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX3JvdGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV29ybGQgcm90YXRpb24sIGRlZmluaW5nIHRoZSByb3RhdGlvbiB2YWx1ZSBpbiBkZWdyZWVzLlxuICAgKiBSb3RhdGlvbnMgYXJlIHBlcmZvcm1lZCBhcm91bmQgdGhlIFkgYXhpcywgdGhlIFggYXhpcywgYW5kIHRoZSBaIGF4aXMsIGluIHRoYXQgb3JkZXIuXG4gICAqL1xuICBnZXQgd29ybGRSb3RhdGlvbigpOiBWZWN0b3IzIHtcbiAgICBjb25zdCB3b3JsZFJvdGF0aW9uID0gdGhpcy5fd29ybGRSb3RhdGlvbjtcbiAgICBpZiAodGhpcy5faXNDb250YWluRGlydHlGbGFnKFRyYW5zZm9ybUZsYWcuV29ybGRFdWxlcikpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgd29ybGRSb3RhdGlvbi5fb25WYWx1ZUNoYW5nZWQgPSBudWxsO1xuICAgICAgdGhpcy53b3JsZFJvdGF0aW9uUXVhdGVybmlvbi50b0V1bGVyKHdvcmxkUm90YXRpb24pO1xuICAgICAgd29ybGRSb3RhdGlvbi5zY2FsZShNYXRoVXRpbC5yYWRUb0RlZ3JlZUZhY3Rvcik7IC8vIFJhZGlhbiB0byBhbmdsZVxuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICB3b3JsZFJvdGF0aW9uLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uV29ybGRSb3RhdGlvbkNoYW5nZWQ7XG4gICAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLldvcmxkRXVsZXIpO1xuICAgIH1cbiAgICByZXR1cm4gd29ybGRSb3RhdGlvbjtcbiAgfVxuXG4gIHNldCB3b3JsZFJvdGF0aW9uKHZhbHVlOiBWZWN0b3IzKSB7XG4gICAgaWYgKHRoaXMuX3dvcmxkUm90YXRpb24gIT09IHZhbHVlKSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX3dvcmxkUm90YXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2NhbCByb3RhdGlvbiwgZGVmaW5pbmcgdGhlIHJvdGF0aW9uIGJ5IHVzaW5nIGEgdW5pdCBxdWF0ZXJuaW9uLlxuICAgKi9cbiAgZ2V0IHJvdGF0aW9uUXVhdGVybmlvbigpOiBRdWF0ZXJuaW9uIHtcbiAgICBjb25zdCByb3RhdGlvblF1YXRlcm5pb24gPSB0aGlzLl9yb3RhdGlvblF1YXRlcm5pb247XG4gICAgaWYgKHRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZyhUcmFuc2Zvcm1GbGFnLkxvY2FsUXVhdCkpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgcm90YXRpb25RdWF0ZXJuaW9uLl9vblZhbHVlQ2hhbmdlZCA9IG51bGw7XG4gICAgICBRdWF0ZXJuaW9uLnJvdGF0aW9uRXVsZXIoXG4gICAgICAgIE1hdGhVdGlsLmRlZ3JlZVRvUmFkaWFuKHRoaXMuX3JvdGF0aW9uLngpLFxuICAgICAgICBNYXRoVXRpbC5kZWdyZWVUb1JhZGlhbih0aGlzLl9yb3RhdGlvbi55KSxcbiAgICAgICAgTWF0aFV0aWwuZGVncmVlVG9SYWRpYW4odGhpcy5fcm90YXRpb24ueiksXG4gICAgICAgIHJvdGF0aW9uUXVhdGVybmlvbixcbiAgICAgICk7XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIHJvdGF0aW9uUXVhdGVybmlvbi5fb25WYWx1ZUNoYW5nZWQgPSB0aGlzLl9vblJvdGF0aW9uUXVhdGVybmlvbkNoYW5nZWQ7XG4gICAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLkxvY2FsUXVhdCk7XG4gICAgfVxuICAgIHJldHVybiByb3RhdGlvblF1YXRlcm5pb247XG4gIH1cblxuICBzZXQgcm90YXRpb25RdWF0ZXJuaW9uKHZhbHVlOiBRdWF0ZXJuaW9uKSB7XG4gICAgaWYgKHRoaXMuX3JvdGF0aW9uUXVhdGVybmlvbiAhPT0gdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZS5ub3JtYWxpemVkKSB7XG4gICAgICAgIHZhbHVlLmNsb25lVG8odGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFF1YXRlcm5pb24ubm9ybWFsaXplKHZhbHVlLCB0aGlzLl9yb3RhdGlvblF1YXRlcm5pb24pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZS5ub3JtYWxpemVkIHx8IHZhbHVlLm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXb3JsZCByb3RhdGlvbiwgZGVmaW5pbmcgdGhlIHJvdGF0aW9uIGJ5IHVzaW5nIGEgdW5pdCBxdWF0ZXJuaW9uLlxuICAgKi9cbiAgZ2V0IHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uKCk6IFF1YXRlcm5pb24ge1xuICAgIGNvbnN0IHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uID0gdGhpcy5fd29ybGRSb3RhdGlvblF1YXRlcm5pb247XG4gICAgaWYgKHRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZyhUcmFuc2Zvcm1GbGFnLldvcmxkUXVhdCkpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgd29ybGRSb3RhdGlvblF1YXRlcm5pb24uX29uVmFsdWVDaGFuZ2VkID0gbnVsbDtcbiAgICAgIGNvbnN0IHBhcmVudCA9IG51bGw7XG4gICAgICAvLyBjb25zdCBwYXJlbnQgPSB0aGlzLl9nZXRQYXJlbnRUcmFuc2Zvcm0oKTtcbiAgICAgIGlmIChwYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICBRdWF0ZXJuaW9uLm11bHRpcGx5KHBhcmVudC53b3JsZFJvdGF0aW9uUXVhdGVybmlvbiwgdGhpcy5yb3RhdGlvblF1YXRlcm5pb24sIHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucm90YXRpb25RdWF0ZXJuaW9uLmNsb25lVG8od29ybGRSb3RhdGlvblF1YXRlcm5pb24pO1xuICAgICAgfVxuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICB3b3JsZFJvdGF0aW9uUXVhdGVybmlvbi5fb25WYWx1ZUNoYW5nZWQgPSB0aGlzLl9vbldvcmxkUm90YXRpb25RdWF0ZXJuaW9uQ2hhbmdlZDtcbiAgICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuV29ybGRRdWF0KTtcbiAgICB9XG4gICAgcmV0dXJuIHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uO1xuICB9XG5cbiAgc2V0IHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uKHZhbHVlOiBRdWF0ZXJuaW9uKSB7XG4gICAgaWYgKHRoaXMuX3dvcmxkUm90YXRpb25RdWF0ZXJuaW9uICE9PSB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlLm5vcm1hbGl6ZWQpIHtcbiAgICAgICAgdmFsdWUuY2xvbmVUbyh0aGlzLl93b3JsZFJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBRdWF0ZXJuaW9uLm5vcm1hbGl6ZSh2YWx1ZSwgdGhpcy5fd29ybGRSb3RhdGlvblF1YXRlcm5pb24pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YWx1ZS5ub3JtYWxpemVkIHx8IHZhbHVlLm5vcm1hbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIExvY2FsIHNjYWxpbmcuXG4gICAqL1xuICBnZXQgc2NhbGUoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMuX3NjYWxlO1xuICB9XG5cbiAgc2V0IHNjYWxlKHZhbHVlOiBWZWN0b3IzKSB7XG4gICAgaWYgKHRoaXMuX3NjYWxlICE9PSB2YWx1ZSkge1xuICAgICAgdmFsdWUuY2xvbmVUbyh0aGlzLl9zY2FsZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvY2FsIGxvc3N5IHNjYWxpbmcuXG4gICAqIEByZW1hcmtzIFRoZSB2YWx1ZSBvYnRhaW5lZCBtYXkgbm90IGJlIGNvcnJlY3QgdW5kZXIgY2VydGFpbiBjb25kaXRpb25zKGZvciBleGFtcGxlLCB0aGUgcGFyZW50IG5vZGUgaGFzIHNjYWxpbmcsXG4gICAqIGFuZCB0aGUgY2hpbGQgbm9kZSBoYXMgYSByb3RhdGlvbiksIHRoZSBzY2FsaW5nIHdpbGwgYmUgdGlsdGVkLiBWZWN0b3IzIGNhbm5vdCBiZSB1c2VkIHRvIGNvcnJlY3RseSByZXByZXNlbnQgdGhlIHNjYWxpbmcuIE11c3QgdXNlIE1hdHJpeDMuXG4gICAqL1xuICBnZXQgbG9zc3lXb3JsZFNjYWxlKCk6IFZlY3RvcjMge1xuICAgIGlmICh0aGlzLl9pc0NvbnRhaW5EaXJ0eUZsYWcoVHJhbnNmb3JtRmxhZy5Xb3JsZFNjYWxlKSkge1xuICAgICAgLy8gaWYgKHRoaXMuX2dldFBhcmVudFRyYW5zZm9ybSgpKSB7XG4gICAgICBpZiAobnVsbCkge1xuICAgICAgICBjb25zdCBzY2FsZU1hdCA9IHRoaXMuX2dldFNjYWxlTWF0cml4KCk7XG4gICAgICAgIGNvbnN0IGUgPSBzY2FsZU1hdC5lbGVtZW50cztcbiAgICAgICAgdGhpcy5fbG9zc3lXb3JsZFNjYWxlLnNldFZhbHVlKGVbMF0sIGVbNF0sIGVbOF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2NhbGUuY2xvbmVUbyh0aGlzLl9sb3NzeVdvcmxkU2NhbGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Xb3JsZFNjYWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2xvc3N5V29ybGRTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2NhbCBtYXRyaXguXG4gICAqIEByZW1hcmtzIE5lZWQgdG8gcmUtYXNzaWduIGFmdGVyIG1vZGlmaWNhdGlvbiB0byBlbnN1cmUgdGhhdCB0aGUgbW9kaWZpY2F0aW9uIHRha2VzIGVmZmVjdC5cbiAgICovXG4gIGdldCBsb2NhbE1hdHJpeCgpOiBNYXRyaXg0IHtcbiAgICBpZiAodGhpcy5faXNDb250YWluRGlydHlGbGFnKFRyYW5zZm9ybUZsYWcuTG9jYWxNYXRyaXgpKSB7XG4gICAgICBNYXRyaXg0LmFmZmluZVRyYW5zZm9ybWF0aW9uKHRoaXMuX3NjYWxlLCB0aGlzLnJvdGF0aW9uUXVhdGVybmlvbiwgdGhpcy5fcG9zaXRpb24sIHRoaXMuX2xvY2FsTWF0cml4KTtcbiAgICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuTG9jYWxNYXRyaXgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbG9jYWxNYXRyaXg7XG4gIH1cblxuICBzZXQgbG9jYWxNYXRyaXgodmFsdWU6IE1hdHJpeDQpIHtcbiAgICBpZiAodGhpcy5fbG9jYWxNYXRyaXggIT09IHZhbHVlKSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX2xvY2FsTWF0cml4KTtcbiAgICB9XG5cbiAgICB0aGlzLl9sb2NhbE1hdHJpeC5kZWNvbXBvc2UodGhpcy5fcG9zaXRpb24sIHRoaXMuX3JvdGF0aW9uUXVhdGVybmlvbiwgdGhpcy5fc2NhbGUpO1xuXG4gICAgdGhpcy5fc2V0RGlydHlGbGFnVHJ1ZShUcmFuc2Zvcm1GbGFnLkxvY2FsRXVsZXIpO1xuICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuTG9jYWxNYXRyaXgpO1xuICAgIHRoaXMuX3VwZGF0ZUFsbFdvcmxkRmxhZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdvcmxkIG1hdHJpeC5cbiAgICogQHJlbWFya3MgTmVlZCB0byByZS1hc3NpZ24gYWZ0ZXIgbW9kaWZpY2F0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSBtb2RpZmljYXRpb24gdGFrZXMgZWZmZWN0LlxuICAgKi9cbiAgZ2V0IHdvcmxkTWF0cml4KCk6IE1hdHJpeDQge1xuICAgIGlmICh0aGlzLl9pc0NvbnRhaW5EaXJ0eUZsYWcoVHJhbnNmb3JtRmxhZy5Xb3JsZE1hdHJpeCkpIHtcbiAgICAgIC8vIGNvbnN0IHBhcmVudCA9IHRoaXMuX2dldFBhcmVudFRyYW5zZm9ybSgpO1xuICAgICAgY29uc3QgcGFyZW50ID0gbnVsbDtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgTWF0cml4NC5tdWx0aXBseShwYXJlbnQud29ybGRNYXRyaXgsIHRoaXMubG9jYWxNYXRyaXgsIHRoaXMuX3dvcmxkTWF0cml4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9jYWxNYXRyaXguY2xvbmVUbyh0aGlzLl93b3JsZE1hdHJpeCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLldvcmxkTWF0cml4KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dvcmxkTWF0cml4O1xuICB9XG5cbiAgc2V0IHdvcmxkTWF0cml4KHZhbHVlOiBNYXRyaXg0KSB7XG4gICAgaWYgKHRoaXMuX3dvcmxkTWF0cml4ICE9PSB2YWx1ZSkge1xuICAgICAgdmFsdWUuY2xvbmVUbyh0aGlzLl93b3JsZE1hdHJpeCk7XG4gICAgfVxuICAgIC8vIGNvbnN0IHBhcmVudCA9IHRoaXMuX2dldFBhcmVudFRyYW5zZm9ybSgpO1xuICAgIGNvbnN0IHBhcmVudCA9IG51bGw7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgTWF0cml4NC5pbnZlcnQocGFyZW50LndvcmxkTWF0cml4LCBUcmFuc2Zvcm0uX3RlbXBNYXQ0Mik7XG4gICAgICBNYXRyaXg0Lm11bHRpcGx5KHZhbHVlLCBUcmFuc2Zvcm0uX3RlbXBNYXQ0MiwgdGhpcy5fbG9jYWxNYXRyaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX2xvY2FsTWF0cml4KTtcbiAgICB9XG4gICAgdGhpcy5sb2NhbE1hdHJpeCA9IHRoaXMuX2xvY2FsTWF0cml4O1xuICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuV29ybGRNYXRyaXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoZW50aXR5OiBFbnRpdHkgPSBudWxsKSB7XG4gICAgdGhpcy5fZW50aXR5ID0gZW50aXR5O1xuXG4gICAgdGhpcy5fb25Qb3NpdGlvbkNoYW5nZWQgPSB0aGlzLl9vblBvc2l0aW9uQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uV29ybGRQb3NpdGlvbkNoYW5nZWQgPSB0aGlzLl9vbldvcmxkUG9zaXRpb25DaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Sb3RhdGlvbkNoYW5nZWQgPSB0aGlzLl9vblJvdGF0aW9uQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uV29ybGRSb3RhdGlvbkNoYW5nZWQgPSB0aGlzLl9vbldvcmxkUm90YXRpb25DaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Sb3RhdGlvblF1YXRlcm5pb25DaGFuZ2VkID0gdGhpcy5fb25Sb3RhdGlvblF1YXRlcm5pb25DaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Xb3JsZFJvdGF0aW9uUXVhdGVybmlvbkNoYW5nZWQgPSB0aGlzLl9vbldvcmxkUm90YXRpb25RdWF0ZXJuaW9uQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uU2NhbGVDaGFuZ2VkID0gdGhpcy5fb25TY2FsZUNoYW5nZWQuYmluZCh0aGlzKTtcblxuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuX3Bvc2l0aW9uLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uUG9zaXRpb25DaGFuZ2VkO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuX3dvcmxkUG9zaXRpb24uX29uVmFsdWVDaGFuZ2VkID0gdGhpcy5fb25Xb3JsZFBvc2l0aW9uQ2hhbmdlZDtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB0aGlzLl9yb3RhdGlvbi5fb25WYWx1ZUNoYW5nZWQgPSB0aGlzLl9vblJvdGF0aW9uQ2hhbmdlZDtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB0aGlzLl93b3JsZFJvdGF0aW9uLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uV29ybGRSb3RhdGlvbkNoYW5nZWQ7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgdGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uUm90YXRpb25RdWF0ZXJuaW9uQ2hhbmdlZDtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB0aGlzLl93b3JsZFJvdGF0aW9uUXVhdGVybmlvbi5fb25WYWx1ZUNoYW5nZWQgPSB0aGlzLl9vbldvcmxkUm90YXRpb25RdWF0ZXJuaW9uQ2hhbmdlZDtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB0aGlzLl9zY2FsZS5fb25WYWx1ZUNoYW5nZWQgPSB0aGlzLl9vblNjYWxlQ2hhbmdlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgbG9jYWwgcG9zaXRpb24gYnkgWCwgWSwgWiB2YWx1ZS5cbiAgICogQHBhcmFtIHggLSBYIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHkgLSBZIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHogLSBaIGNvb3JkaW5hdGVcbiAgICovXG4gIHNldFBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9wb3NpdGlvbi5zZXRWYWx1ZSh4LCB5LCB6KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgbG9jYWwgcm90YXRpb24gYnkgdGhlIFgsIFksIFogY29tcG9uZW50cyBvZiB0aGUgZXVsZXIgYW5nbGUsIHVuaXQgaW4gZGVncmVlcy5cbiAgICogUm90YXRpb25zIGFyZSBwZXJmb3JtZWQgYXJvdW5kIHRoZSBZIGF4aXMsIHRoZSBYIGF4aXMsIGFuZCB0aGUgWiBheGlzLCBpbiB0aGF0IG9yZGVyLlxuICAgKiBAcGFyYW0geCAtIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBhcm91bmQgdGhlIFggYXhpc1xuICAgKiBAcGFyYW0geSAtIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBhcm91bmQgdGhlIFkgYXhpc1xuICAgKiBAcGFyYW0geiAtIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBhcm91bmQgdGhlIFogYXhpc1xuICAgKi9cbiAgc2V0Um90YXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3JvdGF0aW9uLnNldFZhbHVlKHgsIHksIHopO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsb2NhbCByb3RhdGlvbiBieSB0aGUgWCwgWSwgWiwgYW5kIFcgY29tcG9uZW50cyBvZiB0aGUgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIHggLSBYIGNvbXBvbmVudCBvZiBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSB5IC0gWSBjb21wb25lbnQgb2YgcXVhdGVybmlvblxuICAgKiBAcGFyYW0geiAtIFogY29tcG9uZW50IG9mIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHcgLSBXIGNvbXBvbmVudCBvZiBxdWF0ZXJuaW9uXG4gICAqL1xuICBzZXRSb3RhdGlvblF1YXRlcm5pb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uLnNldFZhbHVlKHgsIHksIHosIHcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsb2NhbCBzY2FsaW5nIGJ5IHNjYWxpbmcgdmFsdWVzIGFsb25nIFgsIFksIFogYXhpcy5cbiAgICogQHBhcmFtIHggLSBTY2FsaW5nIGFsb25nIFggYXhpc1xuICAgKiBAcGFyYW0geSAtIFNjYWxpbmcgYWxvbmcgWSBheGlzXG4gICAqIEBwYXJhbSB6IC0gU2NhbGluZyBhbG9uZyBaIGF4aXNcbiAgICovXG4gIHNldFNjYWxlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zY2FsZS5zZXRWYWx1ZSh4LCB5LCB6KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgd29ybGQgcG9zaXRpb24gYnkgWCwgWSwgWiB2YWx1ZS5cbiAgICogQHBhcmFtIHggLSBYIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHkgLSBZIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHogLSBaIGNvb3JkaW5hdGVcbiAgICovXG4gIHNldFdvcmxkUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3dvcmxkUG9zaXRpb24uc2V0VmFsdWUoeCwgeSwgeik7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHdvcmxkIHJvdGF0aW9uIGJ5IHRoZSBYLCBZLCBaIGNvbXBvbmVudHMgb2YgdGhlIGV1bGVyIGFuZ2xlLCB1bml0IGluIGRlZ3JlZXMsIFlhdy9QaXRjaC9Sb2xsIHNlcXVlbmNlLlxuICAgKiBAcGFyYW0geCAtIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBhcm91bmQgdGhlIFggYXhpc1xuICAgKiBAcGFyYW0geSAtIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBhcm91bmQgdGhlIFkgYXhpc1xuICAgKiBAcGFyYW0geiAtIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBhcm91bmQgdGhlIFogYXhpc1xuICAgKi9cbiAgc2V0V29ybGRSb3RhdGlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fd29ybGRSb3RhdGlvbi5zZXRWYWx1ZSh4LCB5LCB6KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgbG9jYWwgcm90YXRpb24gYnkgdGhlIFgsIFksIFosIGFuZCBXIGNvbXBvbmVudHMgb2YgdGhlIHF1YXRlcm5pb24uXG4gICAqIEBwYXJhbSB4IC0gWCBjb21wb25lbnQgb2YgcXVhdGVybmlvblxuICAgKiBAcGFyYW0geSAtIFkgY29tcG9uZW50IG9mIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHogLSBaIGNvbXBvbmVudCBvZiBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSB3IC0gVyBjb21wb25lbnQgb2YgcXVhdGVybmlvblxuICAgKi9cbiAgc2V0V29ybGRSb3RhdGlvblF1YXRlcm5pb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fd29ybGRSb3RhdGlvblF1YXRlcm5pb24uc2V0VmFsdWUoeCwgeSwgeiwgdyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBpbiB3b3JsZCBzcGFjZS5cbiAgICogQHBhcmFtIGZvcndhcmQgLSBGb3J3YXJkIHZlY3RvclxuICAgKiBAcmV0dXJucyBGb3J3YXJkIHZlY3RvclxuICAgKi9cbiAgZ2V0V29ybGRGb3J3YXJkKGZvcndhcmQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICBjb25zdCBlID0gdGhpcy53b3JsZE1hdHJpeC5lbGVtZW50cztcbiAgICBmb3J3YXJkLnNldFZhbHVlKC1lWzhdLCAtZVs5XSwgLWVbMTBdKTtcbiAgICByZXR1cm4gZm9yd2FyZC5ub3JtYWxpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHJpZ2h0IGRpcmVjdGlvbiBpbiB3b3JsZCBzcGFjZS5cbiAgICogQHBhcmFtIHJpZ2h0IC0gUmlnaHQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFJpZ2h0IHZlY3RvclxuICAgKi9cbiAgZ2V0V29ybGRSaWdodChyaWdodDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIGNvbnN0IGUgPSB0aGlzLndvcmxkTWF0cml4LmVsZW1lbnRzO1xuICAgIHJpZ2h0LnNldFZhbHVlKGVbMF0sIGVbMV0sIGVbMl0pO1xuICAgIHJldHVybiByaWdodC5ub3JtYWxpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHVwIGRpcmVjdGlvbiBpbiB3b3JsZCBzcGFjZS5cbiAgICogQHBhcmFtIHVwIC0gVXAgdmVjdG9yXG4gICAqIEByZXR1cm5zIFVwIHZlY3RvclxuICAgKi9cbiAgZ2V0V29ybGRVcCh1cDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIGNvbnN0IGUgPSB0aGlzLndvcmxkTWF0cml4LmVsZW1lbnRzO1xuICAgIHVwLnNldFZhbHVlKGVbNF0sIGVbNV0sIGVbNl0pO1xuICAgIHJldHVybiB1cC5ub3JtYWxpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgYWxvbmcgdGhlIHBhc3NlZCBWZWN0b3IzLlxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBEaXJlY3Rpb24gYW5kIGRpc3RhbmNlIG9mIHRyYW5zbGF0aW9uXG4gICAqIEBwYXJhbSByZWxhdGl2ZVRvTG9jYWwgLSBSZWxhdGl2ZSB0byBsb2NhbCBzcGFjZVxuICAgKi9cbiAgdHJhbnNsYXRlKHRyYW5zbGF0aW9uOiBWZWN0b3IzLCByZWxhdGl2ZVRvTG9jYWw/OiBib29sZWFuKTogdm9pZDtcblxuICAvKipcbiAgICogVHJhbnNsYXRlIGFsb25nIHRoZSBwYXNzZWQgWCwgWSwgWiB2YWx1ZS5cbiAgICogQHBhcmFtIHggLSBUcmFuc2xhdGUgZGlyZWN0aW9uIGFuZCBkaXN0YW5jZSBhbG9uZyB4IGF4aXNcbiAgICogQHBhcmFtIHkgLSBUcmFuc2xhdGUgZGlyZWN0aW9uIGFuZCBkaXN0YW5jZSBhbG9uZyB5IGF4aXNcbiAgICogQHBhcmFtIHogLSBUcmFuc2xhdGUgZGlyZWN0aW9uIGFuZCBkaXN0YW5jZSBhbG9uZyB6IGF4aXNcbiAgICogQHBhcmFtIHJlbGF0aXZlVG9Mb2NhbCAtIFJlbGF0aXZlIHRvIGxvY2FsIHNwYWNlXG4gICAqL1xuICB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgcmVsYXRpdmVUb0xvY2FsPzogYm9vbGVhbik6IHZvaWQ7XG5cbiAgdHJhbnNsYXRlKFxuICAgIHRyYW5zbGF0aW9uT3JYOiBWZWN0b3IzIHwgbnVtYmVyLFxuICAgIHJlbGF0aXZlVG9Mb2NhbE9yWT86IGJvb2xlYW4gfCBudW1iZXIsXG4gICAgej86IG51bWJlcixcbiAgICByZWxhdGl2ZVRvTG9jYWw/OiBib29sZWFuLFxuICApOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHRyYW5zbGF0aW9uT3JYID09PSAnbnVtYmVyJykge1xuICAgICAgY29uc3QgdHJhbnNsYXRlID0gVHJhbnNmb3JtLl90ZW1wVmVjMzA7XG4gICAgICB0cmFuc2xhdGUuc2V0VmFsdWUodHJhbnNsYXRpb25PclgsIDxudW1iZXI+cmVsYXRpdmVUb0xvY2FsT3JZLCB6KTtcbiAgICAgIHRoaXMuX3RyYW5zbGF0ZSh0cmFuc2xhdGUsIHJlbGF0aXZlVG9Mb2NhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3RyYW5zbGF0ZSh0cmFuc2xhdGlvbk9yWCwgPGJvb2xlYW4+cmVsYXRpdmVUb0xvY2FsT3JZKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUm90YXRlIGFyb3VuZCB0aGUgcGFzc2VkIFZlY3RvcjMuXG4gICAqIEBwYXJhbSByb3RhdGlvbiAtIEV1bGVyIGFuZ2xlIGluIGRlZ3JlZXNcbiAgICogQHBhcmFtIHJlbGF0aXZlVG9Mb2NhbCAtIFJlbGF0aXZlIHRvIGxvY2FsIHNwYWNlXG4gICAqL1xuICByb3RhdGUocm90YXRpb246IFZlY3RvcjMsIHJlbGF0aXZlVG9Mb2NhbD86IGJvb2xlYW4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSb3RhdGUgYXJvdW5kIHRoZSBwYXNzZWQgVmVjdG9yMy5cbiAgICogQHBhcmFtIHggLSBSb3RhdGlvbiBhbG9uZyB4IGF4aXMsIGluIGRlZ3JlZXNcbiAgICogQHBhcmFtIHkgLSBSb3RhdGlvbiBhbG9uZyB5IGF4aXMsIGluIGRlZ3JlZXNcbiAgICogQHBhcmFtIHogLSBSb3RhdGlvbiBhbG9uZyB6IGF4aXMsIGluIGRlZ3JlZXNcbiAgICogQHBhcmFtIHJlbGF0aXZlVG9Mb2NhbCAtIFJlbGF0aXZlIHRvIGxvY2FsIHNwYWNlXG4gICAqL1xuICByb3RhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgcmVsYXRpdmVUb0xvY2FsPzogYm9vbGVhbik6IHZvaWQ7XG5cbiAgcm90YXRlKFxuICAgIHJvdGF0aW9uT3JYOiBWZWN0b3IzIHwgbnVtYmVyLFxuICAgIHJlbGF0aXZlVG9Mb2NhbE9yWT86IGJvb2xlYW4gfCBudW1iZXIsXG4gICAgej86IG51bWJlcixcbiAgICByZWxhdGl2ZVRvTG9jYWw/OiBib29sZWFuLFxuICApOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHJvdGF0aW9uT3JYID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5fcm90YXRlWFlaKHJvdGF0aW9uT3JYLCA8bnVtYmVyPnJlbGF0aXZlVG9Mb2NhbE9yWSwgeiwgcmVsYXRpdmVUb0xvY2FsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcm90YXRlWFlaKHJvdGF0aW9uT3JYLngsIHJvdGF0aW9uT3JYLnksIHJvdGF0aW9uT3JYLnosIDxib29sZWFuPnJlbGF0aXZlVG9Mb2NhbE9yWSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJvdGF0ZSBhcm91bmQgdGhlIHNwZWNpZmllZCBheGlzIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGFuZ2xlLlxuICAgKiBAcGFyYW0gYXhpcyAtIFJvdGF0ZSBheGlzXG4gICAqIEBwYXJhbSBhbmdsZSAtIFJvdGF0ZSBhbmdsZSBpbiBkZWdyZWVzXG4gICAqIEBwYXJhbSByZWxhdGl2ZVRvTG9jYWwgLSBSZWxhdGl2ZSB0byBsb2NhbCBzcGFjZVxuICAgKi9cbiAgcm90YXRlQnlBeGlzKGF4aXM6IFZlY3RvcjMsIGFuZ2xlOiBudW1iZXIsIHJlbGF0aXZlVG9Mb2NhbDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICBjb25zdCByYWQgPSBhbmdsZSAqIE1hdGhVdGlsLmRlZ3JlZVRvUmFkRmFjdG9yO1xuICAgIFF1YXRlcm5pb24ucm90YXRpb25BeGlzQW5nbGUoYXhpcywgcmFkLCBUcmFuc2Zvcm0uX3RlbXBRdWF0MCk7XG4gICAgdGhpcy5fcm90YXRlQnlRdWF0KFRyYW5zZm9ybS5fdGVtcFF1YXQwLCByZWxhdGl2ZVRvTG9jYWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJvdGF0ZSBhbmQgZW5zdXJlIHRoYXQgdGhlIHdvcmxkIGZyb250IHZlY3RvciBwb2ludHMgdG8gdGhlIHRhcmdldCB3b3JsZCBwb3NpdGlvbi5cbiAgICogQHBhcmFtIHRhcmdldFBvc2l0aW9uIC0gVGFyZ2V0IHdvcmxkIHBvc2l0aW9uXG4gICAqIEBwYXJhbSB3b3JsZFVwIC0gVXAgZGlyZWN0aW9uIGluIHdvcmxkIHNwYWNlLCBkZWZhdWx0IGlzIFZlY3RvcjMoMCwgMSwgMClcbiAgICovXG4gIGxvb2tBdCh0YXJnZXRQb3NpdGlvbjogVmVjdG9yMywgd29ybGRVcD86IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBjb25zdCB6QXhpcyA9IFRyYW5zZm9ybS5fdGVtcFZlYzMwO1xuICAgIFZlY3RvcjMuc3VidHJhY3QodGhpcy53b3JsZFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbiwgekF4aXMpO1xuICAgIGxldCBheGlzTGVuID0gekF4aXMubGVuZ3RoKCk7XG4gICAgaWYgKGF4aXNMZW4gPD0gTWF0aFV0aWwuemVyb1RvbGVyYW5jZSkge1xuICAgICAgLy8gVGhlIGN1cnJlbnQgcG9zaXRpb24gYW5kIHRoZSB0YXJnZXQgcG9zaXRpb24gYXJlIGFsbW9zdCB0aGUgc2FtZS5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgekF4aXMuc2NhbGUoMSAvIGF4aXNMZW4pO1xuICAgIGNvbnN0IHhBeGlzID0gVHJhbnNmb3JtLl90ZW1wVmVjMzE7XG4gICAgaWYgKHdvcmxkVXApIHtcbiAgICAgIFZlY3RvcjMuY3Jvc3Mod29ybGRVcCwgekF4aXMsIHhBeGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeEF4aXMuc2V0VmFsdWUoekF4aXMueiwgMCwgLXpBeGlzLngpO1xuICAgIH1cbiAgICBheGlzTGVuID0geEF4aXMubGVuZ3RoKCk7XG4gICAgaWYgKGF4aXNMZW4gPD0gTWF0aFV0aWwuemVyb1RvbGVyYW5jZSkge1xuICAgICAgLy8gQHRvZG86XG4gICAgICAvLyAxLndvcmxkdXAgaXPvvIgwLDAsMO+8iVxuICAgICAgLy8gMi53b3JsZFVwIGlzIHBhcmFsbGVsIHRvIHpBeGlzXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHhBeGlzLnNjYWxlKDEgLyBheGlzTGVuKTtcbiAgICBjb25zdCB5QXhpcyA9IFRyYW5zZm9ybS5fdGVtcFZlYzMyO1xuICAgIFZlY3RvcjMuY3Jvc3MoekF4aXMsIHhBeGlzLCB5QXhpcyk7XG5cbiAgICBjb25zdCByb3RNYXQgPSBUcmFuc2Zvcm0uX3RlbXBNYXQ0MTtcbiAgICBjb25zdCB7IGVsZW1lbnRzOiBlIH0gPSByb3RNYXQ7XG4gICAgKGVbMF0gPSB4QXhpcy54KSwgKGVbMV0gPSB4QXhpcy55KSwgKGVbMl0gPSB4QXhpcy56KTtcbiAgICAoZVs0XSA9IHlBeGlzLngpLCAoZVs1XSA9IHlBeGlzLnkpLCAoZVs2XSA9IHlBeGlzLnopO1xuICAgIChlWzhdID0gekF4aXMueCksIChlWzldID0gekF4aXMueSksIChlWzEwXSA9IHpBeGlzLnopO1xuICAgIHJvdE1hdC5nZXRSb3RhdGlvbih0aGlzLl93b3JsZFJvdGF0aW9uUXVhdGVybmlvbik7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgd29ybGQgdHJhbnNmb3JtIGNoYW5nZSBmbGFnLlxuICAgKiBAcmV0dXJucyBDaGFuZ2UgZmxhZ1xuICAgKi9cbiAgcmVnaXN0ZXJXb3JsZENoYW5nZUZsYWcoKTogQm9vbFVwZGF0ZUZsYWcge1xuICAgIHJldHVybiB0aGlzLl91cGRhdGVGbGFnTWFuYWdlci5jcmVhdGVGbGFnKEJvb2xVcGRhdGVGbGFnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9wYXJlbnRDaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5faXNQYXJlbnREaXJ0eSA9IHRydWU7XG4gICAgdGhpcy5fdXBkYXRlQWxsV29ybGRGbGFnKCk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfaXNGcm9udEZhY2VJbnZlcnQoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc2NhbGUgPSB0aGlzLmxvc3N5V29ybGRTY2FsZTtcbiAgICBsZXQgaXNJbnZlcnQgPSBzY2FsZS54IDwgMDtcbiAgICBzY2FsZS55IDwgMCAmJiAoaXNJbnZlcnQgPSAhaXNJbnZlcnQpO1xuICAgIHNjYWxlLnogPCAwICYmIChpc0ludmVydCA9ICFpc0ludmVydCk7XG4gICAgcmV0dXJuIGlzSW52ZXJ0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3b3JsZE1hdHJpeDogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZE1hdHJpeCB1cGRhdGUgb2YgaXRzZWxmIGFuZCBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBHZXQgd29ybGRQb3NpdGlvbjogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZE1hdHJpeCwgbG9jYWwgcG9zaXRpb24gdXBkYXRlIG9mIGl0c2VsZiBhbmQgdGhlIHdvcmxkTWF0cml4IHVwZGF0ZSBvZiBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBJbiBzdW1tYXJ5LCBhbnkgdXBkYXRlIG9mIHJlbGF0ZWQgdmFyaWFibGVzIHdpbGwgY2F1c2UgdGhlIGRpcnR5IG1hcmsgb2Ygb25lIG9mIHRoZSBmdWxsIHByb2Nlc3MgKHdvcmxkTWF0cml4IG9yIHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uKSB0byBiZSBmYWxzZS5cbiAgICovXG4gIHByaXZhdGUgX3VwZGF0ZVdvcmxkUG9zaXRpb25GbGFnKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5faXNDb250YWluRGlydHlGbGFncyhUcmFuc2Zvcm1GbGFnLldtV3ApKSB7XG4gICAgICB0aGlzLl93b3JsZEFzc29jaWF0ZWRDaGFuZ2UoVHJhbnNmb3JtRmxhZy5XbVdwKTtcbiAgICAgIC8vIGNvbnN0IG5vZGVDaGlsZHJlbiA9IHRoaXMuX2VudGl0eS5fY2hpbGRyZW47XG4gICAgICBjb25zdCBub2RlQ2hpbGRyZW4gPSBbXTtcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDAsIG46IG51bWJlciA9IG5vZGVDaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgbm9kZUNoaWxkcmVuW2ldLnRyYW5zZm9ybT8uX3VwZGF0ZVdvcmxkUG9zaXRpb25GbGFnKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3b3JsZE1hdHJpeDogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZE1hdHJpeCB1cGRhdGUgb2YgaXRzZWxmIGFuZCBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBHZXQgd29ybGRQb3NpdGlvbjogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZE1hdHJpeCwgbG9jYWwgcG9zaXRpb24gdXBkYXRlIG9mIGl0c2VsZiBhbmQgdGhlIHdvcmxkTWF0cml4IHVwZGF0ZSBvZiBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBHZXQgd29ybGRSb3RhdGlvblF1YXRlcm5pb246IFdpbGwgdHJpZ2dlciB0aGUgd29ybGQgcm90YXRpb24gKGluIHF1YXRlcm5pb24pIHVwZGF0ZSBvZiBpdHNlbGYgYW5kIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFJvdGF0aW9uOiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkIHJvdGF0aW9uKGluIGV1bGVyIGFuZCBxdWF0ZXJuaW9uKSB1cGRhdGUgb2YgaXRzZWxmIGFuZCB3b3JsZCByb3RhdGlvbihpbiBxdWF0ZXJuaW9uKSB1cGRhdGUgb2YgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogSW4gc3VtbWFyeSwgYW55IHVwZGF0ZSBvZiByZWxhdGVkIHZhcmlhYmxlcyB3aWxsIGNhdXNlIHRoZSBkaXJ0eSBtYXJrIG9mIG9uZSBvZiB0aGUgZnVsbCBwcm9jZXNzICh3b3JsZE1hdHJpeCBvciB3b3JsZFJvdGF0aW9uUXVhdGVybmlvbikgdG8gYmUgZmFsc2UuXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVXb3JsZFJvdGF0aW9uRmxhZygpIHtcbiAgICBpZiAoIXRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZ3MoVHJhbnNmb3JtRmxhZy5XbVdlV3EpKSB7XG4gICAgICB0aGlzLl93b3JsZEFzc29jaWF0ZWRDaGFuZ2UoVHJhbnNmb3JtRmxhZy5XbVdlV3EpO1xuICAgICAgLy8gY29uc3Qgbm9kZUNoaWxkcmVuID0gdGhpcy5fZW50aXR5Ll9jaGlsZHJlbjtcbiAgICAgIGNvbnN0IG5vZGVDaGlsZHJlbiA9IFtdO1xuICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMCwgbjogbnVtYmVyID0gbm9kZUNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBub2RlQ2hpbGRyZW5baV0udHJhbnNmb3JtPy5fdXBkYXRlV29ybGRQb3NpdGlvbkFuZFJvdGF0aW9uRmxhZygpOyAvLyBSb3RhdGlvbiB1cGRhdGUgb2YgcGFyZW50IGVudGl0eSB3aWxsIHRyaWdnZXIgd29ybGQgcG9zaXRpb24gYW5kIHJvdGF0aW9uIHVwZGF0ZSBvZiBhbGwgY2hpbGQgZW50aXR5LlxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd29ybGRNYXRyaXg6IFdpbGwgdHJpZ2dlciB0aGUgd29ybGRNYXRyaXggdXBkYXRlIG9mIGl0c2VsZiBhbmQgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogR2V0IHdvcmxkUG9zaXRpb246IFdpbGwgdHJpZ2dlciB0aGUgd29ybGRNYXRyaXgsIGxvY2FsIHBvc2l0aW9uIHVwZGF0ZSBvZiBpdHNlbGYgYW5kIHRoZSB3b3JsZE1hdHJpeCB1cGRhdGUgb2YgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogR2V0IHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uOiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkIHJvdGF0aW9uIChpbiBxdWF0ZXJuaW9uKSB1cGRhdGUgb2YgaXRzZWxmIGFuZCBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBHZXQgd29ybGRSb3RhdGlvbjogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZCByb3RhdGlvbihpbiBldWxlciBhbmQgcXVhdGVybmlvbikgdXBkYXRlIG9mIGl0c2VsZiBhbmQgd29ybGQgcm90YXRpb24oaW4gcXVhdGVybmlvbikgdXBkYXRlIG9mIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEluIHN1bW1hcnksIGFueSB1cGRhdGUgb2YgcmVsYXRlZCB2YXJpYWJsZXMgd2lsbCBjYXVzZSB0aGUgZGlydHkgbWFyayBvZiBvbmUgb2YgdGhlIGZ1bGwgcHJvY2VzcyAod29ybGRNYXRyaXggb3Igd29ybGRSb3RhdGlvblF1YXRlcm5pb24pIHRvIGJlIGZhbHNlLlxuICAgKi9cbiAgcHJpdmF0ZSBfdXBkYXRlV29ybGRQb3NpdGlvbkFuZFJvdGF0aW9uRmxhZygpIHtcbiAgICBpZiAoIXRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZ3MoVHJhbnNmb3JtRmxhZy5XbVdwV2VXcSkpIHtcbiAgICAgIHRoaXMuX3dvcmxkQXNzb2NpYXRlZENoYW5nZShUcmFuc2Zvcm1GbGFnLldtV3BXZVdxKTtcbiAgICAgIC8vIGNvbnN0IG5vZGVDaGlsZHJlbiA9IHRoaXMuX2VudGl0eS5fY2hpbGRyZW47XG4gICAgICBjb25zdCBub2RlQ2hpbGRyZW4gPSBbXTtcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDAsIG46IG51bWJlciA9IG5vZGVDaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgbm9kZUNoaWxkcmVuW2ldLnRyYW5zZm9ybT8uX3VwZGF0ZVdvcmxkUG9zaXRpb25BbmRSb3RhdGlvbkZsYWcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHdvcmxkTWF0cml4OiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkTWF0cml4IHVwZGF0ZSBvZiBpdHNlbGYgYW5kIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFBvc2l0aW9uOiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkTWF0cml4LCBsb2NhbCBwb3NpdGlvbiB1cGRhdGUgb2YgaXRzZWxmIGFuZCB0aGUgd29ybGRNYXRyaXggdXBkYXRlIG9mIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFNjYWxlOiBXaWxsIHRyaWdnZXIgdGhlIHNjYWxpbmcgdXBkYXRlIG9mIGl0c2VsZiBhbmQgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogSW4gc3VtbWFyeSwgYW55IHVwZGF0ZSBvZiByZWxhdGVkIHZhcmlhYmxlcyB3aWxsIGNhdXNlIHRoZSBkaXJ0eSBtYXJrIG9mIG9uZSBvZiB0aGUgZnVsbCBwcm9jZXNzICh3b3JsZE1hdHJpeCkgdG8gYmUgZmFsc2UuXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVXb3JsZFNjYWxlRmxhZygpIHtcbiAgICBpZiAoIXRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZ3MoVHJhbnNmb3JtRmxhZy5XbVdzKSkge1xuICAgICAgdGhpcy5fd29ybGRBc3NvY2lhdGVkQ2hhbmdlKFRyYW5zZm9ybUZsYWcuV21Xcyk7XG4gICAgICAvLyBjb25zdCBub2RlQ2hpbGRyZW4gPSB0aGlzLl9lbnRpdHkuX2NoaWxkcmVuO1xuICAgICAgY29uc3Qgbm9kZUNoaWxkcmVuID0gW107XG4gICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwLCBuOiBudW1iZXIgPSBub2RlQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIG5vZGVDaGlsZHJlbltpXS50cmFuc2Zvcm0/Ll91cGRhdGVXb3JsZFBvc2l0aW9uQW5kU2NhbGVGbGFnKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3b3JsZE1hdHJpeDogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZE1hdHJpeCB1cGRhdGUgb2YgaXRzZWxmIGFuZCBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBHZXQgd29ybGRQb3NpdGlvbjogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZE1hdHJpeCwgbG9jYWwgcG9zaXRpb24gdXBkYXRlIG9mIGl0c2VsZiBhbmQgdGhlIHdvcmxkTWF0cml4IHVwZGF0ZSBvZiBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBHZXQgd29ybGRTY2FsZTogV2lsbCB0cmlnZ2VyIHRoZSBzY2FsaW5nIHVwZGF0ZSBvZiBpdHNlbGYgYW5kIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEluIHN1bW1hcnksIGFueSB1cGRhdGUgb2YgcmVsYXRlZCB2YXJpYWJsZXMgd2lsbCBjYXVzZSB0aGUgZGlydHkgbWFyayBvZiBvbmUgb2YgdGhlIGZ1bGwgcHJvY2VzcyAod29ybGRNYXRyaXgpIHRvIGJlIGZhbHNlLlxuICAgKi9cbiAgcHJpdmF0ZSBfdXBkYXRlV29ybGRQb3NpdGlvbkFuZFNjYWxlRmxhZygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZ3MoVHJhbnNmb3JtRmxhZy5XbVdwV3MpKSB7XG4gICAgICB0aGlzLl93b3JsZEFzc29jaWF0ZWRDaGFuZ2UoVHJhbnNmb3JtRmxhZy5XbVdwV3MpO1xuICAgICAgLy8gY29uc3Qgbm9kZUNoaWxkcmVuID0gdGhpcy5fZW50aXR5Ll9jaGlsZHJlbjtcbiAgICAgIGNvbnN0IG5vZGVDaGlsZHJlbiA9IFtdO1xuICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMCwgbjogbnVtYmVyID0gbm9kZUNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBub2RlQ2hpbGRyZW5baV0udHJhbnNmb3JtPy5fdXBkYXRlV29ybGRQb3NpdGlvbkFuZFNjYWxlRmxhZygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYWxsIHdvcmxkIHRyYW5zZm9ybSBwcm9wZXJ0eSBkaXJ0eSBmbGFnLCB0aGUgcHJpbmNpcGxlIGlzIHRoZSBzYW1lIGFzIGFib3ZlLlxuICAgKi9cbiAgcHJpdmF0ZSBfdXBkYXRlQWxsV29ybGRGbGFnKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5faXNDb250YWluRGlydHlGbGFncyhUcmFuc2Zvcm1GbGFnLldtV3BXZVdxV3MpKSB7XG4gICAgICB0aGlzLl93b3JsZEFzc29jaWF0ZWRDaGFuZ2UoVHJhbnNmb3JtRmxhZy5XbVdwV2VXcVdzKTtcbiAgICAgIC8vIGNvbnN0IG5vZGVDaGlsZHJlbiA9IHRoaXMuX2VudGl0eS5fY2hpbGRyZW47XG4gICAgICBjb25zdCBub2RlQ2hpbGRyZW4gPSBbXTtcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDAsIG46IG51bWJlciA9IG5vZGVDaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgbm9kZUNoaWxkcmVuW2ldLnRyYW5zZm9ybT8uX3VwZGF0ZUFsbFdvcmxkRmxhZygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2dldFBhcmVudFRyYW5zZm9ybSgpOiBUcmFuc2Zvcm0gfCBudWxsIHtcbiAgICBpZiAoIXRoaXMuX2lzUGFyZW50RGlydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJlbnRUcmFuc2Zvcm1DYWNoZTtcbiAgICB9XG4gICAgbGV0IHBhcmVudENhY2hlOiBUcmFuc2Zvcm0gPSBudWxsO1xuICAgIGxldCBwYXJlbnQgPSB0aGlzLl9lbnRpdHkucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHBhcmVudC50cmFuc2Zvcm07XG4gICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgIHBhcmVudENhY2hlID0gdHJhbnNmb3JtO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3BhcmVudFRyYW5zZm9ybUNhY2hlID0gcGFyZW50Q2FjaGU7XG4gICAgdGhpcy5faXNQYXJlbnREaXJ0eSA9IGZhbHNlO1xuICAgIHJldHVybiBwYXJlbnRDYWNoZTtcbiAgfVxuXG4gIHByaXZhdGUgX2dldFNjYWxlTWF0cml4KCk6IE1hdHJpeDMge1xuICAgIGNvbnN0IGludlJvdGF0aW9uID0gVHJhbnNmb3JtLl90ZW1wUXVhdDA7XG4gICAgY29uc3QgaW52Um90YXRpb25NYXQgPSBUcmFuc2Zvcm0uX3RlbXBNYXQzMDtcbiAgICBjb25zdCB3b3JsZFJvdFNjYU1hdCA9IFRyYW5zZm9ybS5fdGVtcE1hdDMxO1xuICAgIGNvbnN0IHNjYU1hdCA9IFRyYW5zZm9ybS5fdGVtcE1hdDMyO1xuICAgIHdvcmxkUm90U2NhTWF0LnNldFZhbHVlQnlNYXRyaXgodGhpcy53b3JsZE1hdHJpeCk7XG4gICAgUXVhdGVybmlvbi5pbnZlcnQodGhpcy53b3JsZFJvdGF0aW9uUXVhdGVybmlvbiwgaW52Um90YXRpb24pO1xuICAgIE1hdHJpeDMucm90YXRpb25RdWF0ZXJuaW9uKGludlJvdGF0aW9uLCBpbnZSb3RhdGlvbk1hdCk7XG4gICAgTWF0cml4My5tdWx0aXBseShpbnZSb3RhdGlvbk1hdCwgd29ybGRSb3RTY2FNYXQsIHNjYU1hdCk7XG4gICAgcmV0dXJuIHNjYU1hdDtcbiAgfVxuXG4gIHByaXZhdGUgX2lzQ29udGFpbkRpcnR5RmxhZ3ModGFyZ2V0RGlydHlGbGFnczogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLl9kaXJ0eUZsYWcgJiB0YXJnZXREaXJ0eUZsYWdzKSA9PT0gdGFyZ2V0RGlydHlGbGFncztcbiAgfVxuXG4gIHByaXZhdGUgX2lzQ29udGFpbkRpcnR5RmxhZyh0eXBlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMuX2RpcnR5RmxhZyAmIHR5cGUpICE9IDA7XG4gIH1cblxuICBwcml2YXRlIF9zZXREaXJ0eUZsYWdUcnVlKHR5cGU6IG51bWJlcikge1xuICAgIHRoaXMuX2RpcnR5RmxhZyB8PSB0eXBlO1xuICB9XG5cbiAgcHJpdmF0ZSBfc2V0RGlydHlGbGFnRmFsc2UodHlwZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZGlydHlGbGFnICY9IH50eXBlO1xuICB9XG5cbiAgcHJpdmF0ZSBfd29ybGRBc3NvY2lhdGVkQ2hhbmdlKHR5cGU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2RpcnR5RmxhZyB8PSB0eXBlO1xuICAgIHRoaXMuX3VwZGF0ZUZsYWdNYW5hZ2VyLmRpc3BhdGNoKCk7XG4gIH1cblxuICBwcml2YXRlIF9yb3RhdGVCeVF1YXQocm90YXRlUXVhdDogUXVhdGVybmlvbiwgcmVsYXRpdmVUb0xvY2FsOiBib29sZWFuKSB7XG4gICAgaWYgKHJlbGF0aXZlVG9Mb2NhbCkge1xuICAgICAgUXVhdGVybmlvbi5tdWx0aXBseSh0aGlzLnJvdGF0aW9uUXVhdGVybmlvbiwgcm90YXRlUXVhdCwgdGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUXVhdGVybmlvbi5tdWx0aXBseShyb3RhdGVRdWF0LCB0aGlzLndvcmxkUm90YXRpb25RdWF0ZXJuaW9uLCB0aGlzLl93b3JsZFJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfdHJhbnNsYXRlKHRyYW5zbGF0aW9uOiBWZWN0b3IzLCByZWxhdGl2ZVRvTG9jYWw6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgaWYgKHJlbGF0aXZlVG9Mb2NhbCkge1xuICAgICAgdGhpcy5fcG9zaXRpb24uYWRkKHRyYW5zbGF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fd29ybGRQb3NpdGlvbi5hZGQodHJhbnNsYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3JvdGF0ZVhZWih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCByZWxhdGl2ZVRvTG9jYWw6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgY29uc3QgcmFkRmFjdG9yID0gTWF0aFV0aWwuZGVncmVlVG9SYWRGYWN0b3I7XG4gICAgY29uc3Qgcm90UXVhdCA9IFRyYW5zZm9ybS5fdGVtcFF1YXQwO1xuICAgIFF1YXRlcm5pb24ucm90YXRpb25FdWxlcih4ICogcmFkRmFjdG9yLCB5ICogcmFkRmFjdG9yLCB6ICogcmFkRmFjdG9yLCByb3RRdWF0KTtcbiAgICB0aGlzLl9yb3RhdGVCeVF1YXQocm90UXVhdCwgcmVsYXRpdmVUb0xvY2FsKTtcbiAgfVxuXG4gIHByaXZhdGUgX29uUG9zaXRpb25DaGFuZ2VkKCk6IHZvaWQge1xuICAgIHRoaXMuX3NldERpcnR5RmxhZ1RydWUoVHJhbnNmb3JtRmxhZy5Mb2NhbE1hdHJpeCk7XG4gICAgdGhpcy5fdXBkYXRlV29ybGRQb3NpdGlvbkZsYWcoKTtcbiAgfVxuXG4gIHByaXZhdGUgX29uV29ybGRQb3NpdGlvbkNoYW5nZWQoKTogdm9pZCB7XG4gICAgY29uc3Qgd29ybGRQb3NpdGlvbiA9IHRoaXMuX3dvcmxkUG9zaXRpb247XG4gICAgLy8gY29uc3QgcGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50VHJhbnNmb3JtKCk7XG4gICAgY29uc3QgcGFyZW50ID0gbnVsbDtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBNYXRyaXg0LmludmVydChwYXJlbnQud29ybGRNYXRyaXgsIFRyYW5zZm9ybS5fdGVtcE1hdDQxKTtcbiAgICAgIFZlY3RvcjMudHJhbnNmb3JtQ29vcmRpbmF0ZSh3b3JsZFBvc2l0aW9uLCBUcmFuc2Zvcm0uX3RlbXBNYXQ0MSwgdGhpcy5fcG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3b3JsZFBvc2l0aW9uLmNsb25lVG8odGhpcy5fcG9zaXRpb24pO1xuICAgIH1cbiAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLldvcmxkUG9zaXRpb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Sb3RhdGlvbkNoYW5nZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnVHJ1ZShUcmFuc2Zvcm1GbGFnLkxvY2FsTWF0cml4IHwgVHJhbnNmb3JtRmxhZy5Mb2NhbFF1YXQpO1xuICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuTG9jYWxFdWxlcik7XG4gICAgdGhpcy5fdXBkYXRlV29ybGRSb3RhdGlvbkZsYWcoKTtcbiAgfVxuXG4gIHByaXZhdGUgX29uV29ybGRSb3RhdGlvbkNoYW5nZWQoKTogdm9pZCB7XG4gICAgY29uc3Qgd29ybGRSb3RhdGlvbiA9IHRoaXMuX3dvcmxkUm90YXRpb247XG4gICAgUXVhdGVybmlvbi5yb3RhdGlvbkV1bGVyKFxuICAgICAgTWF0aFV0aWwuZGVncmVlVG9SYWRpYW4od29ybGRSb3RhdGlvbi54KSxcbiAgICAgIE1hdGhVdGlsLmRlZ3JlZVRvUmFkaWFuKHdvcmxkUm90YXRpb24ueSksXG4gICAgICBNYXRoVXRpbC5kZWdyZWVUb1JhZGlhbih3b3JsZFJvdGF0aW9uLnopLFxuICAgICAgdGhpcy5fd29ybGRSb3RhdGlvblF1YXRlcm5pb24sXG4gICAgKTtcbiAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLldvcmxkRXVsZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Sb3RhdGlvblF1YXRlcm5pb25DaGFuZ2VkKCk6IHZvaWQge1xuICAgIHRoaXMuX3NldERpcnR5RmxhZ1RydWUoVHJhbnNmb3JtRmxhZy5Mb2NhbE1hdHJpeCB8IFRyYW5zZm9ybUZsYWcuTG9jYWxFdWxlcik7XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Mb2NhbFF1YXQpO1xuICAgIHRoaXMuX3VwZGF0ZVdvcmxkUm90YXRpb25GbGFnKCk7XG4gIH1cblxuICBwcml2YXRlIF9vbldvcmxkUm90YXRpb25RdWF0ZXJuaW9uQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICBjb25zdCB3b3JsZFJvdGF0aW9uUXVhdGVybmlvbiA9IHRoaXMuX3dvcmxkUm90YXRpb25RdWF0ZXJuaW9uO1xuICAgIC8vIGNvbnN0IHBhcmVudCA9IHRoaXMuX2dldFBhcmVudFRyYW5zZm9ybSgpO1xuICAgIGNvbnN0IHBhcmVudCA9IG51bGw7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgY29uc3QgaW52UGFyZW50UXVhdGVybmlvbiA9IFRyYW5zZm9ybS5fdGVtcFF1YXQwO1xuICAgICAgUXVhdGVybmlvbi5pbnZlcnQocGFyZW50LndvcmxkUm90YXRpb25RdWF0ZXJuaW9uLCBpbnZQYXJlbnRRdWF0ZXJuaW9uKTtcbiAgICAgIFF1YXRlcm5pb24ubXVsdGlwbHkoaW52UGFyZW50UXVhdGVybmlvbiwgd29ybGRSb3RhdGlvblF1YXRlcm5pb24sIHRoaXMuX3JvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uLmNsb25lVG8odGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICB9XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Xb3JsZFF1YXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25TY2FsZUNoYW5nZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnVHJ1ZShUcmFuc2Zvcm1GbGFnLkxvY2FsTWF0cml4KTtcbiAgICB0aGlzLl91cGRhdGVXb3JsZFNjYWxlRmxhZygpO1xuICB9XG59XG4vKipcbiAqIERpcnR5IGZsYWcgb2YgdHJhbnNmb3JtLlxuICovXG5lbnVtIFRyYW5zZm9ybUZsYWcge1xuICBMb2NhbEV1bGVyID0gMHgxLFxuICBMb2NhbFF1YXQgPSAweDIsXG4gIFdvcmxkUG9zaXRpb24gPSAweDQsXG4gIFdvcmxkRXVsZXIgPSAweDgsXG4gIFdvcmxkUXVhdCA9IDB4MTAsXG4gIFdvcmxkU2NhbGUgPSAweDIwLFxuICBMb2NhbE1hdHJpeCA9IDB4NDAsXG4gIFdvcmxkTWF0cml4ID0gMHg4MCxcblxuICAvKiogV29ybGRNYXRyaXggfCBXb3JsZFBvc2l0aW9uICovXG4gIC8vIDEzMlxuICBXbVdwID0gMHg4NCxcbiAgLyoqIFdvcmxkTWF0cml4IHwgV29ybGRFdWxlciB8IFdvcmxkUXVhdCAqL1xuICAvLyAxNTJcbiAgV21XZVdxID0gMHg5OCxcbiAgLyoqIFdvcmxkTWF0cml4IHwgV29ybGRQb3NpdGlvbiB8IFdvcmxkRXVsZXIgfCBXb3JsZFF1YXQgKi9cbiAgLy8gMTU2XG4gIFdtV3BXZVdxID0gMHg5YyxcbiAgLyoqIFdvcmxkTWF0cml4IHwgV29ybGRTY2FsZSAqL1xuICAvLyAxNjBcbiAgV21XcyA9IDB4YTAsXG4gIC8qKiBXb3JsZE1hdHJpeCB8IFdvcmxkUG9zaXRpb24gfCBXb3JsZFNjYWxlICovXG4gIC8vIDE2NFxuICBXbVdwV3MgPSAweGE0LFxuICAvKiogV29ybGRNYXRyaXggfCBXb3JsZFBvc2l0aW9uIHwgV29ybGRFdWxlciB8IFdvcmxkUXVhdCB8IFdvcmxkU2NhbGUgKi9cbiAgLy8gMTEgKiAxNiArIDEyID0gMTg4XG4gIFdtV3BXZVdxV3MgPSAweGJjLFxufVxuIiwiaW1wb3J0IHsgT3JiaXRDb250cm9sIH0gZnJvbSAnLi4vY29udHJvbHMvT3JiaXRDb250cm9sJztcbmltcG9ydCB7IE1hdGhVdGlsLCBNYXRyaXg0LCBRdWF0ZXJuaW9uLCBWZWN0b3IyLCBWZWN0b3IzLCBWZWN0b3I0IH0gZnJvbSAnLi4vbWF0aCc7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuL0VuZ2luZSc7XG5pbXBvcnQgeyBTaGFkZXIsIFNoYWRlckRhdGEsIFNoYWRlckRhdGFHcm91cCB9IGZyb20gJy4vc2hhZGVyJztcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vVHJhbnNmb3JtJztcblxuLyoqXG4gKiBDYW1lcmEuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYW1lcmEge1xuICAvLyDmiorlvJXmk47kuZ/lvJXov5vmnaXkuLvopoHmmK/kuLrkuobojrflj5bliLBjYW52YXPnmoTlrr3pq5hcbiAgLy8g5L6/5LqO6K6+572u6YCP6KeG5oqV5b2x55+p6Zi15LiO5a696auY5q+UXG4gIC8vIFRPRE/lvoXph43mnoTvvIzmir3lh7rkuIDkuKpDb21wb25lbnRcbiAgcHJpdmF0ZSBfZW5naW5lOiBFbmdpbmU7XG5cbiAgLy8g5Li76KaB5piv5Li65LqG6K6pT3JiaXRDb250cm9s6I635Y+W5YiwY2FudmFzXG4gIGdldCBlbmdpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZ2luZTtcbiAgfVxuXG4gIHB1YmxpYyB0cmFuc2Zvcm06IFRyYW5zZm9ybTtcblxuICBwcml2YXRlIHN0YXRpYyBfdmlld01hdHJpeFByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X3ZpZXdNYXQnKTtcbiAgcHJpdmF0ZSBzdGF0aWMgX3Byb2plY3Rpb25NYXRyaXhQcm9wZXJ0eSA9IFNoYWRlci5nZXRQcm9wZXJ0eUJ5TmFtZSgndV9wcm9qTWF0Jyk7XG4gIHByaXZhdGUgc3RhdGljIF9pbnZlcnNlVlBNYXRyaXhQcm9wZXJ0eSA9IFNoYWRlci5nZXRQcm9wZXJ0eUJ5TmFtZSgndV9pbnZWUE1hdCcpO1xuICBwcml2YXRlIHN0YXRpYyBfdnBNYXRyaXhQcm9wZXJ0eSA9IFNoYWRlci5nZXRQcm9wZXJ0eUJ5TmFtZSgndV92cE1hdCcpO1xuICBwcml2YXRlIHN0YXRpYyBfY2FtZXJhUG9zaXRpb25Qcm9wZXJ0eSA9IFNoYWRlci5nZXRQcm9wZXJ0eUJ5TmFtZSgndV9jYW1lcmFQb3MnKTtcbiAgcHJpdmF0ZSBzdGF0aWMgX2NhbWVyYVBvc1NxdWFyZWRQcm9wZXJ0eSA9IFNoYWRlci5nZXRQcm9wZXJ0eUJ5TmFtZSgndV9jYW1lcmFQb3NTcXVhcmVkJyk7XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIGludmVyc2Ugb2YgdGhlIHJvdGF0aW9uIHRyYW5zbGF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHJvdGF0aW9uIC0gVGhlIHJvdGF0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIG1hdHJpeFxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBUaGUgdHJhbnNsYXRpb24gdXNlZCB0byBjYWxjdWxhdGUgbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBtYXRyaXhcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF9yb3RhdGlvblRyYW5zbGF0aW9uSW52KHJvdGF0aW9uOiBRdWF0ZXJuaW9uLCB0cmFuc2xhdGlvbjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KSB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeyB4LCB5LCB6LCB3IH0gPSByb3RhdGlvbjtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeHkgPSB4ICogeTI7XG4gICAgbGV0IHh6ID0geCAqIHoyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgeXogPSB5ICogejI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gICAgb2VbMF0gPSAxIC0gKHl5ICsgenopO1xuICAgIG9lWzFdID0geHkgKyB3ejtcbiAgICBvZVsyXSA9IHh6IC0gd3k7XG4gICAgb2VbM10gPSAwO1xuXG4gICAgb2VbNF0gPSB4eSAtIHd6O1xuICAgIG9lWzVdID0gMSAtICh4eCArIHp6KTtcbiAgICBvZVs2XSA9IHl6ICsgd3g7XG4gICAgb2VbN10gPSAwO1xuXG4gICAgb2VbOF0gPSB4eiArIHd5O1xuICAgIG9lWzldID0geXogLSB3eDtcbiAgICBvZVsxMF0gPSAxIC0gKHh4ICsgeXkpO1xuICAgIG9lWzExXSA9IDA7XG5cbiAgICBvZVsxMl0gPSB0cmFuc2xhdGlvbi54O1xuICAgIG9lWzEzXSA9IHRyYW5zbGF0aW9uLnk7XG4gICAgb2VbMTRdID0gdHJhbnNsYXRpb24uejtcbiAgICBvZVsxNV0gPSAxO1xuXG4gICAgb3V0LmludmVydCgpO1xuICB9XG5cbiAgLyoqIFNoYWRlciBkYXRhLiAqL1xuICByZWFkb25seSBzaGFkZXJEYXRhOiBTaGFkZXJEYXRhID0gbmV3IFNoYWRlckRhdGEoU2hhZGVyRGF0YUdyb3VwLkNhbWVyYSk7XG5cbiAgLyoqIFJlbmRlcmluZyBwcmlvcml0eSAtIEEgQ2FtZXJhIHdpdGggaGlnaGVyIHByaW9yaXR5IHdpbGwgYmUgcmVuZGVyZWQgb24gdG9wIG9mIGEgY2FtZXJhIHdpdGggbG93ZXIgcHJpb3JpdHkuICovXG4gIHByaW9yaXR5OiBudW1iZXIgPSAwO1xuICBvcmJpdENvbnRyb2w6IE9yYml0Q29udHJvbDtcblxuICBwcml2YXRlIF9pc09ydGhvZ3JhcGhpYzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9uZWFyQ2xpcFBsYW5lOiBudW1iZXIgPSAwLjE7XG4gIHByaXZhdGUgX2ZhckNsaXBQbGFuZTogbnVtYmVyID0gMTAwO1xuICBwcml2YXRlIF9maWVsZE9mVmlldzogbnVtYmVyID0gNDU7XG4gIHByaXZhdGUgX29ydGhvZ3JhcGhpY1NpemU6IG51bWJlciA9IDEwO1xuICAvLyBUT0RPXG4gIHByaXZhdGUgX2N1c3RvbUFzcGVjdFJhdGlvOiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSBfcHJvamVjdGlvbk1hdHJpeDogTWF0cml4NCA9IG5ldyBNYXRyaXg0KCk7XG4gIHByaXZhdGUgX3ZpZXdNYXRyaXg6IE1hdHJpeDQgPSBuZXcgTWF0cml4NCgpO1xuICBwcml2YXRlIF92aWV3cG9ydDogVmVjdG9yNCA9IG5ldyBWZWN0b3I0KDAsIDAsIDEsIDEpO1xuICAvLyDov5nkuKrkuJzopb/mnInku4DkuYjnlKjlkaJcbiAgcHJpdmF0ZSBfbGFzdEFzcGVjdFNpemU6IFZlY3RvcjIgPSBuZXcgVmVjdG9yMigwLCAwKTtcblxuICBnZXQgdmlld01hdHJpeCgpOiBSZWFkb25seTxNYXRyaXg0PiB7XG4gICAgQ2FtZXJhLl9yb3RhdGlvblRyYW5zbGF0aW9uSW52KFxuICAgICAgdGhpcy50cmFuc2Zvcm0ud29ybGRSb3RhdGlvblF1YXRlcm5pb24sXG4gICAgICB0aGlzLnRyYW5zZm9ybS53b3JsZFBvc2l0aW9uLFxuICAgICAgdGhpcy5fdmlld01hdHJpeCxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4O1xuICB9XG5cbiAgc2V0IHByb2plY3Rpb25NYXRyaXgodmFsdWU6IE1hdHJpeDQpIHtcbiAgICB0aGlzLl9wcm9qZWN0aW9uTWF0cml4ID0gdmFsdWU7XG4gIH1cblxuICBnZXQgcHJvamVjdGlvbk1hdHJpeCgpOiBNYXRyaXg0IHtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9lbmdpbmUuY2FudmFzO1xuICAgIHRoaXMuX2xhc3RBc3BlY3RTaXplLnggPSBjYW52YXMud2lkdGg7XG4gICAgdGhpcy5fbGFzdEFzcGVjdFNpemUueSA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgY29uc3QgYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgIGlmICghdGhpcy5faXNPcnRob2dyYXBoaWMpIHtcbiAgICAgIE1hdHJpeDQucGVyc3BlY3RpdmUoXG4gICAgICAgIE1hdGhVdGlsLmRlZ3JlZVRvUmFkaWFuKHRoaXMuX2ZpZWxkT2ZWaWV3KSxcbiAgICAgICAgYXNwZWN0UmF0aW8sXG4gICAgICAgIHRoaXMuX25lYXJDbGlwUGxhbmUsXG4gICAgICAgIHRoaXMuX2ZhckNsaXBQbGFuZSxcbiAgICAgICAgdGhpcy5fcHJvamVjdGlvbk1hdHJpeCxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fb3J0aG9ncmFwaGljU2l6ZSAqIGFzcGVjdFJhdGlvO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5fb3J0aG9ncmFwaGljU2l6ZTtcbiAgICAgIE1hdHJpeDQub3J0aG8oLXdpZHRoLCB3aWR0aCwgLWhlaWdodCwgaGVpZ2h0LCB0aGlzLl9uZWFyQ2xpcFBsYW5lLCB0aGlzLl9mYXJDbGlwUGxhbmUsIHRoaXMuX3Byb2plY3Rpb25NYXRyaXgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcHJvamVjdGlvbk1hdHJpeDtcbiAgfVxuXG4gIC8qKlxuICAgKiBOZWFyIGNsaXAgcGxhbmUgLSB0aGUgY2xvc2VzdCBwb2ludCB0byB0aGUgY2FtZXJhIHdoZW4gcmVuZGVyaW5nIG9jY3Vycy5cbiAgICovXG4gIGdldCBuZWFyQ2xpcFBsYW5lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX25lYXJDbGlwUGxhbmU7XG4gIH1cblxuICBzZXQgbmVhckNsaXBQbGFuZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbmVhckNsaXBQbGFuZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZhciBjbGlwIHBsYW5lIC0gdGhlIGZ1cnRoZXN0IHBvaW50IHRvIHRoZSBjYW1lcmEgd2hlbiByZW5kZXJpbmcgb2NjdXJzLlxuICAgKi9cbiAgZ2V0IGZhckNsaXBQbGFuZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mYXJDbGlwUGxhbmU7XG4gIH1cblxuICBzZXQgZmFyQ2xpcFBsYW5lKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9mYXJDbGlwUGxhbmUgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgY2FtZXJhJ3MgdmlldyBhbmdsZS4gYWN0aXZhdGluZyB3aGVuIGNhbWVyYSB1c2UgcGVyc3BlY3RpdmUgcHJvamVjdGlvbi5cbiAgICovXG4gIGdldCBmaWVsZE9mVmlldygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9maWVsZE9mVmlldztcbiAgfVxuXG4gIHNldCBmaWVsZE9mVmlldyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZmllbGRPZlZpZXcgPSB2YWx1ZTtcbiAgfVxuXG4gIC8vIOiOt+WPluWuvemrmOavlFxuICBnZXQgYXNwZWN0UmF0aW8oKTogbnVtYmVyIHtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9lbmdpbmUuY2FudmFzO1xuICAgIC8vIFRPRE86IOiAg+iZkeinhuWPo1xuICAgIHJldHVybiB0aGlzLl9jdXN0b21Bc3BlY3RSYXRpbyA/PyAoY2FudmFzLndpZHRoICogdGhpcy5fdmlld3BvcnQueikgLyAoY2FudmFzLmhlaWdodCAqIHRoaXMuX3ZpZXdwb3J0LncpO1xuICB9XG5cbiAgc2V0IGFzcGVjdFJhdGlvKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9jdXN0b21Bc3BlY3RSYXRpbyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZpZXdwb3J0LCBub3JtYWxpemVkIGV4cHJlc3Npb24sIHRoZSB1cHBlciBsZWZ0IGNvcm5lciBpcyAoMCwgMCksIGFuZCB0aGUgbG93ZXIgcmlnaHQgY29ybmVyIGlzICgxLCAxKS5cbiAgICogQHJlbWFya3MgUmUtYXNzaWdubWVudCBpcyByZXF1aXJlZCBhZnRlciBtb2RpZmljYXRpb24gdG8gZW5zdXJlIHRoYXQgdGhlIG1vZGlmaWNhdGlvbiB0YWtlcyBlZmZlY3QuXG4gICAqL1xuICBnZXQgdmlld3BvcnQoKTogVmVjdG9yNCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdwb3J0O1xuICB9XG5cbiAgc2V0IHZpZXdwb3J0KHZhbHVlOiBWZWN0b3I0KSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl92aWV3cG9ydCkge1xuICAgICAgdmFsdWUuY2xvbmVUbyh0aGlzLl92aWV3cG9ydCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgaXQgaXMgb3J0aG9nb25hbCwgdGhlIGRlZmF1bHQgaXMgZmFsc2UuIFRydWUgd2lsbCB1c2Ugb3J0aG9ncmFwaGljIHByb2plY3Rpb24sIGZhbHNlIHdpbGwgdXNlIHBlcnNwZWN0aXZlIHByb2plY3Rpb24uXG4gICAqL1xuICBnZXQgaXNPcnRob2dyYXBoaWMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzT3J0aG9ncmFwaGljO1xuICB9XG5cbiAgc2V0IGlzT3J0aG9ncmFwaGljKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faXNPcnRob2dyYXBoaWMgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBvcnRob2dyYXBoaWNTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX29ydGhvZ3JhcGhpY1NpemU7XG4gIH1cblxuICBzZXQgb3J0aG9ncmFwaGljU2l6ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fb3J0aG9ncmFwaGljU2l6ZSA9IHZhbHVlO1xuICB9XG5cbiAgLy8gVE9ET++8miDlhbblrp5FbnRpdHnlkoxDYW1lcmHlupTor6Xlho3mir3osaHkuIrkuIDlsYJDb21wb25lbnRcbiAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUpIHtcbiAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKCk7XG4gICAgdGhpcy5vcmJpdENvbnRyb2wgPSBuZXcgT3JiaXRDb250cm9sKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZCBjYW1lcmEtcmVsYXRlZCBzaGFkZXIgZGF0YS5cbiAgICovXG4gIHByaXZhdGUgX3VwZGF0ZVNoYWRlckRhdGEoKTogdm9pZCB7XG4gICAgY29uc3Qgc2hhZGVyRGF0YSA9IHRoaXMuc2hhZGVyRGF0YTtcblxuICAgIGNvbnN0IHZwTWF0ID0gbmV3IE1hdHJpeDQoKTtcbiAgICAvLyDpnIDopoHmiorpgIbnn6npmLXljZXni6zmkJ7kuIDkuKrlj5jph4/vvIzlm6DkuLrmmK/lvJXnlKjnsbvlnovvvIzotYvlgLzlubbmsqHmnInlvIDovp/mlrDlr7nosaFcbiAgICBjb25zdCBpbnZWcE1hdCA9IG5ldyBNYXRyaXg0KCk7XG4gICAgY29uc3QgY2FtZXJhUG9zID0gdGhpcy50cmFuc2Zvcm0ud29ybGRQb3NpdGlvbjtcbiAgICBjb25zdCBjYW1lcmFQb3NTcXVhcmVkID0gbmV3IFZlY3RvcjMoKTtcblxuICAgIC8vIOazqOaEj+mhuuW6j++8mnBlcnNwZWN0ICogdmlldyAqIG1vZGVsXG4gICAgTWF0cml4NC5tdWx0aXBseSh0aGlzLnByb2plY3Rpb25NYXRyaXgsIHRoaXMudmlld01hdHJpeCwgdnBNYXQpO1xuICAgIE1hdHJpeDQuaW52ZXJ0KHZwTWF0LCBpbnZWcE1hdCk7XG4gICAgVmVjdG9yMy5tdWx0aXBseShjYW1lcmFQb3MsIGNhbWVyYVBvcywgY2FtZXJhUG9zU3F1YXJlZCk7XG5cbiAgICAvLyBUT0RPOiDlupTor6XmiopWUOefqemYtemDveaIkOWlveWGjeS8oOe7mWds77yM5bCB6KOFY29tbW9uIHNoYWRlcueahOaXtuWAmeWGjeWBmlxuICAgIHNoYWRlckRhdGEuc2V0TWF0cml4KENhbWVyYS5fdmlld01hdHJpeFByb3BlcnR5LCB0aGlzLnZpZXdNYXRyaXgpO1xuICAgIHNoYWRlckRhdGEuc2V0TWF0cml4KENhbWVyYS5fcHJvamVjdGlvbk1hdHJpeFByb3BlcnR5LCB0aGlzLnByb2plY3Rpb25NYXRyaXgpO1xuICAgIHNoYWRlckRhdGEuc2V0TWF0cml4KENhbWVyYS5fdnBNYXRyaXhQcm9wZXJ0eSwgdnBNYXQpO1xuICAgIHNoYWRlckRhdGEuc2V0TWF0cml4KENhbWVyYS5faW52ZXJzZVZQTWF0cml4UHJvcGVydHksIGludlZwTWF0KTtcbiAgICBzaGFkZXJEYXRhLnNldFZlY3RvcjMoQ2FtZXJhLl9jYW1lcmFQb3NpdGlvblByb3BlcnR5LCBjYW1lcmFQb3MpO1xuICAgIHNoYWRlckRhdGEuc2V0VmVjdG9yMyhDYW1lcmEuX2NhbWVyYVBvc1NxdWFyZWRQcm9wZXJ0eSwgY2FtZXJhUG9zU3F1YXJlZCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHVwbG9hZCBtZXRob2QgaXMgdHJpZ2dlcmVkIGJ5IHJlbmRlci5cbiAgICovXG4gIHJlbmRlcigpOiB2b2lkIHtcbiAgICB0aGlzLl91cGRhdGVTaGFkZXJEYXRhKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi8uLi9tYXRoJztcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4uL1RyYW5zZm9ybSc7XG5cbi8qKlxuICogTGlnaHRpbmcgbW9kZWwgYmFzZSBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIExpZ2h0IHtcbiAgLy8gVE9ETzog6L+Z5Liq5oq955qE5LiN5aW977yM5Y+q5pyJ54K55YWJ5rqQ6ZyA6KaB5L2NXG4gIC8qKiBMaWdodCBzb3VyY2UgcG9zaXRpb24uICovXG4gIHByb3RlY3RlZCB0cmFuc2Zvcm06IFRyYW5zZm9ybTtcblxuICBwcml2YXRlIF92aWV3TWF0OiBNYXRyaXg0O1xuICBwcml2YXRlIF9pbnZlcnNlVmlld01hdDogTWF0cml4NDtcblxuICAvLyDov5nkuKrmmoLml7bmsqHku4DkuYjnlKhcbiAgLy8g5Zug5Li65oiR5Lus55qE54K55YWJ5rqQ6YeH55So55qE5piv5LiW55WM5Z2Q5qCH57O7XG4gIC8qKlxuICAgKiBHZXQgdGhlIHZpZXcgbWF0cml4IG9mIHRoZSBsaWdodCBzb3VyY2UgcG9zaXRpb24uXG4gICAqL1xuICBnZXQgdmlld01hdHJpeCgpIHtcbiAgICBpZiAoIXRoaXMuX3ZpZXdNYXQpIHRoaXMuX3ZpZXdNYXQgPSBuZXcgTWF0cml4NCgpO1xuICAgIE1hdHJpeDQuaW52ZXJ0KHRoaXMudHJhbnNmb3JtLndvcmxkTWF0cml4LCB0aGlzLl92aWV3TWF0KTtcbiAgICByZXR1cm4gdGhpcy5fdmlld01hdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGludmVyc2Ugb2YgdGhlIHZpZXcgbWF0cml4IGZvciB0aGUgbGlnaHQgc291cmNlIHBvc2l0aW9uLlxuICAgKi9cbiAgZ2V0IGludmVyc2VWaWV3TWF0cml4KCkge1xuICAgIGlmICghdGhpcy5faW52ZXJzZVZpZXdNYXQpIHRoaXMuX2ludmVyc2VWaWV3TWF0ID0gbmV3IE1hdHJpeDQoKTtcbiAgICBNYXRyaXg0LmludmVydCh0aGlzLnZpZXdNYXRyaXgsIHRoaXMuX2ludmVyc2VWaWV3TWF0KTtcbiAgICByZXR1cm4gdGhpcy5faW52ZXJzZVZpZXdNYXQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0oKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yJztcbmltcG9ydCB7IFNoYWRlciwgU2hhZGVyRGF0YSwgU2hhZGVyUHJvcGVydHkgfSBmcm9tICcuLi9zaGFkZXInO1xuaW1wb3J0IHsgTGlnaHQgfSBmcm9tICcuL0xpZ2h0JztcblxuLyoqXG4gKiBQb2ludCBsaWdodC5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvaW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XG4gIC8vIOWboOS4uuWPr+iDveacieWkmuS4queCueWFiea6kFxuICAvKiogR2V0IHRoZSBhZGRyZXNzIG9mIHRoZSBwb2ludCBsaWdodCBjb2xvciB1bmlmb3JtIHZhcmlhYmxlIGluIHRoZSBzaGFkZXIuICovXG4gIHByaXZhdGUgc3RhdGljIF9jb2xvclByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSA9IFNoYWRlci5nZXRQcm9wZXJ0eUJ5TmFtZSgndV9wb2ludExpZ2h0Q29sb3InKTtcbiAgLyoqIEdldCB0aGUgYWRkcmVzcyBvZiB0aGUgdW5pZm9ybSB2YXJpYWJsZSBvZiB0aGUgcG9pbnQgbGlnaHQgcG9zaXRpb24gaW4gdGhlIHNoYWRlci4gKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX3Bvc2l0aW9uUHJvcGVydHk6IFNoYWRlclByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X3BvaW50TGlnaHRQb3NpdGlvbicpO1xuICAvKiogQmxlbmQgb2JqZWN0IG9mIGNvbG9yIGFuZCBwb3NpdGlvbi4gKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX2NvbWJpbmVkRGF0YSA9IHtcbiAgICBjb2xvcjogbmV3IEZsb2F0MzJBcnJheSgzKSxcbiAgICBwb3NpdGlvbjogbmV3IEZsb2F0MzJBcnJheSgzKSxcbiAgfTtcblxuICAvLyDnmb3lhYnkuI3nrqHlkozku4DkuYjlhYnnm7jkuZjvvIzpg73kv53nlZnpopzoibJcbiAgLyoqIFRoZSBjb2xvciBvZiB0aGUgbGlnaHQsIHRoZSBkZWZhdWx0IGlzIHdoaXRlIGxpZ2h0LiAqL1xuICBjb2xvcjogQ29sb3IgPSBuZXcgQ29sb3IoMSwgMSwgMSwgMSk7XG4gIC8qKiBJbnRlbnNpdHkgb2YgbGlnaHQuICovXG4gIGludGVuc2l0eTogbnVtYmVyID0gMS4wO1xuXG4gIC8qKiBGaW5hbCBsaWdodCBjb2xvci4gKi9cbiAgcHJpdmF0ZSBfbGlnaHRDb2xvcjogQ29sb3IgPSBuZXcgQ29sb3IoMSwgMSwgMSwgMSk7XG5cbiAgLyoqIEdldCB0aGUgcG9zaXRpb24gb2YgYSBwb2ludCBsaWdodC4gKi9cbiAgZ2V0IHBvc2l0aW9uKCk6IFZlY3RvcjMge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS53b3JsZFBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZmluYWwgbGlnaHQgY29sb3IuXG4gICAqL1xuICBnZXQgbGlnaHRDb2xvcigpOiBDb2xvciB7XG4gICAgdGhpcy5fbGlnaHRDb2xvci5yID0gdGhpcy5jb2xvci5yICogdGhpcy5pbnRlbnNpdHk7XG4gICAgdGhpcy5fbGlnaHRDb2xvci5nID0gdGhpcy5jb2xvci5nICogdGhpcy5pbnRlbnNpdHk7XG4gICAgdGhpcy5fbGlnaHRDb2xvci5iID0gdGhpcy5jb2xvci5iICogdGhpcy5pbnRlbnNpdHk7XG4gICAgdGhpcy5fbGlnaHRDb2xvci5hID0gdGhpcy5jb2xvci5hICogdGhpcy5pbnRlbnNpdHk7XG4gICAgcmV0dXJuIHRoaXMuX2xpZ2h0Q29sb3I7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwb3NpdGlvbjogVmVjdG9yMykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50cmFuc2Zvcm0ud29ybGRQb3NpdGlvbiA9IHBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB2YXJpYWJsZSB2YWx1ZSBpbiBzaGFkZXIuXG4gICAqIEBwYXJhbSBzaGFkZXJEYXRhIFNoYWRlciBkYXRhLlxuICAgKi9cbiAgX3VwZGF0ZVNoYWRlckRhdGEoc2hhZGVyRGF0YTogU2hhZGVyRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2FwcGVuZERhdGEoKTtcbiAgICBjb25zdCBkYXRhID0gUG9pbnRMaWdodC5fY29tYmluZWREYXRhO1xuXG4gICAgc2hhZGVyRGF0YS5zZXRGbG9hdEFycmF5KFBvaW50TGlnaHQuX2NvbG9yUHJvcGVydHksIGRhdGEuY29sb3IpO1xuICAgIHNoYWRlckRhdGEuc2V0RmxvYXRBcnJheShQb2ludExpZ2h0Ll9wb3NpdGlvblByb3BlcnR5LCBkYXRhLnBvc2l0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb3B1bGF0ZSBmZWRlcmF0ZWQgZGF0YS5cbiAgICovXG4gIF9hcHBlbmREYXRhKCk6IHZvaWQge1xuICAgIGNvbnN0IGRhdGEgPSBQb2ludExpZ2h0Ll9jb21iaW5lZERhdGE7XG4gICAgY29uc3QgbGlnaHRDb2xvciA9IHRoaXMubGlnaHRDb2xvcjtcbiAgICBjb25zdCBsaWdodFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcblxuICAgIGRhdGEuY29sb3JbMF0gPSBsaWdodENvbG9yLnI7XG4gICAgZGF0YS5jb2xvclsxXSA9IGxpZ2h0Q29sb3IuZztcbiAgICBkYXRhLmNvbG9yWzJdID0gbGlnaHRDb2xvci5iO1xuICAgIGRhdGEucG9zaXRpb25bMF0gPSBsaWdodFBvc2l0aW9uLng7XG4gICAgZGF0YS5wb3NpdGlvblsxXSA9IGxpZ2h0UG9zaXRpb24ueTtcbiAgICBkYXRhLnBvc2l0aW9uWzJdID0gbGlnaHRQb3NpdGlvbi56O1xuICB9XG59XG4iLCJpbXBvcnQgeyBTaGFkZXIsIFNoYWRlckRhdGEsIFNoYWRlclByb3BlcnR5IH0gZnJvbSAnLi4vc2hhZGVyJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbWF0aCc7XG5cbi8vIOi/meS4quS4jeeUqOe7p+aJv0xpZ2h077yM5Zug5Li65Y+q6ZyA6KaB6aKc6ImyXG4vKipcbiAqIEFtYmllbnQgbGlnaHQuXG4gKi9cbmV4cG9ydCBjbGFzcyBBbWJpZW50TGlnaHQge1xuICAvKiogR2V0IHRoZSBhZGRyZXNzIG9mIHRoZSBwb2ludCBhbWJpZW50IGNvbG9yIHVuaWZvcm0gdmFyaWFibGUgaW4gdGhlIHNoYWRlci4gKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX2NvbG9yUHJvcGVydHk6IFNoYWRlclByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X2RpZmZ1c2VTcGVjdWxhckFtYmllbnRTaGluaW5lc3MnKTtcbiAgLyoqIFRoZSBjb2xvciBvZiB0aGUgbGlnaHQuICovXG4gIGNvbG9yOiBDb2xvcjtcblxuICBjb25zdHJ1Y3Rvcihjb2xvcjogQ29sb3IpIHtcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHZhcmlhYmxlIHZhbHVlIGluIHNoYWRlci5cbiAgICogQHBhcmFtIHNoYWRlckRhdGEgU2hhZGVyIGRhdGEuXG4gICAqL1xuICBfdXBkYXRlU2hhZGVyRGF0YShzaGFkZXJEYXRhOiBTaGFkZXJEYXRhKTogdm9pZCB7XG4gICAgY29uc3QgY29sb3IgPSB0aGlzLmNvbG9yO1xuICAgIGNvbnN0IGFtYmllbnRDb2xvciA9IG5ldyBGbG9hdDMyQXJyYXkoW2NvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIGNvbG9yLmFdKTtcbiAgICBzaGFkZXJEYXRhLnNldEZsb2F0QXJyYXkoQW1iaWVudExpZ2h0Ll9jb2xvclByb3BlcnR5LCBhbWJpZW50Q29sb3IpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aCc7XG5cbmV4cG9ydCBjbGFzcyBFbGxpcHNvaWQge1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFdnczg0OiBFbGxpcHNvaWQgPSBuZXcgRWxsaXBzb2lkKDYzNzgxMzcuMCwgNjM3ODEzNy4wLCA2MzU2NzUyLjMxNDI0NSk7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU2NhbGVkV2dzODQ6IEVsbGlwc29pZCA9IG5ldyBFbGxpcHNvaWQoMS4wLCAxLjAsIDYzNTY3NTIuMzE0MjQ1IC8gNjM3ODEzNy4wKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBVbml0U3BoZXJlOiBFbGxpcHNvaWQgPSBuZXcgRWxsaXBzb2lkKDEuMCwgMS4wLCAxLjApO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX3JhZGlpOiBWZWN0b3IzO1xuICBwcml2YXRlIHJlYWRvbmx5IF9yYWRpaVNxdWFyZWQ6IFZlY3RvcjM7XG4gIHByaXZhdGUgcmVhZG9ubHkgX29uZU92ZXJSYWRpaVNxdWFyZWQ6IFZlY3RvcjM7XG5cbiAgLyoqIFRoZSB0cmVlIHJhZGlpIG9mIHRoZSBlbGxpcHNvaWQuICovXG4gIGdldCByYWRpaSgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaWk7XG4gIH1cblxuICAvKiogVGhlIHNxdWFyZXMgY29ycmVzcG9uZGluZyB0byB0aGUgdGhyZWUgcmFkaWkgb2YgdGhlIGVsbGlwc29pZC4gKi9cbiAgZ2V0IHJhZGlpU3F1YXJlZCgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaWlTcXVhcmVkO1xuICB9XG5cbiAgLyoqIFRoZSBpbnZlcnNlIG9mIHRoZSBzcXVhcmUgY29ycmVzcG9uZGluZyB0byB0aGUgdGhyZWUgcmFkaWkgb2YgdGhlIGVsbGlwc29pZC4gKi9cbiAgZ2V0IG9uZU92ZXJSYWRpaVNxdWFyZWQoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMuX29uZU92ZXJSYWRpaVNxdWFyZWQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyKSB7XG4gICAgaWYgKGEgPD0gMCB8fCBiIDw9IDAgfHwgYyA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VsbGlwc29pZCBwYXJhbWV0ZXJzIGFyZSBub3QgYWxsb3dlZCB0byBiZSBzZXQgdG8gbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDAuJyk7XG4gICAgfVxuICAgIHRoaXMuX3JhZGlpID0gbmV3IFZlY3RvcjMoYSwgYiwgYyk7XG4gICAgdGhpcy5fcmFkaWlTcXVhcmVkID0gbmV3IFZlY3RvcjMoYSAqIGEsIGIgKiBiLCBjICogYyk7XG4gICAgdGhpcy5fb25lT3ZlclJhZGlpU3F1YXJlZCA9IG5ldyBWZWN0b3IzKFxuICAgICAgMSAvICh0aGlzLl9yYWRpaS54ICogdGhpcy5fcmFkaWkueCksXG4gICAgICAxIC8gKHRoaXMuX3JhZGlpLnkgKiB0aGlzLl9yYWRpaS55KSxcbiAgICAgIDEgLyAodGhpcy5fcmFkaWkueiAqIHRoaXMuX3JhZGlpLnopLFxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1vZGVsTWVzaCwgUHJpbWl0aXZlTWVzaCB9IGZyb20gJy4uL2NvcmUvbWVzaCc7XG5pbXBvcnQgeyBFbGxpcHNvaWQgfSBmcm9tICcuL0VsbGlwc29pZCc7XG5pbXBvcnQgeyBJbWFnZU1hdGVyaWFsLCBNYXRlcmlhbCB9IGZyb20gJy4uL2NvcmUvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgU2hhZGVyLCBTaGFkZXJEYXRhLCBTaGFkZXJQcm9wZXJ0eSB9IGZyb20gJy4uL2NvcmUvc2hhZGVyJztcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL2NvcmUvRW5naW5lJztcbmltcG9ydCB7IGVhcnRoVXJsIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4uL2NvcmUvRW50aXR5JztcblxuZXhwb3J0IGNsYXNzIFJheUNhc3RlZEdsb2JlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgX3NoYXBlUHJvcGVydHk6IFNoYWRlclByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X2dsb2JlT25lT3ZlclJhZGlpU3F1YXJlZCcpO1xuXG4gIHByaXZhdGUgX3NoYXBlOiBFbGxpcHNvaWQgPSBFbGxpcHNvaWQuU2NhbGVkV2dzODQ7XG4gIHByaXZhdGUgX3NoYWRlcjogU2hhZGVyID0gU2hhZGVyLmZpbmQoJ3JheUNhc3RlZEdsb2JlJyk7XG4gIHByaXZhdGUgX21lc2g6IE1vZGVsTWVzaDtcbiAgcHJpdmF0ZSBfbWF0ZXJpYWw6IE1hdGVyaWFsO1xuXG4gIC8qKiBUaGUgY29sbGVjdGlvbiBvZiBlbnRpdGllcyB1bmRlciB0aGUgZWFydGguICovXG4gIGVudGl0aWVzOiBFbnRpdHlbXSA9IFtdO1xuXG4gIC8qKiBUaGUgZWxsaXBzb2lkIHBhcmFtZXRlcnMgY29ycmVzcG9uZGluZyB0byB0aGUgc3BoZXJlLiAqL1xuICBnZXQgc2hhcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NoYXBlO1xuICB9XG5cbiAgLyoqIEN1YmUgbWVzaCBmb3IgR1BVIHJheSB0cmFjaW5nLiAqL1xuICBnZXQgbWVzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzaDtcbiAgfVxuXG4gIC8qKiBUaGUgbWF0ZXJpYWwgb2YgdGhlIHNwaGVyZSBzZWxlY3Rpb24uICovXG4gIGdldCBtYXRlcmlhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWF0ZXJpYWw7XG4gIH1cblxuICAvKiogVGhlIHNoYWRlciBvZiB0aGUgc3BoZXJlLiAqL1xuICBnZXQgc2hhZGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9zaGFkZXI7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgY3ViZSBncmlkIGFuZCBidWlsZCBhIHBpY3R1cmUgbWF0ZXJpYWwgYmFzZWQgb24gdGhlIGVuZ2luZS5cbiAgICogQHBhcmFtIGVuZ2luZSBFbmdpbmUgaW5zdGFuY2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbmdpbmU6IEVuZ2luZSkge1xuICAgIHRoaXMuX21lc2ggPSBQcmltaXRpdmVNZXNoLmNyZWF0ZUN1Ym9pZChlbmdpbmUsIDIsIDIsIDIpO1xuICAgIHRoaXMuX21hdGVyaWFsID0gbmV3IEltYWdlTWF0ZXJpYWwoZW5naW5lLCB0aGlzLnNoYWRlciwgZWFydGhVcmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZCB0aGUgcGFyYW1ldGVycyBvZiB0aGUgZWxsaXBzb2lkIHRvIHRoZSBHUFUuXG4gICAqIEBwYXJhbSBzaGFkZXJEYXRhIFNjZW5lIHNoYWRlcmRhdGEuXG4gICAqL1xuICB1cGxvYWRTaGFkZXJEYXRhKHNoYWRlckRhdGE6IFNoYWRlckRhdGEpOiB2b2lkIHtcbiAgICBzaGFkZXJEYXRhLnNldFZlY3RvcjMoUmF5Q2FzdGVkR2xvYmUuX3NoYXBlUHJvcGVydHksIHRoaXMuc2hhcGUub25lT3ZlclJhZGlpU3F1YXJlZCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4vRW5naW5lJztcbmltcG9ydCB7IEJhY2tncm91bmQgfSBmcm9tICcuL0JhY2tncm91bmQnO1xuaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSAnLi9DYW1lcmEnO1xuaW1wb3J0IHsgQ29sb3IsIFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoJztcbmltcG9ydCB7IFNoYWRlckRhdGEsIFNoYWRlckRhdGFHcm91cCB9IGZyb20gJy4vc2hhZGVyJztcbmltcG9ydCB7IEFtYmllbnRMaWdodCwgUG9pbnRMaWdodCB9IGZyb20gJy4vbGlnaHRpbmcnO1xuaW1wb3J0IHsgUmF5Q2FzdGVkR2xvYmUgfSBmcm9tICcuLi9nZW9ncmFwaGljL1JheUNhc3RlZEdsb2JlJztcblxuLy8gVE9ETzog5oq96LGh5Ye65p2l5LiA5LiqRW5naW5lT2JqZWN0ISEhIVxuZXhwb3J0IGNsYXNzIFNjZW5lIHtcbiAgcmVhZG9ubHkgc2hhZGVyRGF0YTogU2hhZGVyRGF0YSA9IG5ldyBTaGFkZXJEYXRhKFNoYWRlckRhdGFHcm91cC5TY2VuZSk7XG4gIC8qKiBUaGUgZW5naW5lIHRoZSBzY2VuZSBiZWxvbmdzIHRvLiAqL1xuICBlbmdpbmU6IEVuZ2luZTtcbiAgLyoqIENhbWVyYXMgaW4gdGhlIHNjZW5lLCB3ZSBvbmx5IGNvbnNpZGVyIHRoZSBjYXNlIHdoZXJlIHRoZXJlIGlzIG9ubHkgb25lIGNhbWVyYSBpbiB0aGUgc2NlbmUuICovXG4gIGNhbWVyYTogQ2FtZXJhO1xuICAvLyBUT0RPOiDopoHmg7PlnKjov5nph4zkvb/nlKjkvaDlsLHnmoTlhYjmir3osaHlh7rmnaVcbiAgLyoqIFRoZSBiYWNrZ3JvdW5kIG9mIHRoZSBzY2VuZSwgdGhlIGRlZmF1bHQgaXMgdGhlIHNreWJveC4gKi9cbiAgYmFja2dyb3VuZDogQmFja2dyb3VuZDtcbiAgLy8gVE9ETzog5Y+v6IO95pyJ5aSa5Liq54K55YWJ5rqQXG4gIC8qKiBQb2ludCBsaWdodHMgaW4gdGhlIHNjZW5lLiAqL1xuICBwb2ludExpZ2h0OiBQb2ludExpZ2h0O1xuICAvKiogQW1iaWVudCBsaWdodCBpbiB0aGUgc2NlbmUuICovXG4gIGFtYmllbnRMaWdodDogQW1iaWVudExpZ2h0O1xuICAvKiogRWFydGggaXMgdGhlIHJvb3QgZW50aXR5IGluIHRoZSBzY2VuZS4gKi9cbiAgcHJpdmF0ZSByZWFkb25seSBfZ2xvYmU6IFJheUNhc3RlZEdsb2JlO1xuXG4gIGdldCBnbG9iZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2xvYmU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGNhbWVyYSBhbmQgdGhlIGVhcnRoIGFyZSBsb2FkZWQgYnkgZGVmYXVsdCBpbnNpZGUgdGhlIGNvbnN0cnVjdG9yLlxuICAgKiBAcGFyYW0gZW5naW5lIFRoZSBlbmdpbmUgdGhlIHNjZW5lIGJlbG9uZ3MgdG8uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbmdpbmU6IEVuZ2luZSkge1xuICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xuXG4gICAgLy8g5Yid5aeL5YyW5Zy65pmv55u45py6XG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKGVuZ2luZSk7XG4gICAgdGhpcy5jYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uID0gbmV3IFZlY3RvcjMoMTAsIDEwLCAxMCk7XG4gICAgdGhpcy5jYW1lcmEudHJhbnNmb3JtLmxvb2tBdChuZXcgVmVjdG9yMygwLCAwLCAwKSk7XG5cbiAgICAvLyDliJ3lp4vljJblnLrmma/lnLDnkINcbiAgICB0aGlzLl9nbG9iZSA9IG5ldyBSYXlDYXN0ZWRHbG9iZShlbmdpbmUpO1xuICAgIHRoaXMuZ2xvYmUudXBsb2FkU2hhZGVyRGF0YSh0aGlzLnNoYWRlckRhdGEpO1xuXG4gICAgLy8g5Yid5aeL5YyW6IOM5pmv77yM5Y2z5aSp56m655uSXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gbmV3IEJhY2tncm91bmQodGhpcy5lbmdpbmUpO1xuXG4gICAgLy8g5Yid5aeL5YyW5Zy65pmv54K55YWJ5rqQXG4gICAgdGhpcy5wb2ludExpZ2h0ID0gbmV3IFBvaW50TGlnaHQobmV3IFZlY3RvcjMoMCwgMCwgMTApKTtcbiAgICB0aGlzLnBvaW50TGlnaHQuX3VwZGF0ZVNoYWRlckRhdGEodGhpcy5zaGFkZXJEYXRhKTtcblxuICAgIC8vIOWIneWni+WMluWcuuaZr+eOr+Wig+WFiVxuICAgIHRoaXMuYW1iaWVudExpZ2h0ID0gbmV3IEFtYmllbnRMaWdodChuZXcgQ29sb3IoMC4yLCAwLjIsIDAuMiwgMSkpO1xuICAgIHRoaXMuYW1iaWVudExpZ2h0Ll91cGRhdGVTaGFkZXJEYXRhKHRoaXMuc2hhZGVyRGF0YSk7XG4gIH1cblxuICAvLyAhIOWQjOe6p+S4jeaUr+aMgea3u+WKoOWFtuS7luWunuS9k++8jOWQjue7reWPr+S/ruaUuVxufVxuIiwiaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4vZ3JhcGhpYyc7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vbWF0ZXJpYWwnO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9UcmFuc2Zvcm0nO1xuXG4vKipcbiAqIEVudGl0eSBjbGFzc2VzIGluIHRoZSBzY2VuZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEVudGl0eSB7XG4gIC8qKiBFbnRpdHkgY291bnQuICovXG4gIHN0YXRpYyBfY291bnQ6IG51bWJlciA9IDE7XG4gIC8qKiBFbnRpdHkgY291bnQuICovXG4gIGlkOiBudW1iZXI7XG4gIC8qKiBFbnRpdHkgbmFtZS4gKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogRW50aXR5IG1lc2guICovXG4gIG1lc2g6IE1lc2g7XG4gIC8qKiBFbnRpdHkgbWF0ZXJpYWwuICovXG4gIG1hdGVyaWFsOiBNYXRlcmlhbDtcbiAgLyoqIFBhcmVudCBlbnRpdHkgaWQuICovXG4gIHBhcmVudDogRW50aXR5O1xuICAvKiogRW50aXR5IGNoaWxkcmVucy4gKi9cbiAgX2NoaWxkcmVuOiBFbnRpdHlbXTtcblxuICAvKiogRW50aXR5IHJhbnNmb3JtLiAqL1xuICByZWFkb25seSB0cmFuc2Zvcm06IFRyYW5zZm9ybTtcblxuICAvKipcbiAgICogQW4gZW50aXR5IGNvbnNpc3RzIG9mIG1lc2hlcyBhbmQgbWF0ZXJpYWxzLlxuICAgKiBAcGFyYW0gbmFtZSBFbnRpdHkgbmFtZS5cbiAgICogQHBhcmFtIG1lc2ggRW50aXR5IG1lc2guXG4gICAqIEBwYXJhbSBtYXRlcmlhbCBFbnRpdHkgbWF0ZXJpYWwuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIG1lc2g6IE1lc2gsIG1hdGVyaWFsOiBNYXRlcmlhbCkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5pZCA9IEVudGl0eS5fY291bnQrKztcbiAgICB0aGlzLm1lc2ggPSBtZXNoO1xuICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0odGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGNoaWxkIGVudGl0aWVzLlxuICAgKiBAcGFyYW0gZW50aXR5IENoaWxkIGVudGl0aWVzIHRvIGJlIGxvYWRlZC5cbiAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGlsZCBlbnRpdGllcy5cbiAgICovXG4gIGFkZEVudGl0eShlbnRpdHk6IEVudGl0eSk6IG51bWJlciB7XG4gICAgaWYgKGVudGl0eSBpbnN0YW5jZW9mIEVudGl0eSkge1xuICAgICAgaWYgKHRoaXMuX2NoaWxkcmVuID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goZW50aXR5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmxlbmd0aDtcbiAgfVxufVxuIiwiLyoqXG4gKiBFbmNhcHN1bGF0ZSBjYW52YXMgdGFnLlxuICovXG5leHBvcnQgY2xhc3MgQ2FudmFzIHtcbiAgLyoqIEhUTUwgY2FudmFzIGVsZW1lbnQuICovXG4gIF9jYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuXG4gIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyO1xuXG4gIC8qKiBDYW52YXMgZWxlbWVudCB3aWR0aC4gKi9cbiAgZ2V0IHdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICB9XG5cbiAgc2V0IHdpZHRoKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fd2lkdGggIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9jYW52YXMud2lkdGggPSB2YWx1ZTtcbiAgICAgIHRoaXMuX3dpZHRoID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIENhbnZhcyBlbGVtZW50IGhlaWdodC4gKi9cbiAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH1cblxuICBzZXQgaGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5faGVpZ2h0ICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fY2FudmFzLmhlaWdodCA9IHZhbHVlO1xuICAgICAgdGhpcy5faGVpZ2h0ID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSBieSBjbGllbnQgc2l6ZS5cbiAgICogQHBhcmFtIHBpeGVsUmF0aW8gRGV2aWNlIHBpeGVsIHJhdGlvLlxuICAgKi9cbiAgcmVzaXplQnlDbGllbnRTaXplKHBpeGVsUmF0aW86IG51bWJlciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTogdm9pZCB7XG4gICAgY29uc3Qgd2ViQ2FudmFzID0gdGhpcy5fY2FudmFzO1xuICAgIGlmICh3ZWJDYW52YXMgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgICAgdGhpcy53aWR0aCA9IHdlYkNhbnZhcy5jbGllbnRXaWR0aCAqIHBpeGVsUmF0aW87XG4gICAgICB0aGlzLmhlaWdodCA9IHdlYkNhbnZhcy5jbGllbnRIZWlnaHQgKiBwaXhlbFJhdGlvO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwIHRoZSBjYW52YXMgZWxlbWVudC5cbiAgICogQHBhcmFtIGNhbnZhcyBIVE1MIGNhbnZhcyBlbGVtZW50LlxuICAgKi9cbiAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgdGhpcy5fY2FudmFzID0gY2FudmFzO1xuICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuICAgIC8vIFRPRE86IOWBmueahOS4jeWlve+8jOW6lOivpeaDs+S4quS8mOmbheeahOaWueazlVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2l6ZUJ5Q2xpZW50U2l6ZSgpO1xuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIFRvb2xzIGZvciBjYWxjdWxhdGluZyB0aGUgdGltZSBwZXIgZnJhbWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaW1lIHtcbiAgcHJpdmF0ZSBfY2xvY2s6IHsgbm93OiAoKSA9PiBudW1iZXIgfTtcblxuICBwcml2YXRlIF90aW1lU2NhbGU6IG51bWJlcjtcblxuICBwcml2YXRlIF9kZWx0YVRpbWU6IG51bWJlcjtcblxuICBwcml2YXRlIF9zdGFydFRpbWU6IG51bWJlcjtcblxuICBwcml2YXRlIF9sYXN0VGlja1RpbWU6IG51bWJlcjtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIG9mIHRoZSBUaW1lLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY2xvY2sgPSBwZXJmb3JtYW5jZSA/IHBlcmZvcm1hbmNlIDogRGF0ZTtcblxuICAgIHRoaXMuX3RpbWVTY2FsZSA9IDEuMDtcbiAgICB0aGlzLl9kZWx0YVRpbWUgPSAwLjAwMDE7XG5cbiAgICBjb25zdCBub3cgPSB0aGlzLl9jbG9jay5ub3coKTtcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBub3c7XG4gICAgdGhpcy5fbGFzdFRpY2tUaW1lID0gbm93O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VycmVudCB0aW1lIGFzIHRoZSBlbmQgb2YgcmVuZGVyaW5nIG1hcmtlci5cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX2xhc3RUaWNrVGltZSA9IHRoaXMuX2Nsb2NrLm5vdygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgVGltZVxuICAgKi9cbiAgZ2V0IG5vd1RpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2xvY2subm93KCk7XG4gIH1cblxuICAvKipcbiAgICogVGltZSBiZXR3ZWVuIHR3byB0aWNrc1xuICAgKi9cbiAgZ2V0IGRlbHRhVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVRpbWU7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGVkIGRlbHRhIHRpbWUuXG4gICAqL1xuICBnZXQgdGltZVNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVTY2FsZTtcbiAgfVxuICBzZXQgdGltZVNjYWxlKHMpIHtcbiAgICB0aGlzLl90aW1lU2NhbGUgPSBzO1xuICB9XG5cbiAgLyoqXG4gICAqIFVuc2NhbGVkIGRlbHRhIHRpbWUuXG4gICAqL1xuICBnZXQgdW5zY2FsZWREZWx0YVRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsdGFUaW1lIC8gdGhpcy5fdGltZVNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBlbGFwc2VkIHRpbWUsIGFmdGVyIHRoZSBjbG9jayBpcyBpbml0aWFsaXplZC5cbiAgICovXG4gIGdldCB0aW1lU2luY2VTdGFydHVwKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubm93VGltZSAtIHRoaXMuX3N0YXJ0VGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIGV2ZXJ5IGZyYW1lLCB1cGRhdGUgZGVsdGEgdGltZSBhbmQgb3RoZXIgZGF0YS5cbiAgICovXG4gIHB1YmxpYyB0aWNrKCk6IHZvaWQge1xuICAgIGNvbnN0IG5vdyA9IHRoaXMubm93VGltZTtcbiAgICB0aGlzLl9kZWx0YVRpbWUgPSAobm93IC0gdGhpcy5fbGFzdFRpY2tUaW1lKSAqIHRoaXMuX3RpbWVTY2FsZTtcbiAgICB0aGlzLl9sYXN0VGlja1RpbWUgPSBub3c7XG4gIH1cbn1cbiIsImltcG9ydCBza3lib3hGcyBmcm9tICcuLi9zaGFkZXJsaWIvZXh0cmEvc2t5Ym94LmZzLmdsc2wnO1xuaW1wb3J0IHNreWJveFZzIGZyb20gJy4uL3NoYWRlcmxpYi9leHRyYS9za3lib3gudnMuZ2xzbCc7XG5pbXBvcnQgcmF5Q2FzdGVkR2xvYmVGcyBmcm9tICcuLi9zaGFkZXJsaWIvZXh0cmEvcmF5Q2FzdGVkR2xvYmUuZnMuZ2xzbCc7XG5pbXBvcnQgcmF5Q2FzdGVkR2xvYmVWcyBmcm9tICcuLi9zaGFkZXJsaWIvZXh0cmEvcmF5Q2FzdGVkR2xvYmUudnMuZ2xzbCc7XG5pbXBvcnQgY29tbW9uRnMgZnJvbSAnLi4vc2hhZGVybGliL2NvbW1vbi5mcy5nbHNsJztcbmltcG9ydCBjb21tb25WcyBmcm9tICcuLi9zaGFkZXJsaWIvY29tbW9uLnZzLmdsc2wnO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSAnLi9TaGFkZXInO1xuXG4vKipcbiAqIEVuZ2luZSBidWlsdC1pbiBzaGFkZXIgcG9vbC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNoYWRlclBvb2wge1xuICAvKipcbiAgICogQ3JlYXRlZCBieSBTaGFkZXIgYmFzZWQgb24gZnJhZ21lbnQgYW5kIHZlcnRleCBzaGFkZXIgY29kZS5cbiAgICovXG4gIHN0YXRpYyBpbml0KCk6IHZvaWQge1xuICAgIFNoYWRlci5jcmVhdGUoJ3NreWJveCcsIHNreWJveFZzLCBza3lib3hGcyk7XG4gICAgU2hhZGVyLmNyZWF0ZSgnY29tbW9uJywgY29tbW9uVnMsIGNvbW1vbkZzKTtcbiAgICBTaGFkZXIuY3JlYXRlKCdyYXlDYXN0ZWRHbG9iZScsIHJheUNhc3RlZEdsb2JlVnMsIHJheUNhc3RlZEdsb2JlRnMpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDYW52YXMgfSBmcm9tICcuL0NhbnZhcyc7XG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gJy4vU2NlbmUnO1xuaW1wb3J0IHsgVGltZSB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBUZXh0dXJlMkQsIFRleHR1cmVDdWJlRmFjZSwgVGV4dHVyZUZvcm1hdCB9IGZyb20gJy4vdGV4dHVyZSc7XG5pbXBvcnQgeyBTaGFkZXJQb29sIH0gZnJvbSAnLi9zaGFkZXIvU2hhZGVyUG9vbCc7XG5pbXBvcnQgeyBUZXh0dXJlQ3ViZSB9IGZyb20gJy4vdGV4dHVyZS9UZXh0dXJlQ3ViZSc7XG5cbi8vIOW8leWFpeW8leaTjueahOaXtuWAmeWwseWwhlNoYWRlclBvb2zov5vooYzliJ3lp4vljJZcblNoYWRlclBvb2wuaW5pdCgpO1xuXG4vKipcbiAqIFRoZSBlbmdpbmUgaXMgdGhlIGJpZyBzdGV3YXJkIG9mIGFsbCBjb250ZW50LlxuICovXG5leHBvcnQgY2xhc3MgRW5naW5lIHtcbiAgLyoqIFRoZSBjYW52YXMgY29ycmVzcG9uZGluZyB0byB0aGUgZW5naW5lLiAqL1xuICBwcm90ZWN0ZWQgX2NhbnZhczogQ2FudmFzO1xuICAvLyBUT0RPOiDogIPomZHmjqXlhaVXZWJHTDIuXG4gIC8qKiBXZWJHTCByZW5kZXJpbmcgY29udGV4dC4gKi9cbiAgcHJvdGVjdGVkIF9nbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuXG4gIC8qKiBDdXJyZW50IGFjdGl2ZSBzY2VuZS4gKi9cbiAgcHJpdmF0ZSBhY3RpdmVTY2VuZTogU2NlbmU7XG4gIC8qKiBVc2VkIHRvIGNhbGN1bGF0ZSB0aGUgaW50ZXJ2YWwgYmV0d2VlbiBlYWNoIGZyYW1lIHJlbmRlcmluZy4gKi9cbiAgcHJpdmF0ZSBfdGltZTogVGltZSA9IG5ldyBUaW1lKCk7XG4gIC8qKiBFYXN5IHRvIGRlc3Ryb3kgUkFGLiAqL1xuICBwcml2YXRlIF9yZXF1ZXN0SWQ6IG51bWJlcjtcblxuICAvKiogUmVuZGVyZWQgMkQgdGV4dHVyZSB3aGVuIHRoZSBpbWFnZSBoYXMgbm90IGJlZW4gbG9hZGVkIHlldC4gKi9cbiAgX3doaXRlVGV4dHVyZTJEOiBUZXh0dXJlMkQ7XG4gIC8qKiBSZW5kZXJlZCBjdWJlIHRleHR1cmUgd2hlbiB0aGUgaW1hZ2UgaGFzIG5vdCBiZWVuIGxvYWRlZCB5ZXQuICovXG4gIF93aGl0ZVRleHR1cmVDdWJlOiBUZXh0dXJlQ3ViZTtcblxuICBnZXQgY2FudmFzKCk6IENhbnZhcyB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgfVxuXG4gIGdldCBnbCgpOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLl9nbDtcbiAgfVxuXG4gIGdldCB0aW1lKCk6IFRpbWUge1xuICAgIHJldHVybiB0aGlzLl90aW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuaW1hdGlvbiByZW5kZXJpbmcuXG4gICAqL1xuICBwcml2YXRlIF9hbmltYXRlID0gKCkgPT4ge1xuICAgIHRoaXMuX3JlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRlKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFbmdpbmUgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBjYW52YXNJZCBIVE1MIGNhbnZhcyBpZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNhbnZhc0lkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjYW52YXNJZCk7XG4gICAgaWYgKGNhbnZhcyBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICB0aGlzLl9jYW52YXMgPSBuZXcgQ2FudmFzKGNhbnZhcyk7XG4gICAgICB0aGlzLl9jYW52YXMucmVzaXplQnlDbGllbnRTaXplKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGBjYW52YXMgaXMgbm90IGEgSFRNTENhbnZhc0VsZW1lbnQhYDtcbiAgICB9XG4gICAgY29uc3QgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCB7fSk7XG4gICAgaWYgKCFnbCkgdGhyb3cgYGluaXQgd2ViZ2wgcmVuZGVyaW5nIGNvbnRleHQgZmFpbHVyZSFgO1xuICAgIHRoaXMuX2dsID0gZ2w7XG4gICAgLy8gISDov5nmoLflrp7kvovljJblnLrmma/lpb3lkJfvvJ/vvJ/vvJ9cbiAgICB0aGlzLmFjdGl2ZVNjZW5lID0gbmV3IFNjZW5lKHRoaXMpO1xuXG4gICAgY29uc3Qgd2hpdGVQaXhlbCA9IG5ldyBVaW50OEFycmF5KFsyNTUsIDI1NSwgMjU1LCAyNTVdKTtcbiAgICBjb25zdCB3aGl0ZVRleHR1cmUyRCA9IG5ldyBUZXh0dXJlMkQodGhpcywgMSwgMSwgVGV4dHVyZUZvcm1hdC5SOEc4QjhBOCwgZmFsc2UpO1xuICAgIHdoaXRlVGV4dHVyZTJELnNldFBpeGVsQnVmZmVyKHdoaXRlUGl4ZWwpO1xuXG4gICAgY29uc3Qgd2hpdGVUZXh0dXJlQ3ViZSA9IG5ldyBUZXh0dXJlQ3ViZSh0aGlzLCAxLCBUZXh0dXJlRm9ybWF0LlI4RzhCOEE4LCBmYWxzZSk7XG4gICAgd2hpdGVUZXh0dXJlQ3ViZS5zZXRQaXhlbEJ1ZmZlcihUZXh0dXJlQ3ViZUZhY2UuUG9zaXRpdmVYLCB3aGl0ZVBpeGVsKTtcbiAgICB3aGl0ZVRleHR1cmVDdWJlLnNldFBpeGVsQnVmZmVyKFRleHR1cmVDdWJlRmFjZS5OZWdhdGl2ZVgsIHdoaXRlUGl4ZWwpO1xuICAgIHdoaXRlVGV4dHVyZUN1YmUuc2V0UGl4ZWxCdWZmZXIoVGV4dHVyZUN1YmVGYWNlLlBvc2l0aXZlWSwgd2hpdGVQaXhlbCk7XG4gICAgd2hpdGVUZXh0dXJlQ3ViZS5zZXRQaXhlbEJ1ZmZlcihUZXh0dXJlQ3ViZUZhY2UuTmVnYXRpdmVZLCB3aGl0ZVBpeGVsKTtcbiAgICB3aGl0ZVRleHR1cmVDdWJlLnNldFBpeGVsQnVmZmVyKFRleHR1cmVDdWJlRmFjZS5Qb3NpdGl2ZVosIHdoaXRlUGl4ZWwpO1xuICAgIHdoaXRlVGV4dHVyZUN1YmUuc2V0UGl4ZWxCdWZmZXIoVGV4dHVyZUN1YmVGYWNlLk5lZ2F0aXZlWiwgd2hpdGVQaXhlbCk7XG5cbiAgICB0aGlzLl93aGl0ZVRleHR1cmUyRCA9IHdoaXRlVGV4dHVyZTJEO1xuICAgIHRoaXMuX3doaXRlVGV4dHVyZUN1YmUgPSB3aGl0ZVRleHR1cmVDdWJlO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhbGwgZGF0YS5cbiAgICovXG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCB0aW1lID0gdGhpcy5fdGltZTtcbiAgICBjb25zdCBkZWx0YVRpbWUgPSB0aW1lLmRlbHRhVGltZTtcbiAgICBjb25zdCBjYW1lcmEgPSB0aGlzLmFjdGl2ZVNjZW5lLmNhbWVyYTtcbiAgICAvLyDmm7TmlrDnm7jmnLrkvY3nva7kv6Hmga9cbiAgICBjYW1lcmEub3JiaXRDb250cm9sLm9uVXBkYXRlKGRlbHRhVGltZSk7XG5cbiAgICB0aW1lLnRpY2soKTtcblxuICAgIHRoaXMuX3JlbmRlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBiYXNlZCBvbiB1cGRhdGVkIGRhdGEuXG4gICAqL1xuICBfcmVuZGVyKCk6IHZvaWQge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgZ2wudmlld3BvcnQoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgLy8g6L+Z5Liq5pS+6L+Z5rKh6Zeu6aKY77yM5LiN54S26IOM5pmv55S75LiN5Ye65p2lXG4gICAgZ2wuZGVwdGhGdW5jKGdsLkxFU1MpO1xuICAgIC8vIFRPRE86IOi/meS6m+eKtuaAgeS4jeW6lOivpeavj+asoemDvei/m+ihjOiOt+WPllxuICAgIGNvbnN0IHNjZW5lID0gdGhpcy5hY3RpdmVTY2VuZTtcbiAgICBjb25zdCBnbG9iZSA9IHNjZW5lLmdsb2JlO1xuICAgIGNvbnN0IGNhbWVyYSA9IHNjZW5lLmNhbWVyYTtcbiAgICBjYW1lcmEgJiYgY2FtZXJhLnJlbmRlcigpO1xuXG4gICAgLy8g6aaW5YWI5riy5p+T5Zyw55CDXG4gICAgY29uc3QgeyBtZXNoLCBtYXRlcmlhbCB9ID0gZ2xvYmU7XG4gICAgY29uc3QgZ2xvYmVQcm9ncmFtID0gbWF0ZXJpYWwuc2hhZGVyLl9nZXRTaGFkZXJQcm9ncmFtKHRoaXMpO1xuICAgIGdsb2JlUHJvZ3JhbS51cGxvYWRBbGwoZ2xvYmVQcm9ncmFtLnNjZW5lVW5pZm9ybUJsb2NrLCBzY2VuZS5zaGFkZXJEYXRhKTtcbiAgICBnbG9iZVByb2dyYW0udXBsb2FkQWxsKGdsb2JlUHJvZ3JhbS5jYW1lcmFVbmlmb3JtQmxvY2ssIGNhbWVyYS5zaGFkZXJEYXRhKTtcbiAgICBnbG9iZVByb2dyYW0udXBsb2FkQWxsKGdsb2JlUHJvZ3JhbS5tYXRlcmlhbFVuaWZvcm1CbG9jaywgbWF0ZXJpYWwuc2hhZGVyRGF0YSk7XG4gICAgbWVzaC5fZHJhdyhnbG9iZVByb2dyYW0sIG1lc2guc3ViTWVzaCk7XG5cbiAgICAvLyBUT0RPOiDov5nph4zopoHmlLnmiJDpgJLlvZLlnLrmma/moJHmuLLmn5NcbiAgICAvLyBlbnRpdGllcy5mb3JFYWNoKChlbnRpdHkpID0+IHtcbiAgICAvLyAgIGNvbnN0IHsgbWVzaCwgbWF0ZXJpYWwgfSA9IGVudGl0eTtcbiAgICAvLyAgIC8vICEg6L+Z6YeM5q+P5qyh6YO96KaB5Y6757yW6K+Rc2hhZGVy5Luj56CB77yB77yB77yBXG4gICAgLy8gICAvLyBUT0RPOiBTaGFkZXJQcm9ncmFtUG9vbFxuICAgIC8vICAgY29uc3QgcHJvZ3JhbSA9IG1hdGVyaWFsLnNoYWRlci5fZ2V0U2hhZGVyUHJvZ3JhbSh0aGlzKTtcbiAgICAvLyAgIC8vIOS4iuS8oOebuOacuueahOaVsOaNru+8jOi/memHjOi/mOmcgOimgeS4iuS8oOWFtuS7luaooeWdl+eahOaVsOaNru+8jOavlOWmgu+8muWcuuaZr++8jOadkOi0qOetiVxuICAgIC8vICAgLy8g5Zy65pmv55qEc2hhZGVyRGF0YeS4u+imgeaYr+WFiee6v1xuICAgIC8vICAgLy8gISDov5nph4zmr4/kuKrlrp7kvZPpg73opoFcbiAgICAvLyAgIHByb2dyYW0udXBsb2FkQWxsKHByb2dyYW0uc2NlbmVVbmlmb3JtQmxvY2ssIHNjZW5lLnNoYWRlckRhdGEpO1xuICAgIC8vICAgcHJvZ3JhbS51cGxvYWRBbGwocHJvZ3JhbS5jYW1lcmFVbmlmb3JtQmxvY2ssIGNhbWVyYS5zaGFkZXJEYXRhKTtcbiAgICAvLyAgIHByb2dyYW0udXBsb2FkQWxsKHByb2dyYW0ubWF0ZXJpYWxVbmlmb3JtQmxvY2ssIG1hdGVyaWFsLnNoYWRlckRhdGEpO1xuICAgIC8vICAgbWVzaC5fZHJhdyhwcm9ncmFtLCBtZXNoLnN1Yk1lc2gpO1xuICAgIC8vIH0pO1xuXG4gICAgLy8g5pyA5ZCO5riy5p+T6IOM5pmvO1xuICAgIC8vIGdsLmRlcHRoRnVuYyhnbC5MRVFVQUwpO1xuICAgIC8vIGNvbnN0IHsgX21lc2gsIF9tYXRlcmlhbCB9ID0gc2NlbmUuYmFja2dyb3VuZDtcbiAgICAvLyAvLyAhIOavj+asoea4suafk+mDveWOu+WunuS+i+WMluS4jeWPr+S7pe+8geiAjOS4lGJpbmTkuI3lupTor6XmlL7lnKjmnoTpgKDlh73mlbDvvIzlkKbliJnml6Dms5XliIfmjaJwcm9ncmFtXG4gICAgLy8gY29uc3Qgc2t5UHJvZ3JhbSA9IF9tYXRlcmlhbC5zaGFkZXIuX2dldFNoYWRlclByb2dyYW0odGhpcyk7XG4gICAgLy8gc2t5UHJvZ3JhbS51cGxvYWRBbGwoc2t5UHJvZ3JhbS5jYW1lcmFVbmlmb3JtQmxvY2ssIGNhbWVyYS5zaGFkZXJEYXRhKTtcbiAgICAvLyBza3lQcm9ncmFtLnVwbG9hZEFsbChza3lQcm9ncmFtLm1hdGVyaWFsVW5pZm9ybUJsb2NrLCBfbWF0ZXJpYWwuc2hhZGVyRGF0YSk7XG4gICAgLy8gX21lc2guX2RyYXcoc2t5UHJvZ3JhbSwgX21lc2guc3ViTWVzaCk7XG4gIH1cblxuICAvKipcbiAgICogVGltaW5nIGFuZCByZW5kZXJpbmcuXG4gICAqL1xuICByZXN1bWUoKTogdm9pZCB7XG4gICAgdGhpcy50aW1lLnJlc2V0KCk7XG4gICAgdGhpcy5fcmVxdWVzdElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuZ2luZSBydW4uXG4gICAqL1xuICBydW4oKSB7XG4gICAgdGhpcy5yZXN1bWUoKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVHO01BQ1UsUUFBUSxDQUFBOztBQUVuQixJQUFBLE9BQWdCLGFBQWEsR0FBVyxJQUFJLENBQUM7O0lBRTdDLE9BQWdCLGlCQUFpQixHQUFXLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDOztJQUUxRCxPQUFnQixpQkFBaUIsR0FBVyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUUxRDs7Ozs7O0FBTUc7QUFDSCxJQUFBLE9BQU8sS0FBSyxDQUFDLENBQVMsRUFBRSxHQUFXLEVBQUUsR0FBVyxFQUFBO0FBQzlDLFFBQUEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hDO0FBRUQ7Ozs7OztBQU1HO0FBQ0gsSUFBQSxPQUFPLE1BQU0sQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFBO0FBQ2hDLFFBQUEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDO0tBQ2xEO0FBRUQ7Ozs7QUFJRztJQUNILE9BQU8sVUFBVSxDQUFDLENBQVMsRUFBQTtRQUN6QixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDNUI7QUFFRDs7OztBQUlHO0lBQ0gsT0FBTyxjQUFjLENBQUMsQ0FBUyxFQUFBO0FBQzdCLFFBQUEsT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDO0tBQ3ZDO0FBRUQ7Ozs7QUFJRztJQUNILE9BQU8sY0FBYyxDQUFDLENBQVMsRUFBQTtBQUM3QixRQUFBLE9BQU8sQ0FBQyxHQUFH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LEVBQUUsR0FBWSxFQUFBO1FBQ3JFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6QixRQUFBLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsVUFBVSxDQUFDOztBQUd0RCxRQUFBLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ3ZDLFFBQUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDdkMsUUFBQSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN2QyxRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7O0FBR3hDLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7O0FBR0QsSUFBQSxFQUFFLENBQVM7O0FBRVgsSUFBQSxFQUFFLENBQVM7O0FBRVgsSUFBQSxFQUFFLENBQVM7O0lBRVgsZUFBZSxHQUFlLElBQUksQ0FBQztBQUVuQzs7QUFFRztBQUNILElBQUEsSUFBVyxDQUFDLEdBQUE7UUFDVixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUM7S0FDaEI7SUFFRCxJQUFXLENBQUMsQ0FBQyxLQUFhLEVBQUE7QUFDeEIsUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztBQUNoQixRQUFBLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQ2hEO0FBRUQ7O0FBRUc7QUFDSCxJQUFBLElBQVcsQ0FBQyxHQUFBO1FBQ1YsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0tBQ2hCO0lBRUQsSUFBVyxDQUFDLENBQUMsS0FBYSxFQUFBO0FBQ3hCLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDaEIsUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUNoRDtBQUVEOztBQUVHO0FBQ0gsSUFBQSxJQUFXLENBQUMsR0FBQTtRQUNWLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztLQUNoQjtJQUVELElBQVcsQ0FBQyxDQUFDLEtBQWEsRUFBQTtBQUN4QixRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDaEQ7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsV0FBQSxDQUFZLElBQVksQ0FBQyxFQUFFLElBQVksQ0FBQyxFQUFFLElBQVksQ0FBQyxFQUFBO0FBQ3JELFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDWixRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNiO0FBRUQ7Ozs7OztBQU1HO0FBQ0gsSUFBQSxRQUFRLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUE7QUFDdEMsUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNaLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDWixRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUMvQyxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsZUFBZSxDQUFDLEtBQXdCLEVBQUUsTUFBQSxHQUFpQixDQUFDLEVBQUE7QUFDMUQsUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVCLFFBQUEsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0MsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsR0FBRyxDQUFDLEtBQWMsRUFBQTtBQUNoQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQy9DLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLFFBQVEsQ0FBQyxLQUFjLEVBQUE7QUFDckIsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUMvQyxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxRQUFRLENBQUMsS0FBYyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0MsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsTUFBTSxDQUFDLEtBQWMsRUFBQTtBQUNuQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQy9DLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7QUFHRztJQUNILE1BQU0sR0FBQTtRQUNKLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQztBQUM1QixRQUFBLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQy9DO0FBRUQ7OztBQUdHO0lBQ0gsYUFBYSxHQUFBO1FBQ1gsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7S0FDcEM7QUFFRDs7O0FBR0c7SUFDSCxNQUFNLEdBQUE7QUFDSixRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ25CLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDbkIsUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNuQixRQUFBLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQy9DLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7QUFHRztJQUNILFNBQVMsR0FBQTtBQUNQLFFBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUIsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsS0FBSyxDQUFDLENBQVMsRUFBQTtBQUNiLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDYixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2IsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNiLFFBQUEsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0MsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsT0FBTyxDQUFDLEdBQTJDLEVBQUUsU0FBQSxHQUFvQixDQUFDLEVBQUE7QUFDeEUsUUFBQSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUN6QixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDN0IsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0tBQzlCO0FBRUQ7OztBQUdHO0lBQ0gsS0FBSyxHQUFBO0FBQ0gsUUFBQSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDL0M7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLENBQUMsR0FBWSxFQUFBO0FBQ2xCLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2pCLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2pCLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2pCLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDN0MsUUFBQSxPQUFPLEdBQUcsQ0FBQztLQUNaO0FBRUQ7Ozs7Ozs7Ozs7QUFVRztBQUNILElBQUEsZUFBZSxDQUFDLENBQVUsRUFBQTtRQUN4QixPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdkMsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsZUFBZSxDQUFDLENBQVUsRUFBQTtRQUN4QixPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdkMsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7Ozs7Ozs7QUFVRztBQUNILElBQUEsbUJBQW1CLENBQUMsQ0FBVSxFQUFBO1FBQzVCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLGVBQWUsQ0FBQyxVQUFzQixFQUFBO1FBQ3BDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoRCxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7OztBQ3BrQkg7O0FBRUc7TUFDVSxPQUFPLENBQUE7O0FBRWxCLElBQUEsT0FBZ0IsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUV4RCxJQUFBLE9BQWdCLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUV2RDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxHQUFHLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxHQUFZLEVBQUE7UUFDcEQsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDNUIsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLFFBQVEsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFFLEdBQVksRUFBQTtRQUN6RCxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUM1QixRQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzlDO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sUUFBUSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsR0FBWSxFQUFBO1FBQ3pELEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVCLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxNQUFNLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxHQUFZLEVBQUE7UUFDdkQsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDNUIsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLEdBQUcsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFBO0FBQ3RDLFFBQUEsT0FBTyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7S0FDMUY7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxRQUFRLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBQTtRQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNqRDtBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLGVBQWUsQ0FBQyxDQUFVLEVBQUUsQ0FBVSxFQUFBO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUN0QixRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN0QztBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLE1BQU0sQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFBO0FBQ3pDLFFBQUEsUUFDRSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNsQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNsQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNsQyxZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQ2xDO0tBQ0g7QUFFRDs7Ozs7O0FBTUc7SUFDSCxPQUFPLElBQUksQ0FBQyxLQUFjLEVBQUUsR0FBWSxFQUFFLENBQVMsRUFBRSxHQUFZLEVBQUE7UUFDL0QsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQztBQUNqQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDaEMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxHQUFHLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxHQUFZLEVBQUE7QUFDcEQsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLEdBQUcsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFFLEdBQVksRUFBQTtBQUNwRCxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxRQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzlDO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsT0FBTyxNQUFNLENBQUMsQ0FBVSxFQUFFLEdBQVksRUFBQTtBQUNwQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2YsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNmLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDZixRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2YsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sU0FBUyxDQUFDLENBQVUsRUFBRSxHQUFZLEVBQUE7UUFDdkMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUMzRCxRQUFBLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUU7QUFDaEMsWUFBQSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNkLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFlBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDOUMsU0FBQTtLQUNGO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sS0FBSyxDQUFDLENBQVUsRUFBRSxDQUFTLEVBQUUsR0FBWSxFQUFBO1FBQzlDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbEIsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLFNBQVMsQ0FBQyxDQUFVLEVBQUUsQ0FBVSxFQUFFLEdBQVksRUFBQTtRQUNuRCxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLFFBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNyQixRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4RCxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4RCxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6RCxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6RCxRQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzlDO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sZUFBZSxDQUFDLENBQVUsRUFBRSxDQUFhLEVBQUUsR0FBWSxFQUFBO0FBQzVELFFBQUEsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDekMsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNoQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDaEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDOztBQUdoQixRQUFBLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEMsUUFBQSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNwQyxRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7O0FBR3JDLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDWCxRQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzlDOztBQUdELElBQUEsRUFBRSxDQUFTOztBQUVYLElBQUEsRUFBRSxDQUFTOztBQUVYLElBQUEsRUFBRSxDQUFTOztBQUVYLElBQUEsRUFBRSxDQUFTOztJQUVYLGVBQWUsR0FBZSxJQUFJLENBQUM7QUFFbkM7O0FBRUc7QUFDSCxJQUFBLElBQVcsQ0FBQyxHQUFBO1FBQ1YsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0tBQ2hCO0lBRUQsSUFBVyxDQUFDLENBQUMsS0FBYSxFQUFBO0FBQ3hCLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDaEIsUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUNoRDtBQUVEOztBQUVHO0FBQ0gsSUFBQSxJQUFXLENBQUMsR0FBQTtRQUNWLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztLQUNoQjtJQUVELElBQVcsQ0FBQyxDQUFDLEtBQWEsRUFBQTtBQUN4QixRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDaEQ7QUFFRDs7QUFFRztBQUNILElBQUEsSUFBVyxDQUFDLEdBQUE7UUFDVixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUM7S0FDaEI7SUFFRCxJQUFXLENBQUMsQ0FBQyxLQUFhLEVBQUE7QUFDeEIsUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztBQUNoQixRQUFBLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQ2hEO0FBRUQ7O0FBRUc7QUFDSCxJQUFBLElBQVcsQ0FBQyxHQUFBO1FBQ1YsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0tBQ2hCO0lBRUQsSUFBVyxDQUFDLENBQUMsS0FBYSxFQUFBO0FBQ3hCLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDaEIsUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUNoRDtBQUVEOzs7Ozs7QUFNRztJQUNILFdBQVksQ0FBQSxDQUFBLEdBQVksQ0FBQyxFQUFFLENBQVksR0FBQSxDQUFDLEVBQUUsQ0FBWSxHQUFBLENBQUMsRUFBRSxDQUFBLEdBQVksQ0FBQyxFQUFBO0FBQ3BFLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDWixRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNaLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDYjtBQUVEOzs7Ozs7O0FBT0c7QUFDSCxJQUFBLFFBQVEsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUE7QUFDakQsUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNaLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDWixRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNaLFFBQUEsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0MsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLGVBQWUsQ0FBQyxLQUF3QixFQUFFLE1BQUEsR0FBaUIsQ0FBQyxFQUFBO0FBQzFELFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDNUIsUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUMvQyxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxHQUFHLENBQUMsS0FBYyxFQUFBO0FBQ2hCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0MsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsUUFBUSxDQUFDLEtBQWMsRUFBQTtBQUNyQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQy9DLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLFFBQVEsQ0FBQyxLQUFjLEVBQUE7QUFDckIsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUMvQyxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxNQUFNLENBQUMsS0FBYyxFQUFBO0FBQ25CLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0MsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7OztBQUdHO0lBQ0gsTUFBTSxHQUFBO1FBQ0osTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ3pEO0FBRUQ7OztBQUdHO0lBQ0gsYUFBYSxHQUFBO1FBQ1gsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQztBQUNoQyxRQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7QUFHRztJQUNILE1BQU0sR0FBQTtBQUNKLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDbkIsUUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNuQixRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ25CLFFBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDbkIsUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUMvQyxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7O0FBR0c7SUFDSCxTQUFTLEdBQUE7QUFDUCxRQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlCLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLEtBQUssQ0FBQyxDQUFTLEVBQUE7QUFDYixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2IsUUFBQSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNiLFFBQUEsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDYixRQUFBLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2IsUUFBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUMvQyxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLENBQUMsR0FBMkMsRUFBRSxTQUFBLEdBQW9CLENBQUMsRUFBQTtBQUN4RSxRQUFBLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUM3QixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDN0IsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0tBQzlCO0FBRUQ7OztBQUdHO0lBQ0gsS0FBSyxHQUFBO1FBQ0gsSUFBSSxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFELFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sQ0FBQyxHQUFZLEVBQUE7QUFDbEIsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDakIsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDakIsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDakIsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDakIsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUM3QyxRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7OztBQ2pmSDs7QUFFRztNQUNVLE9BQU8sQ0FBQTtBQUNsQjs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxHQUFHLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxHQUFZLEVBQUE7QUFDcEQsUUFBQSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUMxQixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFFeEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdkI7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxRQUFRLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxHQUFZLEVBQUE7QUFDekQsUUFBQSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUMxQixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFFeEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdkI7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxRQUFRLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxHQUFZLEVBQUE7QUFDekQsUUFBQSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUMxQixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFFeEIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDMUMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDMUMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFFMUMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDMUMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDMUMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFFMUMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDMUMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDMUMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7S0FDM0M7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxNQUFNLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBQTtBQUN6QyxRQUFBLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDekIsUUFBQSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBRTFCLFFBQUEsUUFDRSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0I7S0FDSDtBQUVEOzs7Ozs7QUFNRztJQUNILE9BQU8sSUFBSSxDQUFDLEtBQWMsRUFBRSxHQUFZLEVBQUUsQ0FBUyxFQUFFLEdBQVksRUFBQTtBQUMvRCxRQUFBLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDMUIsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFFcEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakM7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLGtCQUFrQixDQUFDLFVBQXNCLEVBQUUsR0FBWSxFQUFBO0FBQzVELFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsVUFBVSxDQUFDO0FBQ2xELFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNsQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNsQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNsQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWxCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNwQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFFaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFB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QyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWQsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ25DLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUVsQyxRQUFBLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzVDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixPQUFPO0FBQ1IsU0FBQTtBQUNELFFBQUEsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFFaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNsQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUN2QyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFFdEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNsQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDdEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFFdkMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNsQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUN2QyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7S0FDdkM7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxZQUFZLENBQUMsSUFBYSxFQUFFLEdBQVksRUFBQTtBQUM3QyxRQUFBLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDekIsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBRXhCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ1osR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNmLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDaEIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNaLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFZixNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUVsQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoRixJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ1IsWUFBQSxPQUFPLElBQUksQ0FBQztBQUNiLFNBQUE7QUFDRCxRQUFBLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRWhCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBRWxELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBRWxELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0tBQ25EO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sTUFBTSxDQUFDLENBQVUsRUFBRSxDQUFTLEVBQUUsR0FBWSxFQUFBO0FBQy9DLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN0QixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDeEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXRCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRTFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBRTFCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNiO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sS0FBSyxDQUFDLENBQVUsRUFBRSxDQUFVLEVBQUUsR0FBWSxFQUFBO1FBQy9DLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUV4QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDZjtBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLFNBQVMsQ0FBQyxDQUFVLEVBQUUsV0FBb0IsRUFBRSxHQUFZLEVBQUE7UUFDN0QsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLFdBQVcsQ0FBQztBQUNyQyxRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDdEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBRXhCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVkLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVaLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVaLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0tBQ2pDO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsT0FBTyxTQUFTLENBQUMsQ0FBVSxFQUFFLEdBQVksRUFBQTtBQUN2QyxRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDdEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBRXhCLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtBQUNiLFlBQUEsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xCLFlBQUEsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xCLFlBQUEsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2QsWUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ1osRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLFlBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFlBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNiLFNBQUE7QUFBTSxhQUFBO1lBQ0wsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWQsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWQsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFD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Q0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMzQjtBQUVEOzs7QUFHRztJQUNILEtBQUssR0FBQTtBQUNILFFBQUEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN4QixJQUFJLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVFLFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sQ0FBQyxHQUFZLEVBQUE7QUFDbEIsUUFBQSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUV4QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFYixRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxHQUFHLENBQUMsS0FBYyxFQUFBO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvQixRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxRQUFRLENBQUMsS0FBYyxFQUFBO1FBQ3JCLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNwQyxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxRQUFRLENBQUMsS0FBYyxFQUFBO1FBQ3JCLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNwQyxRQUFBLE9BQU8sSUFBSSxDQUFD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QUEsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDOUIsSUFBSSxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBRWYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ3BCLFlBQUEsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7WUFFbEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQztZQUM1QixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7QUFDN0IsU0FBQTtBQUFNLGFBQUEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUU7QUFDbkMsWUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUN4QyxZQUFBLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0FBRWxCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQztZQUM1QixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7WUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO0FBQzdCLFNBQUE7YUFBTSxJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQUU7QUFDcEIsWUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUN4QyxZQUFBLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBRWxCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQztBQUM1QixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztZQUNwQixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7WUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO0FBQzdCLFNBQUE7QUFBTSxhQUFBO0FBQ0wsWUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUN4QyxZQUFBLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBRWxCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQztZQUM1QixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7QUFDNUIsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7WUFDcEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO0FBQzdCLFNBQUE7QUFDRCxRQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzlDO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsT0FBTyxNQUFNLENBQUMsQ0FBYSxFQUFFLEdBQWUsRUFBQTtBQUMxQyxRQUFBLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLFFBQUEsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQyxRQUFBLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUU7QUFDaEMsWUFBQSxNQUFNLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7QUFDckIsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUNyQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ3BCLFlBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDOUMsU0FBQTtLQUNGO0FBRUQ7Ozs7OztBQU1HO0lBQ0gsT0FBTyxJQUFJLENBQUMsS0FBaUIsRUFBRSxHQUFlLEVBQUUsQ0FBUyxFQUFFLEdBQWUsRUFBQTtBQUN4RSxRQUFBLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDbkMsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQyxZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckMsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3RDLFNBQUE7QUFBTSxhQUFBO0FBQ0wsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQyxZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckMsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3RDLFNBQUE7UUFFRCxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7S0FDakI7QUFFRDs7Ozs7O0FBTUc7SUFDSCxPQUFPLEtBQUssQ0FBQyxLQUFpQixFQUFFLEdBQWUsRUFBRSxDQUFTLEVBQUUsR0FBZSxFQUFBO0FBQ3pFLFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixRQUFBLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsTUFB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R0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ1osR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNmLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDaEIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNaLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFZixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3RELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN0RCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRXRELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN0RCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3RELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFFdEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN0RCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3RELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUV2RCxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3ZELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN2RCxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0tBQ3hEO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sTUFBTSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUE7QUFDekMsUUFBQSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUUxQixRQUFBLFFBQ0UsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQy9CO0tBQ0g7QUFFRDs7Ozs7O0FBTUc7SUFDSCxPQUFPLElBQUksQ0FBQyxLQUFjLEVBQUUsR0FBWSxFQUFFLENBQVMsRUFBRSxHQUFZLEVBQUE7QUFDL0QsUUFBQSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQzFCLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDeEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBRXBCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRW5DLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQyxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNwQztBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sa0JBQWtCLENBQUMsVUFBc0IsRUFBRSxHQUFZLEVBQUE7QUFDNUQsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUM7QUFDbEQsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRWYsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFaEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFVixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNwQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoQixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDckIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVgsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ1o7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxpQkFBaUIsQ0FBQyxJQUFhLEVBQUUsQ0FBUyxFQUFFLEdBQVksRUFBQTtBQUM3RCxRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDeEIsUUFBQSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDbkMsUUFBQSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0MsUUFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRVosSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUU7WUFDMUMsT0FBTztBQUNSLFNBQUE7QUFFRCxRQUFBLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2QsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUNULENBQUMsSUFBSSxHQUFHLENBQUM7UUFDVCxDQUFDLElBQUksR0FBRyxDQUFDO0FBRVQsUUFBQSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixRQUFBLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFFBQUEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O1FBR1YsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVgsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ1o7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxtQkFBbUIsQ0FBQyxVQUFzQixFQUFFLFdBQW9CLEVBQUUsR0FBWSxFQUFBO0FBQ25GLFFBQUEsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUU1QyxRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDeEIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQztBQUN4QixRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDO0FBQ3hCLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUM7S0FDekI7QUFFRDs7Ozs7O0FBTUc7SUFDSCxPQUFPLG9CQUFvQixDQUFDLEtBQWMsRUFBRSxRQUFvQixFQUFFLFdBQW9CLEVBQUUsR0FBWSxFQUFBO0FBQ2xHLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDO0FBQ2hELFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVmLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNsQixRQUFBLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDbEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRWxCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDdkIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDdkIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUs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Q1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2YsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNoQixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNaLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ1osR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVmLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWxDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDUixZQUFBLE9BQU8sSUFBSSxDQUFDO0FBQ2IsU0FBQTtBQUNELFFBQUEsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFFaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFFbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFFbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbEQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFFbkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDbkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7S0FDcEQ7QUFFRDs7Ozs7O0FBTUc7SUFDSCxPQUFPLE1BQU0sQ0FBQyxHQUFZLEVBQUUsTUFBZSxFQUFFLEVBQVcsRUFBRSxHQUFZLEVBQUE7QUFDcEUsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxLQUFLLEdBQVksT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUMxQyxRQUFBLE1BQU0sS0FBSyxHQUFZLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDMUMsUUFBQSxNQUFNLEtBQUssR0FBWSxPQUFPLENBQUMsVUFBVSxDQUFDO1FBRTFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFbkMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNqQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ2pCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDakIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNqQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ2pCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDakIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNqQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ2pCLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDbEIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVgsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNsQyxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcs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RyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBR3hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRTFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRTFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzNDLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRTNDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTs7WUFFYixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMs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R0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEQsWUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BELFlBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyRCxZQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEQsU0FBQTtBQUFNLGFBQUE7WUFDTCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNaLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFZixZQUFBLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzNELFlBQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDM0QsWUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUU3RCxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5QyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLFNBQUE7S0FDRjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sU0FBUyxDQUFDLENBQVUsRUFBRSxHQUFZLEVBQUE7QUFDdkMsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUV4QixJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7QUFDYixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVuQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFZixZQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDWixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUVmLFlBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFlBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNaLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFaEIsWUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ2IsWUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ2IsWUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ2QsU0FBQTtBQUFNLGFBQUE7WUFDTCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWYsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVmLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWhCLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pCLFNBQUE7S0FDRjtBQUVEOzs7Ozs7Ozs7QUFTRztBQUNILElBQUEsUUFBUSxHQUFpQixJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUU5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JHO0lBQ0gsV0FDRSxDQUFBLEdBQUEsR0FBYyxDQUFDLEVBQ2YsR0FBQSxHQUFjLENBQUMsRUFDZixHQUFBLEdBQWMsQ0FBQyxFQUNmLEdBQUEsR0FBYyxDQUFDLEVBQ2YsR0FBQSxHQUFjLENBQUMsRUFDZixHQUFBLEdBQWMsQ0FBQyxFQUNmLEdBQUEsR0FBYyxDQUFDLEVBQ2YsR0FBYyxHQUFBLENBQUMsRUFDZixHQUFjLEdBQUEsQ0FBQyxFQUNmLEdBQWMsR0FBQSxDQUFDLEVBQ2YsR0FBYyxHQUFBLENBQUMsRUFDZixHQUFjLEdBQUEsQ0FBQyxFQUNmLEdBQWMsR0FBQSxDQUFDLEVBQ2YsR0FBYyxHQUFBLENBQUMsRUFDZixHQUFjLEdBQUEsQ0FBQyxFQUNmLEdBQUEsR0FBYyxDQUFDLEVBQUE7QUFFZixRQUFBLE1BQU0sQ0FBQyxHQUFpQixJQUFJLENBQUMsUUFBUSxDQUFDO0FBRXRDLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNiO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkc7QUFDSCxJQUFBLFFBQVEsQ0FDTixHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQUE7QUFFWCxRQUFBLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFFeEIsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBRVgsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBRVgsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1osUUFBQSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBRVosUUFBQSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1osUUFBQSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1osUUFBQSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1osUUFBQSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBRVosUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLGVBQWUsQ0FBQyxLQUF3QixFQUFFLE1BQUEsR0FBaUIsQ0FBQyxFQUFBO0FBQzFELFFBQUEsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMzQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLFNBQUE7QUFDRCxRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLENBQUMsR0FBMkMsRUFBRSxTQUFBLEdBQW9CLENBQUMsRUFBQTtBQUN4RSxRQUFBLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFeEIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM3QjtBQUVEOzs7QUFHRztJQUNILEtBQUssR0FBQTtBQUNILFFBQUEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLElBQUksR0FBRyxHQUFHLElBQUksT0FBTyxDQUNuQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNKLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNKLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNKLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNMLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDTCxDQUFDLENBQUMs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QUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDZixHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVkLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDOztRQUdsQyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0tBQzlFO0FBRUQ7Ozs7OztBQU1HO0FBQ0gsSUFBQSxTQUFTLENBQUMsV0FBb0IsRUFBRSxRQUFvQixFQUFFLEtBQWMsRUFBQTtBQUNsRSxRQUFBLE1BQU0sRUFBRSxHQUFZLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFdkMsUUFBQSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUV4QixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQixRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQixRQUFBLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUxQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6RCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzdELE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDN0QsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUM3RCxLQUFLLENB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Q0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pELFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLFNBQUE7YUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxD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UUFBUSxDQUFDO0FBRXhCLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVWLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVWLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7QUFHRztJQUNILE1BQU0sR0FBQTtBQUNKLFFBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0IsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7O0FBS0c7SUFDSCxlQUFlLENB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QUNKLFlBQUEsQ0FBQyxHQUFHO1lBQ0osR0FBRztZQUNILEdBQUc7QUFDSCxZQUFBLENBQUMsR0FBRztZQUNKLEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO0FBQ0gsWUFBQSxDQUFDLEdBQUc7QUFDSixZQUFBLENBQUMsR0FBRztZQUNKLEdBQUc7QUFDSCxZQUFBLENBQUMsR0FBRztBQUNKLFlBQUEsQ0FBQyxHQUFHO1lBQ0osR0FBRztZQUNILEdBQUc7QUFDSCxZQUFBLENBQUMsR0FBRztZQUNKLEdBQUc7WUFDSCxHQUFHO0FBQ0gsWUFBQSxDQUFDLEdBQUc7QUFDSixZQUFBLENBQUMsR0FBRztZQUNKLEdBQUc7QUFDSCxZQUFBLENBQUMsR0FBRztBQUNKLFlBQUEsQ0FBQyxHQUFHO0FBQ0osWUFBQSxDQUFDLEdBQUc7QUFDSixZQUFBLENBQUMsR0FBRztZQUNKLEdBQUc7QUFDSCxZQUFBLENBQUMsR0FBRztBQUNKLFlBQUEsQ0FBQyxHQUFHO0FBQ0osWUFBQSxDQUFDLEdBQUc7WUFDSixHQUFHO1lBQ0gsR0FBRztBQUNILFlBQUEsQ0FBQyxHQUFHO1lBQ0osR0FBRztZQUNILEdBQUc7QUFDSCxZQUFBLENBQUMsR0FBRztBQUNKLFlBQUEsQ0FBQyxHQUFHO0FBQ0osWUFBQSxDQUFDLEdBQUc7QUFDSixZQUFBLENBQUMsR0FBRztBQUNKLFlBQUEsQ0FBQyxHQUFHO1lBQ0osR0FBRztBQUNILFlBQUEsQ0FBQyxHQUFHO0FBQ0osWUFBQSxDQUFDLEdBQUc7WUFDSixHQUFHO1lBQ0gsR0FBRztBQUNILFlBQUEsQ0FBQyxHQUFHO0FBQ0osWUFBQSxDQUFDLEdBQUc7WUFDSixHQUFHO0FBQ0gsWUFBQSxDQUFDLEdBQUc7QUFDSixZQUFBLENBQUMsR0FBRztBQUNKLFlBQUEsQ0FBQyxHQUFHO1lBQ0osQ0FBQyxHQUFHO0FBQ0wsU0FBQSxDQUFDLENBQUM7QUFDSCxRQUFBLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixFQUFFLENBQUMs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QSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFFBQU0sQ0FBQTs7QUFFTixJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsZ0JBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLGdCQUFjLENBQUE7O0FBRWQsSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLGNBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLGNBQVksQ0FBQTs7QUFFWixJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsY0FBWSxDQUFBOztBQUdaLElBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxNQUFJLENBQUE7O0FBRUosSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLE1BQUksQ0FBQTs7QUFFSixJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsVUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsVUFBUSxDQUFBOztBQUVSLElBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsR0FBQSxVQUFRLENBQUE7O0FBRVIsSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLFlBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLFlBQVUsQ0FBQTs7QUFFVixJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsWUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsWUFBVSxDQUFBOztBQUVWLElBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxZQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsR0FBQSxZQUFVLENBQUE7O0FBRVYsSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLGFBQVcsQ0FBQTs7QUFFWCxJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsWUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsWUFBVSxDQUFB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Q0FBQztBQUVwQyxRQUFBLE1BQU0sU0FBUyxHQUFjLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzNDLFFBQUEsTUFBTSxPQUFPLEdBQWMsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekMsUUFBQSxNQUFNLEdBQUcsR0FBYyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQzs7QUFHckMsUUFBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlELFFBQUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDN0QsUUFBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlELFFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFM0IsUUFBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRSxRQUFBLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvRCxRQUFBLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUQsUUFBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBRTNCLFFBQUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9ELFFBQUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5RCxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoRSxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pFLFFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUU1QixRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5RCxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEUsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUU1QixRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5RCxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDaEUsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUU1QixRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRSxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEUsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqRSxRQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQyxRQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUU1QixRQUFBLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7QUFJcEMsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7O0FBRTlGLFlBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDOztBQUVoRyxZQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRTs7QUFFdkcsWUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUU7O0FBRTFHLFlBQUEsT0FBTyxDQUFDLEVB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QUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFZixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVoQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFB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
