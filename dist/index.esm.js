/**
 * Common utility methods for math operations.
 */
class MathUtil {
    /** The value for which all absolute numbers smaller than are considered equal to zero. */
    static zeroTolerance = 1e-6;
    /** The conversion factor that radian to degree. */
    static radToDegreeFactor = 180 / Math.PI;
    /** The conversion factor that degree to radian. */
    static degreeToRadFactor = Math.PI / 180;
    /**
     * Clamps the specified value.
     * @param v - The specified value
     * @param min - The min value
     * @param max - The max value
     * @returns The result of clamping a value between min and max
     */
    static clamp(v, min, max) {
        return Math.max(min, Math.min(max, v));
    }
    /**
     * Checks if a and b are almost equals.
     * The absolute value of the difference between a and b is close to zero.
     * @param a - The left value to compare
     * @param b - The right value to compare
     * @returns True if a almost equal to b, false otherwise
     */
    static equals(a, b) {
        return Math.abs(a - b) <= MathUtil.zeroTolerance;
    }
    /**
     * Determines whether the specified v is pow2.
     * @param v - The specified v
     * @returns True if the specified v is pow2, false otherwise
     */
    static isPowerOf2(v) {
        return (v & (v - 1)) === 0;
    }
    /**
     * Modify the specified r from radian to degree.
     * @param r - The specified r
     * @returns The degree value
     */
    static radianToDegree(r) {
        return r * MathUtil.radToDegreeFactor;
    }
    /**
     * Modify the specified d from degree to radian.
     * @param d - The specified d
     * @returns The radian value
     */
    static degreeToRadian(d) {
        return d * MathUtil.degreeToRadFactor;
    }
}

class Vector2 {
    /** @internal */
    static _zero = new Vector2(0.0, 0.0);
    /** @internal */
    static _one = new Vector2(1.0, 1.0);
    /**
     * Determines the sum of two vectors.
     * @param left - The first vector to add
     * @param right - The second vector to add
     * @param out - The sum of two vectors
     */
    static add(left, right, out) {
        out._x = left._x + right._x;
        out._y = left._y + right._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the difference between two vectors.
     * @param left - The first vector to subtract
     * @param right - The second vector to subtract
     * @param out - The difference between two vectors
     */
    static subtract(left, right, out) {
        out._x = left._x - right._x;
        out._y = left._y - right._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the product of two vectors.
     * @param left - The first vector to multiply
     * @param right - The second vector to multiply
     * @param out - The product of two vectors
     */
    static multiply(left, right, out) {
        out._x = left._x * right._x;
        out._y = left._y * right._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the divisor of two vectors.
     * @param left - The first vector to divide
     * @param right - The second vector to divide
     * @param out - The divisor of two vectors
     */
    static divide(left, right, out) {
        out._x = left._x / right._x;
        out._y = left._y / right._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the dot product of two vectors.
     * @param left - The first vector to dot
     * @param right - The second vector to dot
     * @returns The dot product of two vectors
     */
    static dot(left, right) {
        return left._x * right._x + left._y * right._y;
    }
    /**
     * Determines the distance of two vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @returns The distance of two vectors
     */
    static distance(left, right) {
        const x = right._x - left._x;
        const y = right._y - left._y;
        return Math.sqrt(x * x + y * y);
    }
    /**
     * Determines the squared distance of two vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @returns The squared distance of two vectors
     */
    static distanceSquared(left, right) {
        const x = right._x - left._x;
        const y = right._y - left._y;
        return x * x + y * y;
    }
    /**
     * Determines whether the specified vectors are equals.
     * @param left - The first vector to compare
     * @param right - The second vector to compare
     * @returns True if the specified vectors are equals, false otherwise
     */
    static equals(left, right) {
        return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y);
    }
    /**
     * Performs a linear interpolation between two vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param t - The blend amount where 0 returns left and 1 right
     * @param out - The result of linear blending between two vectors
     */
    static lerp(left, right, t, out) {
        const { _x, _y } = left;
        out._x = _x + (right._x - _x) * t;
        out._y = _y + (right._y - _y) * t;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the largest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the largest components of the specified vectors
     */
    static max(left, right, out) {
        out._x = Math.max(left._x, right._x);
        out._y = Math.max(left._y, right._y);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the smallest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the smallest components of the specified vectors
     */
    static min(left, right, out) {
        out._x = Math.min(left._x, right._x);
        out._y = Math.min(left._y, right._y);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Reverses the direction of a given vector.
     * @param left - The vector to negate
     * @param out - The vector facing in the opposite direction
     */
    static negate(left, out) {
        out._x = -left._x;
        out._y = -left._y;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Converts the vector into a unit vector.
     * @param left - The vector to normalize
     * @param out - The normalized vector
     */
    static normalize(left, out) {
        const { _x, _y } = left;
        let len = Math.sqrt(_x * _x + _y * _y);
        if (len > MathUtil.zeroTolerance) {
            len = 1 / len;
            out._x = _x * len;
            out._y = _y * len;
            out._onValueChanged && out._onValueChanged();
        }
    }
    /**
     * Scale a vector by the given value.
     * @param left - The vector to scale
     * @param s - The amount by which to scale the vector
     * @param out - The scaled vector
     */
    static scale(left, s, out) {
        out._x = left._x * s;
        out._y = left._y * s;
        out._onValueChanged && out._onValueChanged();
    }
    /** @internal */
    _x;
    /** @internal */
    _y;
    /** @internal */
    _onValueChanged = null;
    /**
     * The x component of the vector.
     */
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The y component of the vector.
     */
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Constructor of Vector2.
     * @param x - The x component of the vector, default 0
     * @param y - The y component of the vector, default 0
     */
    constructor(x = 0, y = 0) {
        this._x = x;
        this._y = y;
    }
    /**
     * Set the value of this vector.
     * @param x - The x component of the vector
     * @param y - The y component of the vector
     * @returns This vector
     */
    setValue(x, y) {
        this._x = x;
        this._y = y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Set the value of this vector by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This vector
     */
    setValueByArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the sum of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    add(right) {
        this._x += right._x;
        this._y += right._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the difference of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    subtract(right) {
        this._x -= right._x;
        this._y -= right._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the product of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    multiply(right) {
        this._x *= right._x;
        this._y *= right._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the divisor of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    divide(right) {
        this._x /= right._x;
        this._y /= right._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Calculate the length of this vector.
     * @returns The length of this vector
     */
    length() {
        const { _x, _y } = this;
        return Math.sqrt(_x * _x + _y * _y);
    }
    /**
     * Calculate the squared length of this vector.
     * @returns The squared length of this vector
     */
    lengthSquared() {
        const { _x, _y } = this;
        return _x * _x + _y * _y;
    }
    /**
     * Reverses the direction of this vector.
     * @returns This vector
     */
    negate() {
        this._x = -this._x;
        this._y = -this._y;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Converts this vector into a unit vector.
     * @returns This vector
     */
    normalize() {
        Vector2.normalize(this, this);
        return this;
    }
    /**
     * Scale this vector by the given value.
     * @param s - The amount by which to scale the vector
     * @returns This vector
     */
    scale(s) {
        this._x *= s;
        this._y *= s;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Clone the value of this vector to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        out[outOffset] = this._x;
        out[outOffset + 1] = this._y;
    }
    /**
     * Creates a clone of this vector.
     * @returns A clone of this vector
     */
    clone() {
        return new Vector2(this._x, this._y);
    }
    /**
     * Clones this vector to the specified vector.
     * @param out - The specified vector
     * @returns The specified vector
     */
    cloneTo(out) {
        out._x = this._x;
        out._y = this._y;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
}

/**
 * Describes a 3D-vector.
 */
class Vector3 {
    /** @internal */
    static _zero = new Vector3(0.0, 0.0, 0.0);
    /** @internal */
    static _one = new Vector3(1.0, 1.0, 1.0);
    /**
     * Determines the sum of two vectors.
     * @param left - The first vector to add
     * @param right - The second vector to add
     * @param out - The sum of two vectors
     */
    static add(left, right, out) {
        out._x = left._x + right._x;
        out._y = left._y + right._y;
        out._z = left._z + right._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the difference between two vectors.
     * @param left - The first vector to subtract
     * @param right - The second vector to subtract
     * @param out - The difference between two vectors
     */
    static subtract(left, right, out) {
        out._x = left._x - right._x;
        out._y = left._y - right._y;
        out._z = left._z - right._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the product of two vectors.
     * @param left - The first vector to multiply
     * @param right - The second vector to multiply
     * @param out - The product of two vectors
     */
    static multiply(left, right, out) {
        out._x = left._x * right._x;
        out._y = left._y * right._y;
        out._z = left._z * right._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the divisor of two vectors.
     * @param left - The first vector to divide
     * @param right - The second vector to divide
     * @param out - The divisor of two vectors
     */
    static divide(left, right, out) {
        out._x = left._x / right._x;
        out._y = left._y / right._y;
        out._z = left._z / right._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the dot product of two vectors.
     * @param left - The first vector to dot
     * @param right - The second vector to dot
     * @returns The dot product of two vectors
     */
    static dot(left, right) {
        return left._x * right._x + left._y * right._y + left._z * right._z;
    }
    /**
     * Determines the cross product of two vectors.
     * @param left - The first vector to cross
     * @param right - The second vector to cross
     * @param out - The cross product of two vectors
     */
    static cross(left, right, out) {
        const ax = left._x;
        const ay = left._y;
        const az = left._z;
        const bx = right._x;
        const by = right._y;
        const bz = right._z;
        out.setValue(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);
    }
    /**
     * Determines the distance of two vectors.
     * @param a - The first vector
     * @param b - The second vector
     * @returns The distance of two vectors
     */
    static distance(a, b) {
        const x = b._x - a._x;
        const y = b._y - a._y;
        const z = b._z - a._z;
        return Math.sqrt(x * x + y * y + z * z);
    }
    /**
     * Determines the squared distance of two vectors.
     * @param a - The first vector
     * @param b - The second vector
     * @returns The squared distance of two vectors
     */
    static distanceSquared(a, b) {
        const x = b._x - a._x;
        const y = b._y - a._y;
        const z = b._z - a._z;
        return x * x + y * y + z * z;
    }
    /**
     * Determines whether the specified vectors are equals.
     * @param left - The first vector to compare
     * @param right - The second vector to compare
     * @returns True if the specified vectors are equals, false otherwise
     */
    static equals(left, right) {
        return (MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z));
    }
    /**
     * Performs a linear interpolation between two vectors.
     * @param start - The first vector
     * @param end - The second vector
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two vectors
     */
    static lerp(start, end, t, out) {
        const { _x, _y, _z } = start;
        out._x = _x + (end._x - _x) * t;
        out._y = _y + (end._y - _y) * t;
        out._z = _z + (end._z - _z) * t;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the largest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the largest components of the specified vectors
     */
    static max(left, right, out) {
        out._x = Math.max(left._x, right._x);
        out._y = Math.max(left._y, right._y);
        out._z = Math.max(left._z, right._z);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the smallest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the smallest components of the specified vectors
     */
    static min(left, right, out) {
        out._x = Math.min(left._x, right._x);
        out._y = Math.min(left._y, right._y);
        out._z = Math.min(left._z, right._z);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Reverses the direction of a given vector.
     * @param a - The vector to negate
     * @param out - The vector facing in the opposite direction
     */
    static negate(a, out) {
        out._x = -a._x;
        out._y = -a._y;
        out._z = -a._z;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Converts the vector into a unit vector.
     * @param a - The vector to normalize
     * @param out - The normalized vector
     */
    static normalize(a, out) {
        const { _x, _y, _z } = a;
        let len = Math.sqrt(_x * _x + _y * _y + _z * _z);
        if (len > MathUtil.zeroTolerance) {
            len = 1 / len;
            out.setValue(_x * len, _y * len, _z * len);
        }
    }
    /**
     * Scale a vector by the given value.
     * @param a - The vector to scale
     * @param s - The amount by which to scale the vector
     * @param out - The scaled vector
     */
    static scale(a, s, out) {
        out._x = a._x * s;
        out._y = a._y * s;
        out._z = a._z * s;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a normal transformation using the given 4x4 matrix.
     * @remarks
     * A normal transform performs the transformation with the assumption that the w component
     * is zero. This causes the fourth row and fourth column of the matrix to be unused. The
     * end result is a vector that is not translated, but all other transformation properties
     * apply. This is often preferred for normal vectors as normals purely represent direction
     * rather than location because normal vectors should not be translated.
     * @param v - The normal vector to transform
     * @param m - The transform matrix
     * @param out - The transformed normal
     */
    static transformNormal(v, m, out) {
        const { _x, _y, _z } = v;
        const e = m.elements;
        out._x = _x * e[0] + _y * e[4] + _z * e[8];
        out._y = _x * e[1] + _y * e[5] + _z * e[9];
        out._z = _x * e[2] + _y * e[6] + _z * e[10];
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation using the given 4x4 matrix.
     * @param v - The vector to transform
     * @param m - The transform matrix
     * @param out - The transformed vector3
     */
    static transformToVec3(v, m, out) {
        const { _x, _y, _z } = v;
        const e = m.elements;
        out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];
        out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];
        out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.
     * @param v - The vector to transform
     * @param m - The transform matrix
     * @param out - The transformed vector4
     */
    static transformToVec4(v, m, out) {
        const { _x, _y, _z } = v;
        const e = m.elements;
        out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];
        out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];
        out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];
        out._w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a coordinate transformation using the given 4x4 matrix.
     *
     * @remarks
     * A coordinate transform performs the transformation with the assumption that the w component
     * is one. The four dimensional vector obtained from the transformation operation has each
     * component in the vector divided by the w component. This forces the w-component to be one and
     * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
     * with coordinates as the w component can safely be ignored.
     * @param v - The coordinate vector to transform
     * @param m - The transform matrix
     * @param out - The transformed coordinates
     */
    static transformCoordinate(v, m, out) {
        const { _x, _y, _z } = v;
        const e = m.elements;
        let w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];
        w = 1.0 / w;
        out._x = (_x * e[0] + _y * e[4] + _z * e[8] + e[12]) * w;
        out._y = (_x * e[1] + _y * e[5] + _z * e[9] + e[13]) * w;
        out._z = (_x * e[2] + _y * e[6] + _z * e[10] + e[14]) * w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation using the given quaternion.
     * @param v - The vector to transform
     * @param quaternion - The transform quaternion
     * @param out - The transformed vector
     */
    static transformByQuat(v, quaternion, out) {
        const { _x, _y, _z } = v;
        const { _x: qx, _y: qy, _z: qz, _w: qw } = quaternion;
        // calculate quat * vec
        const ix = qw * _x + qy * _z - qz * _y;
        const iy = qw * _y + qz * _x - qx * _z;
        const iz = qw * _z + qx * _y - qy * _x;
        const iw = -qx * _x - qy * _y - qz * _z;
        // calculate result * inverse quat
        out._x = ix * qw - iw * qx - iy * qz + iz * qy;
        out._y = iy * qw - iw * qy - iz * qx + ix * qz;
        out._z = iz * qw - iw * qz - ix * qy + iy * qx;
        out._onValueChanged && out._onValueChanged();
    }
    /** @internal */
    _x;
    /** @internal */
    _y;
    /** @internal */
    _z;
    /** @internal */
    _onValueChanged = null;
    /**
     * The x component of the vector.
     */
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The y component of the vector.
     */
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The z component of the vector.
     */
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Constructor of Vector3.
     * @param x - The x component of the vector, default 0
     * @param y - The y component of the vector, default 0
     * @param z - The z component of the vector, default 0
     */
    constructor(x = 0, y = 0, z = 0) {
        this._x = x;
        this._y = y;
        this._z = z;
    }
    /**
     * Set the value of this vector.
     * @param x - The x component of the vector
     * @param y - The y component of the vector
     * @param z - The z component of the vector
     * @returns This vector
     */
    setValue(x, y, z) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Set the value of this vector by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This vector
     */
    setValueByArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the sum of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    add(right) {
        this._x += right._x;
        this._y += right._y;
        this._z += right._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the difference of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    subtract(right) {
        this._x -= right._x;
        this._y -= right._y;
        this._z -= right._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the product of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    multiply(right) {
        this._x *= right._x;
        this._y *= right._y;
        this._z *= right._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the divisor of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    divide(right) {
        this._x /= right._x;
        this._y /= right._y;
        this._z /= right._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Calculate the length of this vector.
     * @returns The length of this vector
     */
    length() {
        const { _x, _y, _z } = this;
        return Math.sqrt(_x * _x + _y * _y + _z * _z);
    }
    /**
     * Calculate the squared length of this vector.
     * @returns The squared length of this vector
     */
    lengthSquared() {
        const { _x, _y, _z } = this;
        return _x * _x + _y * _y + _z * _z;
    }
    /**
     * Reverses the direction of this vector.
     * @returns This vector
     */
    negate() {
        this._x = -this._x;
        this._y = -this._y;
        this._z = -this._z;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Converts this vector into a unit vector.
     * @returns This vector
     */
    normalize() {
        Vector3.normalize(this, this);
        return this;
    }
    /**
     * Scale this vector by the given value.
     * @param s - The amount by which to scale the vector
     * @returns This vector
     */
    scale(s) {
        this._x *= s;
        this._y *= s;
        this._z *= s;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Clone the value of this vector to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        out[outOffset] = this._x;
        out[outOffset + 1] = this._y;
        out[outOffset + 2] = this._z;
    }
    /**
     * Creates a clone of this vector.
     * @returns A clone of this vector
     */
    clone() {
        return new Vector3(this._x, this._y, this._z);
    }
    /**
     * Clones this vector to the specified vector.
     * @param out - The specified vector
     * @returns The specified vector
     */
    cloneTo(out) {
        out._x = this._x;
        out._y = this._y;
        out._z = this._z;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * This vector performs a normal transformation using the given 4x4 matrix.
     * @remarks
     * A normal transform performs the transformation with the assumption that the w component
     * is zero. This causes the fourth row and fourth column of the matrix to be unused. The
     * end result is a vector that is not translated, but all other transformation properties
     * apply. This is often preferred for normal vectors as normals purely represent direction
     * rather than location because normal vectors should not be translated.
     * @param m - The transform matrix
     * @returns This vector
     */
    transformNormal(m) {
        Vector3.transformNormal(this, m, this);
        return this;
    }
    /**
     * This vector performs a transformation using the given 4x4 matrix.
     * @param m - The transform matrix
     * @returns This vector
     */
    transformToVec3(m) {
        Vector3.transformToVec3(this, m, this);
        return this;
    }
    /**
     * This vector performs a coordinate transformation using the given 4x4 matrix.
     * @remarks
     * A coordinate transform performs the transformation with the assumption that the w component
     * is one. The four dimensional vector obtained from the transformation operation has each
     * component in the vector divided by the w component. This forces the w-component to be one and
     * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
     * with coordinates as the w component can safely be ignored.
     * @param m - The transform matrix
     * @returns This vector
     */
    transformCoordinate(m) {
        Vector3.transformCoordinate(this, m, this);
        return this;
    }
    /**
     * This vector performs a transformation using the given quaternion.
     * @param quaternion - The transform quaternion
     * @returns This vector
     */
    transformByQuat(quaternion) {
        Vector3.transformByQuat(this, quaternion, this);
        return this;
    }
}

/**
 * Describes a 4D-vector.
 */
class Vector4 {
    /** @internal */
    static _zero = new Vector4(0.0, 0.0, 0.0, 0.0);
    /** @internal */
    static _one = new Vector4(1.0, 1.0, 1.0, 1.0);
    /**
     * Determines the sum of two vectors.
     * @param left - The first vector to add
     * @param right - The second vector to add
     * @param out - The sum of two vectors
     */
    static add(left, right, out) {
        out._x = left._x + right._x;
        out._y = left._y + right._y;
        out._z = left._z + right._z;
        out._w = left._w + right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the difference between two vectors.
     * @param left - The first vector to subtract
     * @param right - The second vector to subtract
     * @param out - The difference between two vectors
     */
    static subtract(left, right, out) {
        out._x = left._x - right._x;
        out._y = left._y - right._y;
        out._z = left._z - right._z;
        out._w = left._w - right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the product of two vectors.
     * @param left - The first vector to multiply
     * @param right - The second vector to multiply
     * @param out - The product of two vectors
     */
    static multiply(left, right, out) {
        out._x = left._x * right._x;
        out._y = left._y * right._y;
        out._z = left._z * right._z;
        out._w = left._w * right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the divisor of two vectors.
     * @param left - The first vector to divide
     * @param right - The second vector to divide
     * @param out - The divisor of two vectors
     */
    static divide(left, right, out) {
        out._x = left._x / right._x;
        out._y = left._y / right._y;
        out._z = left._z / right._z;
        out._w = left._w / right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the dot product of two vectors.
     * @param left - The first vector to dot
     * @param right - The second vector to dot
     * @returns The dot product of two vectors
     */
    static dot(left, right) {
        return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;
    }
    /**
     * Determines the distance of two vectors.
     * @param a - The first vector
     * @param b - The second vector
     * @returns The distance of two vectors
     */
    static distance(a, b) {
        const x = b._x - a._x;
        const y = b._y - a._y;
        const z = b._z - a._z;
        const w = b._w - a._w;
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    /**
     * Determines the squared distance of two vectors.
     * @param a - The first vector
     * @param b - The second vector
     * @returns The squared distance of two vectors
     */
    static distanceSquared(a, b) {
        const x = b._x - a._x;
        const y = b._y - a._y;
        const z = b._z - a._z;
        const w = b._w - a._w;
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Determines whether the specified vectors are equals.
     * @param left - The first vector to compare
     * @param right - The second vector to compare
     * @returns True if the specified vectors are equals, false otherwise
     */
    static equals(left, right) {
        return (MathUtil.equals(left._x, right._x) &&
            MathUtil.equals(left._y, right._y) &&
            MathUtil.equals(left._z, right._z) &&
            MathUtil.equals(left._w, right._w));
    }
    /**
     * Performs a linear interpolation between two vectors.
     * @param start - The first vector
     * @param end - The second vector
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two vectors
     */
    static lerp(start, end, t, out) {
        const { _x, _y, _z, _w } = start;
        out._x = _x + (end._x - _x) * t;
        out._y = _y + (end._y - _y) * t;
        out._z = _z + (end._z - _z) * t;
        out._w = _w + (end._w - _w) * t;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the largest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the largest components of the specified vectors
     */
    static max(left, right, out) {
        out._x = Math.max(left._x, right._x);
        out._y = Math.max(left._y, right._y);
        out._z = Math.max(left._z, right._z);
        out._w = Math.max(left._w, right._w);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a vector containing the smallest components of the specified vectors.
     * @param left - The first vector
     * @param right - The second vector
     * @param out - The vector containing the smallest components of the specified vectors
     */
    static min(left, right, out) {
        out._x = Math.min(left._x, right._x);
        out._y = Math.min(left._y, right._y);
        out._z = Math.min(left._z, right._z);
        out._w = Math.min(left._w, right._w);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Reverses the direction of a given vector.
     * @param a - The vector to negate
     * @param out - The vector facing in the opposite direction
     */
    static negate(a, out) {
        out._x = -a._x;
        out._y = -a._y;
        out._z = -a._z;
        out._w = -a._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Converts the vector into a unit vector.
     * @param a - The vector to normalize
     * @param out - The normalized vector
     */
    static normalize(a, out) {
        const { _x, _y, _z, _w } = a;
        let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
        if (len > MathUtil.zeroTolerance) {
            len = 1 / len;
            out._x = _x * len;
            out._y = _y * len;
            out._z = _z * len;
            out._w = _w * len;
            out._onValueChanged && out._onValueChanged();
        }
    }
    /**
     * Scale a vector by the given value.
     * @param a - The vector to scale
     * @param s - The amount by which to scale the vector
     * @param out - The scaled vector
     */
    static scale(a, s, out) {
        out._x = a._x * s;
        out._y = a._y * s;
        out._z = a._z * s;
        out._w = a._w * s;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation using the given 4x4 matrix.
     * @param v - The vector to transform
     * @param m - The transform matrix
     * @param out - The transformed vector3
     */
    static transform(v, m, out) {
        const { _x, _y, _z, _w } = v;
        const e = m.elements;
        out._x = _x * e[0] + _y * e[4] + _z * e[8] + _w * e[12];
        out._y = _x * e[1] + _y * e[5] + _z * e[9] + _w * e[13];
        out._z = _x * e[2] + _y * e[6] + _z * e[10] + _w * e[14];
        out._w = _x * e[3] + _y * e[7] + _z * e[11] + _w * e[15];
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Performs a transformation using the given quaternion.
     * @param v - The vector to transform
     * @param q - The transform quaternion
     * @param out - The transformed vector
     */
    static transformByQuat(v, q, out) {
        const { _x: x, _y: y, _z: z, _w: w } = v;
        const qx = q._x;
        const qy = q._y;
        const qz = q._z;
        const qw = q._w;
        // calculate quat * vec
        const ix = qw * x + qy * z - qz * y;
        const iy = qw * y + qz * x - qx * z;
        const iz = qw * z + qx * y - qy * x;
        const iw = -qx * x - qy * y - qz * z;
        // calculate result * inverse quat
        out._x = ix * qw - iw * qx - iy * qz + iz * qy;
        out._y = iy * qw - iw * qy - iz * qx + ix * qz;
        out._z = iz * qw - iw * qz - ix * qy + iy * qx;
        out._w = w;
        out._onValueChanged && out._onValueChanged();
    }
    /** @internal */
    _x;
    /** @internal */
    _y;
    /** @internal */
    _z;
    /** @internal */
    _w;
    /** @internal */
    _onValueChanged = null;
    /**
     * The x component of the vector.
     */
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The y component of the vector.
     */
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The z component of the vector.
     */
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The w component of the vector.
     */
    get w() {
        return this._w;
    }
    set w(value) {
        this._w = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Constructor of Vector4.
     * @param x - The x component of the vector, default 0
     * @param y - The y component of the vector, default 0
     * @param z - The z component of the vector, default 0
     * @param w - The w component of the vector, default 0
     */
    constructor(x = 0, y = 0, z = 0, w = 0) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
    }
    /**
     * Set the value of this vector.
     * @param x - The x component of the vector
     * @param y - The y component of the vector
     * @param z - The z component of the vector
     * @param w - The w component of the vector
     * @returns This vector
     */
    setValue(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Set the value of this vector by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This vector
     */
    setValueByArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the sum of this vector and the specified vector.
     * @param right - The specified vector
     * @returns This vector
     */
    add(right) {
        this._x += right._x;
        this._y += right._y;
        this._z += right._z;
        this._w += right._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the difference of this vector and the specified vector.
     * @param right - the specified vector
     * @returns This vector
     */
    subtract(right) {
        this._x -= right._x;
        this._y -= right._y;
        this._z -= right._z;
        this._w -= right._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the product of this vector and the specified vector.
     * @param right - the specified vector
     * @returns This vector
     */
    multiply(right) {
        this._x *= right._x;
        this._y *= right._y;
        this._z *= right._z;
        this._w *= right._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Determines the divisor of this vector and the specified vector.
     * @param right - the specified vector
     * @returns This vector
     */
    divide(right) {
        this._x /= right._x;
        this._y /= right._y;
        this._z /= right._z;
        this._w /= right._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Calculate the length of this vector.
     * @returns The length of this vector
     */
    length() {
        const { _x, _y, _z, _w } = this;
        return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
    }
    /**
     * Calculate the squared length of this vector.
     * @returns The squared length of this vector
     */
    lengthSquared() {
        const { _x, _y, _z, _w } = this;
        return _x * _x + _y * _y + _z * _z + _w * _w;
    }
    /**
     * Reverses the direction of this vector.
     * @returns This vector
     */
    negate() {
        this._x = -this._x;
        this._y = -this._y;
        this._z = -this._z;
        this._w = -this._w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Converts this vector into a unit vector.
     * @returns This vector
     */
    normalize() {
        Vector4.normalize(this, this);
        return this;
    }
    /**
     * Scale this vector by the given value.
     * @param s - The amount by which to scale the vector
     * @returns This vector
     */
    scale(s) {
        this._x *= s;
        this._y *= s;
        this._z *= s;
        this._w *= s;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Clone the value of this vector to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        out[outOffset] = this._x;
        out[outOffset + 1] = this._y;
        out[outOffset + 2] = this._z;
        out[outOffset + 3] = this._w;
    }
    /**
     * Creates a clone of this vector.
     * @returns A clone of this vector
     */
    clone() {
        let ret = new Vector4(this._x, this._y, this._z, this._w);
        return ret;
    }
    /**
     * Clones this vector to the specified vector.
     * @param out - The specified vector
     * @returns The specified vector
     */
    cloneTo(out) {
        out._x = this._x;
        out._y = this._y;
        out._z = this._z;
        out._w = this._w;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
}

/**
 * Represents a 3x3 mathematical matrix.
 */
class Matrix3 {
    /**
     * Determines the sum of two matrices.
     * @param left - The first matrix to add
     * @param right - The second matrix to add
     * @param out - The sum of two matrices
     */
    static add(left, right, out) {
        const le = left.elements;
        const re = right.elements;
        const oe = out.elements;
        oe[0] = le[0] + re[0];
        oe[1] = le[1] + re[1];
        oe[2] = le[2] + re[2];
        oe[3] = le[3] + re[3];
        oe[4] = le[4] + re[4];
        oe[5] = le[5] + re[5];
        oe[6] = le[6] + re[6];
        oe[7] = le[7] + re[7];
        oe[8] = le[8] + re[8];
    }
    /**
     * Determines the difference between two matrices.
     * @param left - The first matrix to subtract
     * @param right - The second matrix to subtract
     * @param out - The difference between two matrices
     */
    static subtract(left, right, out) {
        const le = left.elements;
        const re = right.elements;
        const oe = out.elements;
        oe[0] = le[0] - re[0];
        oe[1] = le[1] - re[1];
        oe[2] = le[2] - re[2];
        oe[3] = le[3] - re[3];
        oe[4] = le[4] - re[4];
        oe[5] = le[5] - re[5];
        oe[6] = le[6] - re[6];
        oe[7] = le[7] - re[7];
        oe[8] = le[8] - re[8];
    }
    /**
     * Determines the product of two matrices.
     * @param left - The first matrix to multiply
     * @param right - The second matrix to multiply
     * @param out - The product of two matrices
     */
    static multiply(left, right, out) {
        const le = left.elements;
        const re = right.elements;
        const oe = out.elements;
        const l11 = le[0], l12 = le[1], l13 = le[2];
        const l21 = le[3], l22 = le[4], l23 = le[5];
        const l31 = le[6], l32 = le[7], l33 = le[8];
        const r11 = re[0], r12 = re[1], r13 = re[2];
        const r21 = re[3], r22 = re[4], r23 = re[5];
        const r31 = re[6], r32 = re[7], r33 = re[8];
        oe[0] = l11 * r11 + l21 * r12 + l31 * r13;
        oe[1] = l12 * r11 + l22 * r12 + l32 * r13;
        oe[2] = l13 * r11 + l23 * r12 + l33 * r13;
        oe[3] = l11 * r21 + l21 * r22 + l31 * r23;
        oe[4] = l12 * r21 + l22 * r22 + l32 * r23;
        oe[5] = l13 * r21 + l23 * r22 + l33 * r23;
        oe[6] = l11 * r31 + l21 * r32 + l31 * r33;
        oe[7] = l12 * r31 + l22 * r32 + l32 * r33;
        oe[8] = l13 * r31 + l23 * r32 + l33 * r33;
    }
    /**
     * Determines whether the specified matrices are equals.
     * @param left - The first matrix to compare
     * @param right - The second matrix to compare
     * @returns True if the specified matrices are equals, false otherwise
     */
    static equals(left, right) {
        const le = left.elements;
        const re = right.elements;
        return (MathUtil.equals(le[0], re[0]) &&
            MathUtil.equals(le[1], re[1]) &&
            MathUtil.equals(le[2], re[2]) &&
            MathUtil.equals(le[3], re[3]) &&
            MathUtil.equals(le[4], re[4]) &&
            MathUtil.equals(le[5], re[5]) &&
            MathUtil.equals(le[6], re[6]) &&
            MathUtil.equals(le[7], re[7]) &&
            MathUtil.equals(le[8], re[8]));
    }
    /**
     * Performs a linear interpolation between two matrices.
     * @param start - The first matrix
     * @param end - The second matrix
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two matrices
     */
    static lerp(start, end, t, out) {
        const se = start.elements;
        const ee = end.elements;
        const oe = out.elements;
        const inv = 1.0 - t;
        oe[0] = se[0] * inv + ee[0] * t;
        oe[1] = se[1] * inv + ee[1] * t;
        oe[2] = se[2] * inv + ee[2] * t;
        oe[3] = se[3] * inv + ee[3] * t;
        oe[4] = se[4] * inv + ee[4] * t;
        oe[5] = se[5] * inv + ee[5] * t;
        oe[6] = se[6] * inv + ee[6] * t;
        oe[7] = se[7] * inv + ee[7] * t;
        oe[8] = se[8] * inv + ee[8] * t;
    }
    /**
     * Calculate a rotation matrix from a quaternion.
     * @param quaternion - The quaternion used to calculate the matrix
     * @param out - The calculated rotation matrix
     */
    static rotationQuaternion(quaternion, out) {
        const oe = out.elements;
        const { _x: x, _y: y, _z: z, _w: w } = quaternion;
        const x2 = x + x;
        const y2 = y + y;
        const z2 = z + z;
        const xx = x * x2;
        const yx = y * x2;
        const yy = y * y2;
        const zx = z * x2;
        const zy = z * y2;
        const zz = z * z2;
        const wx = w * x2;
        const wy = w * y2;
        const wz = w * z2;
        oe[0] = 1 - yy - zz;
        oe[3] = yx - wz;
        oe[6] = zx + wy;
        oe[1] = yx + wz;
        oe[4] = 1 - xx - zz;
        oe[7] = zy - wx;
        oe[2] = zx - wy;
        oe[5] = zy + wx;
        oe[8] = 1 - xx - yy;
    }
    /**
     * Calculate a matrix from scale vector.
     * @param s - The scale vector
     * @param out - The calculated matrix
     */
    static scaling(s, out) {
        const oe = out.elements;
        oe[0] = s._x;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = s._y;
        oe[5] = 0;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 1;
    }
    /**
     * Calculate a matrix from translation vector.
     * @param translation - The translation vector
     * @param out - The calculated matrix
     */
    static translation(translation, out) {
        const oe = out.elements;
        oe[0] = 1;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 1;
        oe[5] = 0;
        oe[6] = translation._x;
        oe[7] = translation._y;
        oe[8] = 1;
    }
    /**
     * Calculate the inverse of the specified matrix.
     * @param a - The matrix whose inverse is to be calculated
     * @param out - The inverse of the specified matrix
     */
    static invert(a, out) {
        const ae = a.elements;
        const oe = out.elements;
        const a11 = ae[0], a12 = ae[1], a13 = ae[2];
        const a21 = ae[3], a22 = ae[4], a23 = ae[5];
        const a31 = ae[6], a32 = ae[7], a33 = ae[8];
        const b12 = a33 * a22 - a23 * a32;
        const b22 = -a33 * a21 + a23 * a31;
        const b32 = a32 * a21 - a22 * a31;
        let det = a11 * b12 + a12 * b22 + a13 * b32;
        if (!det) {
            return;
        }
        det = 1.0 / det;
        oe[0] = b12 * det;
        oe[1] = (-a33 * a12 + a13 * a32) * det;
        oe[2] = (a23 * a12 - a13 * a22) * det;
        oe[3] = b22 * det;
        oe[4] = (a33 * a11 - a13 * a31) * det;
        oe[5] = (-a23 * a11 + a13 * a21) * det;
        oe[6] = b32 * det;
        oe[7] = (-a32 * a11 + a12 * a31) * det;
        oe[8] = (a22 * a11 - a12 * a21) * det;
    }
    /**
     * Calculate a 3x3 normal matrix from a 4x4 matrix.
     * @remarks The calculation process is the transpose matrix of the inverse matrix.
     * @param mat4 - The 4x4 matrix
     * @param out - THe 3x3 normal matrix
     */
    static normalMatrix(mat4, out) {
        const ae = mat4.elements;
        const oe = out.elements;
        const a11 = ae[0], a12 = ae[1], a13 = ae[2], a14 = ae[3];
        const a21 = ae[4], a22 = ae[5], a23 = ae[6], a24 = ae[7];
        const a31 = ae[8], a32 = ae[9], a33 = ae[10], a34 = ae[11];
        const a41 = ae[12], a42 = ae[13], a43 = ae[14], a44 = ae[15];
        const b00 = a11 * a22 - a12 * a21;
        const b01 = a11 * a23 - a13 * a21;
        const b02 = a11 * a24 - a14 * a21;
        const b03 = a12 * a23 - a13 * a22;
        const b04 = a12 * a24 - a14 * a22;
        const b05 = a13 * a24 - a14 * a23;
        const b06 = a31 * a42 - a32 * a41;
        const b07 = a31 * a43 - a33 * a41;
        const b08 = a31 * a44 - a34 * a41;
        const b09 = a32 * a43 - a33 * a42;
        const b10 = a32 * a44 - a34 * a42;
        const b11 = a33 * a44 - a34 * a43;
        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;
        oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;
        oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;
        oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;
        oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;
        oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;
        oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;
        oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;
        oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;
    }
    /**
     * The specified matrix rotates around an angle.
     * @param a - The specified matrix
     * @param r - The rotation angle in radians
     * @param out - The rotated matrix
     */
    static rotate(a, r, out) {
        const ae = a.elements;
        const oe = out.elements;
        const s = Math.sin(r);
        const c = Math.cos(r);
        const a11 = ae[0], a12 = ae[1], a13 = ae[2];
        const a21 = ae[3], a22 = ae[4], a23 = ae[5];
        const a31 = ae[6], a32 = ae[7], a33 = ae[8];
        oe[0] = c * a11 + s * a21;
        oe[1] = c * a12 + s * a22;
        oe[2] = c * a13 + s * a23;
        oe[3] = c * a21 - s * a11;
        oe[4] = c * a22 - s * a12;
        oe[5] = c * a23 - s * a13;
        oe[6] = a31;
        oe[7] = a32;
        oe[8] = a33;
    }
    /**
     * Scale a matrix by a given vector.
     * @param m - The matrix
     * @param s - The given vector
     * @param out - The scaled matrix
     */
    static scale(m, s, out) {
        const { _x: x, _y: y } = s;
        const ae = m.elements;
        const oe = out.elements;
        oe[0] = x * ae[0];
        oe[1] = x * ae[1];
        oe[2] = x * ae[2];
        oe[3] = y * ae[3];
        oe[4] = y * ae[4];
        oe[5] = y * ae[5];
        oe[6] = ae[6];
        oe[7] = ae[7];
        oe[8] = ae[8];
    }
    /**
     * Translate a matrix by a given vector.
     * @param m - The matrix
     * @param translation - The given vector
     * @param out - The translated matrix
     */
    static translate(m, translation, out) {
        const { _x: x, _y: y } = translation;
        const ae = m.elements;
        const oe = out.elements;
        const a11 = ae[0], a12 = ae[1], a13 = ae[2];
        const a21 = ae[3], a22 = ae[4], a23 = ae[5];
        const a31 = ae[6], a32 = ae[7], a33 = ae[8];
        oe[0] = a11;
        oe[1] = a12;
        oe[2] = a13;
        oe[3] = a21;
        oe[4] = a22;
        oe[5] = a23;
        oe[6] = x * a11 + y * a21 + a31;
        oe[7] = x * a12 + y * a22 + a32;
        oe[8] = x * a13 + y * a23 + a33;
    }
    /**
     * Calculate the transpose of the specified matrix.
     * @param a - The specified matrix
     * @param out - The transpose of the specified matrix
     */
    static transpose(a, out) {
        const ae = a.elements;
        const oe = out.elements;
        if (out === a) {
            const a12 = ae[1];
            const a13 = ae[2];
            const a23 = ae[5];
            oe[1] = ae[3];
            oe[2] = ae[6];
            oe[3] = a12;
            oe[5] = ae[7];
            oe[6] = a13;
            oe[7] = a23;
        }
        else {
            oe[0] = ae[0];
            oe[1] = ae[3];
            oe[2] = ae[6];
            oe[3] = ae[1];
            oe[4] = ae[4];
            oe[5] = ae[7];
            oe[6] = ae[2];
            oe[7] = ae[5];
            oe[8] = ae[8];
        }
    }
    /**
     * An array containing the elements of the matrix (column matrix).
     * @remarks
     * elements[0] first column and first row value m11
     * elements[1] first column and second row value m12
     * elements[2] first column and third row value m13
     * elements[3] second column and first row value m21
     * and so on
     */
    elements = new Float32Array(9);
    /**
     * Constructor of 3*3 matrix.
     * @param m11 - Default 1 column 1, row 1
     * @param m12 - Default 0 column 1, row 2
     * @param m13 - Default 0 column 1, row 3
     * @param m21 - Default 0 column 2, row 1
     * @param m22 - Default 1 column 2, row 2
     * @param m23 - Default 0 column 2, row 3
     * @param m31 - Default 0 column 3, row 1
     * @param m32 - Default 0 column 3, row 2
     * @param m33 - Default 1 column 3, row 3
     */
    constructor(m11 = 1, m12 = 0, m13 = 0, m21 = 0, m22 = 1, m23 = 0, m31 = 0, m32 = 0, m33 = 1) {
        const e = this.elements;
        e[0] = m11;
        e[1] = m12;
        e[2] = m13;
        e[3] = m21;
        e[4] = m22;
        e[5] = m23;
        e[6] = m31;
        e[7] = m32;
        e[8] = m33;
    }
    /**
     * Set the value of this matrix, and return this matrix.
     * @param m11
     * @param m12
     * @param m13
     * @param m21
     * @param m22
     * @param m23
     * @param m31
     * @param m32
     * @param m33
     * @returns This matrix
     */
    setValue(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
        const e = this.elements;
        e[0] = m11;
        e[1] = m12;
        e[2] = m13;
        e[3] = m21;
        e[4] = m22;
        e[5] = m23;
        e[6] = m31;
        e[7] = m32;
        e[8] = m33;
        return this;
    }
    /**
     * Set the value of this matrix by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This matrix
     */
    setValueByArray(array, offset = 0) {
        const srce = this.elements;
        for (let i = 0; i < 12; i++) {
            srce[i] = array[i + offset];
        }
        return this;
    }
    /**
     * Set the value of this 3x3 matrix by the specified 4x4 matrix.
     * upper-left principle
     * @param a - The specified 4x4 matrix
     * @returns This 3x3 matrix
     */
    setValueByMatrix(a) {
        const ae = a.elements;
        const e = this.elements;
        e[0] = ae[0];
        e[1] = ae[1];
        e[2] = ae[2];
        e[3] = ae[4];
        e[4] = ae[5];
        e[5] = ae[6];
        e[6] = ae[8];
        e[7] = ae[9];
        e[8] = ae[10];
        return this;
    }
    /**
     * Clone the value of this matrix to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        const e = this.elements;
        out[outOffset] = e[0];
        out[outOffset + 1] = e[1];
        out[outOffset + 2] = e[2];
        out[outOffset + 3] = e[3];
        out[outOffset + 4] = e[4];
        out[outOffset + 5] = e[5];
        out[outOffset + 6] = e[6];
        out[outOffset + 7] = e[7];
        out[outOffset + 8] = e[8];
    }
    /**
     * Creates a clone of this matrix.
     * @returns A clone of this matrix
     */
    clone() {
        const e = this.elements;
        let ret = new Matrix3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);
        return ret;
    }
    /**
     * Clones this matrix to the specified matrix.
     * @param out - The specified matrix
     * @returns The specified matrix
     */
    cloneTo(out) {
        const e = this.elements;
        const oe = out.elements;
        oe[0] = e[0];
        oe[1] = e[1];
        oe[2] = e[2];
        oe[3] = e[3];
        oe[4] = e[4];
        oe[5] = e[5];
        oe[6] = e[6];
        oe[7] = e[7];
        oe[8] = e[8];
        return out;
    }
    /**
     * Determines the sum of this matrix and the specified matrix.
     * @param right - The specified matrix
     * @returns This matrix that store the sum of the two matrices
     */
    add(right) {
        Matrix3.add(this, right, this);
        return this;
    }
    /**
     * Determines the difference between this matrix and the specified matrix.
     * @param right - The specified matrix
     * @returns This matrix that store the difference between the two matrices
     */
    subtract(right) {
        Matrix3.subtract(this, right, this);
        return this;
    }
    /**
     * Determines the product of this matrix and the specified matrix.
     * @param right - The specified matrix
     * @returns This matrix that store the product of the two matrices
     */
    multiply(right) {
        Matrix3.multiply(this, right, this);
        return this;
    }
    /**
     * Calculate a determinant of this matrix.
     * @returns The determinant of this matrix
     */
    determinant() {
        const e = this.elements;
        const a11 = e[0], a12 = e[1], a13 = e[2];
        const a21 = e[3], a22 = e[4], a23 = e[5];
        const a31 = e[6], a32 = e[7], a33 = e[8];
        const b12 = a33 * a22 - a23 * a32;
        const b22 = -a33 * a21 + a23 * a31;
        const b32 = a32 * a21 - a22 * a31;
        return a11 * b12 + a12 * b22 + a13 * b32;
    }
    /**
     * Identity this matrix.
     * @returns This matrix after identity
     */
    identity() {
        const e = this.elements;
        e[0] = 1;
        e[1] = 0;
        e[2] = 0;
        e[3] = 0;
        e[4] = 1;
        e[5] = 0;
        e[6] = 0;
        e[7] = 0;
        e[8] = 1;
        return this;
    }
    /**
     * Invert the matrix.
     * @returns The matrix after invert
     */
    invert() {
        Matrix3.invert(this, this);
        return this;
    }
    /**
     * This matrix rotates around an angle.
     * @param r - The rotation angle in radians
     * @returns This matrix after rotate
     */
    rotate(r) {
        Matrix3.rotate(this, r, this);
        return this;
    }
    /**
     * Scale this matrix by a given vector.
     * @param s - The given vector
     * @returns This matrix after scale
     */
    scale(s) {
        Matrix3.scale(this, s, this);
        return this;
    }
    /**
     * Translate this matrix by a given vector.
     * @param translation - The given vector
     * @returns This matrix after translate
     */
    translate(translation) {
        Matrix3.translate(this, translation, this);
        return this;
    }
    /**
     * Calculate the transpose of this matrix.
     * @returns This matrix after transpose
     */
    transpose() {
        Matrix3.transpose(this, this);
        return this;
    }
}

/**
 * Represents a four dimensional mathematical quaternion.
 */
class Quaternion {
    /** @internal */
    static _tempVector3 = new Vector3();
    /** @internal */
    static _tempQuat1 = new Quaternion();
    /**
     * Determines the sum of two quaternions.
     * @param left - The first quaternion to add
     * @param right - The second quaternion to add
     * @param out - The sum of two quaternions
     */
    static add(left, right, out) {
        out._x = left._x + right._x;
        out._y = left._y + right._y;
        out._z = left._z + right._z;
        out._w = left._w + right._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the product of two quaternions.
     * @param left - The first quaternion to multiply
     * @param right - The second quaternion to multiply
     * @param out - The product of two quaternions
     */
    static multiply(left, right, out) {
        const ax = left._x, ay = left._y, az = left._z, aw = left._w;
        const bx = right._x, by = right._y, bz = right._z, bw = right._w;
        out._x = ax * bw + aw * bx + ay * bz - az * by;
        out._y = ay * bw + aw * by + az * bx - ax * bz;
        out._z = az * bw + aw * bz + ax * by - ay * bx;
        out._w = aw * bw - ax * bx - ay * by - az * bz;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate quaternion that contains conjugated version of the specified quaternion.
     * @param a - The specified quaternion
     * @param out - The conjugate version of the specified quaternion
     */
    static conjugate(a, out) {
        out._x = -a._x;
        out._y = -a._y;
        out._z = -a._z;
        out._w = a._w;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Determines the dot product of two quaternions.
     * @param left - The first quaternion to dot
     * @param right - The second quaternion to dot
     * @returns The dot product of two quaternions
     */
    static dot(left, right) {
        return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;
    }
    /**
     * Determines whether the specified quaternions are equals.
     * @param left - The first quaternion to compare
     * @param right - The second quaternion to compare
     * @returns True if the specified quaternions are equals, false otherwise
     */
    static equals(left, right) {
        return (MathUtil.equals(left._x, right._x) &&
            MathUtil.equals(left._y, right._y) &&
            MathUtil.equals(left._z, right._z) &&
            MathUtil.equals(left._w, right._w));
    }
    /**
     * Calculate a quaternion rotates around an arbitrary axis.
     * @param axis - The axis
     * @param rad - The rotation angle in radians
     * @param out - The quaternion after rotate
     */
    static rotationAxisAngle(axis, rad, out) {
        const normalAxis = Quaternion._tempVector3;
        Vector3.normalize(axis, normalAxis);
        rad *= 0.5;
        const s = Math.sin(rad);
        out._x = normalAxis._x * s;
        out._y = normalAxis._y * s;
        out._z = normalAxis._z * s;
        out._w = Math.cos(rad);
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).
     * @param x - The radian of rotation around X (pitch)
     * @param y - The radian of rotation around Y (yaw)
     * @param z - The radian of rotation around Z (roll)
     * @param out - The calculated quaternion
     */
    static rotationEuler(x, y, z, out) {
        Quaternion.rotationYawPitchRoll(y, x, z, out);
    }
    /**
     * Calculate a quaternion from the specified yaw, pitch and roll angles.
     * @param yaw - Yaw around the y axis in radians
     * @param pitch - Pitch around the x axis in radians
     * @param roll - Roll around the z axis in radians
     * @param out - The calculated quaternion
     */
    static rotationYawPitchRoll(yaw, pitch, roll, out) {
        const halfRoll = roll * 0.5;
        const halfPitch = pitch * 0.5;
        const halfYaw = yaw * 0.5;
        const sinRoll = Math.sin(halfRoll);
        const cosRoll = Math.cos(halfRoll);
        const sinPitch = Math.sin(halfPitch);
        const cosPitch = Math.cos(halfPitch);
        const sinYaw = Math.sin(halfYaw);
        const cosYaw = Math.cos(halfYaw);
        const cosYawPitch = cosYaw * cosPitch;
        const sinYawPitch = sinYaw * sinPitch;
        out._x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;
        out._y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;
        out._z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;
        out._w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion from the specified 3x3 matrix.
     * @param m - The specified 3x3 matrix
     * @param out - The calculated quaternion
     */
    static rotationMatrix3x3(m, out) {
        const me = m.elements;
        const m11 = me[0], m12 = me[1], m13 = me[2];
        const m21 = me[3], m22 = me[4], m23 = me[5];
        const m31 = me[6], m32 = me[7], m33 = me[8];
        const scale = m11 + m22 + m33;
        let sqrt, half;
        if (scale > 0) {
            sqrt = Math.sqrt(scale + 1.0);
            out._w = sqrt * 0.5;
            sqrt = 0.5 / sqrt;
            out._x = (m23 - m32) * sqrt;
            out._y = (m31 - m13) * sqrt;
            out._z = (m12 - m21) * sqrt;
        }
        else if (m11 >= m22 && m11 >= m33) {
            sqrt = Math.sqrt(1.0 + m11 - m22 - m33);
            half = 0.5 / sqrt;
            out._x = 0.5 * sqrt;
            out._y = (m12 + m21) * half;
            out._z = (m13 + m31) * half;
            out._w = (m23 - m32) * half;
        }
        else if (m22 > m33) {
            sqrt = Math.sqrt(1.0 + m22 - m11 - m33);
            half = 0.5 / sqrt;
            out._x = (m21 + m12) * half;
            out._y = 0.5 * sqrt;
            out._z = (m32 + m23) * half;
            out._w = (m31 - m13) * half;
        }
        else {
            sqrt = Math.sqrt(1.0 + m33 - m11 - m22);
            half = 0.5 / sqrt;
            out._x = (m13 + m31) * half;
            out._y = (m23 + m32) * half;
            out._z = 0.5 * sqrt;
            out._w = (m12 - m21) * half;
        }
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate the inverse of the specified quaternion.
     * @param a - The quaternion whose inverse is to be calculated
     * @param out - The inverse of the specified quaternion
     */
    static invert(a, out) {
        const { _x: x, _y: y, _z: z, _w: w } = a;
        const dot = x * x + y * y + z * z + w * w;
        if (dot > MathUtil.zeroTolerance) {
            const invDot = 1.0 / dot;
            out._x = -x * invDot;
            out._y = -y * invDot;
            out._z = -z * invDot;
            out._w = w * invDot;
            out._onValueChanged && out._onValueChanged();
        }
    }
    /**
     * Performs a linear blend between two quaternions.
     * @param start - The first quaternion
     * @param end - The second quaternion
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two quaternions
     */
    static lerp(start, end, t, out) {
        const inv = 1.0 - t;
        if (Quaternion.dot(start, end) >= 0) {
            out._x = start._x * inv + end._x * t;
            out._y = start._y * inv + end._y * t;
            out._z = start._z * inv + end._z * t;
            out._w = start._w * inv + end._w * t;
        }
        else {
            out._x = start._x * inv - end._x * t;
            out._y = start._y * inv - end._y * t;
            out._z = start._z * inv - end._z * t;
            out._w = start._w * inv - end._w * t;
        }
        out.normalize();
    }
    /**
     * Performs a spherical linear blend between two quaternions.
     * @param start - The first quaternion
     * @param end - The second quaternion
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of spherical linear blending between two quaternions
     */
    static slerp(start, end, t, out) {
        const ax = start._x;
        const ay = start._y;
        const az = start._z;
        const aw = start._w;
        let bx = end._x;
        let by = end._y;
        let bz = end._z;
        let bw = end._w;
        let scale0, scale1;
        // calc cosine
        let cosom = ax * bx + ay * by + az * bz + aw * bw;
        // adjust signs (if necessary)
        if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        }
        // calculate coefficients
        if (1.0 - cosom > MathUtil.zeroTolerance) {
            // standard case (slerp)
            const omega = Math.acos(cosom);
            const sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        }
        else {
            // "from" and "to" quaternions are very close
            //  ... so we can do a linear interpolation
            scale0 = 1.0 - t;
            scale1 = t;
        }
        // calculate final values
        out._x = scale0 * ax + scale1 * bx;
        out._y = scale0 * ay + scale1 * by;
        out._z = scale0 * az + scale1 * bz;
        out._w = scale0 * aw + scale1 * bw;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Scales the specified quaternion magnitude to unit length.
     * @param a - The specified quaternion
     * @param out - The normalized quaternion
     */
    static normalize(a, out) {
        const { _x, _y, _z, _w } = a;
        let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
        if (len > MathUtil.zeroTolerance) {
            len = 1 / len;
            out._x = _x * len;
            out._y = _y * len;
            out._z = _z * len;
            out._w = _w * len;
            out._onValueChanged && out._onValueChanged();
        }
    }
    /**
     * Calculate a quaternion rotate around X axis.
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotationX(rad, out) {
        rad *= 0.5;
        const s = Math.sin(rad);
        const c = Math.cos(rad);
        out._x = s;
        out._y = 0;
        out._z = 0;
        out._w = c;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion rotate around Y axis.
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotationY(rad, out) {
        rad *= 0.5;
        const s = Math.sin(rad);
        const c = Math.cos(rad);
        out._x = 0;
        out._y = s;
        out._z = 0;
        out._w = c;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion rotate around Z axis.
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotationZ(rad, out) {
        rad *= 0.5;
        const s = Math.sin(rad);
        const c = Math.cos(rad);
        out._x = 0;
        out._y = 0;
        out._z = s;
        out._w = c;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion that the specified quaternion rotate around X axis.
     * @param quaternion - The specified quaternion
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotateX(quaternion, rad, out) {
        const { _x, _y, _z, _w } = quaternion;
        rad *= 0.5;
        const bx = Math.sin(rad);
        const bw = Math.cos(rad);
        out._x = _x * bw + _w * bx;
        out._y = _y * bw + _z * bx;
        out._z = _z * bw - _y * bx;
        out._w = _w * bw - _x * bx;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion that the specified quaternion rotate around Y axis.
     * @param quaternion - The specified quaternion
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotateY(quaternion, rad, out) {
        const { _x, _y, _z, _w } = quaternion;
        rad *= 0.5;
        const by = Math.sin(rad);
        const bw = Math.cos(rad);
        out._x = _x * bw - _z * by;
        out._y = _y * bw + _w * by;
        out._z = _z * bw + _x * by;
        out._w = _w * bw - _y * by;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Calculate a quaternion that the specified quaternion rotate around Z axis.
     * @param quaternion - The specified quaternion
     * @param rad - The rotation angle in radians
     * @param out - The calculated quaternion
     */
    static rotateZ(quaternion, rad, out) {
        const { _x, _y, _z, _w } = quaternion;
        rad *= 0.5;
        const bz = Math.sin(rad);
        const bw = Math.cos(rad);
        out._x = _x * bw + _y * bz;
        out._y = _y * bw - _x * bz;
        out._z = _z * bw + _w * bz;
        out._w = _w * bw - _z * bz;
        out._onValueChanged && out._onValueChanged();
    }
    /**
     * Scale a quaternion by a given number.
     * @param a - The quaternion
     * @param s - The given number
     * @param out - The scaled quaternion
     */
    static scale(a, s, out) {
        out._x = a._x * s;
        out._y = a._y * s;
        out._z = a._z * s;
        out._w = a._w * s;
        out._onValueChanged && out._onValueChanged();
    }
    /** @internal */
    _x;
    /** @internal */
    _y;
    /** @internal */
    _z;
    /** @internal */
    _w;
    /** @internal */
    _onValueChanged = null;
    /**
     * The x component of the quaternion.
     */
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The y component of the quaternion.
     */
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * The z component of the quaternion.
     */
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Indicting whether this instance is normalized.
     */
    get normalized() {
        return (Math.abs(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w - 1) <
            MathUtil.zeroTolerance);
    }
    /**
     * The w component of the quaternion.
     */
    get w() {
        return this._w;
    }
    set w(value) {
        this._w = value;
        this._onValueChanged && this._onValueChanged();
    }
    /**
     * Constructor of Quaternion.
     * @param x - The x component of the quaternion, default 0
     * @param y - The y component of the quaternion, default 0
     * @param z - The z component of the quaternion, default 0
     * @param w - The w component of the quaternion, default 1
     */
    constructor(x = 0, y = 0, z = 0, w = 1) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
    }
    /**
     * Set the value of this quaternion, and return this quaternion.
     * @param x - The x component of the quaternion
     * @param y - The y component of the quaternion
     * @param z - The z component of the quaternion
     * @param w - The w component of the quaternion
     * @returns This quaternion
     */
    setValue(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Set the value of this quaternion by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This quaternion
     */
    setValueByArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Transforms this quaternion into its conjugated version.
     * @returns This quaternion
     */
    conjugate() {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Get the rotation axis and rotation angle of the quaternion (unit: radians).
     * @param out - The axis as an output parameter
     * @returns The rotation angle (unit: radians)
     */
    getAxisAngle(out) {
        const { _x, _y, _z } = this;
        const length = _x * _x + _y * _y + _z * _z;
        if (length < MathUtil.zeroTolerance) {
            out._x = 1;
            out._y = 0;
            out._z = 0;
            return 0;
        }
        else {
            const inv = 1.0 / length;
            out._x = this._x * inv;
            out._y = this._y * inv;
            out._z = this._z * inv;
            return Math.acos(this._w) * 2.0;
        }
    }
    /**
     * Identity this quaternion.
     * @returns This quaternion after identity
     */
    identity() {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
        this._onValueChanged && this._onValueChanged();
        return this;
    }
    /**
     * Calculate the length of this quaternion.
     * @returns The length of this quaternion
     */
    length() {
        const { _x, _y, _z, _w } = this;
        return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
    }
    /**
     * Calculates the squared length of this quaternion.
     * @returns The squared length of this quaternion
     */
    lengthSquared() {
        const { _x, _y, _z, _w } = this;
        return _x * _x + _y * _y + _z * _z + _w * _w;
    }
    /**
     * Converts this quaternion into a unit quaternion.
     * @returns This quaternion
     */
    normalize() {
        Quaternion.normalize(this, this);
        return this;
    }
    /**
     * Get the euler of this quaternion.
     * @param out - The euler (in radians) as an output parameter
     * @returns Euler x->pitch y->yaw z->roll
     */
    toEuler(out) {
        this._toYawPitchRoll(out);
        const t = out._x;
        out._x = out._y;
        out._y = t;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * Get the euler of this quaternion.
     * @param out - The euler (in radians) as an output parameter
     * @returns Euler x->yaw y->pitch z->roll
     */
    toYawPitchRoll(out) {
        this._toYawPitchRoll(out);
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * Clone the value of this quaternion to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        out[outOffset] = this._x;
        out[outOffset + 1] = this._y;
        out[outOffset + 2] = this._z;
        out[outOffset + 3] = this._w;
    }
    /**
     * Creates a clone of this quaternion.
     * @returns A clone of this quaternion
     */
    clone() {
        return new Quaternion(this._x, this._y, this._z, this._w);
    }
    /**
     * Clones this quaternion to the specified quaternion.
     * @param out - The specified quaternion
     * @returns The specified quaternion
     */
    cloneTo(out) {
        out._x = this._x;
        out._y = this._y;
        out._z = this._z;
        out._w = this._w;
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * Calculate this quaternion rotate around X axis.
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotateX(rad) {
        Quaternion.rotateX(this, rad, this);
        return this;
    }
    /**
     * Calculate this quaternion rotate around Y axis.
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotateY(rad) {
        Quaternion.rotateY(this, rad, this);
        return this;
    }
    /**
     * Calculate this quaternion rotate around Z axis.
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotateZ(rad) {
        Quaternion.rotateZ(this, rad, this);
        return this;
    }
    /**
     * Calculate this quaternion rotates around an arbitrary axis.
     * @param axis - The axis
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotationAxisAngle(axis, rad) {
        Quaternion.rotationAxisAngle(axis, rad, this);
        return this;
    }
    /**
     * Determines the product of this quaternion and the specified quaternion.
     * @param quat - The specified quaternion
     * @returns The product of the two quaternions
     */
    multiply(quat) {
        Quaternion.multiply(this, quat, this);
        return this;
    }
    /**
     * Invert this quaternion.
     * @returns This quaternion after invert
     */
    invert() {
        Quaternion.invert(this, this);
        return this;
    }
    /**
     * Determines the dot product of this quaternion and the specified quaternion.
     * @param quat - The specified quaternion
     * @returns The dot product of two quaternions
     */
    dot(quat) {
        return Quaternion.dot(this, quat);
    }
    /**
     * Performs a linear blend between this quaternion and the specified quaternion.
     * @param quat - The specified quaternion
     * @param t - The blend amount where 0 returns this and 1 quat
     * @returns - The result of linear blending between two quaternions
     */
    lerp(quat, t) {
        Quaternion.lerp(this, quat, t, this);
        return this;
    }
    /**
     * Calculate this quaternion rotation around an arbitrary axis.
     * @param axis - The axis
     * @param rad - The rotation angle in radians
     * @returns This quaternion
     */
    rotateAxisAngle(axis, rad) {
        Quaternion._tempQuat1.rotationAxisAngle(axis, rad);
        this.multiply(Quaternion._tempQuat1);
        return this;
    }
    _toYawPitchRoll(out) {
        const { _x, _y, _z, _w } = this;
        const xx = _x * _x;
        const yy = _y * _y;
        const zz = _z * _z;
        const xy = _x * _y;
        const zw = _z * _w;
        const zx = _z * _x;
        const yw = _y * _w;
        const yz = _y * _z;
        const xw = _x * _w;
        out._y = Math.asin(2.0 * (xw - yz));
        if (Math.cos(out.y) > MathUtil.zeroTolerance) {
            out._z = Math.atan2(2.0 * (xy + zw), 1.0 - 2.0 * (zz + xx));
            out._x = Math.atan2(2.0 * (zx + yw), 1.0 - 2.0 * (yy + xx));
        }
        else {
            out._z = Math.atan2(-2.0 * (xy - zw), 1.0 - 2.0 * (yy + zz));
            out._x = 0.0;
        }
        return out;
    }
}

/**
 * Represents a 4x4 mathematical matrix.
 */
class Matrix4 {
    static _tempVec30 = new Vector3();
    static _tempVec31 = new Vector3();
    static _tempVec32 = new Vector3();
    static _tempMat30 = new Matrix3();
    /** @internal Identity matrix. */
    static _identity = new Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
    /**
     * Determines the product of two matrices.
     * @param left - The first matrix to multiply
     * @param right - The second matrix to multiply
     * @param out - The product of the two matrices
     */
    static multiply(left, right, out) {
        const le = left.elements;
        const re = right.elements;
        const oe = out.elements;
        const l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3];
        const l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7];
        const l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11];
        const l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];
        const r11 = re[0], r12 = re[1], r13 = re[2], r14 = re[3];
        const r21 = re[4], r22 = re[5], r23 = re[6], r24 = re[7];
        const r31 = re[8], r32 = re[9], r33 = re[10], r34 = re[11];
        const r41 = re[12], r42 = re[13], r43 = re[14], r44 = re[15];
        oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;
        oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;
        oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;
        oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;
        oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;
        oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;
        oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;
        oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;
        oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;
        oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;
        oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;
        oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;
        oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;
        oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;
        oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;
        oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;
    }
    /**
     * Determines whether the specified matrices are equals.
     * @param left - The first matrix to compare
     * @param right - The second matrix to compare
     * @returns True if the specified matrices are equals, false otherwise
     */
    static equals(left, right) {
        const le = left.elements;
        const re = right.elements;
        return (MathUtil.equals(le[0], re[0]) &&
            MathUtil.equals(le[1], re[1]) &&
            MathUtil.equals(le[2], re[2]) &&
            MathUtil.equals(le[3], re[3]) &&
            MathUtil.equals(le[4], re[4]) &&
            MathUtil.equals(le[5], re[5]) &&
            MathUtil.equals(le[6], re[6]) &&
            MathUtil.equals(le[7], re[7]) &&
            MathUtil.equals(le[8], re[8]) &&
            MathUtil.equals(le[9], re[9]) &&
            MathUtil.equals(le[10], re[10]) &&
            MathUtil.equals(le[11], re[11]) &&
            MathUtil.equals(le[12], re[12]) &&
            MathUtil.equals(le[13], re[13]) &&
            MathUtil.equals(le[14], re[14]) &&
            MathUtil.equals(le[15], re[15]));
    }
    /**
     * Performs a linear interpolation between two matrices.
     * @param start - The first matrix
     * @param end - The second matrix
     * @param t - The blend amount where 0 returns start and 1 end
     * @param out - The result of linear blending between two matrices
     */
    static lerp(start, end, t, out) {
        const se = start.elements;
        const ee = end.elements;
        const oe = out.elements;
        const inv = 1.0 - t;
        oe[0] = se[0] * inv + ee[0] * t;
        oe[1] = se[1] * inv + ee[1] * t;
        oe[2] = se[2] * inv + ee[2] * t;
        oe[3] = se[3] * inv + ee[3] * t;
        oe[4] = se[4] * inv + ee[4] * t;
        oe[5] = se[5] * inv + ee[5] * t;
        oe[6] = se[6] * inv + ee[6] * t;
        oe[7] = se[7] * inv + ee[7] * t;
        oe[8] = se[8] * inv + ee[8] * t;
        oe[9] = se[9] * inv + ee[9] * t;
        oe[10] = se[10] * inv + ee[10] * t;
        oe[11] = se[11] * inv + ee[11] * t;
        oe[12] = se[12] * inv + ee[12] * t;
        oe[13] = se[13] * inv + ee[13] * t;
        oe[14] = se[14] * inv + ee[14] * t;
        oe[15] = se[15] * inv + ee[15] * t;
    }
    /**
     * Calculate a rotation matrix from a quaternion.
     * @param quaternion - The quaternion used to calculate the matrix
     * @param out - The calculated rotation matrix
     */
    static rotationQuaternion(quaternion, out) {
        const oe = out.elements;
        const { _x: x, _y: y, _z: z, _w: w } = quaternion;
        let x2 = x + x;
        let y2 = y + y;
        let z2 = z + z;
        let xx = x * x2;
        let yx = y * x2;
        let yy = y * y2;
        let zx = z * x2;
        let zy = z * y2;
        let zz = z * z2;
        let wx = w * x2;
        let wy = w * y2;
        let wz = w * z2;
        oe[0] = 1 - yy - zz;
        oe[1] = yx + wz;
        oe[2] = zx - wy;
        oe[3] = 0;
        oe[4] = yx - wz;
        oe[5] = 1 - xx - zz;
        oe[6] = zy + wx;
        oe[7] = 0;
        oe[8] = zx + wy;
        oe[9] = zy - wx;
        oe[10] = 1 - xx - yy;
        oe[11] = 0;
        oe[12] = 0;
        oe[13] = 0;
        oe[14] = 0;
        oe[15] = 1;
    }
    /**
     * Calculate a matrix rotates around an arbitrary axis.
     * @param axis - The axis
     * @param r - The rotation angle in radians
     * @param out - The matrix after rotate
     */
    static rotationAxisAngle(axis, r, out) {
        const oe = out.elements;
        let { _x: x, _y: y, _z: z } = axis;
        let len = Math.sqrt(x * x + y * y + z * z);
        let s, c, t;
        if (Math.abs(len) < MathUtil.zeroTolerance) {
            return;
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(r);
        c = Math.cos(r);
        t = 1 - c;
        // Perform rotation-specific matrix multiplication
        oe[0] = x * x * t + c;
        oe[1] = y * x * t + z * s;
        oe[2] = z * x * t - y * s;
        oe[3] = 0;
        oe[4] = x * y * t - z * s;
        oe[5] = y * y * t + c;
        oe[6] = z * y * t + x * s;
        oe[7] = 0;
        oe[8] = x * z * t + y * s;
        oe[9] = y * z * t - x * s;
        oe[10] = z * z * t + c;
        oe[11] = 0;
        oe[12] = 0;
        oe[13] = 0;
        oe[14] = 0;
        oe[15] = 1;
    }
    /**
     * Calculate a matrix from a quaternion and a translation.
     * @param quaternion - The quaternion used to calculate the matrix
     * @param translation - The translation used to calculate the matrix
     * @param out - The calculated matrix
     */
    static rotationTranslation(quaternion, translation, out) {
        Matrix4.rotationQuaternion(quaternion, out);
        const oe = out.elements;
        oe[12] = translation._x;
        oe[13] = translation._y;
        oe[14] = translation._z;
    }
    /**
     * Calculate an affine matrix.
     * @param scale - The scale used to calculate matrix
     * @param rotation - The rotation used to calculate matrix
     * @param translation - The translation used to calculate matrix
     * @param out - The calculated matrix
     */
    static affineTransformation(scale, rotation, translation, out) {
        const oe = out.elements;
        const { _x: x, _y: y, _z: z, _w: w } = rotation;
        let x2 = x + x;
        let y2 = y + y;
        let z2 = z + z;
        let xx = x * x2;
        let xy = x * y2;
        let xz = x * z2;
        let yy = y * y2;
        let yz = y * z2;
        let zz = z * z2;
        let wx = w * x2;
        let wy = w * y2;
        let wz = w * z2;
        let sx = scale._x;
        let sy = scale._y;
        let sz = scale._z;
        oe[0] = (1 - (yy + zz)) * sx;
        oe[1] = (xy + wz) * sx;
        oe[2] = (xz - wy) * sx;
        oe[3] = 0;
        oe[4] = (xy - wz) * sy;
        oe[5] = (1 - (xx + zz)) * sy;
        oe[6] = (yz + wx) * sy;
        oe[7] = 0;
        oe[8] = (xz + wy) * sz;
        oe[9] = (yz - wx) * sz;
        oe[10] = (1 - (xx + yy)) * sz;
        oe[11] = 0;
        oe[12] = translation._x;
        oe[13] = translation._y;
        oe[14] = translation._z;
        oe[15] = 1;
    }
    /**
     * Calculate a matrix from scale vector.
     * @param s - The scale vector
     * @param out - The calculated matrix
     */
    static scaling(s, out) {
        const oe = out.elements;
        oe[0] = s._x;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 0;
        oe[5] = s._y;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 0;
        oe[9] = 0;
        oe[10] = s._z;
        oe[11] = 0;
        oe[12] = 0;
        oe[13] = 0;
        oe[14] = 0;
        oe[15] = 1;
    }
    /**
     * Calculate a matrix from translation vector.
     * @param translation - The translation vector
     * @param out - The calculated matrix
     */
    static translation(translation, out) {
        const oe = out.elements;
        oe[0] = 1;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 0;
        oe[5] = 1;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 0;
        oe[9] = 0;
        oe[10] = 1;
        oe[11] = 0;
        oe[12] = translation._x;
        oe[13] = translation._y;
        oe[14] = translation._z;
        oe[15] = 1;
    }
    /**
     * Calculate the inverse of the specified matrix.
     * @param a - The matrix whose inverse is to be calculated
     * @param out - The inverse of the specified matrix
     */
    static invert(a, out) {
        const ae = a.elements;
        const oe = out.elements;
        const a11 = ae[0], a12 = ae[1], a13 = ae[2], a14 = ae[3];
        const a21 = ae[4], a22 = ae[5], a23 = ae[6], a24 = ae[7];
        const a31 = ae[8], a32 = ae[9], a33 = ae[10], a34 = ae[11];
        const a41 = ae[12], a42 = ae[13], a43 = ae[14], a44 = ae[15];
        const b00 = a11 * a22 - a12 * a21;
        const b01 = a11 * a23 - a13 * a21;
        const b02 = a11 * a24 - a14 * a21;
        const b03 = a12 * a23 - a13 * a22;
        const b04 = a12 * a24 - a14 * a22;
        const b05 = a13 * a24 - a14 * a23;
        const b06 = a31 * a42 - a32 * a41;
        const b07 = a31 * a43 - a33 * a41;
        const b08 = a31 * a44 - a34 * a41;
        const b09 = a32 * a43 - a33 * a42;
        const b10 = a32 * a44 - a34 * a42;
        const b11 = a33 * a44 - a34 * a43;
        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;
        oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;
        oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;
        oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;
        oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;
        oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;
        oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;
        oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;
        oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;
        oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;
        oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;
        oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;
        oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;
        oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;
        oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;
        oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;
    }
    /**
     * Calculate a right-handed look-at matrix.
     * @param eye - The position of the viewer's eye
     * @param target - The camera look-at target
     * @param up - The camera's up vector
     * @param out - The calculated look-at matrix
     */
    static lookAt(eye, target, up, out) {
        const oe = out.elements;
        const xAxis = Matrix4._tempVec30;
        const yAxis = Matrix4._tempVec31;
        const zAxis = Matrix4._tempVec32;
        Vector3.subtract(eye, target, zAxis);
        zAxis.normalize();
        Vector3.cross(up, zAxis, xAxis);
        xAxis.normalize();
        Vector3.cross(zAxis, xAxis, yAxis);
        oe[0] = xAxis._x;
        oe[1] = yAxis._x;
        oe[2] = zAxis._x;
        oe[3] = 0;
        oe[4] = xAxis._y;
        oe[5] = yAxis._y;
        oe[6] = zAxis._y;
        oe[7] = 0;
        oe[8] = xAxis._z;
        oe[9] = yAxis._z;
        oe[10] = zAxis._z;
        oe[11] = 0;
        oe[12] = -Vector3.dot(xAxis, eye);
        oe[13] = -Vector3.dot(yAxis, eye);
        oe[14] = -Vector3.dot(zAxis, eye);
        oe[15] = 1;
    }
    /**
     * Calculate an orthographic projection matrix.
     * @param left - The left edge of the viewing
     * @param right - The right edge of the viewing
     * @param bottom - The bottom edge of the viewing
     * @param top - The top edge of the viewing
     * @param near - The depth of the near plane
     * @param far - The depth of the far plane
     * @param out - The calculated orthographic projection matrix
     */
    static ortho(left, right, bottom, top, near, far, out) {
        const oe = out.elements;
        const lr = 1 / (left - right);
        const bt = 1 / (bottom - top);
        const nf = 1 / (near - far);
        oe[0] = -2 * lr;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 0;
        oe[5] = -2 * bt;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 0;
        oe[9] = 0;
        oe[10] = 2 * nf;
        oe[11] = 0;
        oe[12] = (left + right) * lr;
        oe[13] = (top + bottom) * bt;
        oe[14] = (far + near) * nf;
        oe[15] = 1;
    }
    /**
     * Calculate a perspective projection matrix.
     * @param fovY - Field of view in the y direction, in radians
     * @param aspect - Aspect ratio, defined as view space width divided by height
     * @param near - The depth of the near plane
     * @param far - The depth of the far plane
     * @param out - The calculated perspective projection matrix
     */
    static perspective(fovY, aspect, near, far, out) {
        const oe = out.elements;
        const f = 1.0 / Math.tan(fovY / 2);
        const nf = 1 / (near - far);
        oe[0] = f / aspect;
        oe[1] = 0;
        oe[2] = 0;
        oe[3] = 0;
        oe[4] = 0;
        oe[5] = f;
        oe[6] = 0;
        oe[7] = 0;
        oe[8] = 0;
        oe[9] = 0;
        oe[10] = (far + near) * nf;
        oe[11] = -1;
        oe[12] = 0;
        oe[13] = 0;
        oe[14] = 2 * far * near * nf;
        oe[15] = 0;
    }
    /**
     * The specified matrix rotates around an arbitrary axis.
     * @param m - The specified matrix
     * @param axis - The axis
     * @param r - The rotation angle in radians
     * @param out - The rotated matrix
     */
    static rotateAxisAngle(m, axis, r, out) {
        let { _x: x, _y: y, _z: z } = axis;
        let len = Math.sqrt(x * x + y * y + z * z);
        if (Math.abs(len) < MathUtil.zeroTolerance) {
            return;
        }
        const me = m.elements;
        const oe = out.elements;
        let s, c, t;
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(r);
        c = Math.cos(r);
        t = 1 - c;
        let a11 = me[0], a12 = me[1], a13 = me[2], a14 = me[3];
        let a21 = me[4], a22 = me[5], a23 = me[6], a24 = me[7];
        let a31 = me[8], a32 = me[9], a33 = me[10], a34 = me[11];
        // Construct the elements of the rotation matrix
        let b11 = x * x * t + c;
        let b12 = y * x * t + z * s;
        let b13 = z * x * t - y * s;
        let b21 = x * y * t - z * s;
        let b22 = y * y * t + c;
        let b23 = z * y * t + x * s;
        let b31 = x * z * t + y * s;
        let b32 = y * z * t - x * s;
        let b33 = z * z * t + c;
        // Perform rotation-specific matrix multiplication
        oe[0] = a11 * b11 + a21 * b12 + a31 * b13;
        oe[1] = a12 * b11 + a22 * b12 + a32 * b13;
        oe[2] = a13 * b11 + a23 * b12 + a33 * b13;
        oe[3] = a14 * b11 + a24 * b12 + a34 * b13;
        oe[4] = a11 * b21 + a21 * b22 + a31 * b23;
        oe[5] = a12 * b21 + a22 * b22 + a32 * b23;
        oe[6] = a13 * b21 + a23 * b22 + a33 * b23;
        oe[7] = a14 * b21 + a24 * b22 + a34 * b23;
        oe[8] = a11 * b31 + a21 * b32 + a31 * b33;
        oe[9] = a12 * b31 + a22 * b32 + a32 * b33;
        oe[10] = a13 * b31 + a23 * b32 + a33 * b33;
        oe[11] = a14 * b31 + a24 * b32 + a34 * b33;
        if (m !== out) {
            // If the source and destination differ, copy the unchanged last row
            oe[12] = me[12];
            oe[13] = me[13];
            oe[14] = me[14];
            oe[15] = me[15];
        }
    }
    /**
     * Scale a matrix by a given vector.
     * @param m - The matrix
     * @param s - The given vector
     * @param out - The scaled matrix
     */
    static scale(m, s, out) {
        const me = m.elements;
        const oe = out.elements;
        const { _x: x, _y: y, _z: z } = s;
        oe[0] = me[0] * x;
        oe[1] = me[1] * x;
        oe[2] = me[2] * x;
        oe[3] = me[3] * x;
        oe[4] = me[4] * y;
        oe[5] = me[5] * y;
        oe[6] = me[6] * y;
        oe[7] = me[7] * y;
        oe[8] = me[8] * z;
        oe[9] = me[9] * z;
        oe[10] = me[10] * z;
        oe[11] = me[11] * z;
        oe[12] = me[12];
        oe[13] = me[13];
        oe[14] = me[14];
        oe[15] = me[15];
    }
    /**
     * Translate a matrix by a given vector.
     * @param m - The matrix
     * @param v - The given vector
     * @param out - The translated matrix
     */
    static translate(m, v, out) {
        const me = m.elements;
        const oe = out.elements;
        const { _x: x, _y: y, _z: z } = v;
        if (m === out) {
            oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];
            oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];
            oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];
            oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];
        }
        else {
            const a11 = me[0], a12 = me[1], a13 = me[2], a14 = me[3];
            const a21 = me[4], a22 = me[5], a23 = me[6], a24 = me[7];
            const a31 = me[8], a32 = me[9], a33 = me[10], a34 = me[11];
            (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);
            (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);
            (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);
            oe[12] = a11 * x + a21 * y + a31 * z + me[12];
            oe[13] = a12 * x + a22 * y + a32 * z + me[13];
            oe[14] = a13 * x + a23 * y + a33 * z + me[14];
            oe[15] = a14 * x + a24 * y + a34 * z + me[15];
        }
    }
    /**
     * Calculate the transpose of the specified matrix.
     * @param a - The specified matrix
     * @param out - The transpose of the specified matrix
     */
    static transpose(a, out) {
        const ae = a.elements;
        const oe = out.elements;
        if (out === a) {
            const a12 = ae[1];
            const a13 = ae[2];
            const a14 = ae[3];
            const a23 = ae[6];
            const a24 = ae[7];
            const a34 = ae[11];
            oe[1] = ae[4];
            oe[2] = ae[8];
            oe[3] = ae[12];
            oe[4] = a12;
            oe[6] = ae[9];
            oe[7] = ae[13];
            oe[8] = a13;
            oe[9] = a23;
            oe[11] = ae[14];
            oe[12] = a14;
            oe[13] = a24;
            oe[14] = a34;
        }
        else {
            oe[0] = ae[0];
            oe[1] = ae[4];
            oe[2] = ae[8];
            oe[3] = ae[12];
            oe[4] = ae[1];
            oe[5] = ae[5];
            oe[6] = ae[9];
            oe[7] = ae[13];
            oe[8] = ae[2];
            oe[9] = ae[6];
            oe[10] = ae[10];
            oe[11] = ae[14];
            oe[12] = ae[3];
            oe[13] = ae[7];
            oe[14] = ae[11];
            oe[15] = ae[15];
        }
    }
    /**
     * An array containing the elements of the matrix (column matrix).
     * @remarks
     * elements[0] first column and first row value m11
     * elements[1] first column and second row value m12
     * elements[2] first column and third row value m13
     * elements[3] first column and fourth row value m14
     * elements[4] second column and first row value m21
     * and so on
     */
    elements = new Float32Array(16);
    /**
     * Constructor of 4x4 Matrix4.
     * @param m11 - default 1, column 1, row 1
     * @param m12 - default 0, column 1, row 2
     * @param m13 - default 0, column 1, row 3
     * @param m14 - default 0, column 1, row 4
     * @param m21 - default 0, column 2, row 1
     * @param m22 - default 1, column 2, row 2
     * @param m23 - default 0, column 2, row 3
     * @param m24 - default 0, column 2, row 4
     * @param m31 - default 0, column 3, row 1
     * @param m32 - default 0, column 3, row 2
     * @param m33 - default 1, column 3, row 3
     * @param m34 - default 0, column 3, row 4
     * @param m41 - default 0, column 4, row 1
     * @param m42 - default 0, column 4, row 2
     * @param m43 - default 0, column 4, row 3
     * @param m44 - default 1, column 4, row 4
     */
    constructor(m11 = 1, m12 = 0, m13 = 0, m14 = 0, m21 = 0, m22 = 1, m23 = 0, m24 = 0, m31 = 0, m32 = 0, m33 = 1, m34 = 0, m41 = 0, m42 = 0, m43 = 0, m44 = 1) {
        const e = this.elements;
        e[0] = m11;
        e[1] = m12;
        e[2] = m13;
        e[3] = m14;
        e[4] = m21;
        e[5] = m22;
        e[6] = m23;
        e[7] = m24;
        e[8] = m31;
        e[9] = m32;
        e[10] = m33;
        e[11] = m34;
        e[12] = m41;
        e[13] = m42;
        e[14] = m43;
        e[15] = m44;
    }
    /**
     * Set the value of this matrix, and return this matrix.
     * @param m11 - column 1, row 1
     * @param m12 - column 1, row 2
     * @param m13 - column 1, row 3
     * @param m14 - column 1, row 4
     * @param m21 - column 2, row 1
     * @param m22 - column 2, row 2
     * @param m23 - column 2, row 3
     * @param m24 - column 2, row 4
     * @param m31 - column 3, row 1
     * @param m32 - column 3, row 2
     * @param m33 - column 3, row 3
     * @param m34 - column 3, row 4
     * @param m41 - column 4, row 1
     * @param m42 - column 4, row 2
     * @param m43 - column 4, row 3
     * @param m44 - column 4, row 4
     * @returns This matrix
     */
    setValue(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
        const e = this.elements;
        e[0] = m11;
        e[1] = m12;
        e[2] = m13;
        e[3] = m14;
        e[4] = m21;
        e[5] = m22;
        e[6] = m23;
        e[7] = m24;
        e[8] = m31;
        e[9] = m32;
        e[10] = m33;
        e[11] = m34;
        e[12] = m41;
        e[13] = m42;
        e[14] = m43;
        e[15] = m44;
        return this;
    }
    /**
     * Set the value of this matrix by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     * @returns This matrix
     */
    setValueByArray(array, offset = 0) {
        const srce = this.elements;
        for (let i = 0; i < 16; i++) {
            srce[i] = array[i + offset];
        }
        return this;
    }
    /**
     * Clone the value of this matrix to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out, outOffset = 0) {
        const e = this.elements;
        out[outOffset] = e[0];
        out[outOffset + 1] = e[1];
        out[outOffset + 2] = e[2];
        out[outOffset + 3] = e[3];
        out[outOffset + 4] = e[4];
        out[outOffset + 5] = e[5];
        out[outOffset + 6] = e[6];
        out[outOffset + 7] = e[7];
        out[outOffset + 8] = e[8];
        out[outOffset + 9] = e[9];
        out[outOffset + 10] = e[10];
        out[outOffset + 11] = e[11];
        out[outOffset + 12] = e[12];
        out[outOffset + 13] = e[13];
        out[outOffset + 14] = e[14];
        out[outOffset + 15] = e[15];
    }
    /**
     * Creates a clone of this matrix.
     * @returns A clone of this matrix
     */
    clone() {
        const e = this.elements;
        let ret = new Matrix4(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]);
        return ret;
    }
    /**
     * Clones this matrix to the specified matrix.
     * @param out - The specified matrix
     * @returns The specified matrix
     */
    cloneTo(out) {
        const e = this.elements;
        const oe = out.elements;
        oe[0] = e[0];
        oe[1] = e[1];
        oe[2] = e[2];
        oe[3] = e[3];
        oe[4] = e[4];
        oe[5] = e[5];
        oe[6] = e[6];
        oe[7] = e[7];
        oe[8] = e[8];
        oe[9] = e[9];
        oe[10] = e[10];
        oe[11] = e[11];
        oe[12] = e[12];
        oe[13] = e[13];
        oe[14] = e[14];
        oe[15] = e[15];
        return out;
    }
    /**
     * Determines the product of this matrix and the specified matrix.
     * @param right - The specified matrix
     * @returns This matrix that store the product of the two matrices
     */
    multiply(right) {
        Matrix4.multiply(this, right, this);
        return this;
    }
    /**
     * Calculate a determinant of this matrix.
     * @returns The determinant of this matrix
     */
    determinant() {
        const e = this.elements;
        const a11 = e[0], a12 = e[1], a13 = e[2], a14 = e[3];
        const a21 = e[4], a22 = e[5], a23 = e[6], a24 = e[7];
        const a31 = e[8], a32 = e[9], a33 = e[10], a34 = e[11];
        const a41 = e[12], a42 = e[13], a43 = e[14], a44 = e[15];
        const b00 = a11 * a22 - a12 * a21;
        const b01 = a11 * a23 - a13 * a21;
        const b02 = a11 * a24 - a14 * a21;
        const b03 = a12 * a23 - a13 * a22;
        const b04 = a12 * a24 - a14 * a22;
        const b05 = a13 * a24 - a14 * a23;
        const b06 = a31 * a42 - a32 * a41;
        const b07 = a31 * a43 - a33 * a41;
        const b08 = a31 * a44 - a34 * a41;
        const b09 = a32 * a43 - a33 * a42;
        const b10 = a32 * a44 - a34 * a42;
        const b11 = a33 * a44 - a34 * a43;
        // Calculate the determinant
        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    }
    /**
     * Decompose this matrix to translation, rotation and scale elements.
     * @param translation - Translation vector as an output parameter
     * @param rotation - Rotation quaternion as an output parameter
     * @param scale - Scale vector as an output parameter
     * @returns True if this matrix can be decomposed, false otherwise
     */
    decompose(translation, rotation, scale) {
        const rm = Matrix4._tempMat30;
        const e = this.elements;
        const rme = rm.elements;
        const m11 = e[0];
        const m12 = e[1];
        const m13 = e[2];
        const m14 = e[3];
        const m21 = e[4];
        const m22 = e[5];
        const m23 = e[6];
        const m24 = e[7];
        const m31 = e[8];
        const m32 = e[9];
        const m33 = e[10];
        const m34 = e[11];
        translation.setValue(e[12], e[13], e[14]);
        const xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;
        const ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;
        const zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;
        const sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
        const sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
        const sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
        scale.setValue(sx, sy, sz);
        if (Math.abs(sx) < MathUtil.zeroTolerance ||
            Math.abs(sy) < MathUtil.zeroTolerance ||
            Math.abs(sz) < MathUtil.zeroTolerance) {
            rotation.identity();
            return false;
        }
        else {
            const invSX = 1 / sx;
            const invSY = 1 / sy;
            const invSZ = 1 / sz;
            rme[0] = m11 * invSX;
            rme[1] = m12 * invSX;
            rme[2] = m13 * invSX;
            rme[3] = m21 * invSY;
            rme[4] = m22 * invSY;
            rme[5] = m23 * invSY;
            rme[6] = m31 * invSZ;
            rme[7] = m32 * invSZ;
            rme[8] = m33 * invSZ;
            Quaternion.rotationMatrix3x3(rm, rotation);
            return true;
        }
    }
    /**
     * Get rotation from this matrix.
     * @param out - Rotation quaternion as an output parameter
     * @returns The out
     */
    getRotation(out) {
        const e = this.elements;
        let trace = e[0] + e[5] + e[10];
        if (trace > MathUtil.zeroTolerance) {
            let s = Math.sqrt(trace + 1.0) * 2;
            out._w = 0.25 * s;
            out._x = (e[6] - e[9]) / s;
            out._y = (e[8] - e[2]) / s;
            out._z = (e[1] - e[4]) / s;
        }
        else if (e[0] > e[5] && e[0] > e[10]) {
            let s = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;
            out._w = (e[6] - e[9]) / s;
            out._x = 0.25 * s;
            out._y = (e[1] + e[4]) / s;
            out._z = (e[8] + e[2]) / s;
        }
        else if (e[5] > e[10]) {
            let s = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;
            out._w = (e[8] - e[2]) / s;
            out._x = (e[1] + e[4]) / s;
            out._y = 0.25 * s;
            out._z = (e[6] + e[9]) / s;
        }
        else {
            let s = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;
            out._w = (e[1] - e[4]) / s;
            out._x = (e[8] + e[2]) / s;
            out._y = (e[6] + e[9]) / s;
            out._z = 0.25 * s;
        }
        out._onValueChanged && out._onValueChanged();
        return out;
    }
    /**
     * Get scale from this matrix.
     * @param out - Scale vector as an output parameter
     * @returns The out
     */
    getScaling(out) {
        //getScale()
        const e = this.elements;
        const m11 = e[0], m12 = e[1], m13 = e[2];
        const m21 = e[4], m22 = e[5], m23 = e[6];
        const m31 = e[8], m32 = e[9], m33 = e[10];
        out.setValue(Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13), Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23), Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33));
        return out;
    }
    /**
     * Get translation from this matrix.
     * @param out - Translation vector as an output parameter
     * @returns The out
     */
    getTranslation(out) {
        const e = this.elements;
        out.setValue(e[12], e[13], e[14]);
        return out;
    }
    /**
     * Identity this matrix.
     * @returns This matrix after identity
     */
    identity() {
        const e = this.elements;
        e[0] = 1;
        e[1] = 0;
        e[2] = 0;
        e[3] = 0;
        e[4] = 0;
        e[5] = 1;
        e[6] = 0;
        e[7] = 0;
        e[8] = 0;
        e[9] = 0;
        e[10] = 1;
        e[11] = 0;
        e[12] = 0;
        e[13] = 0;
        e[14] = 0;
        e[15] = 1;
        return this;
    }
    /**
     * Invert the matrix.
     * @returns The matrix after invert
     */
    invert() {
        Matrix4.invert(this, this);
        return this;
    }
    /**
     * This matrix rotates around an arbitrary axis.
     * @param axis - The axis
     * @param r - The rotation angle in radians
     * @returns This matrix after rotate
     */
    rotateAxisAngle(axis, r) {
        Matrix4.rotateAxisAngle(this, axis, r, this);
        return this;
    }
    /**
     * Scale this matrix by a given vector.
     * @param s - The given vector
     * @returns This matrix after scale
     */
    scale(s) {
        Matrix4.scale(this, s, this);
        return this;
    }
    /**
     * Translate this matrix by a given vector.
     * @param v - The given vector
     * @returns This matrix after translate
     */
    translate(v) {
        Matrix4.translate(this, v, this);
        return this;
    }
    /**
     * Calculate the transpose of this matrix.
     * @returns This matrix after transpose
     */
    transpose() {
        Matrix4.transpose(this, this);
        return this;
    }
}

/**
 * Describes a color in the from of RGBA (in order: R, G, B, A).
 */
class Color {
    /**
     * Modify a value from the gamma space to the linear space.
     * @param value - The value in gamma space
     * @returns The value in linear space
     */
    static gammaToLinearSpace(value) {
        // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt
        // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt
        if (value <= 0.0)
            return 0.0;
        else if (value <= 0.04045)
            return value / 12.92;
        else if (value < 1.0)
            return Math.pow((value + 0.055) / 1.055, 2.4);
        else
            return Math.pow(value, 2.4);
    }
    /**
     * Modify a value from the linear space to the gamma space.
     * @param value - The value in linear space
     * @returns The value in gamma space
     */
    static linearToGammaSpace(value) {
        // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt
        // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt
        if (value <= 0.0)
            return 0.0;
        else if (value < 0.0031308)
            return 12.92 * value;
        else if (value < 1.0)
            return 1.055 * Math.pow(value, 0.41666) - 0.055;
        else
            return Math.pow(value, 0.41666);
    }
    /**
     * Determines whether the specified colors are equals.
     * @param left - The first color to compare
     * @param right - The second color to compare
     * @returns True if the specified colors are equals, false otherwise
     */
    static equals(left, right) {
        return (MathUtil.equals(left.r, right.r) &&
            MathUtil.equals(left.g, right.g) &&
            MathUtil.equals(left.b, right.b) &&
            MathUtil.equals(left.a, right.a));
    }
    /**
     * Determines the sum of two colors.
     * @param left - The first color to add
     * @param right - The second color to add
     * @param out - The sum of two colors
     * @returns The added color
     */
    static add(left, right, out) {
        out.r = left.r + right.r;
        out.g = left.g + right.g;
        out.b = left.b + right.b;
        out.a = left.a + right.a;
        return out;
    }
    /**
     * Scale a color by the given value.
     * @param left - The color to scale
     * @param s - The amount by which to scale the color
     * @param out - The scaled color
     * @returns The scaled color
     */
    static scale(left, s, out) {
        out.r = left.r * s;
        out.g = left.g * s;
        out.b = left.b * s;
        out.a = left.a * s;
        return out;
    }
    /** The red component of the color, 0~1. */
    r;
    /** The green component of the color, 0~1. */
    g;
    /** The blue component of the color, 0~1. */
    b;
    /** The alpha component of the color, 0~1. */
    a;
    /**
     * Constructor of Color.
     * @param r - The red component of the color
     * @param g - The green component of the color
     * @param b - The blue component of the color
     * @param a - The alpha component of the color
     */
    constructor(r = 1, g = 1, b = 1, a = 1) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    /**
     * Set the value of this color.
     * @param r - The red component of the color
     * @param g - The green component of the color
     * @param b - The blue component of the color
     * @param a - The alpha component of the color
     * @returns This color.
     */
    setValue(r, g, b, a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
        return this;
    }
    /**
     * Determines the sum of this color and the specified color.
     * @param color - The specified color
     * @returns The added color
     */
    add(color) {
        this.r += color.r;
        this.g += color.g;
        this.b += color.b;
        this.a += color.a;
        return this;
    }
    /**
     * Scale this color by the given value.
     * @param s - The amount by which to scale the color
     * @returns The scaled color
     */
    scale(s) {
        this.r *= s;
        this.g *= s;
        this.b *= s;
        this.a *= s;
        return this;
    }
    /**
     * Creates a clone of this color.
     * @returns A clone of this color
     */
    clone() {
        const ret = new Color(this.r, this.g, this.b, this.a);
        return ret;
    }
    /**
     * Clones this color to the specified color.
     * @param out - The specified color
     * @returns The specified color
     */
    cloneTo(out) {
        out.r = this.r;
        out.g = this.g;
        out.b = this.b;
        out.a = this.a;
        return out;
    }
    /**
     * Modify components (r, g, b) of this color from gamma space to linear space.
     * @param out - The color in linear space
     * @returns The color in linear space
     */
    toLinear(out) {
        out.r = Color.gammaToLinearSpace(this.r);
        out.g = Color.gammaToLinearSpace(this.g);
        out.b = Color.gammaToLinearSpace(this.b);
        return out;
    }
    /**
     * Modify components (r, g, b) of this color from linear space to gamma space.
     * @param out - The color in gamma space
     * @returns The color in gamma space
     */
    toGamma(out) {
        out.r = Color.linearToGammaSpace(this.r);
        out.g = Color.linearToGammaSpace(this.g);
        out.b = Color.linearToGammaSpace(this.b);
        return out;
    }
}

/**
 * Enum type for background mode.
 */
var BackgroundMode;
(function (BackgroundMode) {
    /* Solid color. */
    BackgroundMode[BackgroundMode["SolidColor"] = 0] = "SolidColor";
    /* Sky. */
    BackgroundMode[BackgroundMode["Sky"] = 1] = "Sky";
    /** Texture */
    BackgroundMode[BackgroundMode["Texture"] = 2] = "Texture";
})(BackgroundMode || (BackgroundMode = {}));

/**
 * Color Space.
 */
var ColorSpace;
(function (ColorSpace) {
    /** Linear color space. */
    ColorSpace[ColorSpace["Linear"] = 0] = "Linear";
    /** Gamma color space. */
    ColorSpace[ColorSpace["Gamma"] = 1] = "Gamma";
})(ColorSpace || (ColorSpace = {}));

/**
 * The encapsulation of each uniform variable, including its cache value, data upload method, and data storage address.
 */
class ShaderUniform {
    name;
    propertyId;
    location;
    applyFunc;
    cacheValue;
    textureIndex;
    textureDefault;
    _gl;
    _colorSpace;
    constructor(gl) {
        this._gl = gl;
    }
    upload1f(shaderUniform, value) {
        if (this.cacheValue !== value) {
            this._gl.uniform1f(shaderUniform.location, value);
            this.cacheValue = value;
        }
    }
    upload1fv(shaderUniform, value) {
        this._gl.uniform1fv(shaderUniform.location, value);
    }
    upload2fv(shaderUniform, value) {
        this._gl.uniform2fv(shaderUniform.location, value);
    }
    upload3f(shaderUniform, value) {
        const cacheValue = this.cacheValue;
        if (value.r !== undefined) {
            if (cacheValue.x !== value.r || cacheValue.y !== value.g || cacheValue.z !== value.b) {
                if (this._colorSpace === ColorSpace.Linear) {
                    this._gl.uniform3f(shaderUniform.location, Color.gammaToLinearSpace(value.r), Color.gammaToLinearSpace(value.g), Color.gammaToLinearSpace(value.b));
                }
                else {
                    this._gl.uniform3f(shaderUniform.location, value.r, value.g, value.b);
                }
                cacheValue.x = value.r;
                cacheValue.y = value.g;
                cacheValue.z = value.b;
            }
        }
        else {
            if (cacheValue.x !== value.x ||
                cacheValue.y !== value.y ||
                cacheValue.z !== value.z) {
                this._gl.uniform3f(shaderUniform.location, value.x, value.y, value.z);
                cacheValue.x = value.x;
                cacheValue.y = value.y;
                cacheValue.z = value.z;
            }
        }
    }
    upload3fv(shaderUniform, value) {
        this._gl.uniform3fv(shaderUniform.location, value);
    }
    upload4f(shaderUniform, value) {
        const cacheValue = this.cacheValue;
        if (value.r !== undefined) {
            if (cacheValue.x !== value.r ||
                cacheValue.y !== value.g ||
                cacheValue.z !== value.b ||
                cacheValue.w !== value.a) {
                if (this._colorSpace === ColorSpace.Linear) {
                    this._gl.uniform4f(shaderUniform.location, Color.gammaToLinearSpace(value.r), Color.gammaToLinearSpace(value.g), Color.gammaToLinearSpace(value.b), value.a);
                }
                else {
                    this._gl.uniform4f(shaderUniform.location, value.r, value.g, value.b, value.a);
                }
                cacheValue.x = value.r;
                cacheValue.y = value.g;
                cacheValue.z = value.b;
                cacheValue.w = value.a;
            }
        }
        else {
            if (cacheValue.x !== value.x ||
                cacheValue.y !== value.y ||
                cacheValue.z !== value.z ||
                cacheValue.w !== value.w) {
                this._gl.uniform4f(shaderUniform.location, value.x, value.y, value.z, value.w);
                cacheValue.x = value.x;
                cacheValue.y = value.y;
                cacheValue.z = value.z;
                cacheValue.w = value.w;
            }
        }
    }
    upload4fv(shaderUniform, value) {
        this._gl.uniform4fv(shaderUniform.location, value);
    }
    upload1i(shaderUniform, value) {
        if (this.cacheValue !== value) {
            this._gl.uniform1i(shaderUniform.location, value);
            this.cacheValue = value;
        }
    }
    upload1iv(shaderUniform, value) {
        this._gl.uniform1iv(shaderUniform.location, value);
    }
    upload2iv(shaderUniform, value) {
        this._gl.uniform2iv(shaderUniform.location, value);
    }
    upload3iv(shaderUniform, value) {
        this._gl.uniform3iv(shaderUniform.location, value);
    }
    upload4iv(shaderUniform, value) {
        this._gl.uniform4iv(shaderUniform.location, value);
    }
    uploadMat4(shaderUniform, value) {
        this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);
    }
    uploadMat4v(shaderUniform, value) {
        this._gl.uniformMatrix4fv(shaderUniform.location, false, value);
    }
    uploadTexture(shaderUniform, value) {
        // 开启第x号纹理单元
        this._gl.activeTexture(shaderUniform.textureIndex);
        // 向target绑定纹理对象
        this._gl.bindTexture(value._glTarget, value._glTexture);
    }
}

/**
 * Shader data grouping.
 */
var ShaderDataGroup;
(function (ShaderDataGroup) {
    /** Scene group. */
    ShaderDataGroup[ShaderDataGroup["Scene"] = 0] = "Scene";
    /** Camera group. */
    ShaderDataGroup[ShaderDataGroup["Camera"] = 1] = "Camera";
    /** Renderer group. */
    ShaderDataGroup[ShaderDataGroup["Renderer"] = 2] = "Renderer";
    /** material group. */
    ShaderDataGroup[ShaderDataGroup["Material"] = 3] = "Material";
    // TODO: Geographic
})(ShaderDataGroup || (ShaderDataGroup = {}));

/**
 * Shader uniform block.
 * @internal
 */
class ShaderUniformBlock {
    constUniforms = [];
    textureUniforms = [];
}

/**
 * Renderer, each Mesh will have a renderer instance.
 */
class Renderer {
    /** Current bind program. */
    static glProgram;
    // TODO: 要接入webgl2, 应该抽出一个类型
    gl;
    /** Array of addresses of attribute variables in shader programs. */
    attribLocArray;
    /** Mesh to be rendered. */
    _primitive;
    /**
     * Render based on rendering context and grid.
     * @param gl WebGL rendering context.
     * @param primitive Mesh to be rendered.
     */
    constructor(gl, primitive) {
        this._primitive = primitive;
        this.gl = gl;
        this.initRenderState();
    }
    /**
     * Bind buffer and attribute.
     */
    bindBufferAndAttrib(shaderProgram) {
        const gl = this.gl;
        const primitive = this._primitive;
        const vertexBufferBindings = primitive._vertexBufferBindings;
        this.attribLocArray = [];
        const attributeLocation = shaderProgram.attributeLocation;
        const attributes = primitive._vertexElementMap;
        let vbo;
        let lastBoundVbo;
        for (const name in attributeLocation) {
            const loc = attributeLocation[name];
            if (loc === -1)
                continue;
            const element = attributes[name];
            if (element) {
                const { buffer, stride } = vertexBufferBindings[element.bindingIndex];
                vbo = buffer._nativeBuffer;
                if (lastBoundVbo !== vbo) {
                    lastBoundVbo = vbo;
                    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
                }
                gl.enableVertexAttribArray(loc);
                const { size, type, normalized } = element._glElementInfo;
                // gl.vertexAttribPointer(loc, size, type, normalized, 0, element.offset);
                gl.vertexAttribPointer(loc, size, type, normalized, stride, element.offset);
                this.attribLocArray.push(loc);
            }
            else {
                console.warn('vertex attribute not found: ' + name);
            }
        }
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
    }
    // TODO: 这个渲染状态是不是应该考虑放到材质里面，并且抽出一个RenderState
    /**
     * Clear depth, color buffer, etc.
     */
    initRenderState() {
        const gl = this.gl;
        gl.clearColor(0, 0, 0, 0);
        gl.enable(gl.DEPTH_TEST);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    }
    /**
     * Draw the primitive.
     */
    draw(shaderProgram, subMesh) {
        const gl = this.gl;
        const primitive = this._primitive;
        this.bindBufferAndAttrib(shaderProgram);
        const { _indexBufferBinding, _instanceCount, _glIndexType, _glIndexByteCount } = primitive;
        const { topology, start, count } = subMesh;
        if (!_instanceCount) {
            if (_indexBufferBinding) {
                const { _nativeBuffer } = _indexBufferBinding.buffer;
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);
                gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
            }
            else {
                gl.drawArrays(topology, start, count);
            }
        }
    }
}

/**
 * Shader program, corresponding to the GPU shader program.
 */
class ShaderProgram {
    /** Shader program counter. */
    static _counter = 0;
    /** Shader program id. */
    id;
    sceneUniformBlock = new ShaderUniformBlock();
    cameraUniformBlock = new ShaderUniformBlock();
    rendererUniformBlock = new ShaderUniformBlock();
    materialUniformBlock = new ShaderUniformBlock();
    otherUniformBlock = new ShaderUniformBlock();
    /** Attribute variable location in webgl. */
    attributeLocation = Object.create(null);
    _isValid;
    _engine;
    _gl;
    _vertexShader;
    _fragmentShader;
    _glProgram;
    // 当前激活的纹理单元
    /** Currently active texture unit. */
    _activeTextureUint = 0;
    /** WebGL program. */
    get glProgram() {
        return this._glProgram;
    }
    /**
     * Whether this shader program is valid.
     */
    get isValid() {
        return this._isValid;
    }
    constructor(engine, vertexSource, fragmentSource) {
        this._engine = engine;
        this._gl = engine.gl;
        this._glProgram = this._createProgram(vertexSource, fragmentSource);
        // ! bind不应该放在constructor里面
        this.bind();
        if (this._glProgram) {
            this._isValid = true;
            this._recordLocation();
        }
        else {
            this._isValid = false;
        }
        this.id = ShaderProgram._counter++;
    }
    /**
     * Create a webgl program instance.
     * @param vertexSource Vertex source code.
     * @param fragmentSource Fragment source code.
     * @returns WebGL program.
     */
    _createProgram(vertexSource, fragmentSource) {
        const gl = this._gl;
        // create and compile shader
        const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);
        if (!vertexShader) {
            return null;
        }
        const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);
        if (!fragmentShader) {
            return null;
        }
        // link program and shader
        const program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        gl.validateProgram(program);
        if (gl.isContextLost()) {
            console.error('Context lost while linking program.');
            gl.deleteShader(vertexShader);
            gl.deleteShader(fragmentShader);
            return null;
        }
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.error('Could not link WebGL program. \n' + gl.getProgramInfoLog(program));
            gl.deleteProgram(program);
            return null;
        }
        this._vertexShader = vertexShader;
        this._fragmentShader = fragmentShader;
        return program;
    }
    /**
     * Create and compile shader.
     * @param shaderType Fragment shader code or vertex shader code.
     * @param shaderSource Fragment shader source code or vertex shader source code.
     * @returns WebGLShader | null
     */
    _createShader(shaderType, shaderSource) {
        const gl = this._gl;
        const shader = gl.createShader(shaderType);
        if (!shader) {
            console.error('Context lost while create shader.');
            return null;
        }
        gl.shaderSource(shader, shaderSource);
        gl.compileShader(shader);
        if (gl.isContextLost()) {
            console.error('Context lost while compiling shader.');
            gl.deleteShader(shader);
            return null;
        }
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.error(`Could not compile WebGL shader.\n${gl.getShaderInfoLog(shader)}`);
            gl.deleteShader(shader);
            return null;
        }
        return shader;
    }
    // 将纹理数据或者uniform数据推入对应组的block
    /**
     * Push texture data or uniform data into the block of the corresponding group.
     * @param uniform Shader uniform.
     * @param group Shader data group: Scene, Camera, Renderer and Material.
     * @param isTexture Is it a texture or a uniform variable.
     */
    _groupingUniform(uniform, group, isTexture) {
        switch (group) {
            case ShaderDataGroup.Scene:
                if (isTexture) {
                    this.sceneUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.sceneUniformBlock.constUniforms.push(uniform);
                }
                break;
            case ShaderDataGroup.Camera:
                if (isTexture) {
                    this.cameraUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.cameraUniformBlock.constUniforms.push(uniform);
                }
                break;
            case ShaderDataGroup.Renderer:
                if (isTexture) {
                    this.rendererUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.rendererUniformBlock.constUniforms.push(uniform);
                }
                break;
            case ShaderDataGroup.Material:
                if (isTexture) {
                    this.materialUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.materialUniformBlock.constUniforms.push(uniform);
                }
                break;
            default:
                if (isTexture) {
                    this.otherUniformBlock.textureUniforms.push(uniform);
                }
                else {
                    this.otherUniformBlock.constUniforms.push(uniform);
                }
        }
    }
    /**
     * Record the location of uniform/attribute.
     */
    _recordLocation() {
        const gl = this._gl;
        const program = this._glProgram;
        const uniformInfos = this._getUniformInfos();
        const attributeInfos = this._getAttributeInfos();
        uniformInfos.forEach(({ name, size, type }) => {
            const shaderUniform = new ShaderUniform(gl);
            let isArray = false;
            let isTexture = false;
            if (name.indexOf('[0]') > 0) {
                name = name.substr(0, name.length - 3);
                isArray = true;
            }
            const group = Shader._getShaderPropertyGroup(name);
            const location = gl.getUniformLocation(program, name);
            shaderUniform.name = name;
            shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;
            shaderUniform.location = location;
            switch (type) {
                case gl.FLOAT:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload1fv;
                    }
                    else {
                        shaderUniform.applyFunc = shaderUniform.upload1f;
                        shaderUniform.cacheValue = 0;
                    }
                    break;
                case gl.FLOAT_VEC2:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload2fv;
                    }
                    break;
                case gl.FLOAT_VEC3:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload3fv;
                    }
                    else {
                        shaderUniform.applyFunc = shaderUniform.upload3f;
                        shaderUniform.cacheValue = new Vector3(0, 0, 0);
                    }
                    break;
                case gl.FLOAT_VEC4:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload4fv;
                    }
                    else {
                        shaderUniform.applyFunc = shaderUniform.upload4f;
                        shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);
                    }
                    break;
                case gl.INT:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload1iv;
                    }
                    else {
                        shaderUniform.applyFunc = shaderUniform.upload1i;
                        shaderUniform.cacheValue = 0;
                    }
                    break;
                case gl.INT_VEC2:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload2iv;
                    }
                    break;
                case gl.INT_VEC4:
                    if (isArray) {
                        shaderUniform.applyFunc = shaderUniform.upload4iv;
                    }
                    break;
                case gl.FLOAT_MAT4:
                    shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;
                    break;
                case gl.SAMPLER_2D:
                case gl.SAMPLER_CUBE:
                    let defaultTexture;
                    switch (type) {
                        case gl.SAMPLER_2D:
                            defaultTexture = this._engine._whiteTexture2D;
                            break;
                        case gl.SAMPLER_CUBE:
                            defaultTexture = this._engine._whiteTextureCube;
                            break;
                        default:
                            throw new Error('Unsupported texture type.');
                    }
                    isTexture = true;
                    const textureIndex = gl.TEXTURE0 + this._activeTextureUint;
                    shaderUniform.textureDefault = defaultTexture;
                    shaderUniform.textureIndex = textureIndex;
                    shaderUniform.applyFunc = shaderUniform.uploadTexture;
                    gl.uniform1i(location, this._activeTextureUint++);
                    shaderUniform.uploadTexture(shaderUniform, defaultTexture);
            }
            this._groupingUniform(shaderUniform, group, isTexture);
        });
        attributeInfos.forEach(({ name }) => {
            this.attributeLocation[name] = gl.getAttribLocation(program, name);
        });
    }
    /**
     * Get the address of the active uniform variable in the current webgl program.
     * @returns Array of uniform variable addresses.
     */
    _getUniformInfos() {
        const gl = this._gl;
        const program = this._glProgram;
        const uniformInfos = new Array();
        const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for (let i = 0; i < uniformCount; ++i) {
            const info = gl.getActiveUniform(program, i);
            uniformInfos[i] = info;
        }
        console.log(uniformInfos);
        return uniformInfos;
    }
    /**
     * Get the address of the active attribute variable in the current webgl program.
     * @returns Array of attribute variable addresses.
     */
    _getAttributeInfos() {
        const gl = this._gl;
        const program = this._glProgram;
        const attributeInfos = new Array();
        const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        for (let i = 0; i < attributeCount; ++i) {
            const info = gl.getActiveAttrib(program, i);
            attributeInfos[i] = info;
        }
        return attributeInfos;
    }
    /**
     * Upload all shader data in shader uniform block.
     * @param uniformBlock - shader Uniform block
     * @param shaderData - shader data
     */
    uploadAll(uniformBlock, shaderData) {
        this.uploadUniforms(uniformBlock, shaderData);
        this.uploadTextures(uniformBlock, shaderData);
    }
    /**
     * Upload constant shader data in shader uniform block.
     * @param uniformBlock - shader Uniform block
     * @param shaderData - shader data
     */
    uploadUniforms(uniformBlock, shaderData) {
        // shaderData._properties是根据shaderproperty的id的值的哈希表
        // 因为以数字为键效率更高
        const properties = shaderData._properties;
        const constUniforms = uniformBlock.constUniforms;
        for (let i = 0, n = constUniforms.length; i < n; i++) {
            const uniform = constUniforms[i];
            const data = properties[uniform.propertyId];
            // ! Highlight: 这里相当于把CPU中的值分配给GPU
            try {
                data != null && uniform.applyFunc(uniform, data);
            }
            catch (err) {
                console.log(err, uniform, data);
            }
        }
    }
    /**
     * Upload texture shader data in shader uniform block.
     * @param uniformBlock - shader Uniform block
     * @param shaderData - shader data
     */
    uploadTextures(uniformBlock, shaderData) {
        const properties = shaderData._properties;
        const textureUniforms = uniformBlock.textureUniforms;
        // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.
        if (textureUniforms) {
            for (let i = 0, n = textureUniforms.length; i < n; i++) {
                const uniform = textureUniforms[i];
                const texture = properties[uniform.propertyId];
                if (texture) {
                    uniform.applyFunc(uniform, texture);
                }
                else {
                    uniform.applyFunc(uniform, uniform.textureDefault);
                }
            }
        }
    }
    /**
     * Bind this shader program.
     * @returns Whether the shader program is switched.
     */
    bind() {
        if (Renderer.glProgram !== this) {
            this._gl.useProgram(this._glProgram);
            Renderer.glProgram = this;
            return true;
        }
        else {
            return false;
        }
    }
    destroy() {
        const gl = this._gl;
        this._vertexShader && gl.deleteShader(this._vertexShader);
        this._fragmentShader && gl.deleteShader(this._fragmentShader);
        this._glProgram && gl.deleteProgram(this._glProgram);
    }
}

/**
 * Shader property.
 */
class ShaderProperty {
    static _propertyNameCounter = 0;
    /** @internal */
    _uniqueId;
    /** @internal */
    _group;
    /** Shader property name. */
    name;
    /**
     * @internal
     */
    constructor(name) {
        this.name = name;
        this._uniqueId = ShaderProperty._propertyNameCounter++;
    }
}

/**
 * Shader containing vertex and fragment source.
 */
class Shader {
    /** Shader counter. */
    static _shaderCounter = 0;
    /** Shader map. */
    static _shaderMap = Object.create(null);
    /** Shader counter. */
    static _propertyNameMap = Object.create(null);
    /** The name of shader. */
    name;
    /** @internal */
    _shaderId = 0;
    /** Vertex shader source. */
    _vertexSource;
    /** Fragment shader source. */
    _fragmentSource;
    constructor(name, vertexSource, fragmentSource) {
        this._shaderId = Shader._shaderCounter++;
        this.name = name;
        this._vertexSource = vertexSource;
        this._fragmentSource = fragmentSource;
    }
    /**
     * @internal
     */
    static _getShaderPropertyGroup(propertyName) {
        const shaderProperty = Shader._propertyNameMap[propertyName];
        return shaderProperty?._group;
    }
    // 不存在就创建一个
    /**
     * Get shader property by name.
     * @param name - Name of the shader property
     * @returns Shader property
     */
    static getPropertyByName(name) {
        const propertyNameMap = Shader._propertyNameMap;
        if (propertyNameMap[name] != null) {
            return propertyNameMap[name];
        }
        else {
            // 实例化的时候并不分配分组，即此时property还没有group属性
            const property = new ShaderProperty(name);
            propertyNameMap[name] = property;
            return property;
        }
    }
    /**
     * Create a shader.
     * @param name - Name of the shader.
     * @param vertexSource - Vertex source code.
     * @param fragmentSource - Fragment source code.
     */
    static create(name, vertexSource, fragmentSource) {
        const shaderMap = Shader._shaderMap;
        if (shaderMap[name]) {
            throw `Shader named "${name}" already exists.`;
        }
        return (shaderMap[name] = new Shader(name, vertexSource, fragmentSource));
    }
    /**
     * Find a shader by name.
     * @param name - Name of the shader
     */
    static find(name) {
        return Shader._shaderMap[name];
    }
    /**
     * Create program based on shader.
     * @param engine
     * @returns Shader program.
     */
    _getShaderProgram(engine) {
        // TODO: 将常量shader拼接到这里
        const vertexSource = this._vertexSource;
        const fragmentSource = this._fragmentSource;
        return new ShaderProgram(engine, vertexSource, fragmentSource);
    }
}

class ShaderData {
    _group;
    _properties = Object.create(null);
    constructor(group) {
        this._group = group;
    }
    getFloat(property) {
        return this._getData(property);
    }
    setFloat(property, value) {
        this._setData(property, value);
    }
    getInt(property) {
        return this._getData(property);
    }
    setInt(property, value) {
        this._setData(property, value);
    }
    getFloatArray(property) {
        return this._getData(property);
    }
    setFloatArray(property, value) {
        this._setData(property, value);
    }
    getIntArray(property) {
        return this._getData(property);
    }
    setIntArray(property, value) {
        this._setData(property, value);
    }
    getVector2(property) {
        return this._getData(property);
    }
    setVector2(property, value) {
        this._setData(property, value);
    }
    getVector3(property) {
        return this._getData(property);
    }
    setVector3(property, value) {
        this._setData(property, value);
    }
    getVector4(property) {
        return this._getData(property);
    }
    setVector4(property, value) {
        this._setData(property, value);
    }
    getMatrix(property) {
        return this._getData(property);
    }
    setMatrix(property, value) {
        this._setData(property, value);
    }
    _getData(property) {
        if (typeof property === 'string') {
            property = Shader.getPropertyByName(property);
        }
        return this._properties[property._uniqueId];
    }
    getTexture(property) {
        return this._getData(property);
    }
    setTexture(property, value) {
        this._setData(property, value);
    }
    // 设置数据的时候顺便指定了分组！！！
    _setData(property, value) {
        if (typeof property === 'string') {
            property = Shader.getPropertyByName(property);
        }
        if (property._group !== this._group) {
            if (property._group === undefined) {
                property._group = this._group;
            }
            else {
                throw `Shader property ${property.name} has been used as ${ShaderDataGroup[property._group]} property.`;
            }
        }
        this._properties[property._uniqueId] = value;
    }
}

/**
 * Material base class.
 */
class Material {
    /** Name. */
    name;
    /** Shader used by the material. */
    shader;
    // TODO: 提升一个RefObject!
    engine;
    /** Shader data. */
    shaderData = new ShaderData(ShaderDataGroup.Material);
    constructor(engine, shader) {
        this.shader = shader;
        this.engine = engine;
    }
}

/**
 * Texture format enumeration.
 */
var TextureFormat;
(function (TextureFormat) {
    /** RGB format,8 bits per channel. */
    TextureFormat[TextureFormat["R8G8B8"] = 0] = "R8G8B8";
    /** RGBA format,8 bits per channel. */
    TextureFormat[TextureFormat["R8G8B8A8"] = 1] = "R8G8B8A8";
    /** RGBA format,4 bits per channel. */
    TextureFormat[TextureFormat["R4G4B4A4"] = 2] = "R4G4B4A4";
    /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */
    TextureFormat[TextureFormat["R5G5B5A1"] = 3] = "R5G5B5A1";
    /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */
    TextureFormat[TextureFormat["R5G6B5"] = 4] = "R5G6B5";
    /** Transparent format,8 bits. */
    TextureFormat[TextureFormat["Alpha8"] = 5] = "Alpha8";
    /** Luminance/alpha in RGB channel, alpha in A channel. */
    TextureFormat[TextureFormat["LuminanceAlpha"] = 6] = "LuminanceAlpha";
    /** RGBA format,16 bits per channel. */
    TextureFormat[TextureFormat["R16G16B16A16"] = 7] = "R16G16B16A16";
    /** RGBA format,32 bits per channel. */
    TextureFormat[TextureFormat["R32G32B32A32"] = 8] = "R32G32B32A32";
    /** RGB compressed format。*/
    TextureFormat[TextureFormat["DXT1"] = 9] = "DXT1";
    /** RGBA compressed format。*/
    TextureFormat[TextureFormat["DXT5"] = 10] = "DXT5";
    /** RGB compressed format,4 bits per pixel。*/
    TextureFormat[TextureFormat["ETC1_RGB"] = 11] = "ETC1_RGB";
    /** RGB compressed format,4 bits per pixel。*/
    TextureFormat[TextureFormat["ETC2_RGB"] = 12] = "ETC2_RGB";
    /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */
    TextureFormat[TextureFormat["ETC2_RGBA5"] = 13] = "ETC2_RGBA5";
    /** RGB compressed format,8 bits per pixel. */
    TextureFormat[TextureFormat["ETC2_RGBA8"] = 14] = "ETC2_RGBA8";
    /** RGB compressed format,2 bits per pixel. */
    TextureFormat[TextureFormat["PVRTC_RGB2"] = 15] = "PVRTC_RGB2";
    /** RGBA compressed format,2 bits per pixel. */
    TextureFormat[TextureFormat["PVRTC_RGBA2"] = 16] = "PVRTC_RGBA2";
    /** RGB compressed format,4 bits per pixel. */
    TextureFormat[TextureFormat["PVRTC_RGB4"] = 17] = "PVRTC_RGB4";
    /** RGBA compressed format,4 bits per pixel. */
    TextureFormat[TextureFormat["PVRTC_RGBA4"] = 18] = "PVRTC_RGBA4";
    /** RGB(A) compressed format,128 bits per 4x4 pixel block. */
    TextureFormat[TextureFormat["ASTC_4x4"] = 19] = "ASTC_4x4";
    /** RGB(A) compressed format,128 bits per 5x5 pixel block. */
    TextureFormat[TextureFormat["ASTC_5x5"] = 20] = "ASTC_5x5";
    /** RGB(A) compressed format,128 bits per 6x6 pixel block. */
    TextureFormat[TextureFormat["ASTC_6x6"] = 21] = "ASTC_6x6";
    /** RGB(A) compressed format,128 bits per 8x8 pixel block. */
    TextureFormat[TextureFormat["ASTC_8x8"] = 22] = "ASTC_8x8";
    /** RGB(A) compressed format,128 bits per 10x10 pixel block. */
    TextureFormat[TextureFormat["ASTC_10x10"] = 23] = "ASTC_10x10";
    /** RGB(A) compressed format,128 bits per 12x12 pixel block. */
    TextureFormat[TextureFormat["ASTC_12x12"] = 24] = "ASTC_12x12";
    /** Render to depth buffer,engine will automatically select the supported precision. */
    TextureFormat[TextureFormat["Depth"] = 25] = "Depth";
    /** Render to depth stencil buffer, engine will automatically select the supported precision. */
    TextureFormat[TextureFormat["DepthStencil"] = 26] = "DepthStencil";
    /** Render to stencil buffer. */
    TextureFormat[TextureFormat["Stencil"] = 27] = "Stencil";
    /** Force 16-bit depth buffer. */
    TextureFormat[TextureFormat["Depth16"] = 28] = "Depth16";
    /** Force 24-bit depth buffer. */
    TextureFormat[TextureFormat["Depth24"] = 29] = "Depth24";
    /** Force 32-bit depth buffer. */
    TextureFormat[TextureFormat["Depth32"] = 30] = "Depth32";
    /** Force 16-bit depth + 8-bit stencil buffer. */
    TextureFormat[TextureFormat["Depth24Stencil8"] = 31] = "Depth24Stencil8";
    /** Force 32-bit depth + 8-bit stencil buffer. */
    TextureFormat[TextureFormat["Depth32Stencil8"] = 32] = "Depth32Stencil8";
})(TextureFormat || (TextureFormat = {}));

/**
 * The base class of texture, contains some common functions of texture-related classes.
 */
class Texture {
    name;
    /** Whether to enable mipmap. */
    _mipmap;
    /** Texture object storage address. */
    _glTexture;
    /** Texture sampler. */
    _glTarget;
    /** Texture format detail. */
    _formatDetail;
    /** Texture format. */
    _format;
    /** Texture width. */
    _width;
    /** Texture height. */
    _height;
    _mipmapCount;
    _gl;
    _wrapModeU;
    _wrapModeV;
    _filterMode;
    get format() {
        return this._format;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    get wrapModeU() {
        return this._wrapModeU;
    }
    set wrapModeU(value) {
        if (value === this._wrapModeU)
            return;
        this._wrapModeU = value;
    }
    get wrapModeV() {
        return this._wrapModeV;
    }
    set wrapModeV(value) {
        if (value === this._wrapModeV)
            return;
        this._wrapModeV = value;
    }
    get mipmapCount() {
        return this._mipmapCount;
    }
    get filterMode() {
        return this._filterMode;
    }
    set filterMode(value) {
        if (value === this._filterMode)
            return;
        this._filterMode = value;
    }
    _getMaxMiplevel(size) {
        return Math.floor(Math.log2(size));
    }
    _getMipmapCount() {
        return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;
    }
    /**
     * Get detailed texture detail information based on texture format.
     * @param format Texture format.
     * @param gl WebGLRenderingContext.
     * @returns Texture format detail.
     */
    static _getFormatDetail(format, gl) {
        switch (format) {
            case TextureFormat.R8G8B8:
                return {
                    internalFormat: gl.RGB,
                    baseFormat: gl.RGB,
                    dataType: gl.UNSIGNED_BYTE,
                    isCompressed: false,
                };
            case TextureFormat.R8G8B8A8:
                return {
                    internalFormat: gl.RGBA,
                    baseFormat: gl.RGBA,
                    dataType: gl.UNSIGNED_BYTE,
                    isCompressed: false,
                };
            case TextureFormat.R4G4B4A4:
                return {
                    internalFormat: gl.RGBA,
                    baseFormat: gl.RGBA,
                    dataType: gl.UNSIGNED_SHORT_4_4_4_4,
                    isCompressed: false,
                };
            case TextureFormat.R5G5B5A1:
                return {
                    internalFormat: gl.RGBA,
                    baseFormat: gl.RGBA,
                    dataType: gl.UNSIGNED_SHORT_5_5_5_1,
                    isCompressed: false,
                };
            case TextureFormat.R5G6B5:
                return {
                    internalFormat: gl.RGB,
                    baseFormat: gl.RGB,
                    dataType: gl.UNSIGNED_SHORT_5_6_5,
                    isCompressed: false,
                };
            case TextureFormat.Alpha8:
                return {
                    internalFormat: gl.ALPHA,
                    baseFormat: gl.ALPHA,
                    dataType: gl.UNSIGNED_BYTE,
                    isCompressed: false,
                };
            case TextureFormat.LuminanceAlpha:
                return {
                    internalFormat: gl.LUMINANCE_ALPHA,
                    baseFormat: gl.LUMINANCE_ALPHA,
                    dataType: gl.UNSIGNED_BYTE,
                    isCompressed: false,
                };
            default:
                throw new Error(`this TextureFormat is not supported in Oasis Engine: ${format}`);
        }
    }
}

/**
 * The filter mode of the texture.
 */
var TextureFilterMode;
(function (TextureFilterMode) {
    /** Point filtering. */
    TextureFilterMode[TextureFilterMode["Point"] = 0] = "Point";
    /** Bilinear filtering. */
    TextureFilterMode[TextureFilterMode["Bilinear"] = 1] = "Bilinear";
    /** Trilinear filtering. */
    TextureFilterMode[TextureFilterMode["Trilinear"] = 2] = "Trilinear";
})(TextureFilterMode || (TextureFilterMode = {}));

/**
 * Wrapping mode of the texture.
 */
var TextureWrapMode;
(function (TextureWrapMode) {
    /** Clamping mode. use the color of edge pixels beyond the texture boundary. */
    TextureWrapMode[TextureWrapMode["Clamp"] = 0] = "Clamp";
    /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */
    TextureWrapMode[TextureWrapMode["Repeat"] = 1] = "Repeat";
    /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */
    TextureWrapMode[TextureWrapMode["Mirror"] = 2] = "Mirror";
})(TextureWrapMode || (TextureWrapMode = {}));

/**
 * Two-dimensional texture.
 */
class Texture2D extends Texture {
    /**
     * Create Texture2D.
     * @param engine Define the engine to use to render this texture.
     * @param width Texture width.
     * @param height Texture height.
     * @param format Texture format. default  `TextureFormat.R8G8B8A8`.
     * @param mipmap Whether to use multi-level texture.
     */
    constructor(engine, width, height, format = TextureFormat.R8G8B8A8, mipmap = true) {
        super();
        this._mipmap = mipmap;
        this._width = width;
        this._height = height;
        this._format = format;
        this._mipmapCount = this._getMipmapCount();
        this.filterMode = TextureFilterMode.Bilinear;
        this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;
        this._gl = engine.gl;
        this._glTexture = this._gl.createTexture();
        this._glTarget = this._gl.TEXTURE_2D;
        this._formatDetail = Texture._getFormatDetail(format, this._gl);
    }
    /**
     * Set texture based on pixel buffer.
     * @param colorBuffer Color buffer array.
     * @param mipLevel Mip level.
     * @param x Starting point x position.
     * @param y Starting point y position.
     * @param width Set width.
     * @param height Set height.
     */
    setPixelBuffer(colorBuffer, mipLevel = 0, x = 0, y = 0, width, height) {
        const gl = this._gl;
        const { internalFormat, baseFormat, dataType } = this._formatDetail;
        const mipWidth = Math.max(1, this._width >> mipLevel);
        const mipHeight = Math.max(1, this.height >> mipLevel);
        width = width || mipWidth - x;
        height = height || mipHeight - y;
        // webgl2 才可以考虑纹理压缩API isCompressed
        gl.bindTexture(this._glTarget, this._glTexture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);
        gl.texParameteri(this._glTarget, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        // gl.texSubImage2D(this._glTarget, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);
        gl.texImage2D(this._glTarget, mipLevel, internalFormat, width, height, 0, baseFormat, dataType, colorBuffer);
    }
    /**
     * Set the texture according to the picture.
     * @param imageSource Image source.
     * @param mipLevel Mip level.
     * @param flipY Y axis reversed.
     */
    setImageSource(imageSource, mipLevel, flipY) {
        const gl = this._gl;
        const { baseFormat, dataType, internalFormat } = this._formatDetail;
        gl.bindTexture(this._glTarget, this._glTexture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);
        // 将Alpha通道乘以其他颜色通道
        // gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);
        // gl.texSubImage2D(this._glTarget, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texImage2D(this._glTarget, mipLevel, internalFormat, baseFormat, dataType, imageSource);
    }
}

/**
 * Define the face of the cube texture.
 */
var TextureCubeFace;
(function (TextureCubeFace) {
    /** Positive X face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["PositiveX"] = 0] = "PositiveX";
    /** Negative X face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["NegativeX"] = 1] = "NegativeX";
    /** Positive Y face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["PositiveY"] = 2] = "PositiveY";
    /** Negative Y face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["NegativeY"] = 3] = "NegativeY";
    /** Positive Z face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["PositiveZ"] = 4] = "PositiveZ";
    /** Negative Z face for a cube-mapped texture. */
    TextureCubeFace[TextureCubeFace["NegativeZ"] = 5] = "NegativeZ";
})(TextureCubeFace || (TextureCubeFace = {}));

/**
 * Image materials using 2D textures to display the earth, raster tiles, etc.
 */
class ImageMaterial extends Material {
    /** The texture used by the image material. */
    texture2d;
    /** The address of the texture sampler in the shader. */
    static _sampleprop = Shader.getPropertyByName('u_sampler');
    // TODO: 应该建立一个shader池，这样就不用再传入shader了
    constructor(engine, shader, url) {
        super(engine, shader);
        const shaderData = this.shaderData;
        this.loadTexture(url)
            .then((image) => {
            this.texture2d = new Texture2D(engine, image.width, image.height, TextureFormat.R8G8B8, false);
            this.texture2d.setImageSource(image, 0, false);
            shaderData.setTexture(ImageMaterial._sampleprop, this.texture2d);
        })
            .catch((error) => {
            throw error;
        });
    }
    /**
     * Load texture image according to url.
     * @param url Texture image url.
     * @returns Promise<HTMLImageElement>
     */
    loadTexture(url) {
        return new Promise((resolve, reject) => {
            let image = new Image();
            image.onload = () => {
                resolve(image);
            };
            image.onerror = (error) => {
                reject(error);
            };
            image.src = url;
            image.crossOrigin = 'anonymous';
        });
    }
}

/**
 * Cube texture.
 */
class TextureCube extends Texture {
    /**
     * Create TextureCube.
     * @param engine Define the engine to use to render this texture.
     * @param size Texture size. texture width must be equal to height in cube texture.
     * @param format Texture format,default TextureFormat.R8G8B8A8.
     * @param mipmap Whether to use multi-level texture.
     */
    constructor(engine, size, format = TextureFormat.R8G8B8A8, mipmap = true) {
        super();
        this._mipmap = mipmap;
        this._width = size;
        this._height = size;
        this._format = format;
        this._mipmapCount = this._getMipmapCount();
        this.filterMode = TextureFilterMode.Bilinear;
        this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;
        this._gl = engine.gl;
        this._glTexture = this._gl.createTexture();
        this._glTarget = this._gl.TEXTURE_CUBE_MAP;
        this._formatDetail = Texture._getFormatDetail(format, this._gl);
    }
    /**
     * Set texture based on pixel buffer.
     * @param face Which side of the cube.
     * @param colorBuffer Color buffer.
     * @param mipLevel Mip level.
     */
    setPixelBuffer(face, colorBuffer, mipLevel = 0) {
        const gl = this._gl;
        const { internalFormat, baseFormat, dataType } = this._formatDetail;
        gl.bindTexture(this._glTarget, this._glTexture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, internalFormat, this._width, this._height, 0, baseFormat, dataType, colorBuffer);
    }
    /**
     * Set the texture according to the picture.
     * @param face Which side of the cube.
     * @param imageSource Image source.
     * @param mipLevel Mip level.
     */
    setImageSource(face, imageSource, mipLevel) {
        const gl = this._gl;
        const { baseFormat, dataType, internalFormat } = this._formatDetail;
        gl.bindTexture(this._glTarget, this._glTexture);
        gl.texImage2D(face, mipLevel, internalFormat, baseFormat, dataType, imageSource);
        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
    }
}

/**
 * A skybox material built with a cube texture, used to display the starry sky, etc.
 */
class SkyBoxMaterial extends Material {
    /** Cube texture. */
    textureCube;
    /** Six sided information array. */
    faceInfoArr;
    /** Get the sampler for the cube texture in the shader. */
    static _skyboxprop = Shader.getPropertyByName('u_Skybox');
    // TODO: 抽RefObject
    constructor(engine, faceInfoArr) {
        super(engine, Shader.find('skybox'));
        const shaderData = this.shaderData;
        this.textureCube = new TextureCube(engine, 1024);
        this.faceInfoArr = faceInfoArr;
        const gl = engine.gl;
        this.faceInfoArr.forEach((faceInfo) => {
            const { target, url } = faceInfo;
            const level = 0;
            const image = new Image();
            image.src = url;
            image.crossOrigin = 'anonymous';
            image.onload = () => {
                this.textureCube.setImageSource(target, image, level);
                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
            };
        });
        shaderData.setTexture(SkyBoxMaterial._skyboxprop, this.textureCube);
    }
}

/**
 * Buffer binding flag.
 */
var BufferBindFlag;
(function (BufferBindFlag) {
    /** Vertex buffer binding flag */
    BufferBindFlag[BufferBindFlag["VertexBuffer"] = 0] = "VertexBuffer";
    /** Index buffer binding flag */
    BufferBindFlag[BufferBindFlag["IndexBuffer"] = 1] = "IndexBuffer";
})(BufferBindFlag || (BufferBindFlag = {}));

/**
 * Buffer usage.
 */
var BufferUsage;
(function (BufferUsage) {
    /** The buffer content are intended to be specified once, and used many times */
    BufferUsage[BufferUsage["Static"] = 0] = "Static";
    /** The buffer contents are intended to be respecified repeatedly, and used many times */
    BufferUsage[BufferUsage["Dynamic"] = 1] = "Dynamic";
    /** The buffer contents are intended to be specified once, and used at most a few times */
    BufferUsage[BufferUsage["Stream"] = 2] = "Stream";
})(BufferUsage || (BufferUsage = {}));

/**
 * Vertex element format.
 */
var VertexElementFormat;
(function (VertexElementFormat) {
    /** 32-bit float */
    VertexElementFormat[VertexElementFormat["Float"] = 0] = "Float";
    /** Two-dimensional 32-bit float */
    VertexElementFormat[VertexElementFormat["Vector2"] = 1] = "Vector2";
    /** Three-dimensional 32-bit float */
    VertexElementFormat[VertexElementFormat["Vector3"] = 2] = "Vector3";
    /** Four-dimensional 32-bit float */
    VertexElementFormat[VertexElementFormat["Vector4"] = 3] = "Vector4";
    /** Four-dimensional 8-bit integer,range is [-128,127] */
    VertexElementFormat[VertexElementFormat["Byte4"] = 4] = "Byte4";
    /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */
    VertexElementFormat[VertexElementFormat["UByte4"] = 5] = "UByte4";
    /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */
    VertexElementFormat[VertexElementFormat["NormalizedByte4"] = 6] = "NormalizedByte4";
    /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */
    VertexElementFormat[VertexElementFormat["NormalizedUByte4"] = 7] = "NormalizedUByte4";
    /** Two-dimensional 16-bit integer, range is[-32768, 32767] */
    VertexElementFormat[VertexElementFormat["Short2"] = 8] = "Short2";
    /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */
    VertexElementFormat[VertexElementFormat["UShort2"] = 9] = "UShort2";
    /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */
    VertexElementFormat[VertexElementFormat["NormalizedShort2"] = 10] = "NormalizedShort2";
    /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */
    VertexElementFormat[VertexElementFormat["NormalizedUShort2"] = 11] = "NormalizedUShort2";
    /** Four-dimensional 16-bit integer, range is [-32768, 32767] */
    VertexElementFormat[VertexElementFormat["Short4"] = 12] = "Short4";
    /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */
    VertexElementFormat[VertexElementFormat["UShort4"] = 13] = "UShort4";
    /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */
    VertexElementFormat[VertexElementFormat["NormalizedShort4"] = 14] = "NormalizedShort4";
    /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */
    VertexElementFormat[VertexElementFormat["NormalizedUShort4"] = 15] = "NormalizedUShort4";
})(VertexElementFormat || (VertexElementFormat = {}));

/**
 * Data type enumeration
 */
var DataType;
(function (DataType) {
    /** Float */
    DataType[DataType["FLOAT"] = 5126] = "FLOAT";
    /** Floating-point two-dimensional vector */
    DataType[DataType["FLOAT_VEC2"] = 35664] = "FLOAT_VEC2";
    /** Floating-point three-dimensional vector */
    DataType[DataType["FLOAT_VEC3"] = 35665] = "FLOAT_VEC3";
    /** Floating-point four-dimensional vector */
    DataType[DataType["FLOAT_VEC4"] = 35666] = "FLOAT_VEC4";
    /** Integer */
    DataType[DataType["INT"] = 5124] = "INT";
    /** Integer two-dimensional vector */
    DataType[DataType["INT_VEC2"] = 35667] = "INT_VEC2";
    /** Integer three-dimensional vector */
    DataType[DataType["INT_VEC3"] = 35668] = "INT_VEC3";
    /** Integer four-dimensional vector */
    DataType[DataType["INT_VEC4"] = 35669] = "INT_VEC4";
    /** Boolean */
    DataType[DataType["BOOL"] = 35670] = "BOOL";
    /** Boolean two-dimensional vector */
    DataType[DataType["BOOL_VEC2"] = 35671] = "BOOL_VEC2";
    /** Boolean three-dimensional vector */
    DataType[DataType["BOOL_VEC3"] = 35672] = "BOOL_VEC3";
    /** Boolean four-dimensional vector */
    DataType[DataType["BOOL_VEC4"] = 35673] = "BOOL_VEC4";
    /** Second-order matrix */
    DataType[DataType["FLOAT_MAT2"] = 35674] = "FLOAT_MAT2";
    /** Third-order matrix */
    DataType[DataType["FLOAT_MAT3"] = 35675] = "FLOAT_MAT3";
    /** Fourth-order matrix */
    DataType[DataType["FLOAT_MAT4"] = 35676] = "FLOAT_MAT4";
    /** Float array */
    DataType[DataType["FLOAT_ARRAY"] = 35677] = "FLOAT_ARRAY";
    /** Floating-point two-dimensional vector array */
    DataType[DataType["FLOAT_VEC2_ARRAY"] = 100000] = "FLOAT_VEC2_ARRAY";
    /** Floating-point three-dimensional vector array */
    DataType[DataType["FLOAT_VEC3_ARRAY"] = 100001] = "FLOAT_VEC3_ARRAY";
    /** Floating-point four-dimensional vector array */
    DataType[DataType["FLOAT_VEC4_ARRAY"] = 100002] = "FLOAT_VEC4_ARRAY";
    /** Integer array */
    DataType[DataType["INT_ARRAY"] = 100003] = "INT_ARRAY";
    /** Integer two-dimensional vector array */
    DataType[DataType["INT_VEC2_ARRAY"] = 100004] = "INT_VEC2_ARRAY";
    /** Integer three-dimensional vector array */
    DataType[DataType["INT_VEC3_ARRAY"] = 100005] = "INT_VEC3_ARRAY";
    /** Integer four-dimensional vector array */
    DataType[DataType["INT_VEC4_ARRAY"] = 100006] = "INT_VEC4_ARRAY";
    /** Second-order matrix array */
    DataType[DataType["FLOAT_MAT2_ARRAY"] = 100007] = "FLOAT_MAT2_ARRAY";
    /** Third-order matrix array */
    DataType[DataType["FLOAT_MAT3_ARRAY"] = 100008] = "FLOAT_MAT3_ARRAY";
    /** Fourth-order matrix array */
    DataType[DataType["FLOAT_MAT4_ARRAY"] = 100009] = "FLOAT_MAT4_ARRAY";
    /** 2D texture sampler array */
    DataType[DataType["SAMPLER_2D_ARRAY"] = 100010] = "SAMPLER_2D_ARRAY";
    /** Cube map texture sampler array */
    DataType[DataType["SAMPLER_CUBE_ARRAY"] = 100011] = "SAMPLER_CUBE_ARRAY";
    /** 2D sampler */
    DataType[DataType["SAMPLER_2D"] = 35678] = "SAMPLER_2D";
    /** Cube map Texture sampler */
    DataType[DataType["SAMPLER_CUBE"] = 35680] = "SAMPLER_CUBE";
    /** Byte */
    DataType[DataType["BYTE"] = 5120] = "BYTE";
    /** Unsigned byte */
    DataType[DataType["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
    /** Short */
    DataType[DataType["SHORT"] = 5122] = "SHORT";
    /** Unsigned short */
    DataType[DataType["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
    /** Unsigned int */
    DataType[DataType["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
    DataType[DataType["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
    DataType[DataType["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
    DataType[DataType["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
    DataType[DataType["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
    DataType[DataType["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
    DataType[DataType["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
})(DataType || (DataType = {}));
/**
 * GL Capabilities
 * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.
 * */
var GLCapabilityType;
(function (GLCapabilityType) {
    GLCapabilityType["shaderVertexID"] = "shaderVertexID";
    GLCapabilityType["standardDerivatives"] = "OES_standard_derivatives";
    GLCapabilityType["shaderTextureLod"] = "EXT_shader_texture_lod";
    GLCapabilityType["elementIndexUint"] = "OES_element_index_uint";
    GLCapabilityType["depthTexture"] = "WEBGL_depth_texture";
    GLCapabilityType["drawBuffers"] = "WEBGL_draw_buffers";
    GLCapabilityType["vertexArrayObject"] = "OES_vertex_array_object";
    GLCapabilityType["instancedArrays"] = "ANGLE_instanced_arrays";
    GLCapabilityType["multipleSample"] = "multipleSampleOnlySupportedInWebGL2";
    GLCapabilityType["textureFloat"] = "OES_texture_float";
    GLCapabilityType["textureFloatLinear"] = "OES_texture_float_linear";
    GLCapabilityType["textureHalfFloat"] = "OES_texture_half_float";
    GLCapabilityType["textureHalfFloatLinear"] = "OES_texture_half_float_linear";
    GLCapabilityType["WEBGL_colorBufferFloat"] = "WEBGL_color_buffer_float";
    GLCapabilityType["colorBufferFloat"] = "EXT_color_buffer_float";
    GLCapabilityType["colorBufferHalfFloat"] = "EXT_color_buffer_half_float";
    GLCapabilityType["textureFilterAnisotropic"] = "EXT_texture_filter_anisotropic";
    GLCapabilityType["blendMinMax"] = "EXT_blend_minmax";
    GLCapabilityType["astc"] = "WEBGL_compressed_texture_astc";
    GLCapabilityType["astc_webkit"] = "WEBKIT_WEBGL_compressed_texture_astc";
    GLCapabilityType["etc"] = "WEBGL_compressed_texture_etc";
    GLCapabilityType["etc_webkit"] = "WEBKIT_WEBGL_compressed_texture_etc";
    GLCapabilityType["etc1"] = "WEBGL_compressed_texture_etc1";
    GLCapabilityType["etc1_webkit"] = "WEBKIT_WEBGL_compressed_texture_etc1";
    GLCapabilityType["pvrtc"] = "WEBGL_compressed_texture_pvrtc";
    GLCapabilityType["pvrtc_webkit"] = "WEBKIT_WEBGL_compressed_texture_pvrtc";
    GLCapabilityType["s3tc"] = "WEBGL_compressed_texture_s3tc";
    GLCapabilityType["s3tc_webkit"] = "WEBKIT_WEBGL_compressed_texture_s3tc";
    // atc = "WEBGL_compressed_texture_atc",
    // s3tc_srgb = "WEBGL_compressed_texture_s3tc_srgb"
})(GLCapabilityType || (GLCapabilityType = {}));

/**
 * Index format.
 */
var IndexFormat;
(function (IndexFormat) {
    /** 8 bit */
    IndexFormat[IndexFormat["UInt8"] = 0] = "UInt8";
    /** 16 bit */
    IndexFormat[IndexFormat["UInt16"] = 1] = "UInt16";
    /** 32 bit */
    IndexFormat[IndexFormat["UInt32"] = 2] = "UInt32";
})(IndexFormat || (IndexFormat = {}));

/**
 * Utility functions for processing Buffers.
 */
class BufferUtil {
    /**
     * Obtain the usage of Buffer according to the incoming enumeration.
     * @param gl WebGL rendering context.
     * @param bufferUsage Buffer usage.
     * @returns The number code used by the internal buffer of gl.
     */
    static _getGLBufferUsage(gl, bufferUsage) {
        switch (bufferUsage) {
            case BufferUsage.Static:
                return gl.STATIC_DRAW;
            case BufferUsage.Dynamic:
                return gl.DYNAMIC_DRAW;
            case BufferUsage.Stream:
                return gl.STREAM_DRAW;
        }
    }
    /**
     * Get index type code.
     * @param indexFormat Index type enumeration.
     * @returns The number code used by the internal type of gl.
     */
    static _getGLIndexType(indexFormat) {
        switch (indexFormat) {
            case IndexFormat.UInt8:
                return DataType.UNSIGNED_BYTE;
            case IndexFormat.UInt16:
                return DataType.UNSIGNED_SHORT;
            case IndexFormat.UInt32:
                return DataType.UNSIGNED_INT;
        }
    }
    /**
     * Get gl index byte count.
     * @param indexFormat Index type enumeration.
     * @returns Index byte count.
     */
    static _getGLIndexByteCount(indexFormat) {
        switch (indexFormat) {
            case IndexFormat.UInt8:
                return 1;
            case IndexFormat.UInt16:
                return 2;
            case IndexFormat.UInt32:
                return 4;
        }
    }
    /**
     * Returns vertex information based on the element's vertex format.
     */
    static _getElementInfo(format) {
        let size;
        let type;
        let normalized = false;
        switch (format) {
            case VertexElementFormat.Float:
                size = 1;
                type = DataType.FLOAT;
                break;
            case VertexElementFormat.Vector2:
                size = 2;
                type = DataType.FLOAT;
                break;
            case VertexElementFormat.Vector3:
                size = 3;
                type = DataType.FLOAT;
                break;
            case VertexElementFormat.Vector4:
                size = 4;
                type = DataType.FLOAT;
                break;
            case VertexElementFormat.Byte4:
                size = 4;
                type = DataType.BYTE;
                break;
            case VertexElementFormat.UByte4:
                size = 4;
                type = DataType.UNSIGNED_BYTE;
                break;
            case VertexElementFormat.NormalizedByte4:
                size = 4;
                type = DataType.BYTE;
                normalized = true;
                break;
            case VertexElementFormat.NormalizedUByte4:
                size = 4;
                type = DataType.UNSIGNED_BYTE;
                normalized = true;
                break;
            case VertexElementFormat.Short2:
                size = 2;
                type = DataType.SHORT;
                break;
            case VertexElementFormat.UShort2:
                size = 2;
                type = DataType.UNSIGNED_SHORT;
                break;
            case VertexElementFormat.NormalizedShort2:
                size = 2;
                type = DataType.SHORT;
                normalized = true;
                break;
            case VertexElementFormat.NormalizedUShort2:
                size = 2;
                type = DataType.UNSIGNED_SHORT;
                normalized = true;
                break;
            case VertexElementFormat.Short4:
                size = 4;
                type = DataType.SHORT;
                break;
            case VertexElementFormat.UShort4:
                size = 4;
                type = DataType.UNSIGNED_SHORT;
                break;
            case VertexElementFormat.NormalizedShort4:
                size = 4;
                type = DataType.SHORT;
                normalized = true;
                break;
            case VertexElementFormat.NormalizedUShort4:
                size = 4;
                type = DataType.UNSIGNED_SHORT;
                normalized = true;
                break;
        }
        return { size, type, normalized };
    }
}

/**
 * Buffer base class,
 * which can be an array of vertex buffers or an array of index buffers.
 */
class Buffer {
    // TODO: 把gl挂载到RefObject
    _gl;
    _glBindTarget;
    _glBufferUsage;
    _nativeBuffer;
    _type;
    _byteLength;
    _bufferUsage;
    /**
     * Buffer binding flag.
     */
    get type() {
        return this._type;
    }
    /**
     * Byte length.
     */
    get byteLength() {
        return this._byteLength;
    }
    /**
     * Buffer usage.
     */
    get bufferUsage() {
        return this._bufferUsage;
    }
    constructor(gl, type, byteLengthOrData, bufferUsage = BufferUsage.Static) {
        this._gl = gl;
        this._type = type;
        this._bufferUsage = bufferUsage;
        const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);
        const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;
        this._nativeBuffer = gl.createBuffer();
        this._glBufferUsage = glBufferUsage;
        this._glBindTarget = glBindTarget;
        this.bind();
        if (typeof byteLengthOrData === 'number') {
            this._byteLength = byteLengthOrData;
            gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);
        }
        else {
            this._byteLength = byteLengthOrData.byteLength;
            gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);
        }
        gl.bindBuffer(glBindTarget, null);
    }
    /**
     * Bind buffer.
     */
    bind() {
        const gl = this._gl;
        gl.bindBuffer(this._glBindTarget, this._nativeBuffer);
    }
    setData(data, bufferByteOffset = 0, dataOffset = 0, dataLength) {
        const gl = this._gl;
        const glBindTarget = this._glBindTarget;
        this.bind();
        // 每个元素所占用的字节数
        const byteSize = data.BYTES_PER_ELEMENT || 1;
        const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;
        if (dataOffset !== 0 || dataByteLength < data.byteLength) {
            const isArrayBufferView = data.byteOffset !== undefined;
            const subData = new Uint8Array(isArrayBufferView ? data.buffer : data, dataOffset * byteSize, dataByteLength);
            gl.bufferSubData(glBindTarget, bufferByteOffset, subData);
        }
        else {
            gl.bufferSubData(glBindTarget, bufferByteOffset, data);
        }
        gl.bindBuffer(glBindTarget, null);
    }
    getData(data, bufferByteOffset = 0, dataOffset = 0, dataLength) {
        throw 'Buffer is write-only on WebGL1.0 platforms.';
    }
}

/**
 * Mesh topology.
 */
var MeshTopology;
(function (MeshTopology) {
    /** Draws a single dot */
    MeshTopology[MeshTopology["Points"] = 0] = "Points";
    /** Draws a line between a pair of vertices */
    MeshTopology[MeshTopology["Lines"] = 1] = "Lines";
    /** Draws a straight line to the next vertex, and connects the last vertex back to the first */
    MeshTopology[MeshTopology["LineLoop"] = 2] = "LineLoop";
    /** Draws a straight line to the next vertex. */
    MeshTopology[MeshTopology["LineStrip"] = 3] = "LineStrip";
    /** Draws a triangle for a group of three vertices */
    MeshTopology[MeshTopology["Triangles"] = 4] = "Triangles";
    /** Draws a triangle strip */
    MeshTopology[MeshTopology["TriangleStrip"] = 5] = "TriangleStrip";
    /** Draws a triangle fan */
    MeshTopology[MeshTopology["TriangleFan"] = 6] = "TriangleFan";
})(MeshTopology || (MeshTopology = {}));

/**
 * Index buffer binding.
 */
class IndexBufferBinding {
    /** Index buffer bound buffer. */
    _buffer;
    /** Index format. */
    _format;
    /**
     * Index buffer.
     */
    get buffer() {
        return this._buffer;
    }
    /**
     * Index buffer format.
     */
    get format() {
        return this._format;
    }
    /**
     * Create index buffer binding.
     * @param buffer - Index buffer
     * @param format - Index buffer format
     */
    constructor(buffer, format) {
        this._buffer = buffer;
        this._format = format;
    }
}

/**
 * Sub-mesh, mainly contains drawing information.
 */
class SubMesh {
    /** Start drawing offset. */
    start;
    /** Drawing count. */
    count;
    /** Drawing topology. */
    topology;
    /**
     * Create a sub-mesh.
     * @param start - Start drawing offset
     * @param count - Drawing count
     * @param topology - Drawing topology
     */
    constructor(start = 0, count = 0, topology = MeshTopology.Triangles) {
        this.start = start;
        this.count = count;
        this.topology = topology;
    }
}

/**
 * Grid abstract class.
 */
class Mesh {
    /** Name. */
    name;
    /** Vertex entity record table, used for caching. */
    _vertexElementMap = {};
    /** The storage type of the index, for example: UInt8. */
    _glIndexType;
    /** Each index occupies several bytes, 8 bits per byte. */
    _glIndexByteCount;
    /** A platform that provides rendering capabilities. */
    _platformPrimitive;
    /** A Mesh may consist of multiple vertex instances. */
    _instanceCount = 0;
    /** The vertex buffer corresponding to the mesh. */
    _vertexBufferBindings = [];
    /** The index buffer corresponding to the mesh */
    _indexBufferBinding = null;
    /** Array of vertex elements. */
    _vertexElements = [];
    gl;
    /** Drawing information for each element. */
    _subMeshes = [];
    /**
     * First sub-mesh. Rendered using the first material.
     */
    get subMesh() {
        return this._subMeshes[0] || null;
    }
    /**
     * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.
     */
    get subMeshes() {
        return this._subMeshes;
    }
    addSubMesh(startOrSubMesh, count, topology = MeshTopology.Triangles) {
        if (typeof startOrSubMesh === 'number') {
            startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);
        }
        this._subMeshes.push(startOrSubMesh);
        return startOrSubMesh;
    }
    /**
     * Remove sub-mesh.
     * @param subMesh - Sub-mesh needs to be removed
     */
    removeSubMesh(subMesh) {
        const subMeshes = this._subMeshes;
        const index = subMeshes.indexOf(subMesh);
        if (index !== -1) {
            subMeshes.splice(index, 1);
        }
    }
    /**
     * Clear all sub-mesh.
     */
    clearSubMesh() {
        this._subMeshes.length = 0;
    }
    constructor(gl, name) {
        this.gl = gl;
        this.name = name;
        this._platformPrimitive = new Renderer(gl, this);
    }
    _clearVertexElements() {
        // 这个清空方法妙啊
        this._vertexElements.length = 0;
        const vertexElementMap = this._vertexElementMap;
        for (const k in vertexElementMap) {
            delete vertexElementMap[k];
        }
    }
    _addVertexElement(element) {
        const { semantic } = element;
        this._vertexElementMap[semantic] = element;
        this._vertexElements.push(element);
    }
    _draw(shaderProgram, subMesh) {
        this._platformPrimitive.draw(shaderProgram, subMesh);
    }
    _onDestroy() {
        this._vertexBufferBindings = null;
        this._indexBufferBinding = null;
        this._vertexElements = null;
        this._vertexElementMap = null;
    }
    _setVertexElements(elements) {
        this._clearVertexElements();
        for (let i = 0, n = elements.length; i < n; i++) {
            this._addVertexElement(elements[i]);
        }
    }
    _setVertexBufferBinding(index, binding) {
        this._vertexBufferBindings[index] = binding;
    }
    _setIndexBufferBinding(binding) {
        if (binding) {
            this._indexBufferBinding = binding;
            this._glIndexType = BufferUtil._getGLIndexType(binding.format);
            this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);
        }
        else {
            this._indexBufferBinding = null;
            this._glIndexType = undefined;
        }
    }
}

/**
 * Vertex buffer binding.
 */
class VertexBufferBinding {
    /** Buffer to which vertex elements are bound. */
    _buffer;
    /** Span between each vertex. */
    _stride;
    /**
     * Vertex buffer.
     */
    get buffer() {
        return this._buffer;
    }
    /**
     * Vertex buffer stride.
     */
    get stride() {
        return this._stride;
    }
    /**
     * Create vertex buffer.
     * @param buffer - Vertex buffer
     * @param stride - Vertex buffer stride
     */
    constructor(buffer, stride) {
        this._buffer = buffer;
        this._stride = stride;
    }
}

/**
 * Vertex elements contain coordinate information, texture information, normal vector information.
 */
class VertexElement {
    _glElementInfo;
    _semantic;
    _offset;
    _format;
    _bindingIndex;
    _instanceStepRate;
    /**
     * Vertex semantic.
     */
    get semantic() {
        return this._semantic;
    }
    /**
     * Vertex data byte offset.
     */
    get offset() {
        return this._offset;
    }
    /**
     * Vertex data format.
     */
    get format() {
        return this._format;
    }
    /**
     * Vertex buffer binding index.
     */
    get bindingIndex() {
        return this._bindingIndex;
    }
    /**
     * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.
     */
    get instanceStepRate() {
        return this._instanceStepRate;
    }
    /**
     * Create vertex element.
     * @param semantic - Input vertex semantic
     * @param offset - Vertex data byte offset
     * @param format - Vertex data format
     * @param bindingIndex - Vertex buffer binding index
     * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.
     */
    constructor(semantic, offset, format, bindingIndex, instanceStepRate = 0) {
        this._semantic = semantic;
        this._offset = offset;
        this._format = format;
        this._bindingIndex = bindingIndex;
        this._glElementInfo = BufferUtil._getElementInfo(this.format);
        this._instanceStepRate = Math.floor(instanceStepRate);
    }
}

/**
 * Create a model from an array of information such as vertices, indices, normal vectors, etc.
 */
class ModelMesh extends Mesh {
    /** The number of vertices in the model. */
    _vertexCount = 0;
    /** Availability of the model. */
    _accessible = true;
    _verticesFloat32 = null;
    _verticesUint8 = null;
    /** A vertex has several elements, xyz is 3. */
    _elementCount = 0;
    _lastUploadVertexCount = -1;
    /** Index format. */
    _indicesFormat = null;
    /** Index type array. */
    _indices = null;
    /** Array of vertex positions. */
    _positions = [];
    /** Array of normal vectors. */
    _normals = null;
    /** Array of texture coordinates */
    _uv = null;
    /**
     * Whether to access data of the mesh.
     */
    get accessible() {
        return this._accessible;
    }
    /**
     * Vertex count of current mesh.
     */
    get vertexCount() {
        return this._vertexCount;
    }
    // TODO: 这个也应该抽到RefObject.
    constructor(gl, name) {
        super(gl);
        this.name = name;
    }
    /**
     * Set the vertex position information of the model.
     * @param positions Array of model vertex coordinates.
     */
    setPositions(positions) {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        this._positions = positions;
        this._vertexCount = positions.length;
    }
    /**
     * Get the vertex position information of the model.
     * @returns Array of model vertex coordinates.
     */
    getPostions() {
        return this._positions;
    }
    /**
     * Set model normal vector.
     * @param normals Array of normal vectors.
     */
    setNormals(normals) {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        if (normals.length !== this._vertexCount) {
            throw 'The array provided needs to be the same size as vertex count.';
        }
        this._normals = normals;
    }
    /**
     * Get model normal vector.
     * @returns Array of normal vectors.
     */
    getNormals() {
        return this._normals;
    }
    /**
     * Set texture coordinates.
     * @param uv Texture coordinates.
     */
    setUVs(uv) {
        this._uv = uv;
    }
    /**
     * Get texture coordinates.
     * @returns Texture coordinates.
     */
    getUVs() {
        return this._uv;
    }
    /**
     * Set indices for the mesh.
     * @param indices - The indices for the mesh.
     */
    setIndices(indices) {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        if (this._indices !== indices) {
            this._indices = indices;
            if (indices instanceof Uint8Array) {
                this._indicesFormat = IndexFormat.UInt8;
            }
            else if (indices instanceof Uint16Array) {
                this._indicesFormat = IndexFormat.UInt16;
            }
            else if (indices instanceof Uint32Array) {
                this._indicesFormat = IndexFormat.UInt32;
            }
        }
    }
    /**
     * Get indices for the mesh.
     */
    getIndices() {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        return this._indices;
    }
    /**
     * Upload Mesh Data to the graphics API.
     */
    uploadData(noLongerAccessible = true) {
        if (!this._accessible) {
            throw 'Not allowed to access data while accessible is false.';
        }
        this._updateVertexElements();
        const gl = this.gl;
        // positions的Vector3的个数
        const { _vertexCount: vertexCount } = this;
        const vertexCountChange = this._lastUploadVertexCount !== vertexCount;
        const vertexBuffer = this._vertexBufferBindings[0]?._buffer;
        if (vertexCountChange) {
            // 一组数据有多少个元素，比如：顶点(3) + 法向量(3) + 纹理(2) = 8
            const elementCount = this._elementCount;
            // Float32Array数组该给多少空间
            const vertexFloatCount = elementCount * vertexCount;
            const vertices = new Float32Array(vertexFloatCount);
            this._verticesFloat32 = vertices;
            // 这个东西有什么用实在搞不明白？
            this._verticesUint8 = new Uint8Array(vertices.buffer);
            this._updateVertices(vertices);
            const newVertexBuffer = new Buffer(gl, BufferBindFlag.VertexBuffer, vertices, noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic);
            // 因为是Float32Array，32位，4个字节，故stride为elementCount * 4
            this._setVertexBufferBinding(0, new VertexBufferBinding(newVertexBuffer, elementCount * 4));
            this._lastUploadVertexCount = vertexCount;
        }
        else {
            const vertices = this._verticesFloat32;
            this._updateVertices(vertices);
            vertexBuffer.setData(vertices);
        }
        const { _indices } = this;
        const indexBuffer = this._indexBufferBinding?._buffer;
        if (_indices) {
            if (!indexBuffer || _indices.byteLength != indexBuffer.byteLength) {
                const newIndexBuffer = new Buffer(gl, BufferBindFlag.IndexBuffer, _indices);
                this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));
            }
        }
        else if (indexBuffer) {
            this._setIndexBufferBinding(null);
        }
    }
    /**
     * Vertex elements are composed of vertex coordinates, texture coordinates, normal vectors and other information.
     */
    _updateVertexElements() {
        this._clearVertexElements();
        // 因为顶点元素是必须有的！
        this._addVertexElement(POSITION_VERTEX_ELEMENT);
        // 3 * 4 = 12
        let offset = 12;
        let elementCount = 3;
        if (this._normals) {
            this._addVertexElement(new VertexElement('NORMAL', offset, VertexElementFormat.Vector3, 0));
            offset += 12;
            elementCount += 3;
        }
        if (this._uv) {
            this._addVertexElement(new VertexElement('TEXCOORD_0', offset, VertexElementFormat.Vector2, 0));
            offset += 8;
            elementCount += 2;
        }
        // ! 索引信息没处理
        this._elementCount = elementCount;
    }
    /**
     * Fill the void Float32Array with postion, normal and uvs.
     * @param vertices void Float32Array
     */
    _updateVertices(vertices) {
        const { _elementCount, _vertexCount, _positions, _normals, _uv } = this;
        for (let i = 0; i < _vertexCount; i++) {
            const start = _elementCount * i;
            const position = _positions[i];
            vertices[start] = position.x;
            vertices[start + 1] = position.y;
            vertices[start + 2] = position.z;
        }
        let offset = 3;
        if (_normals) {
            for (let i = 0; i < _vertexCount; i++) {
                const start = _elementCount * i + offset;
                const normal = _normals[i];
                if (normal) {
                    vertices[start] = normal.x;
                    vertices[start + 1] = normal.y;
                    vertices[start + 2] = normal.z;
                }
            }
            offset += 3;
        }
        if (_uv) {
            for (let i = 0; i < _vertexCount; i++) {
                const start = _elementCount * i + offset;
                const uv = _uv[i];
                if (uv) {
                    vertices[start] = uv.x;
                    vertices[start + 1] = uv.y;
                }
            }
            offset += 2;
        }
    }
}
const POSITION_VERTEX_ELEMENT = new VertexElement('POSITION', 0, VertexElementFormat.Vector3, 0);

/**
 * Create a Mesh of Simple Geometry.
 */
class PrimitiveMesh {
    /**
     * Create a cuboid mesh.
     * @param width - Cuboid width
     * @param height - Cuboid height
     * @param depth - Cuboid depth
     * @returns Cuboid model mesh
     */
    static createCuboid(engine, width = 1, height = 1, depth = 1) {
        const gl = engine.gl;
        const mesh = new ModelMesh(gl, 'Cuboid');
        const halfWidth = width / 2;
        const halfHeight = height / 2;
        const halfDepth = depth / 2;
        const positions = new Array(24);
        const normals = new Array(24);
        const uvs = new Array(24);
        // Up
        positions[0] = new Vector3(-halfWidth, halfHeight, -halfDepth);
        positions[1] = new Vector3(halfWidth, halfHeight, -halfDepth);
        positions[2] = new Vector3(halfWidth, halfHeight, halfDepth);
        positions[3] = new Vector3(-halfWidth, halfHeight, halfDepth);
        normals[0] = new Vector3(0, 1, 0);
        normals[1] = new Vector3(0, 1, 0);
        normals[2] = new Vector3(0, 1, 0);
        normals[3] = new Vector3(0, 1, 0);
        uvs[0] = new Vector2(0, 0);
        uvs[1] = new Vector2(1, 0);
        uvs[2] = new Vector2(1, 1);
        uvs[3] = new Vector2(0, 1);
        // Down
        positions[4] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
        positions[5] = new Vector3(halfWidth, -halfHeight, -halfDepth);
        positions[6] = new Vector3(halfWidth, -halfHeight, halfDepth);
        positions[7] = new Vector3(-halfWidth, -halfHeight, halfDepth);
        normals[4] = new Vector3(0, -1, 0);
        normals[5] = new Vector3(0, -1, 0);
        normals[6] = new Vector3(0, -1, 0);
        normals[7] = new Vector3(0, -1, 0);
        uvs[4] = new Vector2(0, 1);
        uvs[5] = new Vector2(1, 1);
        uvs[6] = new Vector2(1, 0);
        uvs[7] = new Vector2(0, 0);
        // Left
        positions[8] = new Vector3(-halfWidth, halfHeight, -halfDepth);
        positions[9] = new Vector3(-halfWidth, halfHeight, halfDepth);
        positions[10] = new Vector3(-halfWidth, -halfHeight, halfDepth);
        positions[11] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
        normals[8] = new Vector3(-1, 0, 0);
        normals[9] = new Vector3(-1, 0, 0);
        normals[10] = new Vector3(-1, 0, 0);
        normals[11] = new Vector3(-1, 0, 0);
        uvs[8] = new Vector2(0, 0);
        uvs[9] = new Vector2(1, 0);
        uvs[10] = new Vector2(1, 1);
        uvs[11] = new Vector2(0, 1);
        // Right
        positions[12] = new Vector3(halfWidth, halfHeight, -halfDepth);
        positions[13] = new Vector3(halfWidth, halfHeight, halfDepth);
        positions[14] = new Vector3(halfWidth, -halfHeight, halfDepth);
        positions[15] = new Vector3(halfWidth, -halfHeight, -halfDepth);
        normals[12] = new Vector3(1, 0, 0);
        normals[13] = new Vector3(1, 0, 0);
        normals[14] = new Vector3(1, 0, 0);
        normals[15] = new Vector3(1, 0, 0);
        uvs[12] = new Vector2(1, 0);
        uvs[13] = new Vector2(0, 0);
        uvs[14] = new Vector2(0, 1);
        uvs[15] = new Vector2(1, 1);
        // Front
        positions[16] = new Vector3(-halfWidth, halfHeight, halfDepth);
        positions[17] = new Vector3(halfWidth, halfHeight, halfDepth);
        positions[18] = new Vector3(halfWidth, -halfHeight, halfDepth);
        positions[19] = new Vector3(-halfWidth, -halfHeight, halfDepth);
        normals[16] = new Vector3(0, 0, 1);
        normals[17] = new Vector3(0, 0, 1);
        normals[18] = new Vector3(0, 0, 1);
        normals[19] = new Vector3(0, 0, 1);
        uvs[16] = new Vector2(0, 0);
        uvs[17] = new Vector2(1, 0);
        uvs[18] = new Vector2(1, 1);
        uvs[19] = new Vector2(0, 1);
        // Back
        positions[20] = new Vector3(-halfWidth, halfHeight, -halfDepth);
        positions[21] = new Vector3(halfWidth, halfHeight, -halfDepth);
        positions[22] = new Vector3(halfWidth, -halfHeight, -halfDepth);
        positions[23] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
        normals[20] = new Vector3(0, 0, -1);
        normals[21] = new Vector3(0, 0, -1);
        normals[22] = new Vector3(0, 0, -1);
        normals[23] = new Vector3(0, 0, -1);
        uvs[20] = new Vector2(1, 0);
        uvs[21] = new Vector2(0, 0);
        uvs[22] = new Vector2(0, 1);
        uvs[23] = new Vector2(1, 1);
        const indices = new Uint16Array(36);
        // prettier-ignore
        // Up
        indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3,
            // Down
            indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5,
            // Left
            indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11,
            // Right
            indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13,
            // Front
            indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19,
            // Back
            indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;
        PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices);
        return mesh;
    }
    /**
     *
     * @param engine 引擎实例
     * @param level 正四面体递归切分等级
     * @returns 球网格实例
     */
    static createSphereBySliceTetrahedron(engine, level = 0) {
        const gl = engine.gl;
        const mesh = new ModelMesh(gl, 'Sphere');
        const negativeRootTwoOverThree = -Math.sqrt(2.0) / 3.0;
        const negativeOneThird = -1.0 / 3.0;
        const rootSixOverThree = Math.sqrt(6.0) / 3.0;
        const positions = [];
        positions.push(new Vector3(0, 0, 1));
        positions.push(new Vector3(0, (2 * Math.sqrt(2)) / 3, negativeOneThird));
        positions.push(new Vector3(-rootSixOverThree, negativeRootTwoOverThree, negativeOneThird));
        positions.push(new Vector3(rootSixOverThree, negativeRootTwoOverThree, negativeOneThird));
        let indices = [];
        PrimitiveMesh.subdivide(positions, indices, [0, 1, 2], level);
        PrimitiveMesh.subdivide(positions, indices, [0, 2, 3], level);
        PrimitiveMesh.subdivide(positions, indices, [0, 3, 1], level);
        PrimitiveMesh.subdivide(positions, indices, [1, 3, 2], level);
        indices = new Uint16Array(indices);
        PrimitiveMesh._initialize(mesh, positions, null, null, indices);
        return mesh;
    }
    /**
     * Create a sphere mesh.
     * @param engine - Engine
     * @param radius - Sphere radius
     * @param segments - Number of segments
     * @returns Sphere model mesh
     */
    static createSphereByParamEquation(engine, radius = 0.5, segments = 18) {
        const mesh = new ModelMesh(engine.gl);
        segments = Math.max(2, Math.floor(segments));
        const count = segments + 1;
        const vertexCount = count * count;
        const rectangleCount = segments * segments;
        const indices = new Uint16Array(rectangleCount * 6);
        const thetaRange = Math.PI;
        const alphaRange = thetaRange * 2;
        const countReciprocal = 1.0 / count;
        const segmentsReciprocal = 1.0 / segments;
        const positions = new Array(vertexCount);
        const normals = new Array(vertexCount);
        const uvs = new Array(vertexCount);
        for (let i = 0; i < vertexCount; ++i) {
            const x = i % count;
            const y = (i * countReciprocal) | 0;
            const u = x * segmentsReciprocal;
            const v = y * segmentsReciprocal;
            const alphaDelta = u * alphaRange;
            const thetaDelta = v * thetaRange;
            const sinTheta = Math.sin(thetaDelta);
            let posX = -radius * Math.cos(alphaDelta) * sinTheta;
            let posY = radius * Math.cos(thetaDelta);
            let posZ = radius * Math.sin(alphaDelta) * sinTheta;
            // Position
            positions[i] = new Vector3(posX, posY, posZ);
            // Normal
            normals[i] = new Vector3(posX, posY, posZ);
            // Texcoord
            uvs[i] = new Vector2(u, v);
        }
        let offset = 0;
        for (let i = 0; i < rectangleCount; ++i) {
            const x = i % segments;
            const y = (i * segmentsReciprocal) | 0;
            const a = y * count + x;
            const b = a + 1;
            const c = a + count;
            const d = c + 1;
            indices[offset++] = b;
            indices[offset++] = a;
            indices[offset++] = d;
            indices[offset++] = a;
            indices[offset++] = c;
            indices[offset++] = d;
        }
        PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices);
        return mesh;
    }
    /**
     *
     * @param engine - Engine
     * @param width - Plane width
     * @param height - Plane height
     * @param horizontalSegments - Plane horizontal segments
     * @param verticalSegments - Plane vertical segments
     * @param noLongerAccessible - Accessible
     * @returns Plane mesh
     */
    static createPlane(engine, width = 1, height = 1, horizontalSegments = 1, verticalSegments = 1, noLongerAccessible = true) {
        // TODO: 直接传入引擎，不提去gl了
        const mesh = new ModelMesh(engine.gl);
        horizontalSegments = Math.max(1, Math.floor(horizontalSegments));
        verticalSegments = Math.max(1, Math.floor(verticalSegments));
        const horizontalCount = horizontalSegments + 1;
        const verticalCount = verticalSegments + 1;
        const halfWidth = width / 2;
        const halfHeight = height / 2;
        const gridWidth = width / horizontalSegments;
        const gridHeight = height / verticalSegments;
        const vertexCount = horizontalCount * verticalCount;
        const rectangleCount = verticalSegments * horizontalSegments;
        const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);
        const horizontalCountReciprocal = 1.0 / horizontalCount;
        const horizontalSegmentsReciprocal = 1.0 / horizontalSegments;
        const verticalSegmentsReciprocal = 1.0 / verticalSegments;
        const positions = new Array(vertexCount);
        const normals = new Array(vertexCount);
        const uvs = new Array(vertexCount);
        for (let i = 0; i < vertexCount; ++i) {
            const x = i % horizontalCount;
            const z = (i * horizontalCountReciprocal) | 0;
            // Position
            positions[i] = new Vector3(x * gridWidth - halfWidth, 0, z * gridHeight - halfHeight);
            // Normal
            normals[i] = new Vector3(0, 1, 0);
            // Texcoord
            uvs[i] = new Vector2(x * horizontalSegmentsReciprocal, z * verticalSegmentsReciprocal);
        }
        let offset = 0;
        for (let i = 0; i < rectangleCount; ++i) {
            const x = i % horizontalSegments;
            const y = (i * horizontalSegmentsReciprocal) | 0;
            const a = y * horizontalCount + x;
            const b = a + 1;
            const c = a + horizontalCount;
            const d = c + 1;
            indices[offset++] = a;
            indices[offset++] = c;
            indices[offset++] = b;
            indices[offset++] = c;
            indices[offset++] = d;
            indices[offset++] = b;
        }
        // TODO: 加上是否可获取参数！
        PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices);
        return mesh;
    }
    static subdivide(positions, indices, triangle, level = 0) {
        if (level > 0) {
            let tmp1 = new Vector3();
            let tmp2 = new Vector3();
            let tmp3 = new Vector3();
            Vector3.add(positions[triangle[0]], positions[triangle[1]], tmp1);
            Vector3.scale(tmp1, 0.5, tmp1);
            Vector3.add(positions[triangle[1]], positions[triangle[2]], tmp2);
            Vector3.scale(tmp2, 0.5, tmp2);
            Vector3.add(positions[triangle[2]], positions[triangle[0]], tmp3);
            Vector3.scale(tmp3, 0.5, tmp3);
            positions.push(tmp1.normalize(), tmp2.normalize(), tmp3.normalize());
            let i01 = positions.length - 3;
            let i12 = positions.length - 2;
            let i20 = positions.length - 1;
            const newLevel = level - 1;
            PrimitiveMesh.subdivide(positions, indices, [triangle[0], i01, i20], newLevel);
            PrimitiveMesh.subdivide(positions, indices, [i01, triangle[1], i12], newLevel);
            PrimitiveMesh.subdivide(positions, indices, [i01, i12, i20], newLevel);
            PrimitiveMesh.subdivide(positions, indices, [i20, i12, triangle[2]], newLevel);
        }
        else {
            indices.push(...triangle);
        }
    }
    /**
     * According a series of data ti initialize mesh
     * @param mesh object's mesh
     * @param positions object's position array
     * @param normals object's normals array
     * @param uv object's uv array
     * @param indices object's indices array
     */
    static _initialize(mesh, positions, normals, uvs, indices) {
        mesh.setPositions(positions);
        mesh.setIndices(indices);
        // 因为不一定要显示指定法向量和纹理坐标
        if (normals)
            mesh.setNormals(normals);
        if (uvs)
            mesh.setUVs(uvs);
        mesh.uploadData();
        mesh.addSubMesh(0, indices.length);
    }
    // TODO: 对顶点数量有要求，而且还没有兼容WebGL2!
    static _generateIndices(engine, vertexCount, indexCount) {
        let indices = null;
        if (vertexCount > 65535) {
            throw Error('The vertex count is over limit.');
        }
        else {
            indices = new Uint16Array(indexCount);
        }
        return indices;
    }
}

const earthUrl = `http://121.199.160.202/images/earth.jpg`;

const skyStarConfig = [
    {
        target: DataType.TEXTURE_CUBE_MAP_POSITIVE_X,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_mx.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_NEGATIVE_X,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_px.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_POSITIVE_Y,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_py.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_NEGATIVE_Y,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_my.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_POSITIVE_Z,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_mz.jpg',
    },
    {
        target: DataType.TEXTURE_CUBE_MAP_NEGATIVE_Z,
        url: 'http://121.199.160.202/images/skybox/tycho2t3_80_pz.jpg',
    },
];

/**
 * Background of the scene.
 */
class Background {
    _engine;
    /**
     * The pattern of the background, which may be a single color, a skybox or a picture texture.
     */
    mode = BackgroundMode.SolidColor;
    /** Grid for background. */
    _mesh;
    /** The material used for the background. */
    _material;
    /** Fixed color before skybox or texture is loaded successfully. */
    solidColor = new Color(0.25, 0.25, 0.25, 1.0);
    constructor(_engine) {
        this._engine = _engine;
        this._mesh = this._createPlane(this._engine);
        this._material = new SkyBoxMaterial(this._engine, skyStarConfig);
    }
    /**
     * Background with flat grid.
     * @param engine Engine instance.
     * @returns Mesh
     */
    _createPlane(engine) {
        const mesh = new ModelMesh(engine.gl);
        // const indices = new Uint8Array([0, 3, 1, 1, 3, 2]);
        const positions = [
            new Vector3(-1, -1, 0),
            new Vector3(1, -1, 0),
            new Vector3(-1, 1, 0),
            new Vector3(-1, 1, 0),
            new Vector3(1, -1, 0),
            new Vector3(1, 1, 0),
        ];
        mesh.setPositions(positions);
        // mesh.setIndices(indices);
        mesh.uploadData(false);
        mesh.addSubMesh(0, 6);
        return mesh;
    }
}

/** Prevent gimbal lock. */
const ESP = MathUtil.zeroTolerance;
/**
 * Spherical.
 */
class Spherical {
    /** Spherical radius. */
    radius;
    /** In the xoy plane, the angle with the x-axis. */
    phi;
    /** Angle with z-axis. */
    theta;
    /**
     * Build the initial state of the sphere.
     * @param radius Spherical radius, default is 1.0.
     * @param phi Angle with the x-axis, default is 0.
     * @param theta Angle with the z-axis, default is 0.
     */
    constructor(radius, phi, theta) {
        this.radius = radius !== undefined ? radius : 1.0;
        this.phi = phi !== undefined ? phi : 0;
        this.theta = theta !== undefined ? theta : 0;
    }
    /**
     * Set spherical state
     * @param radius Spherical radius.
     * @param phi Angle with the x-axis.
     * @param theta Angle with the z-axis.
     * @returns Spherical.
     */
    set(radius, phi, theta) {
        this.radius = radius;
        this.phi = phi;
        this.theta = theta;
        return this;
    }
    makeSafe() {
        this.phi = MathUtil.clamp(this.phi, ESP, Math.PI - ESP);
        return this;
    }
    /**
     * Calculate sphere state from vector.
     * @param v3 Vector3.
     * @returns Spherical.
     */
    setFromVec3(v3) {
        this.radius = v3.length();
        if (this.radius === 0) {
            this.theta = 0;
            this.phi = 0;
        }
        else {
            this.theta = Math.atan2(v3.x, v3.z);
            this.phi = Math.acos(MathUtil.clamp(v3.y / this.radius, -1, 1));
        }
        return this;
    }
    /**
     * Get Vector3 from sphere state.
     * @param v3 Vector3.
     * @returns Spherical.
     */
    setToVec3(v3) {
        const sinPhiRadius = Math.sin(this.phi) * this.radius;
        v3.setValue(sinPhiRadius * Math.sin(this.theta), Math.cos(this.phi) * this.radius, sinPhiRadius * Math.cos(this.theta));
        return this;
    }
}

/**
 * Orbital controls for zooming around a center point.
 */
class OrbitControl {
    /** Camera instance, the essence of orbit control is to change the camera position. */
    camera;
    /** DOM element, mainly used to listen for mouse up events. */
    domElement;
    /** Canvas element, mainly used to monitor mouse movement events. */
    mainElement;
    /** Camera frustum angle. */
    fov;
    /** Where the camera is looking. */
    target;
    /** Camera up. */
    up;
    /** The minimum distance from the camera to the object. */
    minDistance;
    /** The maximum distance from the camera to the object. */
    maxDistance;
    /** The smallest zoom scale of the camera. */
    minZoom;
    /** The maximum zoom scale of the camera. */
    maxZoom;
    /** Scaling factor. */
    zoomFactor;
    /** Min polar angle. */
    minPolarAngle;
    /** Max polar angle. */
    maxPolarAngle;
    /** Min azimuth angle. */
    minAzimuthAngle;
    /** Max azimuth angle. */
    maxAzimuthAngle;
    /** Whether to enable damping. */
    enableDamping;
    /** Whether to enable rotate. */
    enableRotate;
    /** Whether to enable zoom. */
    enableZoom;
    /** Whether to enable pan. */
    enablePan;
    /** Damping factor */
    dampingFactor;
    /** Zoom speed */
    zoomSpeed;
    /** Whether to auto rotate. */
    autoRotate;
    /** Auto rotate speed. */
    autoRotateSpeed = Math.PI;
    /** Rotate speed. */
    rotateSpeed;
    /** Clicking the corresponding key with the mouse is actually the key corresponding to the left button, the scroll wheel and the right button. */
    mouseButtons;
    /** What state is the current controller in. */
    STATE;
    /** Contains mousemove and mouseup. */
    mouseUpEvents;
    /** Contains mousedown and wheel. */
    constEvents;
    _position;
    _offset;
    _spherical;
    _sphericalDelta;
    _sphericalDump;
    _zoomFrag;
    _scale;
    _panOffset;
    _isMouseUp;
    _vPan;
    _state;
    _rotateStart;
    _rotateEnd;
    _rotateDelta;
    _panStart;
    _panEnd;
    _panDelta;
    _zoomStart;
    _zoomEnd;
    _zoomDelta;
    constructor(camera) {
        this.camera = camera;
        this.domElement = document;
        this.mainElement = camera.engine.canvas._canvas;
        this.fov = 45;
        this.target = new Vector3();
        this.up = new Vector3(0, 1, 0);
        this.minDistance = 0.1;
        this.maxDistance = Infinity;
        this.minZoom = 0.0;
        this.maxZoom = Infinity;
        this.minPolarAngle = 0;
        this.maxPolarAngle = Math.PI;
        this.minAzimuthAngle = -Infinity;
        this.maxAzimuthAngle = Infinity;
        this.enableDamping = true;
        this.dampingFactor = 0.1;
        this.zoomFactor = 0.2;
        this.enableZoom = true;
        this.zoomSpeed = 1.0;
        this.enableRotate = true;
        this.rotateSpeed = 1.0;
        this.enablePan = true;
        this.autoRotate = false;
        this.mouseButtons = {
            ORBIT: 0,
            ZOOM: 1,
            PAN: 2,
        };
        // Reuse objects to prevent excessive stack allocation.
        // update
        this._position = new Vector3();
        this._offset = new Vector3();
        this._spherical = new Spherical();
        this._sphericalDelta = new Spherical();
        this._sphericalDump = new Spherical();
        this._zoomFrag = 0;
        this._scale = 1;
        this._panOffset = new Vector3();
        this._isMouseUp = true;
        // pan
        this._vPan = new Vector3();
        // state
        this._rotateStart = new Vector2();
        this._rotateEnd = new Vector2();
        this._rotateDelta = new Vector2();
        this._panStart = new Vector2();
        this._panEnd = new Vector2();
        this._panDelta = new Vector2();
        this._zoomStart = new Vector2();
        this._zoomEnd = new Vector2();
        this._zoomDelta = new Vector2();
        this.STATE = {
            NONE: -1,
            ROTATE: 0,
            ZOOM: 1,
            PAN: 2,
        };
        this._state = this.STATE.NONE;
        this.constEvents = [
            { type: 'mousedown', listener: this.onMouseDown.bind(this) },
            { type: 'wheel', listener: this.onMouseWheel.bind(this) },
        ];
        this.mouseUpEvents = [
            { type: 'mousemove', listener: this.onMouseMove.bind(this) },
            { type: 'mouseup', listener: this.onMouseUp.bind(this) },
        ];
        // onMouseDown里面处理了mousemove和mouseup的事件
        this.constEvents.forEach((ele) => {
            if (ele.element) {
                ele.element.addEventListener(ele.type, ele.listener, false);
            }
            else {
                this.mainElement.addEventListener(ele.type, ele.listener, false);
            }
        });
    }
    /**
     * The life cycle of track control destruction, used to remove listener events.
     */
    onDestory() {
        this.constEvents.forEach((ele) => {
            if (ele.element) {
                ele.element.removeEventListener(ele.type, ele.listener, false);
            }
            else {
                this.mainElement.removeEventListener(ele.type, ele.listener, false);
            }
        });
        const element = this.domElement === document ? this.domElement.body : this.domElement;
        this.mainElement.removeEventListener(this.mouseUpEvents[0].type, this.mouseUpEvents[0].listener, false);
        element.removeEventListener(this.mouseUpEvents[1].type, this.mouseUpEvents[1].listener, false);
    }
    /**
     * The orbit controls the life cycle, updating the view based on the current mouse changes.
     * @param dtime Used to calculate how many degrees to rotate.
     */
    onUpdate(dtime) {
        const position = this.camera.transform.position;
        position.cloneTo(this._offset);
        this._offset.subtract(this.target);
        this._spherical.setFromVec3(this._offset);
        if (this.autoRotate && this._state === this.STATE.NONE) {
            this.rotateLeft(this.getAutoRotationAngle(dtime));
        }
        this._spherical.theta += this._sphericalDelta.theta;
        this._spherical.phi += this._sphericalDelta.phi;
        this._spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, this._spherical.theta));
        this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));
        this._spherical.makeSafe();
        if (this._scale !== 1) {
            this._zoomFrag = this._spherical.radius * (this._scale - 1);
        }
        this._spherical.radius += this._zoomFrag;
        this._spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, this._spherical.radius));
        this.target.add(this._panOffset);
        this._spherical.setToVec3(this._offset);
        this.target.cloneTo(this._position);
        this._position.add(this._offset);
        this.camera.transform.position = this._position;
        this.camera.transform.lookAt(this.target, this.up);
        if (this.enableDamping === true) {
            this._sphericalDump.theta *= 1 - this.dampingFactor;
            this._sphericalDump.phi *= 1 - this.dampingFactor;
            this._zoomFrag *= 1 - this.zoomFactor;
            if (this._isMouseUp) {
                this._sphericalDelta.theta = this._sphericalDump.theta;
                this._sphericalDelta.phi = this._sphericalDump.phi;
            }
            else {
                this._sphericalDelta.set(0, 0, 0);
            }
        }
        else {
            this._sphericalDelta.set(0, 0, 0);
            this._zoomFrag = 0;
        }
        this._scale = 1;
        this._panOffset.setValue(0, 0, 0);
    }
    /**
     * Handle left and right translation.
     * @param distance Camera translation distance.
     * @param worldMatrix Camera's world coordinate matrix.
     */
    panLeft(distance, worldMatrix) {
        const e = worldMatrix.elements;
        this._vPan.setValue(e[0], e[1], e[2]);
        this._vPan.scale(distance);
        this._panOffset.add(this._vPan);
    }
    /**
     * Handle up and down translation.
     * @param distance Camera translation distance.
     * @param worldMatrix Camera's world coordinate matrix.
     */
    panUp(distance, worldMatrix) {
        const e = worldMatrix.elements;
        this._vPan.setValue(e[4], e[5], e[6]);
        this._vPan.scale(distance);
        this._panOffset.add(this._vPan);
    }
    /**
     * Pan according to panLeft and panUp.
     * @param deltaX The difference between the mouse and the x-direction of the previous view.
     * @param deltaY The difference between the mouse and the y-direction of the previous view
     */
    pan(deltaX, deltaY) {
        // perspective only
        const position = this.camera.transform.position;
        position.cloneTo(this._vPan);
        this._vPan.subtract(this.target);
        let targetDistance = this._vPan.length();
        targetDistance *= (this.fov / 2) * (Math.PI / 180);
        // 我们在这里只使用clientHeight，这样纵横比不会扭曲速度
        this.panLeft(-2 * deltaX * (targetDistance / this.mainElement.clientHeight), this.camera.transform.worldMatrix);
        this.panUp(2 * deltaY * (targetDistance / this.mainElement.clientHeight), this.camera.transform.worldMatrix);
    }
    /**
     * Zoom in view.
     * @param zoomScale Zoom scale.
     */
    zoomIn(zoomScale) {
        // perspective only
        this._scale *= zoomScale;
    }
    /**
     * Zoom out view.
     * @param zoomScale Zoom scale.
     */
    zoomOut(zoomScale) {
        // perspective only
        this._scale /= zoomScale;
    }
    /**
     * Get zoom level.
     * @returns Zoom scale.
     */
    getZoomScale() {
        return Math.pow(0.95, this.zoomSpeed);
    }
    /**
     * Rotate left and right.
     * @param radian Rotation angle, radian system.
     */
    rotateLeft(radian) {
        this._sphericalDelta.theta -= radian;
        if (this.enableDamping) {
            this._sphericalDump.theta = -radian;
        }
    }
    /**
     * Rotate up and down.
     * @param radian Rotation angle, radian system.
     */
    rotateUp(radian) {
        this._sphericalDelta.phi -= radian;
        if (this.enableDamping) {
            this._sphericalDump.phi = -radian;
        }
    }
    /**
     * Get auto rotation angle.
     * @param dtime Rendering the time difference between the current frame and the previous frame.
     * @returns Auto rotate speed.
     */
    getAutoRotationAngle(dtime) {
        return (this.autoRotateSpeed / 1000) * dtime;
    }
    /**
     * Set rotate start when state is rotate.
     * @param event Mouse event.
     */
    handleMouseDownRotate(event) {
        this._rotateStart.setValue(event.clientX, event.clientY);
    }
    /**
     * Set zoom start when state is zoom.
     * @param event Mouse event.
     */
    handleMouseDownZoom(event) {
        this._zoomStart.setValue(event.clientX, event.clientY);
    }
    /**
     * Set pan start when state is pan.
     * @param event Mouse event.
     */
    handleMouseDownPan(event) {
        this._panStart.setValue(event.clientX, event.clientY);
    }
    /**
     * Calculate the rotation difference when the mouse is moved.
     * @param event Mouse event.
     */
    handleMouseMoveRotate(event) {
        this._rotateEnd.setValue(event.clientX, event.clientY);
        Vector2.subtract(this._rotateEnd, this._rotateStart, this._rotateDelta);
        // x方向平移的百分比
        this.rotateLeft(2 * Math.PI * (this._rotateDelta.x / this.mainElement.clientWidth) * this.rotateSpeed);
        // y方向平移的百分比
        this.rotateUp(2 * Math.PI * (this._rotateDelta.y / this.mainElement.clientHeight) * this.rotateSpeed);
        // 将end设置为新的start
        this._rotateEnd.cloneTo(this._rotateStart);
    }
    /**
     * Calculate the rotation difference when the mouse is moved.
     * @param event Mouse event.
     */
    handleMouseMoveZoom(event) {
        this._zoomEnd.setValue(event.clientX, event.clientY);
        Vector2.subtract(this._zoomEnd, this._zoomStart, this._zoomDelta);
        if (this._zoomDelta.y > 0) {
            this.zoomOut(this.getZoomScale());
        }
        else if (this._zoomDelta.y < 0) {
            this.zoomIn(this.getZoomScale());
        }
        // 将end复制到新的start
        this._zoomEnd.cloneTo(this._zoomStart);
    }
    /**
     * Calculate the pan difference when the mouse is moved.
     * @param event Mouse event.
     */
    handleMouseMovePan(event) {
        this._panEnd.setValue(event.clientX, event.clientY);
        Vector2.subtract(this._panEnd, this._panStart, this._panDelta);
        this.pan(this._panDelta.x, this._panDelta.y);
        this._panEnd.cloneTo(this._panStart);
    }
    /**
     * Calculate the wheel difference when the mouse is moved.
     * @param event Mouse event.
     */
    handleMouseWheel(event) {
        if (event.deltaY < 0) {
            this.zoomIn(this.getZoomScale());
        }
        else if (event.deltaY > 0) {
            this.zoomOut(this.getZoomScale());
        }
    }
    /**
     * Listen to the mouse click event,
     * and set the context state to the mouse click type according to the click type,
     * and then select the corresponding processing method
     * @param event Mouse event.
     */
    onMouseDown(event) {
        event.preventDefault();
        this._isMouseUp = false;
        switch (event.button) {
            case this.mouseButtons.ORBIT:
                this.handleMouseDownRotate(event);
                this._state = this.STATE.ROTATE;
                break;
            case this.mouseButtons.ZOOM:
                this.handleMouseDownZoom(event);
                this._state = this.STATE.ZOOM;
                break;
            case this.mouseButtons.PAN:
                this.handleMouseDownPan(event);
                this._state = this.STATE.PAN;
                break;
        }
        if (this._state !== this.STATE.NONE) {
            const element = this.domElement === document ? this.domElement.body : this.domElement;
            // canvas元素监听move事件
            // onMouseMove
            this.mainElement.addEventListener(this.mouseUpEvents[0].type, this.mouseUpEvents[0].listener, false);
            // 父级元素监听鼠标up事件
            // onMouseUp
            element.addEventListener(this.mouseUpEvents[1].type, this.mouseUpEvents[1].listener, false);
        }
    }
    /**
     * Monitor mouse movement events,
     * select the corresponding movement processing method for the current context state.
     * @param event Mouse event.
     */
    onMouseMove(event) {
        event.preventDefault();
        switch (this._state) {
            case this.STATE.ROTATE:
                this.handleMouseMoveRotate(event);
                break;
            case this.STATE.ZOOM:
                this.handleMouseMoveZoom(event);
                break;
            case this.STATE.PAN:
                this.handleMouseMovePan(event);
                break;
        }
    }
    /**
     * Listen for the mouse up event,
     * remove the corresponding listener event and set the context state to none.
     */
    onMouseUp() {
        this._isMouseUp = true;
        this.mouseUpEvents.forEach((ele) => {
            const element = this.domElement === document ? this.domElement.body : this.domElement;
            element.removeEventListener(ele.type, ele.listener, false);
            this.mainElement.removeEventListener(ele.type, ele.listener, false);
        });
        this._state = this.STATE.NONE;
    }
    /**
     * Listen to the mouse wheel event,
     * prevent the default behavior,
     * and scale according to the current event event information.
     * @param event Mouse wheel event.
     */
    onMouseWheel(event) {
        event.preventDefault();
        event.stopPropagation();
        this.handleMouseWheel(event);
    }
}

const Util = {
    isArray: 'isArray' in Array
        ? Array.isArray
        : (value) => {
            return toString.call(value) === '[object Array]';
        },
    isArrayLike(x) {
        return !!x && typeof x.length === 'number' && typeof x !== 'function';
    },
    clone(obj) {
        if (typeof obj !== 'object' || obj === null) {
            return obj;
        }
        let rst;
        if (Util.isArrayLike(obj)) {
            rst = obj.slice();
            for (let i = 0, l = obj.length; i < l; i++) {
                rst[i] = Util.clone(obj[i]);
            }
        }
        else {
            rst = {};
            for (const k in obj) {
                if (obj.hasOwnProperty(k)) {
                    rst[k] = Util.clone(obj[k]);
                }
            }
        }
        return rst;
    },
    downloadBlob(blob, fileName = '') {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement('a');
        document.body.appendChild(a);
        a.style.display = 'none';
        a.href = url;
        a.download = fileName;
        a.addEventListener('click', () => {
            if (a.parentElement) {
                a.parentElement.removeChild(a);
            }
        });
        a.click();
        window.URL.revokeObjectURL(url);
    },
};
const isArrayLike = (x) => x && typeof x.length === 'number' && typeof x !== 'function';
/**
 * Fastly remove an element from array.
 * @param array - Array
 * @param item - Element
 */
function removeFromArray(array, item) {
    const index = array.indexOf(item);
    if (index < 0) {
        return false;
    }
    const last = array.length - 1;
    if (index !== last) {
        const end = array[last];
        array[index] = end;
    }
    array.length--;
    return true;
}
/**
 * Get the value of an object or array.
 * @param obj Object or Array.
 * @returns Object value array.
 */
function ObjectValues(obj) {
    return Object.keys(obj).map((key) => obj[key]);
}

/**
 * Used to update tags.
 */
class UpdateFlag {
    /** @internal */
    _flagManagers = [];
    /**
     * Clear.
     */
    clearFromManagers() {
        this._removeFromManagers();
        this._flagManagers.length = 0;
    }
    /**
     * Destroy.
     */
    destroy() {
        this._removeFromManagers();
        this._flagManagers = null;
    }
    _removeFromManagers() {
        const flagManagers = this._flagManagers;
        for (let i = 0, n = flagManagers.length; i < n; i++) {
            removeFromArray(flagManagers[i]._updateFlags, this);
        }
    }
}

/**
 * Used to update tags.
 */
class BoolUpdateFlag extends UpdateFlag {
    /** Flag. */
    flag = true;
    /**
     * @inheritdoc
     */
    dispatch() {
        this.flag = true;
    }
}

/**
 * @internal
 */
class UpdateFlagManager {
    /** @internal */
    _updateFlags = [];
    /**
     * Create a UpdateFlag.
     * @returns - The UpdateFlag.
     */
    createFlag(type) {
        const flag = new type();
        this.addFlag(flag);
        return flag;
    }
    /**
     * Add a UpdateFlag.
     * @param flag - The UpdateFlag.
     */
    addFlag(flag) {
        this._updateFlags.push(flag);
        flag._flagManagers.push(this);
    }
    /**
     * Dispatch.
     */
    dispatch(param) {
        const updateFlags = this._updateFlags;
        for (let i = updateFlags.length - 1; i >= 0; i--) {
            updateFlags[i].dispatch(param);
        }
    }
}

/**
 * Used to implement transformation related functions.
 */
class Transform {
    static _tempQuat0 = new Quaternion();
    static _tempVec30 = new Vector3();
    static _tempVec31 = new Vector3();
    static _tempVec32 = new Vector3();
    static _tempMat30 = new Matrix3();
    static _tempMat31 = new Matrix3();
    static _tempMat32 = new Matrix3();
    static _tempMat41 = new Matrix4();
    static _tempMat42 = new Matrix4();
    _position = new Vector3();
    _rotation = new Vector3();
    _rotationQuaternion = new Quaternion();
    _scale = new Vector3(1, 1, 1);
    _worldPosition = new Vector3();
    _worldRotation = new Vector3();
    _worldRotationQuaternion = new Quaternion();
    _lossyWorldScale = new Vector3(1, 1, 1);
    _localMatrix = new Matrix4();
    _worldMatrix = new Matrix4();
    _updateFlagManager = new UpdateFlagManager();
    _isParentDirty = true;
    _parentTransformCache = null;
    _entity;
    _dirtyFlag = TransformFlag.WmWpWeWqWs;
    /**
     * Local position.
     */
    get position() {
        return this._position;
    }
    set position(value) {
        if (this._position !== value) {
            value.cloneTo(this._position);
        }
    }
    /**
     * World position.
     */
    get worldPosition() {
        const worldPosition = this._worldPosition;
        if (this._isContainDirtyFlag(TransformFlag.WorldPosition)) {
            //@ts-ignore
            worldPosition._onValueChanged = null;
            // if (this._getParentTransform()) {
            {
                this._position.cloneTo(worldPosition);
            }
            //@ts-ignore
            worldPosition._onValueChanged = this._onWorldPositionChanged;
            this._setDirtyFlagFalse(TransformFlag.WorldPosition);
        }
        return worldPosition;
    }
    set worldPosition(value) {
        if (this._worldPosition !== value) {
            value.cloneTo(this._worldPosition);
        }
    }
    /**
     * Local rotation, defining the rotation value in degrees.
     * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.
     */
    get rotation() {
        const rotation = this._rotation;
        if (this._isContainDirtyFlag(TransformFlag.LocalEuler)) {
            //@ts-ignore
            rotation._onValueChanged = null;
            this._rotationQuaternion.toEuler(rotation);
            //@ts-ignore
            rotation._onValueChanged = this._onRotationChanged;
            rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees
            this._setDirtyFlagFalse(TransformFlag.LocalEuler);
        }
        return rotation;
    }
    set rotation(value) {
        if (this._rotation !== value) {
            value.cloneTo(this._rotation);
        }
    }
    /**
     * World rotation, defining the rotation value in degrees.
     * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.
     */
    get worldRotation() {
        const worldRotation = this._worldRotation;
        if (this._isContainDirtyFlag(TransformFlag.WorldEuler)) {
            //@ts-ignore
            worldRotation._onValueChanged = null;
            this.worldRotationQuaternion.toEuler(worldRotation);
            worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle
            //@ts-ignore
            worldRotation._onValueChanged = this._onWorldRotationChanged;
            this._setDirtyFlagFalse(TransformFlag.WorldEuler);
        }
        return worldRotation;
    }
    set worldRotation(value) {
        if (this._worldRotation !== value) {
            value.cloneTo(this._worldRotation);
        }
    }
    /**
     * Local rotation, defining the rotation by using a unit quaternion.
     */
    get rotationQuaternion() {
        const rotationQuaternion = this._rotationQuaternion;
        if (this._isContainDirtyFlag(TransformFlag.LocalQuat)) {
            //@ts-ignore
            rotationQuaternion._onValueChanged = null;
            Quaternion.rotationEuler(MathUtil.degreeToRadian(this._rotation.x), MathUtil.degreeToRadian(this._rotation.y), MathUtil.degreeToRadian(this._rotation.z), rotationQuaternion);
            //@ts-ignore
            rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;
            this._setDirtyFlagFalse(TransformFlag.LocalQuat);
        }
        return rotationQuaternion;
    }
    set rotationQuaternion(value) {
        if (this._rotationQuaternion !== value) {
            if (value.normalized) {
                value.cloneTo(this._rotationQuaternion);
            }
            else {
                Quaternion.normalize(value, this._rotationQuaternion);
            }
        }
        else {
            value.normalized || value.normalize();
        }
    }
    /**
     * World rotation, defining the rotation by using a unit quaternion.
     */
    get worldRotationQuaternion() {
        const worldRotationQuaternion = this._worldRotationQuaternion;
        if (this._isContainDirtyFlag(TransformFlag.WorldQuat)) {
            //@ts-ignore
            worldRotationQuaternion._onValueChanged = null;
            // const parent = this._getParentTransform();
            {
                this.rotationQuaternion.cloneTo(worldRotationQuaternion);
            }
            //@ts-ignore
            worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;
            this._setDirtyFlagFalse(TransformFlag.WorldQuat);
        }
        return worldRotationQuaternion;
    }
    set worldRotationQuaternion(value) {
        if (this._worldRotationQuaternion !== value) {
            if (value.normalized) {
                value.cloneTo(this._worldRotationQuaternion);
            }
            else {
                Quaternion.normalize(value, this._worldRotationQuaternion);
            }
        }
        value.normalized || value.normalize();
    }
    /**
     * Local scaling.
     */
    get scale() {
        return this._scale;
    }
    set scale(value) {
        if (this._scale !== value) {
            value.cloneTo(this._scale);
        }
    }
    /**
     * Local lossy scaling.
     * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,
     * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3.
     */
    get lossyWorldScale() {
        if (this._isContainDirtyFlag(TransformFlag.WorldScale)) {
            // if (this._getParentTransform()) {
            {
                this._scale.cloneTo(this._lossyWorldScale);
            }
            this._setDirtyFlagFalse(TransformFlag.WorldScale);
        }
        return this._lossyWorldScale;
    }
    /**
     * Local matrix.
     * @remarks Need to re-assign after modification to ensure that the modification takes effect.
     */
    get localMatrix() {
        if (this._isContainDirtyFlag(TransformFlag.LocalMatrix)) {
            Matrix4.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);
            this._setDirtyFlagFalse(TransformFlag.LocalMatrix);
        }
        return this._localMatrix;
    }
    set localMatrix(value) {
        if (this._localMatrix !== value) {
            value.cloneTo(this._localMatrix);
        }
        this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);
        this._setDirtyFlagTrue(TransformFlag.LocalEuler);
        this._setDirtyFlagFalse(TransformFlag.LocalMatrix);
        this._updateAllWorldFlag();
    }
    /**
     * World matrix.
     * @remarks Need to re-assign after modification to ensure that the modification takes effect.
     */
    get worldMatrix() {
        if (this._isContainDirtyFlag(TransformFlag.WorldMatrix)) {
            {
                this.localMatrix.cloneTo(this._worldMatrix);
            }
            this._setDirtyFlagFalse(TransformFlag.WorldMatrix);
        }
        return this._worldMatrix;
    }
    set worldMatrix(value) {
        if (this._worldMatrix !== value) {
            value.cloneTo(this._worldMatrix);
        }
        {
            value.cloneTo(this._localMatrix);
        }
        this.localMatrix = this._localMatrix;
        this._setDirtyFlagFalse(TransformFlag.WorldMatrix);
    }
    /**
     * @internal
     */
    constructor(entity = null) {
        this._entity = entity;
        this._onPositionChanged = this._onPositionChanged.bind(this);
        this._onWorldPositionChanged = this._onWorldPositionChanged.bind(this);
        this._onRotationChanged = this._onRotationChanged.bind(this);
        this._onWorldRotationChanged = this._onWorldRotationChanged.bind(this);
        this._onRotationQuaternionChanged = this._onRotationQuaternionChanged.bind(this);
        this._onWorldRotationQuaternionChanged = this._onWorldRotationQuaternionChanged.bind(this);
        this._onScaleChanged = this._onScaleChanged.bind(this);
        //@ts-ignore
        this._position._onValueChanged = this._onPositionChanged;
        //@ts-ignore
        this._worldPosition._onValueChanged = this._onWorldPositionChanged;
        //@ts-ignore
        this._rotation._onValueChanged = this._onRotationChanged;
        //@ts-ignore
        this._worldRotation._onValueChanged = this._onWorldRotationChanged;
        //@ts-ignore
        this._rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;
        //@ts-ignore
        this._worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;
        //@ts-ignore
        this._scale._onValueChanged = this._onScaleChanged;
    }
    /**
     * Set local position by X, Y, Z value.
     * @param x - X coordinate
     * @param y - Y coordinate
     * @param z - Z coordinate
     */
    setPosition(x, y, z) {
        this._position.setValue(x, y, z);
    }
    /**
     * Set local rotation by the X, Y, Z components of the euler angle, unit in degrees.
     * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.
     * @param x - The angle of rotation around the X axis
     * @param y - The angle of rotation around the Y axis
     * @param z - The angle of rotation around the Z axis
     */
    setRotation(x, y, z) {
        this._rotation.setValue(x, y, z);
    }
    /**
     * Set local rotation by the X, Y, Z, and W components of the quaternion.
     * @param x - X component of quaternion
     * @param y - Y component of quaternion
     * @param z - Z component of quaternion
     * @param w - W component of quaternion
     */
    setRotationQuaternion(x, y, z, w) {
        this._rotationQuaternion.setValue(x, y, z, w);
    }
    /**
     * Set local scaling by scaling values along X, Y, Z axis.
     * @param x - Scaling along X axis
     * @param y - Scaling along Y axis
     * @param z - Scaling along Z axis
     */
    setScale(x, y, z) {
        this._scale.setValue(x, y, z);
    }
    /**
     * Set world position by X, Y, Z value.
     * @param x - X coordinate
     * @param y - Y coordinate
     * @param z - Z coordinate
     */
    setWorldPosition(x, y, z) {
        this._worldPosition.setValue(x, y, z);
    }
    /**
     * Set world rotation by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.
     * @param x - The angle of rotation around the X axis
     * @param y - The angle of rotation around the Y axis
     * @param z - The angle of rotation around the Z axis
     */
    setWorldRotation(x, y, z) {
        this._worldRotation.setValue(x, y, z);
    }
    /**
     * Set local rotation by the X, Y, Z, and W components of the quaternion.
     * @param x - X component of quaternion
     * @param y - Y component of quaternion
     * @param z - Z component of quaternion
     * @param w - W component of quaternion
     */
    setWorldRotationQuaternion(x, y, z, w) {
        this._worldRotationQuaternion.setValue(x, y, z, w);
    }
    /**
     * Get the forward direction in world space.
     * @param forward - Forward vector
     * @returns Forward vector
     */
    getWorldForward(forward) {
        const e = this.worldMatrix.elements;
        forward.setValue(-e[8], -e[9], -e[10]);
        return forward.normalize();
    }
    /**
     * Get the right direction in world space.
     * @param right - Right vector
     * @returns Right vector
     */
    getWorldRight(right) {
        const e = this.worldMatrix.elements;
        right.setValue(e[0], e[1], e[2]);
        return right.normalize();
    }
    /**
     * Get the up direction in world space.
     * @param up - Up vector
     * @returns Up vector
     */
    getWorldUp(up) {
        const e = this.worldMatrix.elements;
        up.setValue(e[4], e[5], e[6]);
        return up.normalize();
    }
    translate(translationOrX, relativeToLocalOrY, z, relativeToLocal) {
        if (typeof translationOrX === 'number') {
            const translate = Transform._tempVec30;
            translate.setValue(translationOrX, relativeToLocalOrY, z);
            this._translate(translate, relativeToLocal);
        }
        else {
            this._translate(translationOrX, relativeToLocalOrY);
        }
    }
    rotate(rotationOrX, relativeToLocalOrY, z, relativeToLocal) {
        if (typeof rotationOrX === 'number') {
            this._rotateXYZ(rotationOrX, relativeToLocalOrY, z, relativeToLocal);
        }
        else {
            this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, relativeToLocalOrY);
        }
    }
    /**
     * Rotate around the specified axis according to the specified angle.
     * @param axis - Rotate axis
     * @param angle - Rotate angle in degrees
     * @param relativeToLocal - Relative to local space
     */
    rotateByAxis(axis, angle, relativeToLocal = true) {
        const rad = angle * MathUtil.degreeToRadFactor;
        Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);
        this._rotateByQuat(Transform._tempQuat0, relativeToLocal);
    }
    /**
     * Rotate and ensure that the world front vector points to the target world position.
     * @param targetPosition - Target world position
     * @param worldUp - Up direction in world space, default is Vector3(0, 1, 0)
     */
    lookAt(targetPosition, worldUp) {
        const zAxis = Transform._tempVec30;
        Vector3.subtract(this.worldPosition, targetPosition, zAxis);
        let axisLen = zAxis.length();
        if (axisLen <= MathUtil.zeroTolerance) {
            // The current position and the target position are almost the same.
            return;
        }
        zAxis.scale(1 / axisLen);
        const xAxis = Transform._tempVec31;
        if (worldUp) {
            Vector3.cross(worldUp, zAxis, xAxis);
        }
        else {
            xAxis.setValue(zAxis.z, 0, -zAxis.x);
        }
        axisLen = xAxis.length();
        if (axisLen <= MathUtil.zeroTolerance) {
            // @todo:
            // 1.worldup is（0,0,0）
            // 2.worldUp is parallel to zAxis
            return;
        }
        xAxis.scale(1 / axisLen);
        const yAxis = Transform._tempVec32;
        Vector3.cross(zAxis, xAxis, yAxis);
        const rotMat = Transform._tempMat41;
        const { elements: e } = rotMat;
        (e[0] = xAxis.x), (e[1] = xAxis.y), (e[2] = xAxis.z);
        (e[4] = yAxis.x), (e[5] = yAxis.y), (e[6] = yAxis.z);
        (e[8] = zAxis.x), (e[9] = zAxis.y), (e[10] = zAxis.z);
        rotMat.getRotation(this._worldRotationQuaternion);
    }
    /**
     * Register world transform change flag.
     * @returns Change flag
     */
    registerWorldChangeFlag() {
        return this._updateFlagManager.createFlag(BoolUpdateFlag);
    }
    /**
     * @internal
     */
    _parentChange() {
        this._isParentDirty = true;
        this._updateAllWorldFlag();
    }
    /**
     * @internal
     */
    _isFrontFaceInvert() {
        const scale = this.lossyWorldScale;
        let isInvert = scale.x < 0;
        scale.y < 0 && (isInvert = !isInvert);
        scale.z < 0 && (isInvert = !isInvert);
        return isInvert;
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.
     */
    _updateWorldPositionFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWp)) {
            this._worldAssociatedChange(TransformFlag.WmWp);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionFlag();
            }
        }
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.
     * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.
     */
    _updateWorldRotationFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWeWq)) {
            this._worldAssociatedChange(TransformFlag.WmWeWq);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.
            }
        }
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.
     * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.
     */
    _updateWorldPositionAndRotationFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWq)) {
            this._worldAssociatedChange(TransformFlag.WmWpWeWq);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();
            }
        }
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * Get worldScale: Will trigger the scaling update of itself and all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.
     */
    _updateWorldScaleFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWs)) {
            this._worldAssociatedChange(TransformFlag.WmWs);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();
            }
        }
    }
    /**
     * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.
     * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.
     * Get worldScale: Will trigger the scaling update of itself and all parent entities.
     * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.
     */
    _updateWorldPositionAndScaleFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWpWs)) {
            this._worldAssociatedChange(TransformFlag.WmWpWs);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();
            }
        }
    }
    /**
     * Update all world transform property dirty flag, the principle is the same as above.
     */
    _updateAllWorldFlag() {
        if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWqWs)) {
            this._worldAssociatedChange(TransformFlag.WmWpWeWqWs);
            // const nodeChildren = this._entity._children;
            const nodeChildren = [];
            for (let i = 0, n = nodeChildren.length; i < n; i++) {
                nodeChildren[i].transform?._updateAllWorldFlag();
            }
        }
    }
    _getParentTransform() {
        if (!this._isParentDirty) {
            return this._parentTransformCache;
        }
        let parentCache = null;
        let parent = this._entity.parent;
        while (parent) {
            const transform = parent.transform;
            if (transform) {
                parentCache = transform;
                break;
            }
            else {
                parent = parent.parent;
            }
        }
        this._parentTransformCache = parentCache;
        this._isParentDirty = false;
        return parentCache;
    }
    _getScaleMatrix() {
        const invRotation = Transform._tempQuat0;
        const invRotationMat = Transform._tempMat30;
        const worldRotScaMat = Transform._tempMat31;
        const scaMat = Transform._tempMat32;
        worldRotScaMat.setValueByMatrix(this.worldMatrix);
        Quaternion.invert(this.worldRotationQuaternion, invRotation);
        Matrix3.rotationQuaternion(invRotation, invRotationMat);
        Matrix3.multiply(invRotationMat, worldRotScaMat, scaMat);
        return scaMat;
    }
    _isContainDirtyFlags(targetDirtyFlags) {
        return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;
    }
    _isContainDirtyFlag(type) {
        return (this._dirtyFlag & type) != 0;
    }
    _setDirtyFlagTrue(type) {
        this._dirtyFlag |= type;
    }
    _setDirtyFlagFalse(type) {
        this._dirtyFlag &= ~type;
    }
    _worldAssociatedChange(type) {
        this._dirtyFlag |= type;
        this._updateFlagManager.dispatch();
    }
    _rotateByQuat(rotateQuat, relativeToLocal) {
        if (relativeToLocal) {
            Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);
        }
        else {
            Quaternion.multiply(rotateQuat, this.worldRotationQuaternion, this._worldRotationQuaternion);
        }
    }
    _translate(translation, relativeToLocal = true) {
        if (relativeToLocal) {
            this._position.add(translation);
        }
        else {
            this._worldPosition.add(translation);
        }
    }
    _rotateXYZ(x, y, z, relativeToLocal = true) {
        const radFactor = MathUtil.degreeToRadFactor;
        const rotQuat = Transform._tempQuat0;
        Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);
        this._rotateByQuat(rotQuat, relativeToLocal);
    }
    _onPositionChanged() {
        this._setDirtyFlagTrue(TransformFlag.LocalMatrix);
        this._updateWorldPositionFlag();
    }
    _onWorldPositionChanged() {
        const worldPosition = this._worldPosition;
        {
            worldPosition.cloneTo(this._position);
        }
        this._setDirtyFlagFalse(TransformFlag.WorldPosition);
    }
    _onRotationChanged() {
        this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalQuat);
        this._setDirtyFlagFalse(TransformFlag.LocalEuler);
        this._updateWorldRotationFlag();
    }
    _onWorldRotationChanged() {
        const worldRotation = this._worldRotation;
        Quaternion.rotationEuler(MathUtil.degreeToRadian(worldRotation.x), MathUtil.degreeToRadian(worldRotation.y), MathUtil.degreeToRadian(worldRotation.z), this._worldRotationQuaternion);
        this._setDirtyFlagFalse(TransformFlag.WorldEuler);
    }
    _onRotationQuaternionChanged() {
        this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalEuler);
        this._setDirtyFlagFalse(TransformFlag.LocalQuat);
        this._updateWorldRotationFlag();
    }
    _onWorldRotationQuaternionChanged() {
        const worldRotationQuaternion = this._worldRotationQuaternion;
        {
            worldRotationQuaternion.cloneTo(this._rotationQuaternion);
        }
        this._setDirtyFlagFalse(TransformFlag.WorldQuat);
    }
    _onScaleChanged() {
        this._setDirtyFlagTrue(TransformFlag.LocalMatrix);
        this._updateWorldScaleFlag();
    }
}
/**
 * Dirty flag of transform.
 */
var TransformFlag;
(function (TransformFlag) {
    TransformFlag[TransformFlag["LocalEuler"] = 1] = "LocalEuler";
    TransformFlag[TransformFlag["LocalQuat"] = 2] = "LocalQuat";
    TransformFlag[TransformFlag["WorldPosition"] = 4] = "WorldPosition";
    TransformFlag[TransformFlag["WorldEuler"] = 8] = "WorldEuler";
    TransformFlag[TransformFlag["WorldQuat"] = 16] = "WorldQuat";
    TransformFlag[TransformFlag["WorldScale"] = 32] = "WorldScale";
    TransformFlag[TransformFlag["LocalMatrix"] = 64] = "LocalMatrix";
    TransformFlag[TransformFlag["WorldMatrix"] = 128] = "WorldMatrix";
    /** WorldMatrix | WorldPosition */
    // 132
    TransformFlag[TransformFlag["WmWp"] = 132] = "WmWp";
    /** WorldMatrix | WorldEuler | WorldQuat */
    // 152
    TransformFlag[TransformFlag["WmWeWq"] = 152] = "WmWeWq";
    /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */
    // 156
    TransformFlag[TransformFlag["WmWpWeWq"] = 156] = "WmWpWeWq";
    /** WorldMatrix | WorldScale */
    // 160
    TransformFlag[TransformFlag["WmWs"] = 160] = "WmWs";
    /** WorldMatrix | WorldPosition | WorldScale */
    // 164
    TransformFlag[TransformFlag["WmWpWs"] = 164] = "WmWpWs";
    /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */
    // 11 * 16 + 12 = 188
    TransformFlag[TransformFlag["WmWpWeWqWs"] = 188] = "WmWpWeWqWs";
})(TransformFlag || (TransformFlag = {}));

/**
 * Camera.
 */
class Camera {
    // 把引擎也引进来主要是为了获取到canvas的宽高
    // 便于设置透视投影矩阵与宽高比
    // TODO待重构，抽出一个Component
    _engine;
    // 主要是为了让OrbitControl获取到canvas
    get engine() {
        return this._engine;
    }
    transform;
    static _viewMatrixProperty = Shader.getPropertyByName('u_viewMat');
    static _projectionMatrixProperty = Shader.getPropertyByName('u_projMat');
    static _inverseVPMatrixProperty = Shader.getPropertyByName('u_invVPMat');
    static _vpMatrixProperty = Shader.getPropertyByName('u_vpMat');
    static _cameraPositionProperty = Shader.getPropertyByName('u_cameraPos');
    static _cameraPosSquaredProperty = Shader.getPropertyByName('u_cameraPosSquared');
    /**
     * Compute the inverse of the rotation translation matrix.
     * @param rotation - The rotation used to calculate matrix
     * @param translation - The translation used to calculate matrix
     * @param out - The calculated matrix
     */
    static _rotationTranslationInv(rotation, translation, out) {
        const oe = out.elements;
        const { x, y, z, w } = rotation;
        let x2 = x + x;
        let y2 = y + y;
        let z2 = z + z;
        let xx = x * x2;
        let xy = x * y2;
        let xz = x * z2;
        let yy = y * y2;
        let yz = y * z2;
        let zz = z * z2;
        let wx = w * x2;
        let wy = w * y2;
        let wz = w * z2;
        oe[0] = 1 - (yy + zz);
        oe[1] = xy + wz;
        oe[2] = xz - wy;
        oe[3] = 0;
        oe[4] = xy - wz;
        oe[5] = 1 - (xx + zz);
        oe[6] = yz + wx;
        oe[7] = 0;
        oe[8] = xz + wy;
        oe[9] = yz - wx;
        oe[10] = 1 - (xx + yy);
        oe[11] = 0;
        oe[12] = translation.x;
        oe[13] = translation.y;
        oe[14] = translation.z;
        oe[15] = 1;
        out.invert();
    }
    /** Shader data. */
    shaderData = new ShaderData(ShaderDataGroup.Camera);
    /** Rendering priority - A Camera with higher priority will be rendered on top of a camera with lower priority. */
    priority = 0;
    orbitControl;
    _isOrthographic = false;
    _nearClipPlane = 0.1;
    _farClipPlane = 100;
    _fieldOfView = 45;
    _orthographicSize = 10;
    // TODO
    _customAspectRatio = undefined;
    _projectionMatrix = new Matrix4();
    _viewMatrix = new Matrix4();
    _viewport = new Vector4(0, 0, 1, 1);
    // 这个东西有什么用呢
    _lastAspectSize = new Vector2(0, 0);
    get viewMatrix() {
        Camera._rotationTranslationInv(this.transform.worldRotationQuaternion, this.transform.worldPosition, this._viewMatrix);
        return this._viewMatrix;
    }
    set projectionMatrix(value) {
        this._projectionMatrix = value;
    }
    get projectionMatrix() {
        const canvas = this._engine.canvas;
        this._lastAspectSize.x = canvas.width;
        this._lastAspectSize.y = canvas.height;
        const aspectRatio = this.aspectRatio;
        if (!this._isOrthographic) {
            Matrix4.perspective(MathUtil.degreeToRadian(this._fieldOfView), aspectRatio, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);
        }
        else {
            const width = this._orthographicSize * aspectRatio;
            const height = this._orthographicSize;
            Matrix4.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);
        }
        return this._projectionMatrix;
    }
    /**
     * Near clip plane - the closest point to the camera when rendering occurs.
     */
    get nearClipPlane() {
        return this._nearClipPlane;
    }
    set nearClipPlane(value) {
        this._nearClipPlane = value;
    }
    /**
     * Far clip plane - the furthest point to the camera when rendering occurs.
     */
    get farClipPlane() {
        return this._farClipPlane;
    }
    set farClipPlane(value) {
        this._farClipPlane = value;
    }
    /**
     * The camera's view angle. activating when camera use perspective projection.
     */
    get fieldOfView() {
        return this._fieldOfView;
    }
    set fieldOfView(value) {
        this._fieldOfView = value;
    }
    // 获取宽高比
    get aspectRatio() {
        const canvas = this._engine.canvas;
        // TODO: 考虑视口
        return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);
    }
    set aspectRatio(value) {
        this._customAspectRatio = value;
    }
    /**
     * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).
     * @remarks Re-assignment is required after modification to ensure that the modification takes effect.
     */
    get viewport() {
        return this._viewport;
    }
    set viewport(value) {
        if (value !== this._viewport) {
            value.cloneTo(this._viewport);
        }
    }
    /**
     * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.
     */
    get isOrthographic() {
        return this._isOrthographic;
    }
    set isOrthographic(value) {
        this._isOrthographic = value;
    }
    get orthographicSize() {
        return this._orthographicSize;
    }
    set orthographicSize(value) {
        this._orthographicSize = value;
    }
    // TODO： 其实Entity和Camera应该再抽象上一层Component
    constructor(engine) {
        this._engine = engine;
        this.transform = new Transform();
        this.orbitControl = new OrbitControl(this);
    }
    /**
     * Upload camera-related shader data.
     */
    _updateShaderData() {
        const shaderData = this.shaderData;
        const vpMat = new Matrix4();
        // 需要把逆矩阵单独搞一个变量，因为是引用类型，赋值并没有开辟新对象
        const invVpMat = new Matrix4();
        const cameraPos = this.transform.worldPosition;
        const cameraPosSquared = new Vector3();
        // 注意顺序：perspect * view * model
        Matrix4.multiply(this.projectionMatrix, this.viewMatrix, vpMat);
        Matrix4.invert(vpMat, invVpMat);
        Vector3.multiply(cameraPos, cameraPos, cameraPosSquared);
        // TODO: 应该把VP矩阵都成好再传给gl，封装common shader的时候再做
        shaderData.setMatrix(Camera._viewMatrixProperty, this.viewMatrix);
        shaderData.setMatrix(Camera._projectionMatrixProperty, this.projectionMatrix);
        shaderData.setMatrix(Camera._vpMatrixProperty, vpMat);
        shaderData.setMatrix(Camera._inverseVPMatrixProperty, invVpMat);
        shaderData.setVector3(Camera._cameraPositionProperty, cameraPos);
        shaderData.setVector3(Camera._cameraPosSquaredProperty, cameraPosSquared);
    }
    /**
     * The upload method is triggered by render.
     */
    render() {
        this._updateShaderData();
    }
}

/**
 * Lighting model base class.
 */
class Light {
    // TODO: 这个抽的不好，只有点光源需要位
    /** Light source position. */
    transform;
    _viewMat;
    _inverseViewMat;
    // 这个暂时没什么用
    // 因为我们的点光源采用的是世界坐标系
    /**
     * Get the view matrix of the light source position.
     */
    get viewMatrix() {
        if (!this._viewMat)
            this._viewMat = new Matrix4();
        Matrix4.invert(this.transform.worldMatrix, this._viewMat);
        return this._viewMat;
    }
    /**
     * Get the inverse of the view matrix for the light source position.
     */
    get inverseViewMatrix() {
        if (!this._inverseViewMat)
            this._inverseViewMat = new Matrix4();
        Matrix4.invert(this.viewMatrix, this._inverseViewMat);
        return this._inverseViewMat;
    }
    constructor() {
        this.transform = new Transform();
    }
}

/**
 * Point light.
 */
class PointLight extends Light {
    // 因为可能有多个点光源
    /** Get the address of the point light color uniform variable in the shader. */
    static _colorProperty = Shader.getPropertyByName('u_pointLightColor');
    /** Get the address of the uniform variable of the point light position in the shader. */
    static _positionProperty = Shader.getPropertyByName('u_pointLightPosition');
    /** Blend object of color and position. */
    static _combinedData = {
        color: new Float32Array(3),
        position: new Float32Array(3),
    };
    // 白光不管和什么光相乘，都保留颜色
    /** The color of the light, the default is white light. */
    color = new Color(1, 1, 1, 1);
    /** Intensity of light. */
    intensity = 1.0;
    /** Final light color. */
    _lightColor = new Color(1, 1, 1, 1);
    /** Get the position of a point light. */
    get position() {
        return this.transform.worldPosition;
    }
    /**
     * Get the final light color.
     */
    get lightColor() {
        this._lightColor.r = this.color.r * this.intensity;
        this._lightColor.g = this.color.g * this.intensity;
        this._lightColor.b = this.color.b * this.intensity;
        this._lightColor.a = this.color.a * this.intensity;
        return this._lightColor;
    }
    constructor(position) {
        super();
        this.transform.worldPosition = position;
    }
    /**
     * Set variable value in shader.
     * @param shaderData Shader data.
     */
    _updateShaderData(shaderData) {
        this._appendData();
        const data = PointLight._combinedData;
        shaderData.setFloatArray(PointLight._colorProperty, data.color);
        shaderData.setFloatArray(PointLight._positionProperty, data.position);
    }
    /**
     * Populate federated data.
     */
    _appendData() {
        const data = PointLight._combinedData;
        const lightColor = this.lightColor;
        const lightPosition = this.position;
        data.color[0] = lightColor.r;
        data.color[1] = lightColor.g;
        data.color[2] = lightColor.b;
        data.position[0] = lightPosition.x;
        data.position[1] = lightPosition.y;
        data.position[2] = lightPosition.z;
    }
}

// 这个不用继承Light，因为只需要颜色
/**
 * Ambient light.
 */
class AmbientLight {
    /** Get the address of the point ambient color uniform variable in the shader. */
    static _colorProperty = Shader.getPropertyByName('u_diffuseSpecularAmbientShininess');
    /** The color of the light. */
    color;
    constructor(color) {
        this.color = color;
    }
    /**
     * Set variable value in shader.
     * @param shaderData Shader data.
     */
    _updateShaderData(shaderData) {
        const color = this.color;
        const ambientColor = new Float32Array([color.r, color.g, color.b, color.a]);
        shaderData.setFloatArray(AmbientLight._colorProperty, ambientColor);
    }
}

class Ellipsoid {
    static Wgs84 = new Ellipsoid(6378137.0, 6378137.0, 6356752.314245);
    static ScaledWgs84 = new Ellipsoid(1.0, 1.0, 6356752.314245 / 6378137.0);
    static UnitSphere = new Ellipsoid(1.0, 1.0, 1.0);
    _radii;
    _radiiSquared;
    _oneOverRadiiSquared;
    /** The tree radii of the ellipsoid. */
    get radii() {
        return this._radii;
    }
    /** The squares corresponding to the three radii of the ellipsoid. */
    get radiiSquared() {
        return this._radiiSquared;
    }
    /** The inverse of the square corresponding to the three radii of the ellipsoid. */
    get oneOverRadiiSquared() {
        return this._oneOverRadiiSquared;
    }
    constructor(a, b, c) {
        if (a <= 0 || b <= 0 || c <= 0) {
            throw new Error('Ellipsoid parameters are not allowed to be set to less than or equal to 0.');
        }
        this._radii = new Vector3(a, b, c);
        this._radiiSquared = new Vector3(a * a, b * b, c * c);
        this._oneOverRadiiSquared = new Vector3(1 / (this._radii.x * this._radii.x), 1 / (this._radii.y * this._radii.y), 1 / (this._radii.z * this._radii.z));
    }
}

class RayCastedGlobe {
    _shape = Ellipsoid.ScaledWgs84;
    _shader = Shader.find('rayCastedGlobe');
    _mesh;
    _material;
    /** The collection of entities under the earth. */
    entities = [];
    /** The ellipsoid parameters corresponding to the sphere. */
    get shape() {
        return this._shape;
    }
    /** Cube mesh for GPU ray tracing. */
    get mesh() {
        return this._mesh;
    }
    /** The material of the sphere selection. */
    get material() {
        return this._material;
    }
    /** The shader of the sphere. */
    get shader() {
        return this._shader;
    }
    constructor(engine) {
        this._mesh = PrimitiveMesh.createCuboid(engine);
        this._material = new ImageMaterial(engine, this.shader, earthUrl);
    }
}

// TODO: 抽象出来一个EngineObject!!!!
class Scene {
    shaderData = new ShaderData(ShaderDataGroup.Scene);
    /** The engine the scene belongs to. */
    engine;
    /** Cameras in the scene, we only consider the case where there is only one camera in the scene. */
    camera;
    // TODO: 要想在这里使用你就的先抽象出来
    /** The background of the scene, the default is the skybox. */
    background;
    // TODO: 可能有多个点光源
    /** Point lights in the scene. */
    pointLight;
    /** Ambient light in the scene. */
    ambientLight;
    /** Earth is the root entity in the scene. */
    _globe;
    get globe() {
        return this._globe;
    }
    /**
     * The camera and the earth are loaded by default inside the constructor.
     * @param engine The engine the scene belongs to.
     */
    constructor(engine) {
        this.engine = engine;
        // 初始化场景相机
        this.camera = new Camera(engine);
        this.camera.transform.position = new Vector3(0, 0, 3);
        this.camera.transform.lookAt(new Vector3(0, 0, 0));
        // 初始化场景地球
        this._globe = new RayCastedGlobe(engine);
        // 初始化背景，即天空盒
        this.background = new Background(this.engine);
        // 初始化场景点光源
        this.pointLight = new PointLight(new Vector3(0, 0, 10));
        this.pointLight._updateShaderData(this.shaderData);
        // 初始化场景环境光
        this.ambientLight = new AmbientLight(new Color(0.2, 0.2, 0.2, 1));
        this.ambientLight._updateShaderData(this.shaderData);
    }
}

/**
 * Entity classes in the scene.
 */
class Entity {
    /** Entity count. */
    static _count = 1;
    /** Entity count. */
    id;
    /** Entity name. */
    name;
    /** Entity mesh. */
    mesh;
    /** Entity material. */
    material;
    /** Parent entity id. */
    parent;
    /** Entity childrens. */
    _children;
    /** Entity ransform. */
    transform;
    /**
     * An entity consists of meshes and materials.
     * @param name Entity name.
     * @param mesh Entity mesh.
     * @param material Entity material.
     */
    constructor(name, mesh, material) {
        this.name = name;
        this.id = Entity._count++;
        this.mesh = mesh;
        this.material = material;
        this.transform = new Transform(this);
    }
    /**
     * Add child entities.
     * @param entity Child entities to be loaded.
     * @returns The number of child entities.
     */
    addEntity(entity) {
        if (entity instanceof Entity) {
            if (this._children == null) {
                this._children = [];
            }
            this._children.push(entity);
        }
        return this._children.length;
    }
}

/**
 * Encapsulate canvas tag.
 */
class Canvas {
    /** HTML canvas element. */
    _canvas;
    _width;
    _height;
    /** Canvas element width. */
    get width() {
        return this._width;
    }
    set width(value) {
        if (this._width !== value) {
            this._canvas.width = value;
            this._width = value;
        }
    }
    /** Canvas element height. */
    get height() {
        return this._height;
    }
    set height(value) {
        if (this._height !== value) {
            this._canvas.height = value;
            this._height = value;
        }
    }
    /**
     * Resize by client size.
     * @param pixelRatio Device pixel ratio.
     */
    resizeByClientSize(pixelRatio = window.devicePixelRatio) {
        const webCanvas = this._canvas;
        if (webCanvas instanceof HTMLCanvasElement) {
            this.width = webCanvas.clientWidth * pixelRatio;
            this.height = webCanvas.clientHeight * pixelRatio;
        }
    }
    /**
     * Wrap the canvas element.
     * @param canvas HTML canvas element.
     */
    constructor(canvas) {
        const width = canvas.width;
        const height = canvas.height;
        this._canvas = canvas;
        this._width = width;
        this._height = height;
        // TODO: 做的不好，应该想个优雅的方法
        window.addEventListener('resize', () => {
            this.resizeByClientSize();
        });
    }
}

/**
 * Tools for calculating the time per frame.
 */
class Time {
    _clock;
    _timeScale;
    _deltaTime;
    _startTime;
    _lastTickTime;
    /**
     * Constructor of the Time.
     */
    constructor() {
        this._clock = performance ? performance : Date;
        this._timeScale = 1.0;
        this._deltaTime = 0.0001;
        const now = this._clock.now();
        this._startTime = now;
        this._lastTickTime = now;
    }
    /**
     * Set the current time as the end of rendering marker.
     */
    reset() {
        this._lastTickTime = this._clock.now();
    }
    /**
     * Current Time
     */
    get nowTime() {
        return this._clock.now();
    }
    /**
     * Time between two ticks
     */
    get deltaTime() {
        return this._deltaTime;
    }
    /**
     * Scaled delta time.
     */
    get timeScale() {
        return this._timeScale;
    }
    set timeScale(s) {
        this._timeScale = s;
    }
    /**
     * Unscaled delta time.
     */
    get unscaledDeltaTime() {
        return this._deltaTime / this._timeScale;
    }
    /**
     * The elapsed time, after the clock is initialized.
     */
    get timeSinceStartup() {
        return this.nowTime - this._startTime;
    }
    /**
     * Call every frame, update delta time and other data.
     */
    tick() {
        const now = this.nowTime;
        this._deltaTime = (now - this._lastTickTime) * this._timeScale;
        this._lastTickTime = now;
    }
}

var skyboxFs = "precision mediump float;\n#define GLSLIFY 1\nuniform samplerCube u_Skybox;uniform mat4 u_invVPMat;varying vec4 v_position;void main(){vec4 t=u_invVPMat*v_position;gl_FragColor=textureCube(u_Skybox,normalize(t.xyz/t.w));}"; // eslint-disable-line

var skyboxVs = "#define GLSLIFY 1\nattribute vec3 POSITION;varying vec4 v_position;void main(){gl_Position=vec4(POSITION,1.0);v_position=gl_Position;gl_Position.z=1.0;}"; // eslint-disable-line

var rayCastedGlobeFs = "precision mediump float;\n#define GLSLIFY 1\nconst float oneOverTwoPi=0.15915494309189535;const float oneOverPi=0.3183098861837907;varying vec3 v_worldPosition;uniform vec3 u_cameraPos;uniform vec3 u_cameraPosSquared;uniform vec3 u_globeOneOverRadiiSquared;uniform vec3 u_pointLightPosition;uniform sampler2D u_sampler;uniform vec4 u_diffuseSpecularAmbientShininess;struct Intersection{bool Intersects;float NearTime;float FarTime;};Intersection RayIntersectEllipsoid(vec3 rayOrigin,vec3 rayOriginSquared,vec3 rayDirection,vec3 oneOverEllipsoidRadiiSquared){float a=dot(rayDirection*rayDirection,oneOverEllipsoidRadiiSquared);float b=2.0*dot(rayOrigin*rayDirection,oneOverEllipsoidRadiiSquared);float c=dot(rayOriginSquared,oneOverEllipsoidRadiiSquared)-1.0;float discriminant=b*b-4.0*a*c;if(discriminant<0.0){return Intersection(false,0.0,0.0);}else if(discriminant==0.0){float time=-0.5*b/a;return Intersection(true,time,time);}float t=-0.5*(b+(b>0.0 ? 1.0 :-1.0)*sqrt(discriminant));float root1=t/a;float root2=c/t;return Intersection(true,min(root1,root2),max(root1,root2));}vec3 GeodeticSurfaceNormal(vec3 positionOnEllipsoid,vec3 oneOverEllipsoidRadiiSquared){return normalize(positionOnEllipsoid*oneOverEllipsoidRadiiSquared);}float LightIntensity(vec3 normal,vec3 toLight,vec3 toEye,vec4 diffuseSpecularAmbientShininess){vec3 toReflectedLight=reflect(-toLight,normal);float diffuse=max(dot(toLight,normal),0.0);float specular=max(dot(toReflectedLight,toEye),0.0);specular=pow(specular,diffuseSpecularAmbientShininess.w);return(diffuseSpecularAmbientShininess.x*diffuse)+(diffuseSpecularAmbientShininess.y*specular)+diffuseSpecularAmbientShininess.z;}vec2 ComputeTextureCoordinates(vec3 normal){return vec2(atan(normal.y,normal.x)*oneOverTwoPi+0.5,asin(normal.z)*oneOverPi+0.5);}void main(){vec3 rayDirection=normalize(v_worldPosition-u_cameraPos);Intersection i=RayIntersectEllipsoid(u_cameraPos,u_cameraPosSquared,rayDirection,u_globeOneOverRadiiSquared);if(i.Intersects){vec3 position=u_cameraPos+(i.NearTime*rayDirection);vec3 normal=GeodeticSurfaceNormal(position,u_globeOneOverRadiiSquared);vec3 toLight=normalize(u_pointLightPosition-position);vec3 toEye=normalize(u_cameraPos-position);float intensity=LightIntensity(normal,toLight,toEye,u_diffuseSpecularAmbientShininess);gl_FragColor=vec4(intensity*texture2D(u_sampler,ComputeTextureCoordinates(normal)).rgb,1.0);}else{discard;}}"; // eslint-disable-line

var rayCastedGlobeVs = "#define GLSLIFY 1\nattribute vec3 POSITION;uniform mat4 u_vpMat;varying vec3 v_worldPosition;void main(){gl_Position=u_vpMat*vec4(POSITION,1.0);v_worldPosition=POSITION;}"; // eslint-disable-line

var commonFs = "precision mediump float;\n#define GLSLIFY 1\nvarying vec3 v_worldPostion;varying vec2 v_TexCoord;uniform sampler2D u_Sampler;uniform vec3 u_pointLightPosition;uniform vec3 u_pointLightColor;uniform vec3 u_ambientightColor;void main(){vec3 normal=normalize(v_worldPostion);vec3 lightDirection=normalize(u_pointLightPosition-v_worldPostion);float nDotL=max(dot(lightDirection,normal),0.0);vec4 textureColor=texture2D(u_Sampler,v_TexCoord);vec3 diffuse=u_pointLightColor*textureColor.rgb*nDotL;vec3 ambient=u_ambientightColor*textureColor.rgb;gl_FragColor=vec4(diffuse+ambient,textureColor.a);}"; // eslint-disable-line

var commonVs = "#define GLSLIFY 1\nattribute vec3 POSITION;attribute vec3 NORMAL;attribute vec2 TEXCOORD_0;uniform mat4 u_viewMat;uniform mat4 u_projMat;varying vec3 v_worldPostion;varying vec2 v_TexCoord;void main(){gl_Position=u_projMat*u_viewMat*vec4(POSITION,1.0);v_worldPostion=POSITION;v_TexCoord=TEXCOORD_0;}"; // eslint-disable-line

/**
 * Engine built-in shader pool.
 */
class ShaderPool {
    /**
     * Created by Shader based on fragment and vertex shader code.
     */
    static init() {
        Shader.create('skybox', skyboxVs, skyboxFs);
        Shader.create('common', commonVs, commonFs);
        Shader.create('rayCastedGlobe', rayCastedGlobeVs, rayCastedGlobeFs);
    }
}

// 引入引擎的时候就将ShaderPool进行初始化
ShaderPool.init();
/**
 * The engine is the big steward of all content.
 */
class Engine {
    /** The canvas corresponding to the engine. */
    _canvas;
    // TODO: 考虑接入WebGL2.
    /** WebGL rendering context. */
    _gl;
    /** Current active scene. */
    activeScene;
    /** Used to calculate the interval between each frame rendering. */
    _time = new Time();
    /** Easy to destroy RAF. */
    _requestId;
    /** Rendered 2D texture when the image has not been loaded yet. */
    _whiteTexture2D;
    /** Rendered cube texture when the image has not been loaded yet. */
    _whiteTextureCube;
    get canvas() {
        return this._canvas;
    }
    get gl() {
        return this._gl;
    }
    get time() {
        return this._time;
    }
    /**
     * Animation rendering.
     */
    _animate = () => {
        this._requestId = requestAnimationFrame(this._animate);
        this.update();
    };
    /**
     * Engine instance.
     * @param canvasId HTML canvas id.
     */
    constructor(canvasId) {
        const canvas = document.getElementById(canvasId);
        if (canvas instanceof HTMLCanvasElement) {
            this._canvas = new Canvas(canvas);
            this._canvas.resizeByClientSize();
        }
        else {
            throw `canvas is not a HTMLCanvasElement!`;
        }
        const gl = canvas.getContext('webgl', {});
        if (!gl)
            throw `init webgl rendering context failure!`;
        this._gl = gl;
        // ! 这样实例化场景好吗？？？
        this.activeScene = new Scene(this);
        const whitePixel = new Uint8Array([255, 255, 255, 255]);
        const whiteTexture2D = new Texture2D(this, 1, 1, TextureFormat.R8G8B8A8, false);
        whiteTexture2D.setPixelBuffer(whitePixel);
        const whiteTextureCube = new TextureCube(this, 1, TextureFormat.R8G8B8A8, false);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveX, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeX, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveY, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeY, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveZ, whitePixel);
        whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeZ, whitePixel);
        this._whiteTexture2D = whiteTexture2D;
        this._whiteTextureCube = whiteTextureCube;
    }
    /**
     * Update all data.
     */
    update() {
        const time = this._time;
        const deltaTime = time.deltaTime;
        const camera = this.activeScene.camera;
        // 更新相机位置信息
        camera.orbitControl.onUpdate(deltaTime);
        time.tick();
        this._render();
    }
    /**
     * Render based on updated data.
     */
    _render() {
        const gl = this._gl;
        gl.viewport(0, 0, this.canvas.width, this.canvas.height);
        // 这个放这没问题，不然背景画不出来
        gl.depthFunc(gl.LESS);
        // TODO: 这些状态不应该每次都进行获取
        const scene = this.activeScene;
        const globe = scene.globe;
        const camera = scene.camera;
        camera && camera.render();
        // 首先渲染地球
        const { mesh, material } = globe;
        const globeProgram = material.shader._getShaderProgram(this);
        globeProgram.uploadAll(globeProgram.sceneUniformBlock, scene.shaderData);
        globeProgram.uploadAll(globeProgram.cameraUniformBlock, camera.shaderData);
        globeProgram.uploadAll(globeProgram.materialUniformBlock, material.shaderData);
        mesh._draw(globeProgram, mesh.subMesh);
        // TODO: 这里要改成递归场景树渲染
        // entities.forEach((entity) => {
        //   const { mesh, material } = entity;
        //   // ! 这里每次都要去编译shader代码！！！
        //   // TODO: ShaderProgramPool
        //   const program = material.shader._getShaderProgram(this);
        //   // 上传相机的数据，这里还需要上传其他模块的数据，比如：场景，材质等
        //   // 场景的shaderData主要是光线
        //   // ! 这里每个实体都要
        //   program.uploadAll(program.sceneUniformBlock, scene.shaderData);
        //   program.uploadAll(program.cameraUniformBlock, camera.shaderData);
        //   program.uploadAll(program.materialUniformBlock, material.shaderData);
        //   mesh._draw(program, mesh.subMesh);
        // });
        // 最后渲染背景
        // gl.depthFunc(gl.LEQUAL);
        // const { _mesh, _material } = scene.background;
        // // ! 每次渲染都去实例化不可以！而且bind不应该放在构造函数，否则无法切换program
        // const skyProgram = _material.shader._getShaderProgram(this);
        // skyProgram.uploadAll(skyProgram.cameraUniformBlock, camera.shaderData);
        // skyProgram.uploadAll(skyProgram.materialUniformBlock, _material.shaderData);
        // _mesh._draw(skyProgram, _mesh.subMesh);
    }
    /**
     * Timing and rendering.
     */
    resume() {
        this.time.reset();
        this._requestId = requestAnimationFrame(this._animate);
    }
    /**
     * Engine run.
     */
    run() {
        this.resume();
    }
}

export { Buffer, BufferBindFlag, BufferUsage, BufferUtil, Camera, Canvas, Color, DataType, Engine, Entity, GLCapabilityType, ImageMaterial, IndexBufferBinding, IndexFormat, Material, MathUtil, Matrix3, Matrix4, Mesh, MeshTopology, ModelMesh, ObjectValues, OrbitControl, PrimitiveMesh, Quaternion, Renderer, Scene, Shader, ShaderData, ShaderDataGroup, ShaderProgram, ShaderProperty, ShaderUniform, ShaderUniformBlock, Spherical, SubMesh, Time, Transform, Util, Vector2, Vector3, Vector4, VertexBufferBinding, VertexElement, VertexElementFormat, earthUrl, isArrayLike, removeFromArray, skyStarConfig };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZXNtLmpzIiwic291cmNlcyI6WyIuLi9zcmMvbWF0aC9NYXRoVXRpbC50cyIsIi4uL3NyYy9tYXRoL1ZlY3RvcjIudHMiLCIuLi9zcmMvbWF0aC9WZWN0b3IzLnRzIiwiLi4vc3JjL21hdGgvVmVjdG9yNC50cyIsIi4uL3NyYy9tYXRoL01hdHJpeDMudHMiLCIuLi9zcmMvbWF0aC9RdWF0ZXJuaW9uLnRzIiwiLi4vc3JjL21hdGgvTWF0cml4NC50cyIsIi4uL3NyYy9tYXRoL0NvbG9yLnRzIiwiLi4vc3JjL2NvcmUvZW51bXMvQmFja2dyb3VuZE1vZGUudHMiLCIuLi9zcmMvY29yZS9lbnVtcy9Db2xvclNwYWNlLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlclVuaWZvcm0udHMiLCIuLi9zcmMvY29yZS9zaGFkZXIvZW51bXMvU2hhZGVyRGF0YUdyb3VwLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlclVuaWZvcm1CbG9jay50cyIsIi4uL3NyYy9jb3JlL1JlbmRlcmVyLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlclByb2dyYW0udHMiLCIuLi9zcmMvY29yZS9zaGFkZXIvU2hhZGVyUHJvcGVydHkudHMiLCIuLi9zcmMvY29yZS9zaGFkZXIvU2hhZGVyLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlckRhdGEudHMiLCIuLi9zcmMvY29yZS9tYXRlcmlhbC9NYXRlcmlhbC50cyIsIi4uL3NyYy9jb3JlL3RleHR1cmUvZW51bXMvVGV4dHVyZUZvcm1hdC50cyIsIi4uL3NyYy9jb3JlL3RleHR1cmUvVGV4dHVyZS50cyIsIi4uL3NyYy9jb3JlL3RleHR1cmUvZW51bXMvVGV4dHVyZUZpbHRlck1vZGUudHMiLCIuLi9zcmMvY29yZS90ZXh0dXJlL2VudW1zL1RleHR1cmVXcmFwTW9kZS50cyIsIi4uL3NyYy9jb3JlL3RleHR1cmUvVGV4dHVyZTJELnRzIiwiLi4vc3JjL2NvcmUvdGV4dHVyZS9lbnVtcy9UZXh0dXJlQ3ViZUZhY2UudHMiLCIuLi9zcmMvY29yZS9tYXRlcmlhbC9JbWFnZU1hdGVyaWFsLnRzIiwiLi4vc3JjL2NvcmUvdGV4dHVyZS9UZXh0dXJlQ3ViZS50cyIsIi4uL3NyYy9jb3JlL21hdGVyaWFsL1NreUJveE1hdGVyaWFsLnRzIiwiLi4vc3JjL2NvcmUvZ3JhcGhpYy9lbnVtcy9CdWZmZXJCaW5kRmxhZy50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvZW51bXMvQnVmZmVyVXNhZ2UudHMiLCIuLi9zcmMvY29yZS9ncmFwaGljL2VudW1zL1ZlcnRleEVsZW1lbnRGb3JtYXQudHMiLCIuLi9zcmMvY29yZS9iYXNlL0NvbnN0YW50LnRzIiwiLi4vc3JjL2NvcmUvZ3JhcGhpYy9lbnVtcy9JbmRleEZvcm1hdC50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvQnVmZmVyVXRpbC50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvQnVmZmVyLnRzIiwiLi4vc3JjL2NvcmUvZ3JhcGhpYy9lbnVtcy9NZXNoVG9wb2xvZ3kudHMiLCIuLi9zcmMvY29yZS9ncmFwaGljL0luZGV4QnVmZmVyQmluZGluZy50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvU3ViTWVzaC50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvTWVzaC50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvVmVydGV4QnVmZmVyQmluZGluZy50cyIsIi4uL3NyYy9jb3JlL2dyYXBoaWMvVmVydGV4RWxlbWVudC50cyIsIi4uL3NyYy9jb3JlL21lc2gvTW9kZWxNZXNoLnRzIiwiLi4vc3JjL2NvcmUvbWVzaC9QcmltaXRpdmVNZXNoLnRzIiwiLi4vc3JjL2NvbmZpZy9lYXJ0aC50cyIsIi4uL3NyYy9jb25maWcvc2t5Ym94LnRzIiwiLi4vc3JjL2NvcmUvQmFja2dyb3VuZC50cyIsIi4uL3NyYy9jb250cm9scy9TcGhlcmljYWwudHMiLCIuLi9zcmMvY29udHJvbHMvT3JiaXRDb250cm9sLnRzIiwiLi4vc3JjL2NvcmUvYmFzZS9VdGlsLnRzIiwiLi4vc3JjL2NvcmUvVXBkYXRlRmxhZy50cyIsIi4uL3NyYy9jb3JlL0Jvb2xVcGRhdGVGbGFnLnRzIiwiLi4vc3JjL2NvcmUvVXBkYXRlRmxhZ01hbmFnZXIudHMiLCIuLi9zcmMvY29yZS9UcmFuc2Zvcm0udHMiLCIuLi9zcmMvY29yZS9DYW1lcmEudHMiLCIuLi9zcmMvY29yZS9saWdodGluZy9MaWdodC50cyIsIi4uL3NyYy9jb3JlL2xpZ2h0aW5nL1BvaW50TGlnaHQudHMiLCIuLi9zcmMvY29yZS9saWdodGluZy9BbWJpZW50TGlnaHQudHMiLCIuLi9zcmMvZ2VvZ3JhcGhpYy9FbGxpcHNvaWQudHMiLCIuLi9zcmMvZ2VvZ3JhcGhpYy9SYXlDYXN0ZWRHbG9iZS50cyIsIi4uL3NyYy9jb3JlL1NjZW5lLnRzIiwiLi4vc3JjL2NvcmUvRW50aXR5LnRzIiwiLi4vc3JjL2NvcmUvQ2FudmFzLnRzIiwiLi4vc3JjL2NvcmUvYmFzZS9UaW1lLnRzIiwiLi4vc3JjL2NvcmUvc2hhZGVyL1NoYWRlclBvb2wudHMiLCIuLi9zcmMvY29yZS9FbmdpbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21tb24gdXRpbGl0eSBtZXRob2RzIGZvciBtYXRoIG9wZXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRoVXRpbCB7XG4gIC8qKiBUaGUgdmFsdWUgZm9yIHdoaWNoIGFsbCBhYnNvbHV0ZSBudW1iZXJzIHNtYWxsZXIgdGhhbiBhcmUgY29uc2lkZXJlZCBlcXVhbCB0byB6ZXJvLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgemVyb1RvbGVyYW5jZTogbnVtYmVyID0gMWUtNjtcbiAgLyoqIFRoZSBjb252ZXJzaW9uIGZhY3RvciB0aGF0IHJhZGlhbiB0byBkZWdyZWUuICovXG4gIHN0YXRpYyByZWFkb25seSByYWRUb0RlZ3JlZUZhY3RvcjogbnVtYmVyID0gMTgwIC8gTWF0aC5QSTtcbiAgLyoqIFRoZSBjb252ZXJzaW9uIGZhY3RvciB0aGF0IGRlZ3JlZSB0byByYWRpYW4uICovXG4gIHN0YXRpYyByZWFkb25seSBkZWdyZWVUb1JhZEZhY3RvcjogbnVtYmVyID0gTWF0aC5QSSAvIDE4MDtcblxuICAvKipcbiAgICogQ2xhbXBzIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAqIEBwYXJhbSB2IC0gVGhlIHNwZWNpZmllZCB2YWx1ZVxuICAgKiBAcGFyYW0gbWluIC0gVGhlIG1pbiB2YWx1ZVxuICAgKiBAcGFyYW0gbWF4IC0gVGhlIG1heCB2YWx1ZVxuICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIGNsYW1waW5nIGEgdmFsdWUgYmV0d2VlbiBtaW4gYW5kIG1heFxuICAgKi9cbiAgc3RhdGljIGNsYW1wKHY6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHYpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBhbmQgYiBhcmUgYWxtb3N0IGVxdWFscy5cbiAgICogVGhlIGFic29sdXRlIHZhbHVlIG9mIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gYSBhbmQgYiBpcyBjbG9zZSB0byB6ZXJvLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBsZWZ0IHZhbHVlIHRvIGNvbXBhcmVcbiAgICogQHBhcmFtIGIgLSBUaGUgcmlnaHQgdmFsdWUgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJucyBUcnVlIGlmIGEgYWxtb3N0IGVxdWFsIHRvIGIsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc3RhdGljIGVxdWFscyhhOiBudW1iZXIsIGI6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBNYXRoLmFicyhhIC0gYikgPD0gTWF0aFV0aWwuemVyb1RvbGVyYW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2IGlzIHBvdzIuXG4gICAqIEBwYXJhbSB2IC0gVGhlIHNwZWNpZmllZCB2XG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCB2IGlzIHBvdzIsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc3RhdGljIGlzUG93ZXJPZjIodjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh2ICYgKHYgLSAxKSkgPT09IDA7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IHRoZSBzcGVjaWZpZWQgciBmcm9tIHJhZGlhbiB0byBkZWdyZWUuXG4gICAqIEBwYXJhbSByIC0gVGhlIHNwZWNpZmllZCByXG4gICAqIEByZXR1cm5zIFRoZSBkZWdyZWUgdmFsdWVcbiAgICovXG4gIHN0YXRpYyByYWRpYW5Ub0RlZ3JlZShyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiByICogTWF0aFV0aWwucmFkVG9EZWdyZWVGYWN0b3I7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IHRoZSBzcGVjaWZpZWQgZCBmcm9tIGRlZ3JlZSB0byByYWRpYW4uXG4gICAqIEBwYXJhbSBkIC0gVGhlIHNwZWNpZmllZCBkXG4gICAqIEByZXR1cm5zIFRoZSByYWRpYW4gdmFsdWVcbiAgICovXG4gIHN0YXRpYyBkZWdyZWVUb1JhZGlhbihkOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBkICogTWF0aFV0aWwuZGVncmVlVG9SYWRGYWN0b3I7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGhVdGlsIH0gZnJvbSAnLi9NYXRoVXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBWZWN0b3IyIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgX3plcm8gPSBuZXcgVmVjdG9yMigwLjAsIDAuMCk7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RhdGljIHJlYWRvbmx5IF9vbmUgPSBuZXcgVmVjdG9yMigxLjAsIDEuMCk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHN1bSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIGFkZFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBhZGRcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzdW0gb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIsIG91dDogVmVjdG9yMik6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKyByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICsgcmlnaHQuX3k7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gc3VidHJhY3RcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gc3VidHJhY3RcbiAgICogQHBhcmFtIG91dCAtIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBzdWJ0cmFjdChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gbGVmdC5feCAtIHJpZ2h0Ll94O1xuICAgIG91dC5feSA9IGxlZnQuX3kgLSByaWdodC5feTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIG91dCAtIFRoZSBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbXVsdGlwbHkobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIsIG91dDogVmVjdG9yMik6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKiByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICogcmlnaHQuX3k7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGl2aXNvciBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIGRpdmlkZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBkaXZpZGVcbiAgICogQHBhcmFtIG91dCAtIFRoZSBkaXZpc29yIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGl2aWRlKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyLCBvdXQ6IFZlY3RvcjIpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94IC8gcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAvIHJpZ2h0Ll95O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gZG90XG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgdmVjdG9yIHRvIGRvdFxuICAgKiBAcmV0dXJucyBUaGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBkb3QobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIpOiBudW1iZXIge1xuICAgIHJldHVybiBsZWZ0Ll94ICogcmlnaHQuX3ggKyBsZWZ0Ll95ICogcmlnaHQuX3k7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGUgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZShsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMik6IG51bWJlciB7XG4gICAgY29uc3QgeCA9IHJpZ2h0Ll94IC0gbGVmdC5feDtcbiAgICBjb25zdCB5ID0gcmlnaHQuX3kgLSBsZWZ0Ll95O1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGRpc3RhbmNlIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGlzdGFuY2VTcXVhcmVkKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyKTogbnVtYmVyIHtcbiAgICBjb25zdCB4ID0gcmlnaHQuX3ggLSBsZWZ0Ll94O1xuICAgIGNvbnN0IHkgPSByaWdodC5feSAtIGxlZnQuX3k7XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmVjdG9ycyBhcmUgZXF1YWxzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gY29tcGFyZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBjb21wYXJlXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCB2ZWN0b3JzIGFyZSBlcXVhbHMsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBNYXRoVXRpbC5lcXVhbHMobGVmdC5feCwgcmlnaHQuX3gpICYmIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll95LCByaWdodC5feSk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHBhcmFtIHQgLSBUaGUgYmxlbmQgYW1vdW50IHdoZXJlIDAgcmV0dXJucyBsZWZ0IGFuZCAxIHJpZ2h0XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcmVzdWx0IG9mIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbGVycChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgdDogbnVtYmVyLCBvdXQ6IFZlY3RvcjIpOiB2b2lkIHtcbiAgICBjb25zdCB7IF94LCBfeSB9ID0gbGVmdDtcbiAgICBvdXQuX3ggPSBfeCArIChyaWdodC5feCAtIF94KSAqIHQ7XG4gICAgb3V0Ll95ID0gX3kgKyAocmlnaHQuX3kgLSBfeSkgKiB0O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHZlY3RvciBjb250YWluaW5nIHRoZSBsYXJnZXN0IGNvbXBvbmVudHMgb2YgdGhlIHNwZWNpZmllZCB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSB2ZWN0b3IgY29udGFpbmluZyB0aGUgbGFyZ2VzdCBjb21wb25lbnRzIG9mIHRoZSBzcGVjaWZpZWQgdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIG1heChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gTWF0aC5tYXgobGVmdC5feCwgcmlnaHQuX3gpO1xuICAgIG91dC5feSA9IE1hdGgubWF4KGxlZnQuX3ksIHJpZ2h0Ll95KTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSB2ZWN0b3IgY29udGFpbmluZyB0aGUgc21hbGxlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBjb250YWluaW5nIHRoZSBzbWFsbGVzdCBjb21wb25lbnRzIG9mIHRoZSBzcGVjaWZpZWQgdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIG1pbihsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gTWF0aC5taW4obGVmdC5feCwgcmlnaHQuX3gpO1xuICAgIG91dC5feSA9IE1hdGgubWluKGxlZnQuX3ksIHJpZ2h0Ll95KTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGEgZ2l2ZW4gdmVjdG9yLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSB2ZWN0b3IgdG8gbmVnYXRlXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdmVjdG9yIGZhY2luZyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uXG4gICAqL1xuICBzdGF0aWMgbmVnYXRlKGxlZnQ6IFZlY3RvcjIsIG91dDogVmVjdG9yMik6IHZvaWQge1xuICAgIG91dC5feCA9IC1sZWZ0Ll94O1xuICAgIG91dC5feSA9IC1sZWZ0Ll95O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSB2ZWN0b3IgaW50byBhIHVuaXQgdmVjdG9yLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgbm9ybWFsaXplZCB2ZWN0b3JcbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemUobGVmdDogVmVjdG9yMiwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3kgfSA9IGxlZnQ7XG4gICAgbGV0IGxlbiA9IE1hdGguc3FydChfeCAqIF94ICsgX3kgKiBfeSk7XG4gICAgaWYgKGxlbiA+IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICBvdXQuX3ggPSBfeCAqIGxlbjtcbiAgICAgIG91dC5feSA9IF95ICogbGVuO1xuICAgICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIGEgdmVjdG9yIGJ5IHRoZSBnaXZlbiB2YWx1ZS5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgdmVjdG9yIHRvIHNjYWxlXG4gICAqIEBwYXJhbSBzIC0gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgdmVjdG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc2NhbGVkIHZlY3RvclxuICAgKi9cbiAgc3RhdGljIHNjYWxlKGxlZnQ6IFZlY3RvcjIsIHM6IG51bWJlciwgb3V0OiBWZWN0b3IyKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gbGVmdC5feCAqIHM7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAqIHM7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF94OiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3k6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfb25WYWx1ZUNoYW5nZWQ6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl94O1xuICB9XG5cbiAgcHVibGljIHNldCB4KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl94ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl95O1xuICB9XG5cbiAgcHVibGljIHNldCB5KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl95ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBvZiBWZWN0b3IyLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLCBkZWZhdWx0IDBcbiAgICogQHBhcmFtIHkgLSBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvciwgZGVmYXVsdCAwXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKSB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHBhcmFtIHggLSBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgKiBAcGFyYW0geSAtIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzZXRWYWx1ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IFZlY3RvcjIge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHZlY3RvciBieSBhbiBhcnJheS5cbiAgICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5XG4gICAqIEBwYXJhbSBvZmZzZXQgLSBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBhcnJheVxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc2V0VmFsdWVCeUFycmF5KGFycmF5OiBBcnJheUxpa2U8bnVtYmVyPiwgb2Zmc2V0OiBudW1iZXIgPSAwKTogVmVjdG9yMiB7XG4gICAgdGhpcy5feCA9IGFycmF5W29mZnNldF07XG4gICAgdGhpcy5feSA9IGFycmF5W29mZnNldCArIDFdO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3VtIG9mIHRoaXMgdmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIGFkZChyaWdodDogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgIHRoaXMuX3ggKz0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSArPSByaWdodC5feTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyB2ZWN0b3IgYW5kIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc3VidHJhY3QocmlnaHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICB0aGlzLl94IC09IHJpZ2h0Ll94O1xuICAgIHRoaXMuX3kgLT0gcmlnaHQuX3k7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBwcm9kdWN0IG9mIHRoaXMgdmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIG11bHRpcGx5KHJpZ2h0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG4gICAgdGhpcy5feCAqPSByaWdodC5feDtcbiAgICB0aGlzLl95ICo9IHJpZ2h0Ll95O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGl2aXNvciBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBkaXZpZGUocmlnaHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICB0aGlzLl94IC89IHJpZ2h0Ll94O1xuICAgIHRoaXMuX3kgLz0gcmlnaHQuX3k7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgKi9cbiAgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBfeCwgX3kgfSA9IHRoaXM7XG4gICAgcmV0dXJuIE1hdGguc3FydChfeCAqIF94ICsgX3kgKiBfeSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhlIHNxdWFyZWQgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yXG4gICAqL1xuICBsZW5ndGhTcXVhcmVkKCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBfeCwgX3kgfSA9IHRoaXM7XG4gICAgcmV0dXJuIF94ICogX3ggKyBfeSAqIF95O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBuZWdhdGUoKTogVmVjdG9yMiB7XG4gICAgdGhpcy5feCA9IC10aGlzLl94O1xuICAgIHRoaXMuX3kgPSAtdGhpcy5feTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoaXMgdmVjdG9yIGludG8gYSB1bml0IHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIG5vcm1hbGl6ZSgpOiBWZWN0b3IyIHtcbiAgICBWZWN0b3IyLm5vcm1hbGl6ZSh0aGlzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIHZlY3RvciBieSB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAqIEBwYXJhbSBzIC0gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzY2FsZShzOiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICB0aGlzLl94ICo9IHM7XG4gICAgdGhpcy5feSAqPSBzO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIHZhbHVlIG9mIHRoaXMgdmVjdG9yIHRvIGFuIGFycmF5LlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGFycmF5XG4gICAqIEBwYXJhbSBvdXRPZmZzZXQgLSBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBhcnJheVxuICAgKi9cbiAgdG9BcnJheShvdXQ6IG51bWJlcltdIHwgRmxvYXQzMkFycmF5IHwgRmxvYXQ2NEFycmF5LCBvdXRPZmZzZXQ6IG51bWJlciA9IDApIHtcbiAgICBvdXRbb3V0T2Zmc2V0XSA9IHRoaXMuX3g7XG4gICAgb3V0W291dE9mZnNldCArIDFdID0gdGhpcy5feTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIEEgY2xvbmUgb2YgdGhpcyB2ZWN0b3JcbiAgICovXG4gIGNsb25lKCk6IFZlY3RvcjIge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLl94LCB0aGlzLl95KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhpcyB2ZWN0b3IgdG8gdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKi9cbiAgY2xvbmVUbyhvdXQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICBvdXQuX3ggPSB0aGlzLl94O1xuICAgIG91dC5feSA9IHRoaXMuX3k7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0aFV0aWwgfSBmcm9tICcuL01hdGhVdGlsJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuL01hdHJpeDQnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbic7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi9WZWN0b3I0JztcblxuLyoqXG4gKiBEZXNjcmliZXMgYSAzRC12ZWN0b3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWN0b3IzIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgX3plcm8gPSBuZXcgVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgX29uZSA9IG5ldyBWZWN0b3IzKDEuMCwgMS4wLCAxLjApO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBzdW0gb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBhZGRcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gYWRkXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc3VtIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgYWRkKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94ICsgcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSArIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogKyByaWdodC5fejtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIHN1YnRyYWN0KGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94IC0gcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAtIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogLSByaWdodC5fejtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIG91dCAtIFRoZSBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbXVsdGlwbHkobGVmdDogVmVjdG9yMywgcmlnaHQ6IFZlY3RvcjMsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKiByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICogcmlnaHQuX3k7XG4gICAgb3V0Ll96ID0gbGVmdC5feiAqIHJpZ2h0Ll96O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpdmlzb3Igb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBkaXZpZGVcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gZGl2aWRlXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgZGl2aXNvciBvZiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIGRpdmlkZShsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMywgb3V0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gbGVmdC5feCAvIHJpZ2h0Ll94O1xuICAgIG91dC5feSA9IGxlZnQuX3kgLyByaWdodC5feTtcbiAgICBvdXQuX3ogPSBsZWZ0Ll96IC8gcmlnaHQuX3o7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBkb3RcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gZG90XG4gICAqIEByZXR1cm5zIFRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIGRvdChsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMyk6IG51bWJlciB7XG4gICAgcmV0dXJuIGxlZnQuX3ggKiByaWdodC5feCArIGxlZnQuX3kgKiByaWdodC5feSArIGxlZnQuX3ogKiByaWdodC5fejtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gY3Jvc3NcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gY3Jvc3NcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgY3Jvc3MobGVmdDogVmVjdG9yMywgcmlnaHQ6IFZlY3RvcjMsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IGF4ID0gbGVmdC5feDtcbiAgICBjb25zdCBheSA9IGxlZnQuX3k7XG4gICAgY29uc3QgYXogPSBsZWZ0Ll96O1xuICAgIGNvbnN0IGJ4ID0gcmlnaHQuX3g7XG4gICAgY29uc3QgYnkgPSByaWdodC5feTtcbiAgICBjb25zdCBieiA9IHJpZ2h0Ll96O1xuXG4gICAgb3V0LnNldFZhbHVlKGF5ICogYnogLSBheiAqIGJ5LCBheiAqIGJ4IC0gYXggKiBieiwgYXggKiBieSAtIGF5ICogYngpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpc3RhbmNlIG9mIHR3byB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIGIgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGUgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZShhOiBWZWN0b3IzLCBiOiBWZWN0b3IzKTogbnVtYmVyIHtcbiAgICBjb25zdCB4ID0gYi5feCAtIGEuX3g7XG4gICAgY29uc3QgeSA9IGIuX3kgLSBhLl95O1xuICAgIGNvbnN0IHogPSBiLl96IC0gYS5fejtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGEgLSBUaGUgZmlyc3QgdmVjdG9yXG4gICAqIEBwYXJhbSBiIC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhlIHNxdWFyZWQgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZVNxdWFyZWQoYTogVmVjdG9yMywgYjogVmVjdG9yMyk6IG51bWJlciB7XG4gICAgY29uc3QgeCA9IGIuX3ggLSBhLl94O1xuICAgIGNvbnN0IHkgPSBiLl95IC0gYS5feTtcbiAgICBjb25zdCB6ID0gYi5feiAtIGEuX3o7XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2ZWN0b3JzIGFyZSBlcXVhbHMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBjb21wYXJlXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgdmVjdG9yIHRvIGNvbXBhcmVcbiAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMgYXJlIGVxdWFscywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll94LCByaWdodC5feCkgJiYgTWF0aFV0aWwuZXF1YWxzKGxlZnQuX3ksIHJpZ2h0Ll95KSAmJiBNYXRoVXRpbC5lcXVhbHMobGVmdC5feiwgcmlnaHQuX3opXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIGVuZCAtIFRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEBwYXJhbSB0IC0gVGhlIGJsZW5kIGFtb3VudCB3aGVyZSAwIHJldHVybnMgc3RhcnQgYW5kIDEgZW5kXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcmVzdWx0IG9mIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbGVycChzdGFydDogVmVjdG9yMywgZW5kOiBWZWN0b3IzLCB0OiBudW1iZXIsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gc3RhcnQ7XG4gICAgb3V0Ll94ID0gX3ggKyAoZW5kLl94IC0gX3gpICogdDtcbiAgICBvdXQuX3kgPSBfeSArIChlbmQuX3kgLSBfeSkgKiB0O1xuICAgIG91dC5feiA9IF96ICsgKGVuZC5feiAtIF96KSAqIHQ7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgdmVjdG9yIGNvbnRhaW5pbmcgdGhlIGxhcmdlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBjb250YWluaW5nIHRoZSBsYXJnZXN0IGNvbXBvbmVudHMgb2YgdGhlIHNwZWNpZmllZCB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbWF4KGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBNYXRoLm1heChsZWZ0Ll94LCByaWdodC5feCk7XG4gICAgb3V0Ll95ID0gTWF0aC5tYXgobGVmdC5feSwgcmlnaHQuX3kpO1xuICAgIG91dC5feiA9IE1hdGgubWF4KGxlZnQuX3osIHJpZ2h0Ll96KTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSB2ZWN0b3IgY29udGFpbmluZyB0aGUgc21hbGxlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBjb250YWluaW5nIHRoZSBzbWFsbGVzdCBjb21wb25lbnRzIG9mIHRoZSBzcGVjaWZpZWQgdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIG1pbihsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMywgb3V0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gTWF0aC5taW4obGVmdC5feCwgcmlnaHQuX3gpO1xuICAgIG91dC5feSA9IE1hdGgubWluKGxlZnQuX3ksIHJpZ2h0Ll95KTtcbiAgICBvdXQuX3ogPSBNYXRoLm1pbihsZWZ0Ll96LCByaWdodC5feik7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBhIGdpdmVuIHZlY3Rvci5cbiAgICogQHBhcmFtIGEgLSBUaGUgdmVjdG9yIHRvIG5lZ2F0ZVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBmYWNpbmcgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvblxuICAgKi9cbiAgc3RhdGljIG5lZ2F0ZShhOiBWZWN0b3IzLCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSAtYS5feDtcbiAgICBvdXQuX3kgPSAtYS5feTtcbiAgICBvdXQuX3ogPSAtYS5fejtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgdmVjdG9yIGludG8gYSB1bml0IHZlY3Rvci5cbiAgICogQHBhcmFtIGEgLSBUaGUgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIG5vcm1hbGl6ZWQgdmVjdG9yXG4gICAqL1xuICBzdGF0aWMgbm9ybWFsaXplKGE6IFZlY3RvcjMsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gYTtcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeik7XG4gICAgaWYgKGxlbiA+IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICBvdXQuc2V0VmFsdWUoX3ggKiBsZW4sIF95ICogbGVuLCBfeiAqIGxlbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIGEgdmVjdG9yIGJ5IHRoZSBnaXZlbiB2YWx1ZS5cbiAgICogQHBhcmFtIGEgLSBUaGUgdmVjdG9yIHRvIHNjYWxlXG4gICAqIEBwYXJhbSBzIC0gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgdmVjdG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc2NhbGVkIHZlY3RvclxuICAgKi9cbiAgc3RhdGljIHNjYWxlKGE6IFZlY3RvcjMsIHM6IG51bWJlciwgb3V0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgb3V0Ll94ID0gYS5feCAqIHM7XG4gICAgb3V0Ll95ID0gYS5feSAqIHM7XG4gICAgb3V0Ll96ID0gYS5feiAqIHM7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBub3JtYWwgdHJhbnNmb3JtYXRpb24gdXNpbmcgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAqIEByZW1hcmtzXG4gICAqIEEgbm9ybWFsIHRyYW5zZm9ybSBwZXJmb3JtcyB0aGUgdHJhbnNmb3JtYXRpb24gd2l0aCB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoZSB3IGNvbXBvbmVudFxuICAgKiBpcyB6ZXJvLiBUaGlzIGNhdXNlcyB0aGUgZm91cnRoIHJvdyBhbmQgZm91cnRoIGNvbHVtbiBvZiB0aGUgbWF0cml4IHRvIGJlIHVudXNlZC4gVGhlXG4gICAqIGVuZCByZXN1bHQgaXMgYSB2ZWN0b3IgdGhhdCBpcyBub3QgdHJhbnNsYXRlZCwgYnV0IGFsbCBvdGhlciB0cmFuc2Zvcm1hdGlvbiBwcm9wZXJ0aWVzXG4gICAqIGFwcGx5LiBUaGlzIGlzIG9mdGVuIHByZWZlcnJlZCBmb3Igbm9ybWFsIHZlY3RvcnMgYXMgbm9ybWFscyBwdXJlbHkgcmVwcmVzZW50IGRpcmVjdGlvblxuICAgKiByYXRoZXIgdGhhbiBsb2NhdGlvbiBiZWNhdXNlIG5vcm1hbCB2ZWN0b3JzIHNob3VsZCBub3QgYmUgdHJhbnNsYXRlZC5cbiAgICogQHBhcmFtIHYgLSBUaGUgbm9ybWFsIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIG0gLSBUaGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHRyYW5zZm9ybWVkIG5vcm1hbFxuICAgKi9cbiAgc3RhdGljIHRyYW5zZm9ybU5vcm1hbCh2OiBWZWN0b3IzLCBtOiBNYXRyaXg0LCBvdXQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3ogfSA9IHY7XG4gICAgY29uc3QgZSA9IG0uZWxlbWVudHM7XG4gICAgb3V0Ll94ID0gX3ggKiBlWzBdICsgX3kgKiBlWzRdICsgX3ogKiBlWzhdO1xuICAgIG91dC5feSA9IF94ICogZVsxXSArIF95ICogZVs1XSArIF96ICogZVs5XTtcbiAgICBvdXQuX3ogPSBfeCAqIGVbMl0gKyBfeSAqIGVbNl0gKyBfeiAqIGVbMTBdO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgdHJhbnNmb3JtYXRpb24gdXNpbmcgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAqIEBwYXJhbSB2IC0gVGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIG0gLSBUaGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHRyYW5zZm9ybWVkIHZlY3RvcjNcbiAgICovXG4gIHN0YXRpYyB0cmFuc2Zvcm1Ub1ZlYzModjogVmVjdG9yMywgbTogTWF0cml4NCwgb3V0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96IH0gPSB2O1xuICAgIGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG4gICAgb3V0Ll94ID0gX3ggKiBlWzBdICsgX3kgKiBlWzRdICsgX3ogKiBlWzhdICsgZVsxMl07XG4gICAgb3V0Ll95ID0gX3ggKiBlWzFdICsgX3kgKiBlWzVdICsgX3ogKiBlWzldICsgZVsxM107XG4gICAgb3V0Ll96ID0gX3ggKiBlWzJdICsgX3kgKiBlWzZdICsgX3ogKiBlWzEwXSArIGVbMTRdO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgdHJhbnNmb3JtYXRpb24gZnJvbSB2ZWN0b3IzIHRvIHZlY3RvcjQgdXNpbmcgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAqIEBwYXJhbSB2IC0gVGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIG0gLSBUaGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHRyYW5zZm9ybWVkIHZlY3RvcjRcbiAgICovXG4gIHN0YXRpYyB0cmFuc2Zvcm1Ub1ZlYzQodjogVmVjdG9yMywgbTogTWF0cml4NCwgb3V0OiBWZWN0b3I0KTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96IH0gPSB2O1xuICAgIGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuICAgIG91dC5feCA9IF94ICogZVswXSArIF95ICogZVs0XSArIF96ICogZVs4XSArIGVbMTJdO1xuICAgIG91dC5feSA9IF94ICogZVsxXSArIF95ICogZVs1XSArIF96ICogZVs5XSArIGVbMTNdO1xuICAgIG91dC5feiA9IF94ICogZVsyXSArIF95ICogZVs2XSArIF96ICogZVsxMF0gKyBlWzE0XTtcbiAgICBvdXQuX3cgPSBfeCAqIGVbM10gKyBfeSAqIGVbN10gKyBfeiAqIGVbMTFdICsgZVsxNV07XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBjb29yZGluYXRlIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBBIGNvb3JkaW5hdGUgdHJhbnNmb3JtIHBlcmZvcm1zIHRoZSB0cmFuc2Zvcm1hdGlvbiB3aXRoIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhlIHcgY29tcG9uZW50XG4gICAqIGlzIG9uZS4gVGhlIGZvdXIgZGltZW5zaW9uYWwgdmVjdG9yIG9idGFpbmVkIGZyb20gdGhlIHRyYW5zZm9ybWF0aW9uIG9wZXJhdGlvbiBoYXMgZWFjaFxuICAgKiBjb21wb25lbnQgaW4gdGhlIHZlY3RvciBkaXZpZGVkIGJ5IHRoZSB3IGNvbXBvbmVudC4gVGhpcyBmb3JjZXMgdGhlIHctY29tcG9uZW50IHRvIGJlIG9uZSBhbmRcbiAgICogdGhlcmVmb3JlIG1ha2VzIHRoZSB2ZWN0b3IgaG9tb2dlbmVvdXMuIFRoZSBob21vZ2VuZW91cyB2ZWN0b3IgaXMgb2Z0ZW4gcHJlZmVycmVkIHdoZW4gd29ya2luZ1xuICAgKiB3aXRoIGNvb3JkaW5hdGVzIGFzIHRoZSB3IGNvbXBvbmVudCBjYW4gc2FmZWx5IGJlIGlnbm9yZWQuXG4gICAqIEBwYXJhbSB2IC0gVGhlIGNvb3JkaW5hdGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0gbSAtIFRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdHJhbnNmb3JtZWQgY29vcmRpbmF0ZXNcbiAgICovXG4gIHN0YXRpYyB0cmFuc2Zvcm1Db29yZGluYXRlKHY6IFZlY3RvcjMsIG06IE1hdHJpeDQsIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gdjtcbiAgICBjb25zdCBlID0gbS5lbGVtZW50cztcbiAgICBsZXQgdyA9IF94ICogZVszXSArIF95ICogZVs3XSArIF96ICogZVsxMV0gKyBlWzE1XTtcbiAgICB3ID0gMS4wIC8gdztcblxuICAgIG91dC5feCA9IChfeCAqIGVbMF0gKyBfeSAqIGVbNF0gKyBfeiAqIGVbOF0gKyBlWzEyXSkgKiB3O1xuICAgIG91dC5feSA9IChfeCAqIGVbMV0gKyBfeSAqIGVbNV0gKyBfeiAqIGVbOV0gKyBlWzEzXSkgKiB3O1xuICAgIG91dC5feiA9IChfeCAqIGVbMl0gKyBfeSAqIGVbNl0gKyBfeiAqIGVbMTBdICsgZVsxNF0pICogdztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gdiAtIFRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gVGhlIHRyYW5zZm9ybSBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdHJhbnNmb3JtZWQgdmVjdG9yXG4gICAqL1xuICBzdGF0aWMgdHJhbnNmb3JtQnlRdWF0KHY6IFZlY3RvcjMsIHF1YXRlcm5pb246IFF1YXRlcm5pb24sIG91dDogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gdjtcbiAgICBjb25zdCB7IF94OiBxeCwgX3k6IHF5LCBfejogcXosIF93OiBxdyB9ID0gcXVhdGVybmlvbjtcblxuICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjXG4gICAgY29uc3QgaXggPSBxdyAqIF94ICsgcXkgKiBfeiAtIHF6ICogX3k7XG4gICAgY29uc3QgaXkgPSBxdyAqIF95ICsgcXogKiBfeCAtIHF4ICogX3o7XG4gICAgY29uc3QgaXogPSBxdyAqIF96ICsgcXggKiBfeSAtIHF5ICogX3g7XG4gICAgY29uc3QgaXcgPSAtcXggKiBfeCAtIHF5ICogX3kgLSBxeiAqIF96O1xuXG4gICAgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuICAgIG91dC5feCA9IGl4ICogcXcgLSBpdyAqIHF4IC0gaXkgKiBxeiArIGl6ICogcXk7XG4gICAgb3V0Ll95ID0gaXkgKiBxdyAtIGl3ICogcXkgLSBpeiAqIHF4ICsgaXggKiBxejtcbiAgICBvdXQuX3ogPSBpeiAqIHF3IC0gaXcgKiBxeiAtIGl4ICogcXkgKyBpeSAqIHF4O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfeDogbnVtYmVyO1xuICAvKiogQGludGVybmFsICovXG4gIF95OiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3o6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfb25WYWx1ZUNoYW5nZWQ6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl94O1xuICB9XG5cbiAgcHVibGljIHNldCB4KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl94ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl95O1xuICB9XG5cbiAgcHVibGljIHNldCB5KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl95ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgeiBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci5cbiAgICovXG4gIHB1YmxpYyBnZXQgeigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl96O1xuICB9XG5cbiAgcHVibGljIHNldCB6KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl96ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBvZiBWZWN0b3IzLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLCBkZWZhdWx0IDBcbiAgICogQHBhcmFtIHkgLSBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvciwgZGVmYXVsdCAwXG4gICAqIEBwYXJhbSB6IC0gVGhlIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IsIGRlZmF1bHQgMFxuICAgKi9cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCwgejogbnVtYmVyID0gMCkge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3ogPSB6O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEBwYXJhbSB4IC0gVGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAgICogQHBhcmFtIHkgLSBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgKiBAcGFyYW0geiAtIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzZXRWYWx1ZSh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gICAgdGhpcy5feiA9IHo7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoaXMgdmVjdG9yIGJ5IGFuIGFycmF5LlxuICAgKiBAcGFyYW0gYXJyYXkgLSBUaGUgYXJyYXlcbiAgICogQHBhcmFtIG9mZnNldCAtIFRoZSBzdGFydCBvZmZzZXQgb2YgdGhlIGFycmF5XG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzZXRWYWx1ZUJ5QXJyYXkoYXJyYXk6IEFycmF5TGlrZTxudW1iZXI+LCBvZmZzZXQ6IG51bWJlciA9IDApOiBWZWN0b3IzIHtcbiAgICB0aGlzLl94ID0gYXJyYXlbb2Zmc2V0XTtcbiAgICB0aGlzLl95ID0gYXJyYXlbb2Zmc2V0ICsgMV07XG4gICAgdGhpcy5feiA9IGFycmF5W29mZnNldCArIDJdO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3VtIG9mIHRoaXMgdmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIGFkZChyaWdodDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHRoaXMuX3ggKz0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSArPSByaWdodC5feTtcbiAgICB0aGlzLl96ICs9IHJpZ2h0Ll96O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGlmZmVyZW5jZSBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBzdWJ0cmFjdChyaWdodDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHRoaXMuX3ggLT0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSAtPSByaWdodC5feTtcbiAgICB0aGlzLl96IC09IHJpZ2h0Ll96O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBtdWx0aXBseShyaWdodDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHRoaXMuX3ggKj0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSAqPSByaWdodC5feTtcbiAgICB0aGlzLl96ICo9IHJpZ2h0Ll96O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGl2aXNvciBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBkaXZpZGUocmlnaHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICB0aGlzLl94IC89IHJpZ2h0Ll94O1xuICAgIHRoaXMuX3kgLz0gcmlnaHQuX3k7XG4gICAgdGhpcy5feiAvPSByaWdodC5fejtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yXG4gICAqL1xuICBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3ogfSA9IHRoaXM7XG4gICAgcmV0dXJuIE1hdGguc3FydChfeCAqIF94ICsgX3kgKiBfeSArIF96ICogX3opO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgKi9cbiAgbGVuZ3RoU3F1YXJlZCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiB9ID0gdGhpcztcbiAgICByZXR1cm4gX3ggKiBfeCArIF95ICogX3kgKyBfeiAqIF96O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBuZWdhdGUoKTogVmVjdG9yMyB7XG4gICAgdGhpcy5feCA9IC10aGlzLl94O1xuICAgIHRoaXMuX3kgPSAtdGhpcy5feTtcbiAgICB0aGlzLl96ID0gLXRoaXMuX3o7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGlzIHZlY3RvciBpbnRvIGEgdW5pdCB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBub3JtYWxpemUoKTogVmVjdG9yMyB7XG4gICAgVmVjdG9yMy5ub3JtYWxpemUodGhpcywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyB2ZWN0b3IgYnkgdGhlIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gcyAtIFRoZSBhbW91bnQgYnkgd2hpY2ggdG8gc2NhbGUgdGhlIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc2NhbGUoczogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgdGhpcy5feCAqPSBzO1xuICAgIHRoaXMuX3kgKj0gcztcbiAgICB0aGlzLl96ICo9IHM7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgdmFsdWUgb2YgdGhpcyB2ZWN0b3IgdG8gYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgYXJyYXlcbiAgICogQHBhcmFtIG91dE9mZnNldCAtIFRoZSBzdGFydCBvZmZzZXQgb2YgdGhlIGFycmF5XG4gICAqL1xuICB0b0FycmF5KG91dDogbnVtYmVyW10gfCBGbG9hdDMyQXJyYXkgfCBGbG9hdDY0QXJyYXksIG91dE9mZnNldDogbnVtYmVyID0gMCkge1xuICAgIG91dFtvdXRPZmZzZXRdID0gdGhpcy5feDtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMV0gPSB0aGlzLl95O1xuICAgIG91dFtvdXRPZmZzZXQgKyAyXSA9IHRoaXMuX3o7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgdmVjdG9yLlxuICAgKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoaXMgdmVjdG9yXG4gICAqL1xuICBjbG9uZSgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjModGhpcy5feCwgdGhpcy5feSwgdGhpcy5feik7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgdmVjdG9yIHRvIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICovXG4gIGNsb25lVG8ob3V0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgb3V0Ll94ID0gdGhpcy5feDtcbiAgICBvdXQuX3kgPSB0aGlzLl95O1xuICAgIG91dC5feiA9IHRoaXMuX3o7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHZlY3RvciBwZXJmb3JtcyBhIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiB1c2luZyB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cbiAgICogQHJlbWFya3NcbiAgICogQSBub3JtYWwgdHJhbnNmb3JtIHBlcmZvcm1zIHRoZSB0cmFuc2Zvcm1hdGlvbiB3aXRoIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhlIHcgY29tcG9uZW50XG4gICAqIGlzIHplcm8uIFRoaXMgY2F1c2VzIHRoZSBmb3VydGggcm93IGFuZCBmb3VydGggY29sdW1uIG9mIHRoZSBtYXRyaXggdG8gYmUgdW51c2VkLiBUaGVcbiAgICogZW5kIHJlc3VsdCBpcyBhIHZlY3RvciB0aGF0IGlzIG5vdCB0cmFuc2xhdGVkLCBidXQgYWxsIG90aGVyIHRyYW5zZm9ybWF0aW9uIHByb3BlcnRpZXNcbiAgICogYXBwbHkuIFRoaXMgaXMgb2Z0ZW4gcHJlZmVycmVkIGZvciBub3JtYWwgdmVjdG9ycyBhcyBub3JtYWxzIHB1cmVseSByZXByZXNlbnQgZGlyZWN0aW9uXG4gICAqIHJhdGhlciB0aGFuIGxvY2F0aW9uIGJlY2F1c2Ugbm9ybWFsIHZlY3RvcnMgc2hvdWxkIG5vdCBiZSB0cmFuc2xhdGVkLlxuICAgKiBAcGFyYW0gbSAtIFRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICB0cmFuc2Zvcm1Ob3JtYWwobTogTWF0cml4NCk6IFZlY3RvcjMge1xuICAgIFZlY3RvcjMudHJhbnNmb3JtTm9ybWFsKHRoaXMsIG0sIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgdmVjdG9yIHBlcmZvcm1zIGEgdHJhbnNmb3JtYXRpb24gdXNpbmcgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAqIEBwYXJhbSBtIC0gVGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIHRyYW5zZm9ybVRvVmVjMyhtOiBNYXRyaXg0KTogVmVjdG9yMyB7XG4gICAgVmVjdG9yMy50cmFuc2Zvcm1Ub1ZlYzModGhpcywgbSwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyB2ZWN0b3IgcGVyZm9ybXMgYSBjb29yZGluYXRlIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgKiBAcmVtYXJrc1xuICAgKiBBIGNvb3JkaW5hdGUgdHJhbnNmb3JtIHBlcmZvcm1zIHRoZSB0cmFuc2Zvcm1hdGlvbiB3aXRoIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhlIHcgY29tcG9uZW50XG4gICAqIGlzIG9uZS4gVGhlIGZvdXIgZGltZW5zaW9uYWwgdmVjdG9yIG9idGFpbmVkIGZyb20gdGhlIHRyYW5zZm9ybWF0aW9uIG9wZXJhdGlvbiBoYXMgZWFjaFxuICAgKiBjb21wb25lbnQgaW4gdGhlIHZlY3RvciBkaXZpZGVkIGJ5IHRoZSB3IGNvbXBvbmVudC4gVGhpcyBmb3JjZXMgdGhlIHctY29tcG9uZW50IHRvIGJlIG9uZSBhbmRcbiAgICogdGhlcmVmb3JlIG1ha2VzIHRoZSB2ZWN0b3IgaG9tb2dlbmVvdXMuIFRoZSBob21vZ2VuZW91cyB2ZWN0b3IgaXMgb2Z0ZW4gcHJlZmVycmVkIHdoZW4gd29ya2luZ1xuICAgKiB3aXRoIGNvb3JkaW5hdGVzIGFzIHRoZSB3IGNvbXBvbmVudCBjYW4gc2FmZWx5IGJlIGlnbm9yZWQuXG4gICAqIEBwYXJhbSBtIC0gVGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIHRyYW5zZm9ybUNvb3JkaW5hdGUobTogTWF0cml4NCk6IFZlY3RvcjMge1xuICAgIFZlY3RvcjMudHJhbnNmb3JtQ29vcmRpbmF0ZSh0aGlzLCBtLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHZlY3RvciBwZXJmb3JtcyBhIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiAtIFRoZSB0cmFuc2Zvcm0gcXVhdGVybmlvblxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgdHJhbnNmb3JtQnlRdWF0KHF1YXRlcm5pb246IFF1YXRlcm5pb24pOiBWZWN0b3IzIHtcbiAgICBWZWN0b3IzLnRyYW5zZm9ybUJ5UXVhdCh0aGlzLCBxdWF0ZXJuaW9uLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0aFV0aWwgfSBmcm9tICcuL01hdGhVdGlsJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuL01hdHJpeDQnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbic7XG5cbi8qKlxuICogRGVzY3JpYmVzIGEgNEQtdmVjdG9yLlxuICovXG5leHBvcnQgY2xhc3MgVmVjdG9yNCB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RhdGljIHJlYWRvbmx5IF96ZXJvID0gbmV3IFZlY3RvcjQoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgX29uZSA9IG5ldyBWZWN0b3I0KDEuMCwgMS4wLCAxLjAsIDEuMCk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHN1bSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIGFkZFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBhZGRcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzdW0gb2YgdHdvIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogVmVjdG9yNCwgcmlnaHQ6IFZlY3RvcjQsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKyByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICsgcmlnaHQuX3k7XG4gICAgb3V0Ll96ID0gbGVmdC5feiArIHJpZ2h0Ll96O1xuICAgIG91dC5fdyA9IGxlZnQuX3cgKyByaWdodC5fdztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIHN1YnRyYWN0KGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94IC0gcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAtIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogLSByaWdodC5fejtcbiAgICBvdXQuX3cgPSBsZWZ0Ll93IC0gcmlnaHQuX3c7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIG11bHRpcGx5XG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgdmVjdG9yIHRvIG11bHRpcGx5XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcHJvZHVjdCBvZiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIG11bHRpcGx5KGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94ICogcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAqIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogKiByaWdodC5fejtcbiAgICBvdXQuX3cgPSBsZWZ0Ll93ICogcmlnaHQuX3c7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGl2aXNvciBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgdmVjdG9yIHRvIGRpdmlkZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBkaXZpZGVcbiAgICogQHBhcmFtIG91dCAtIFRoZSBkaXZpc29yIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGl2aWRlKGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBsZWZ0Ll94IC8gcmlnaHQuX3g7XG4gICAgb3V0Ll95ID0gbGVmdC5feSAvIHJpZ2h0Ll95O1xuICAgIG91dC5feiA9IGxlZnQuX3ogLyByaWdodC5fejtcbiAgICBvdXQuX3cgPSBsZWZ0Ll93IC8gcmlnaHQuX3c7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvciB0byBkb3RcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3IgdG8gZG90XG4gICAqIEByZXR1cm5zIFRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjdG9yc1xuICAgKi9cbiAgc3RhdGljIGRvdChsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGxlZnQuX3ggKiByaWdodC5feCArIGxlZnQuX3kgKiByaWdodC5feSArIGxlZnQuX3ogKiByaWdodC5feiArIGxlZnQuX3cgKiByaWdodC5fdztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaXN0YW5jZSBvZiB0d28gdmVjdG9ycy5cbiAgICogQHBhcmFtIGEgLSBUaGUgZmlyc3QgdmVjdG9yXG4gICAqIEBwYXJhbSBiIC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhlIGRpc3RhbmNlIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGlzdGFuY2UoYTogVmVjdG9yNCwgYjogVmVjdG9yNCk6IG51bWJlciB7XG4gICAgY29uc3QgeCA9IGIuX3ggLSBhLl94O1xuICAgIGNvbnN0IHkgPSBiLl95IC0gYS5feTtcbiAgICBjb25zdCB6ID0gYi5feiAtIGEuX3o7XG4gICAgY29uc3QgdyA9IGIuX3cgLSBhLl93O1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHNxdWFyZWQgZGlzdGFuY2Ugb2YgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBhIC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gYiAtIFRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGRpc3RhbmNlIG9mIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgZGlzdGFuY2VTcXVhcmVkKGE6IFZlY3RvcjQsIGI6IFZlY3RvcjQpOiBudW1iZXIge1xuICAgIGNvbnN0IHggPSBiLl94IC0gYS5feDtcbiAgICBjb25zdCB5ID0gYi5feSAtIGEuX3k7XG4gICAgY29uc3QgeiA9IGIuX3ogLSBhLl96O1xuICAgIGNvbnN0IHcgPSBiLl93IC0gYS5fdztcbiAgICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmVjdG9ycyBhcmUgZXF1YWxzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3IgdG8gY29tcGFyZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvciB0byBjb21wYXJlXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCB2ZWN0b3JzIGFyZSBlcXVhbHMsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5feCwgcmlnaHQuX3gpICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5feSwgcmlnaHQuX3kpICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5feiwgcmlnaHQuX3opICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5fdywgcmlnaHQuX3cpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIGVuZCAtIFRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEBwYXJhbSB0IC0gVGhlIGJsZW5kIGFtb3VudCB3aGVyZSAwIHJldHVybnMgc3RhcnQgYW5kIDEgZW5kXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcmVzdWx0IG9mIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbGVycChzdGFydDogVmVjdG9yNCwgZW5kOiBWZWN0b3I0LCB0OiBudW1iZXIsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHN0YXJ0O1xuICAgIG91dC5feCA9IF94ICsgKGVuZC5feCAtIF94KSAqIHQ7XG4gICAgb3V0Ll95ID0gX3kgKyAoZW5kLl95IC0gX3kpICogdDtcbiAgICBvdXQuX3ogPSBfeiArIChlbmQuX3ogLSBfeikgKiB0O1xuICAgIG91dC5fdyA9IF93ICsgKGVuZC5fdyAtIF93KSAqIHQ7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgdmVjdG9yIGNvbnRhaW5pbmcgdGhlIGxhcmdlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHZlY3RvciBjb250YWluaW5nIHRoZSBsYXJnZXN0IGNvbXBvbmVudHMgb2YgdGhlIHNwZWNpZmllZCB2ZWN0b3JzXG4gICAqL1xuICBzdGF0aWMgbWF4KGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBNYXRoLm1heChsZWZ0Ll94LCByaWdodC5feCk7XG4gICAgb3V0Ll95ID0gTWF0aC5tYXgobGVmdC5feSwgcmlnaHQuX3kpO1xuICAgIG91dC5feiA9IE1hdGgubWF4KGxlZnQuX3osIHJpZ2h0Ll96KTtcbiAgICBvdXQuX3cgPSBNYXRoLm1heChsZWZ0Ll93LCByaWdodC5fdyk7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgdmVjdG9yIGNvbnRhaW5pbmcgdGhlIHNtYWxsZXN0IGNvbXBvbmVudHMgb2YgdGhlIHNwZWNpZmllZCB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSB2ZWN0b3IgY29udGFpbmluZyB0aGUgc21hbGxlc3QgY29tcG9uZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZlY3RvcnNcbiAgICovXG4gIHN0YXRpYyBtaW4obGVmdDogVmVjdG9yNCwgcmlnaHQ6IFZlY3RvcjQsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIG91dC5feCA9IE1hdGgubWluKGxlZnQuX3gsIHJpZ2h0Ll94KTtcbiAgICBvdXQuX3kgPSBNYXRoLm1pbihsZWZ0Ll95LCByaWdodC5feSk7XG4gICAgb3V0Ll96ID0gTWF0aC5taW4obGVmdC5feiwgcmlnaHQuX3opO1xuICAgIG91dC5fdyA9IE1hdGgubWluKGxlZnQuX3csIHJpZ2h0Ll93KTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGEgZ2l2ZW4gdmVjdG9yLlxuICAgKiBAcGFyYW0gYSAtIFRoZSB2ZWN0b3IgdG8gbmVnYXRlXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdmVjdG9yIGZhY2luZyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uXG4gICAqL1xuICBzdGF0aWMgbmVnYXRlKGE6IFZlY3RvcjQsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIG91dC5feCA9IC1hLl94O1xuICAgIG91dC5feSA9IC1hLl95O1xuICAgIG91dC5feiA9IC1hLl96O1xuICAgIG91dC5fdyA9IC1hLl93O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSB2ZWN0b3IgaW50byBhIHVuaXQgdmVjdG9yLlxuICAgKiBAcGFyYW0gYSAtIFRoZSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgbm9ybWFsaXplZCB2ZWN0b3JcbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemUoYTogVmVjdG9yNCwgb3V0OiBWZWN0b3I0KTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96LCBfdyB9ID0gYTtcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeiArIF93ICogX3cpO1xuICAgIGlmIChsZW4gPiBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgb3V0Ll94ID0gX3ggKiBsZW47XG4gICAgICBvdXQuX3kgPSBfeSAqIGxlbjtcbiAgICAgIG91dC5feiA9IF96ICogbGVuO1xuICAgICAgb3V0Ll93ID0gX3cgKiBsZW47XG4gICAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgYSB2ZWN0b3IgYnkgdGhlIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gYSAtIFRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAgICogQHBhcmFtIHMgLSBUaGUgYW1vdW50IGJ5IHdoaWNoIHRvIHNjYWxlIHRoZSB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzY2FsZWQgdmVjdG9yXG4gICAqL1xuICBzdGF0aWMgc2NhbGUoYTogVmVjdG9yNCwgczogbnVtYmVyLCBvdXQ6IFZlY3RvcjQpOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBhLl94ICogcztcbiAgICBvdXQuX3kgPSBhLl95ICogcztcbiAgICBvdXQuX3ogPSBhLl96ICogcztcbiAgICBvdXQuX3cgPSBhLl93ICogcztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHRyYW5zZm9ybWF0aW9uIHVzaW5nIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgKiBAcGFyYW0gdiAtIFRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSBtIC0gVGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSB0cmFuc2Zvcm1lZCB2ZWN0b3IzXG4gICAqL1xuICBzdGF0aWMgdHJhbnNmb3JtKHY6IFZlY3RvcjQsIG06IE1hdHJpeDQsIG91dDogVmVjdG9yNCk6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHY7XG4gICAgY29uc3QgZSA9IG0uZWxlbWVudHM7XG4gICAgb3V0Ll94ID0gX3ggKiBlWzBdICsgX3kgKiBlWzRdICsgX3ogKiBlWzhdICsgX3cgKiBlWzEyXTtcbiAgICBvdXQuX3kgPSBfeCAqIGVbMV0gKyBfeSAqIGVbNV0gKyBfeiAqIGVbOV0gKyBfdyAqIGVbMTNdO1xuICAgIG91dC5feiA9IF94ICogZVsyXSArIF95ICogZVs2XSArIF96ICogZVsxMF0gKyBfdyAqIGVbMTRdO1xuICAgIG91dC5fdyA9IF94ICogZVszXSArIF95ICogZVs3XSArIF96ICogZVsxMV0gKyBfdyAqIGVbMTVdO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgdHJhbnNmb3JtYXRpb24gdXNpbmcgdGhlIGdpdmVuIHF1YXRlcm5pb24uXG4gICAqIEBwYXJhbSB2IC0gVGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHEgLSBUaGUgdHJhbnNmb3JtIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIG91dCAtIFRoZSB0cmFuc2Zvcm1lZCB2ZWN0b3JcbiAgICovXG4gIHN0YXRpYyB0cmFuc2Zvcm1CeVF1YXQodjogVmVjdG9yNCwgcTogUXVhdGVybmlvbiwgb3V0OiBWZWN0b3I0KTogdm9pZCB7XG4gICAgY29uc3QgeyBfeDogeCwgX3k6IHksIF96OiB6LCBfdzogdyB9ID0gdjtcbiAgICBjb25zdCBxeCA9IHEuX3g7XG4gICAgY29uc3QgcXkgPSBxLl95O1xuICAgIGNvbnN0IHF6ID0gcS5fejtcbiAgICBjb25zdCBxdyA9IHEuX3c7XG5cbiAgICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xuICAgIGNvbnN0IGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuICAgIGNvbnN0IGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuICAgIGNvbnN0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuICAgIGNvbnN0IGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcblxuICAgIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcbiAgICBvdXQuX3ggPSBpeCAqIHF3IC0gaXcgKiBxeCAtIGl5ICogcXogKyBpeiAqIHF5O1xuICAgIG91dC5feSA9IGl5ICogcXcgLSBpdyAqIHF5IC0gaXogKiBxeCArIGl4ICogcXo7XG4gICAgb3V0Ll96ID0gaXogKiBxdyAtIGl3ICogcXogLSBpeCAqIHF5ICsgaXkgKiBxeDtcbiAgICBvdXQuX3cgPSB3O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfeDogbnVtYmVyO1xuICAvKiogQGludGVybmFsICovXG4gIF95OiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3o6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfdzogbnVtYmVyO1xuICAvKiogQGludGVybmFsICovXG4gIF9vblZhbHVlQ2hhbmdlZDogKCkgPT4gdm9pZCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGdldCB4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3g7XG4gIH1cblxuICBwdWJsaWMgc2V0IHgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3ggPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3k7XG4gIH1cblxuICBwdWJsaWMgc2V0IHkodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3kgPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGdldCB6KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3o7XG4gIH1cblxuICBwdWJsaWMgc2V0IHoodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3ogPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB3IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLlxuICAgKi9cbiAgcHVibGljIGdldCB3KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3c7XG4gIH1cblxuICBwdWJsaWMgc2V0IHcodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3cgPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIG9mIFZlY3RvcjQuXG4gICAqIEBwYXJhbSB4IC0gVGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IsIGRlZmF1bHQgMFxuICAgKiBAcGFyYW0geSAtIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yLCBkZWZhdWx0IDBcbiAgICogQHBhcmFtIHogLSBUaGUgeiBjb21wb25lbnQgb2YgdGhlIHZlY3RvciwgZGVmYXVsdCAwXG4gICAqIEBwYXJhbSB3IC0gVGhlIHcgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IsIGRlZmF1bHQgMFxuICAgKi9cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCwgejogbnVtYmVyID0gMCwgdzogbnVtYmVyID0gMCkge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3ogPSB6O1xuICAgIHRoaXMuX3cgPSB3O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEBwYXJhbSB4IC0gVGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAgICogQHBhcmFtIHkgLSBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgKiBAcGFyYW0geiAtIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gICAqIEBwYXJhbSB3IC0gVGhlIHcgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIHNldFZhbHVlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHc6IG51bWJlcik6IFZlY3RvcjQge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3ogPSB6O1xuICAgIHRoaXMuX3cgPSB3O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHZlY3RvciBieSBhbiBhcnJheS5cbiAgICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5XG4gICAqIEBwYXJhbSBvZmZzZXQgLSBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBhcnJheVxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc2V0VmFsdWVCeUFycmF5KGFycmF5OiBBcnJheUxpa2U8bnVtYmVyPiwgb2Zmc2V0OiBudW1iZXIgPSAwKTogVmVjdG9yNCB7XG4gICAgdGhpcy5feCA9IGFycmF5W29mZnNldF07XG4gICAgdGhpcy5feSA9IGFycmF5W29mZnNldCArIDFdO1xuICAgIHRoaXMuX3ogPSBhcnJheVtvZmZzZXQgKyAyXTtcbiAgICB0aGlzLl93ID0gYXJyYXlbb2Zmc2V0ICsgM107XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBzdW0gb2YgdGhpcyB2ZWN0b3IgYW5kIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgYWRkKHJpZ2h0OiBWZWN0b3I0KTogVmVjdG9yNCB7XG4gICAgdGhpcy5feCArPSByaWdodC5feDtcbiAgICB0aGlzLl95ICs9IHJpZ2h0Ll95O1xuICAgIHRoaXMuX3ogKz0gcmlnaHQuX3o7XG4gICAgdGhpcy5fdyArPSByaWdodC5fdztcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyB2ZWN0b3IgYW5kIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gcmlnaHQgLSB0aGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc3VidHJhY3QocmlnaHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcbiAgICB0aGlzLl94IC09IHJpZ2h0Ll94O1xuICAgIHRoaXMuX3kgLT0gcmlnaHQuX3k7XG4gICAgdGhpcy5feiAtPSByaWdodC5fejtcbiAgICB0aGlzLl93IC09IHJpZ2h0Ll93O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0aGlzIHZlY3RvciBhbmQgdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSByaWdodCAtIHRoZSBzcGVjaWZpZWQgdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBtdWx0aXBseShyaWdodDogVmVjdG9yNCk6IFZlY3RvcjQge1xuICAgIHRoaXMuX3ggKj0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSAqPSByaWdodC5feTtcbiAgICB0aGlzLl96ICo9IHJpZ2h0Ll96O1xuICAgIHRoaXMuX3cgKj0gcmlnaHQuX3c7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaXZpc29yIG9mIHRoaXMgdmVjdG9yIGFuZCB0aGUgc3BlY2lmaWVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gdGhlIHNwZWNpZmllZCB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIGRpdmlkZShyaWdodDogVmVjdG9yNCk6IFZlY3RvcjQge1xuICAgIHRoaXMuX3ggLz0gcmlnaHQuX3g7XG4gICAgdGhpcy5feSAvPSByaWdodC5feTtcbiAgICB0aGlzLl96IC89IHJpZ2h0Ll96O1xuICAgIHRoaXMuX3cgLz0gcmlnaHQuX3c7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgKi9cbiAgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96LCBfdyB9ID0gdGhpcztcbiAgICByZXR1cm4gTWF0aC5zcXJ0KF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeiArIF93ICogX3cpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgKi9cbiAgbGVuZ3RoU3F1YXJlZCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHRoaXM7XG4gICAgcmV0dXJuIF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeiArIF93ICogX3c7XG4gIH1cblxuICAvKipcbiAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiB0aGlzIHZlY3Rvci5cbiAgICogQHJldHVybnMgVGhpcyB2ZWN0b3JcbiAgICovXG4gIG5lZ2F0ZSgpOiBWZWN0b3I0IHtcbiAgICB0aGlzLl94ID0gLXRoaXMuX3g7XG4gICAgdGhpcy5feSA9IC10aGlzLl95O1xuICAgIHRoaXMuX3ogPSAtdGhpcy5fejtcbiAgICB0aGlzLl93ID0gLXRoaXMuX3c7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGlzIHZlY3RvciBpbnRvIGEgdW5pdCB2ZWN0b3IuXG4gICAqIEByZXR1cm5zIFRoaXMgdmVjdG9yXG4gICAqL1xuICBub3JtYWxpemUoKTogVmVjdG9yNCB7XG4gICAgVmVjdG9yNC5ub3JtYWxpemUodGhpcywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyB2ZWN0b3IgYnkgdGhlIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gcyAtIFRoZSBhbW91bnQgYnkgd2hpY2ggdG8gc2NhbGUgdGhlIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIHZlY3RvclxuICAgKi9cbiAgc2NhbGUoczogbnVtYmVyKTogVmVjdG9yNCB7XG4gICAgdGhpcy5feCAqPSBzO1xuICAgIHRoaXMuX3kgKj0gcztcbiAgICB0aGlzLl96ICo9IHM7XG4gICAgdGhpcy5fdyAqPSBzO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIHZhbHVlIG9mIHRoaXMgdmVjdG9yIHRvIGFuIGFycmF5LlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGFycmF5XG4gICAqIEBwYXJhbSBvdXRPZmZzZXQgLSBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBhcnJheVxuICAgKi9cbiAgdG9BcnJheShvdXQ6IG51bWJlcltdIHwgRmxvYXQzMkFycmF5IHwgRmxvYXQ2NEFycmF5LCBvdXRPZmZzZXQ6IG51bWJlciA9IDApIHtcbiAgICBvdXRbb3V0T2Zmc2V0XSA9IHRoaXMuX3g7XG4gICAgb3V0W291dE9mZnNldCArIDFdID0gdGhpcy5feTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMl0gPSB0aGlzLl96O1xuICAgIG91dFtvdXRPZmZzZXQgKyAzXSA9IHRoaXMuX3c7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgdmVjdG9yLlxuICAgKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoaXMgdmVjdG9yXG4gICAqL1xuICBjbG9uZSgpOiBWZWN0b3I0IHtcbiAgICBsZXQgcmV0ID0gbmV3IFZlY3RvcjQodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhpcyB2ZWN0b3IgdG8gdGhlIHNwZWNpZmllZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGUgc3BlY2lmaWVkIHZlY3RvclxuICAgKi9cbiAgY2xvbmVUbyhvdXQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcbiAgICBvdXQuX3ggPSB0aGlzLl94O1xuICAgIG91dC5feSA9IHRoaXMuX3k7XG4gICAgb3V0Ll96ID0gdGhpcy5fejtcbiAgICBvdXQuX3cgPSB0aGlzLl93O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGhVdGlsIH0gZnJvbSAnLi9NYXRoVXRpbCc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi9NYXRyaXg0JztcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuL1F1YXRlcm5pb24nO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4vVmVjdG9yMic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIDN4MyBtYXRoZW1hdGljYWwgbWF0cml4LlxuICovXG5leHBvcnQgY2xhc3MgTWF0cml4MyB7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBzdW0gb2YgdHdvIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBtYXRyaXggdG8gYWRkXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzZWNvbmQgbWF0cml4IHRvIGFkZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHN1bSBvZiB0d28gbWF0cmljZXNcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMsIG91dDogTWF0cml4Myk6IHZvaWQge1xuICAgIGNvbnN0IGxlID0gbGVmdC5lbGVtZW50cztcbiAgICBjb25zdCByZSA9IHJpZ2h0LmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgb2VbMF0gPSBsZVswXSArIHJlWzBdO1xuICAgIG9lWzFdID0gbGVbMV0gKyByZVsxXTtcbiAgICBvZVsyXSA9IGxlWzJdICsgcmVbMl07XG5cbiAgICBvZVszXSA9IGxlWzNdICsgcmVbM107XG4gICAgb2VbNF0gPSBsZVs0XSArIHJlWzRdO1xuICAgIG9lWzVdID0gbGVbNV0gKyByZVs1XTtcblxuICAgIG9lWzZdID0gbGVbNl0gKyByZVs2XTtcbiAgICBvZVs3XSA9IGxlWzddICsgcmVbN107XG4gICAgb2VbOF0gPSBsZVs4XSArIHJlWzhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gbWF0cmljZXMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IG1hdHJpeCB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIG1hdHJpeCB0byBzdWJ0cmFjdFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gbWF0cmljZXNcbiAgICovXG4gIHN0YXRpYyBzdWJ0cmFjdChsZWZ0OiBNYXRyaXgzLCByaWdodDogTWF0cml4Mywgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgbGUgPSBsZWZ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHJlID0gcmlnaHQuZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBvZVswXSA9IGxlWzBdIC0gcmVbMF07XG4gICAgb2VbMV0gPSBsZVsxXSAtIHJlWzFdO1xuICAgIG9lWzJdID0gbGVbMl0gLSByZVsyXTtcblxuICAgIG9lWzNdID0gbGVbM10gLSByZVszXTtcbiAgICBvZVs0XSA9IGxlWzRdIC0gcmVbNF07XG4gICAgb2VbNV0gPSBsZVs1XSAtIHJlWzVdO1xuXG4gICAgb2VbNl0gPSBsZVs2XSAtIHJlWzZdO1xuICAgIG9lWzddID0gbGVbN10gLSByZVs3XTtcbiAgICBvZVs4XSA9IGxlWzhdIC0gcmVbOF07XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0d28gbWF0cmljZXMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IG1hdHJpeCB0byBtdWx0aXBseVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIG1hdHJpeCB0byBtdWx0aXBseVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHByb2R1Y3Qgb2YgdHdvIG1hdHJpY2VzXG4gICAqL1xuICBzdGF0aWMgbXVsdGlwbHkobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMsIG91dDogTWF0cml4Myk6IHZvaWQge1xuICAgIGNvbnN0IGxlID0gbGVmdC5lbGVtZW50cztcbiAgICBjb25zdCByZSA9IHJpZ2h0LmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgbDExID0gbGVbMF0sXG4gICAgICBsMTIgPSBsZVsxXSxcbiAgICAgIGwxMyA9IGxlWzJdO1xuICAgIGNvbnN0IGwyMSA9IGxlWzNdLFxuICAgICAgbDIyID0gbGVbNF0sXG4gICAgICBsMjMgPSBsZVs1XTtcbiAgICBjb25zdCBsMzEgPSBsZVs2XSxcbiAgICAgIGwzMiA9IGxlWzddLFxuICAgICAgbDMzID0gbGVbOF07XG5cbiAgICBjb25zdCByMTEgPSByZVswXSxcbiAgICAgIHIxMiA9IHJlWzFdLFxuICAgICAgcjEzID0gcmVbMl07XG4gICAgY29uc3QgcjIxID0gcmVbM10sXG4gICAgICByMjIgPSByZVs0XSxcbiAgICAgIHIyMyA9IHJlWzVdO1xuICAgIGNvbnN0IHIzMSA9IHJlWzZdLFxuICAgICAgcjMyID0gcmVbN10sXG4gICAgICByMzMgPSByZVs4XTtcblxuICAgIG9lWzBdID0gbDExICogcjExICsgbDIxICogcjEyICsgbDMxICogcjEzO1xuICAgIG9lWzFdID0gbDEyICogcjExICsgbDIyICogcjEyICsgbDMyICogcjEzO1xuICAgIG9lWzJdID0gbDEzICogcjExICsgbDIzICogcjEyICsgbDMzICogcjEzO1xuXG4gICAgb2VbM10gPSBsMTEgKiByMjEgKyBsMjEgKiByMjIgKyBsMzEgKiByMjM7XG4gICAgb2VbNF0gPSBsMTIgKiByMjEgKyBsMjIgKiByMjIgKyBsMzIgKiByMjM7XG4gICAgb2VbNV0gPSBsMTMgKiByMjEgKyBsMjMgKiByMjIgKyBsMzMgKiByMjM7XG5cbiAgICBvZVs2XSA9IGwxMSAqIHIzMSArIGwyMSAqIHIzMiArIGwzMSAqIHIzMztcbiAgICBvZVs3XSA9IGwxMiAqIHIzMSArIGwyMiAqIHIzMiArIGwzMiAqIHIzMztcbiAgICBvZVs4XSA9IGwxMyAqIHIzMSArIGwyMyAqIHIzMiArIGwzMyAqIHIzMztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBtYXRyaWNlcyBhcmUgZXF1YWxzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBtYXRyaXggdG8gY29tcGFyZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIG1hdHJpeCB0byBjb21wYXJlXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCBtYXRyaWNlcyBhcmUgZXF1YWxzLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIHN0YXRpYyBlcXVhbHMobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMpOiBib29sZWFuIHtcbiAgICBjb25zdCBsZSA9IGxlZnQuZWxlbWVudHM7XG4gICAgY29uc3QgcmUgPSByaWdodC5lbGVtZW50cztcblxuICAgIHJldHVybiAoXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbMF0sIHJlWzBdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzFdLCByZVsxXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsyXSwgcmVbMl0pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbM10sIHJlWzNdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzRdLCByZVs0XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVs1XSwgcmVbNV0pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbNl0sIHJlWzZdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzddLCByZVs3XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVs4XSwgcmVbOF0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gc3RhcnQgLSBUaGUgZmlyc3QgbWF0cml4XG4gICAqIEBwYXJhbSBlbmQgLSBUaGUgc2Vjb25kIG1hdHJpeFxuICAgKiBAcGFyYW0gdCAtIFRoZSBibGVuZCBhbW91bnQgd2hlcmUgMCByZXR1cm5zIHN0YXJ0IGFuZCAxIGVuZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHJlc3VsdCBvZiBsaW5lYXIgYmxlbmRpbmcgYmV0d2VlbiB0d28gbWF0cmljZXNcbiAgICovXG4gIHN0YXRpYyBsZXJwKHN0YXJ0OiBNYXRyaXgzLCBlbmQ6IE1hdHJpeDMsIHQ6IG51bWJlciwgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3Qgc2UgPSBzdGFydC5lbGVtZW50cztcbiAgICBjb25zdCBlZSA9IGVuZC5lbGVtZW50cztcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBjb25zdCBpbnYgPSAxLjAgLSB0O1xuXG4gICAgb2VbMF0gPSBzZVswXSAqIGludiArIGVlWzBdICogdDtcbiAgICBvZVsxXSA9IHNlWzFdICogaW52ICsgZWVbMV0gKiB0O1xuICAgIG9lWzJdID0gc2VbMl0gKiBpbnYgKyBlZVsyXSAqIHQ7XG5cbiAgICBvZVszXSA9IHNlWzNdICogaW52ICsgZWVbM10gKiB0O1xuICAgIG9lWzRdID0gc2VbNF0gKiBpbnYgKyBlZVs0XSAqIHQ7XG4gICAgb2VbNV0gPSBzZVs1XSAqIGludiArIGVlWzVdICogdDtcblxuICAgIG9lWzZdID0gc2VbNl0gKiBpbnYgKyBlZVs2XSAqIHQ7XG4gICAgb2VbN10gPSBzZVs3XSAqIGludiArIGVlWzddICogdDtcbiAgICBvZVs4XSA9IHNlWzhdICogaW52ICsgZWVbOF0gKiB0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHJvdGF0aW9uIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIHF1YXRlcm5pb24gLSBUaGUgcXVhdGVybmlvbiB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCByb3RhdGlvbiBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyByb3RhdGlvblF1YXRlcm5pb24ocXVhdGVybmlvbjogUXVhdGVybmlvbiwgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeyBfeDogeCwgX3k6IHksIF96OiB6LCBfdzogdyB9ID0gcXVhdGVybmlvbjtcbiAgICBjb25zdCB4MiA9IHggKyB4O1xuICAgIGNvbnN0IHkyID0geSArIHk7XG4gICAgY29uc3QgejIgPSB6ICsgejtcbiAgICBjb25zdCB4eCA9IHggKiB4MjtcbiAgICBjb25zdCB5eCA9IHkgKiB4MjtcbiAgICBjb25zdCB5eSA9IHkgKiB5MjtcbiAgICBjb25zdCB6eCA9IHogKiB4MjtcbiAgICBjb25zdCB6eSA9IHogKiB5MjtcbiAgICBjb25zdCB6eiA9IHogKiB6MjtcbiAgICBjb25zdCB3eCA9IHcgKiB4MjtcbiAgICBjb25zdCB3eSA9IHcgKiB5MjtcbiAgICBjb25zdCB3eiA9IHcgKiB6MjtcblxuICAgIG9lWzBdID0gMSAtIHl5IC0geno7XG4gICAgb2VbM10gPSB5eCAtIHd6O1xuICAgIG9lWzZdID0genggKyB3eTtcblxuICAgIG9lWzFdID0geXggKyB3ejtcbiAgICBvZVs0XSA9IDEgLSB4eCAtIHp6O1xuICAgIG9lWzddID0genkgLSB3eDtcblxuICAgIG9lWzJdID0genggLSB3eTtcbiAgICBvZVs1XSA9IHp5ICsgd3g7XG4gICAgb2VbOF0gPSAxIC0geHggLSB5eTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBtYXRyaXggZnJvbSBzY2FsZSB2ZWN0b3IuXG4gICAqIEBwYXJhbSBzIC0gVGhlIHNjYWxlIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgc2NhbGluZyhzOiBWZWN0b3IyLCBvdXQ6IE1hdHJpeDMpOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcblxuICAgIG9lWzBdID0gcy5feDtcbiAgICBvZVsxXSA9IDA7XG4gICAgb2VbMl0gPSAwO1xuXG4gICAgb2VbM10gPSAwO1xuICAgIG9lWzRdID0gcy5feTtcbiAgICBvZVs1XSA9IDA7XG5cbiAgICBvZVs2XSA9IDA7XG4gICAgb2VbN10gPSAwO1xuICAgIG9lWzhdID0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBtYXRyaXggZnJvbSB0cmFuc2xhdGlvbiB2ZWN0b3IuXG4gICAqIEBwYXJhbSB0cmFuc2xhdGlvbiAtIFRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIG1hdHJpeFxuICAgKi9cbiAgc3RhdGljIHRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uOiBWZWN0b3IyLCBvdXQ6IE1hdHJpeDMpOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcblxuICAgIG9lWzBdID0gMTtcbiAgICBvZVsxXSA9IDA7XG4gICAgb2VbMl0gPSAwO1xuXG4gICAgb2VbM10gPSAwO1xuICAgIG9lWzRdID0gMTtcbiAgICBvZVs1XSA9IDA7XG5cbiAgICBvZVs2XSA9IHRyYW5zbGF0aW9uLl94O1xuICAgIG9lWzddID0gdHJhbnNsYXRpb24uX3k7XG4gICAgb2VbOF0gPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgaW52ZXJzZSBvZiB0aGUgc3BlY2lmaWVkIG1hdHJpeC5cbiAgICogQHBhcmFtIGEgLSBUaGUgbWF0cml4IHdob3NlIGludmVyc2UgaXMgdG8gYmUgY2FsY3VsYXRlZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGludmVyc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBpbnZlcnQoYTogTWF0cml4Mywgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gYWVbMF0sXG4gICAgICBhMTIgPSBhZVsxXSxcbiAgICAgIGExMyA9IGFlWzJdO1xuICAgIGNvbnN0IGEyMSA9IGFlWzNdLFxuICAgICAgYTIyID0gYWVbNF0sXG4gICAgICBhMjMgPSBhZVs1XTtcbiAgICBjb25zdCBhMzEgPSBhZVs2XSxcbiAgICAgIGEzMiA9IGFlWzddLFxuICAgICAgYTMzID0gYWVbOF07XG5cbiAgICBjb25zdCBiMTIgPSBhMzMgKiBhMjIgLSBhMjMgKiBhMzI7XG4gICAgY29uc3QgYjIyID0gLWEzMyAqIGEyMSArIGEyMyAqIGEzMTtcbiAgICBjb25zdCBiMzIgPSBhMzIgKiBhMjEgLSBhMjIgKiBhMzE7XG5cbiAgICBsZXQgZGV0ID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuICAgIGlmICghZGV0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIG9lWzBdID0gYjEyICogZGV0O1xuICAgIG9lWzFdID0gKC1hMzMgKiBhMTIgKyBhMTMgKiBhMzIpICogZGV0O1xuICAgIG9lWzJdID0gKGEyMyAqIGExMiAtIGExMyAqIGEyMikgKiBkZXQ7XG5cbiAgICBvZVszXSA9IGIyMiAqIGRldDtcbiAgICBvZVs0XSA9IChhMzMgKiBhMTEgLSBhMTMgKiBhMzEpICogZGV0O1xuICAgIG9lWzVdID0gKC1hMjMgKiBhMTEgKyBhMTMgKiBhMjEpICogZGV0O1xuXG4gICAgb2VbNl0gPSBiMzIgKiBkZXQ7XG4gICAgb2VbN10gPSAoLWEzMiAqIGExMSArIGExMiAqIGEzMSkgKiBkZXQ7XG4gICAgb2VbOF0gPSAoYTIyICogYTExIC0gYTEyICogYTIxKSAqIGRldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSAzeDMgbm9ybWFsIG1hdHJpeCBmcm9tIGEgNHg0IG1hdHJpeC5cbiAgICogQHJlbWFya3MgVGhlIGNhbGN1bGF0aW9uIHByb2Nlc3MgaXMgdGhlIHRyYW5zcG9zZSBtYXRyaXggb2YgdGhlIGludmVyc2UgbWF0cml4LlxuICAgKiBAcGFyYW0gbWF0NCAtIFRoZSA0eDQgbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUSGUgM3gzIG5vcm1hbCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBub3JtYWxNYXRyaXgobWF0NDogTWF0cml4NCwgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBtYXQ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gYWVbMF0sXG4gICAgICBhMTIgPSBhZVsxXSxcbiAgICAgIGExMyA9IGFlWzJdLFxuICAgICAgYTE0ID0gYWVbM107XG4gICAgY29uc3QgYTIxID0gYWVbNF0sXG4gICAgICBhMjIgPSBhZVs1XSxcbiAgICAgIGEyMyA9IGFlWzZdLFxuICAgICAgYTI0ID0gYWVbN107XG4gICAgY29uc3QgYTMxID0gYWVbOF0sXG4gICAgICBhMzIgPSBhZVs5XSxcbiAgICAgIGEzMyA9IGFlWzEwXSxcbiAgICAgIGEzNCA9IGFlWzExXTtcbiAgICBjb25zdCBhNDEgPSBhZVsxMl0sXG4gICAgICBhNDIgPSBhZVsxM10sXG4gICAgICBhNDMgPSBhZVsxNF0sXG4gICAgICBhNDQgPSBhZVsxNV07XG5cbiAgICBjb25zdCBiMDAgPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gICAgY29uc3QgYjAxID0gYTExICogYTIzIC0gYTEzICogYTIxO1xuICAgIGNvbnN0IGIwMiA9IGExMSAqIGEyNCAtIGExNCAqIGEyMTtcbiAgICBjb25zdCBiMDMgPSBhMTIgKiBhMjMgLSBhMTMgKiBhMjI7XG4gICAgY29uc3QgYjA0ID0gYTEyICogYTI0IC0gYTE0ICogYTIyO1xuICAgIGNvbnN0IGIwNSA9IGExMyAqIGEyNCAtIGExNCAqIGEyMztcbiAgICBjb25zdCBiMDYgPSBhMzEgKiBhNDIgLSBhMzIgKiBhNDE7XG4gICAgY29uc3QgYjA3ID0gYTMxICogYTQzIC0gYTMzICogYTQxO1xuICAgIGNvbnN0IGIwOCA9IGEzMSAqIGE0NCAtIGEzNCAqIGE0MTtcbiAgICBjb25zdCBiMDkgPSBhMzIgKiBhNDMgLSBhMzMgKiBhNDI7XG4gICAgY29uc3QgYjEwID0gYTMyICogYTQ0IC0gYTM0ICogYTQyO1xuICAgIGNvbnN0IGIxMSA9IGEzMyAqIGE0NCAtIGEzNCAqIGE0MztcblxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG4gICAgaWYgKCFkZXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvZVswXSA9IChhMjIgKiBiMTEgLSBhMjMgKiBiMTAgKyBhMjQgKiBiMDkpICogZGV0O1xuICAgIG9lWzFdID0gKGEyMyAqIGIwOCAtIGEyMSAqIGIxMSAtIGEyNCAqIGIwNykgKiBkZXQ7XG4gICAgb2VbMl0gPSAoYTIxICogYjEwIC0gYTIyICogYjA4ICsgYTI0ICogYjA2KSAqIGRldDtcblxuICAgIG9lWzNdID0gKGExMyAqIGIxMCAtIGExMiAqIGIxMSAtIGExNCAqIGIwOSkgKiBkZXQ7XG4gICAgb2VbNF0gPSAoYTExICogYjExIC0gYTEzICogYjA4ICsgYTE0ICogYjA3KSAqIGRldDtcbiAgICBvZVs1XSA9IChhMTIgKiBiMDggLSBhMTEgKiBiMTAgLSBhMTQgKiBiMDYpICogZGV0O1xuXG4gICAgb2VbNl0gPSAoYTQyICogYjA1IC0gYTQzICogYjA0ICsgYTQ0ICogYjAzKSAqIGRldDtcbiAgICBvZVs3XSA9IChhNDMgKiBiMDIgLSBhNDEgKiBiMDUgLSBhNDQgKiBiMDEpICogZGV0O1xuICAgIG9lWzhdID0gKGE0MSAqIGIwNCAtIGE0MiAqIGIwMiArIGE0NCAqIGIwMCkgKiBkZXQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNwZWNpZmllZCBtYXRyaXggcm90YXRlcyBhcm91bmQgYW4gYW5nbGUuXG4gICAqIEBwYXJhbSBhIC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHBhcmFtIHIgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHJvdGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgcm90YXRlKGE6IE1hdHJpeDMsIHI6IG51bWJlciwgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihyKTtcbiAgICBjb25zdCBjID0gTWF0aC5jb3Mocik7XG5cbiAgICBjb25zdCBhMTEgPSBhZVswXSxcbiAgICAgIGExMiA9IGFlWzFdLFxuICAgICAgYTEzID0gYWVbMl07XG4gICAgY29uc3QgYTIxID0gYWVbM10sXG4gICAgICBhMjIgPSBhZVs0XSxcbiAgICAgIGEyMyA9IGFlWzVdO1xuICAgIGNvbnN0IGEzMSA9IGFlWzZdLFxuICAgICAgYTMyID0gYWVbN10sXG4gICAgICBhMzMgPSBhZVs4XTtcblxuICAgIG9lWzBdID0gYyAqIGExMSArIHMgKiBhMjE7XG4gICAgb2VbMV0gPSBjICogYTEyICsgcyAqIGEyMjtcbiAgICBvZVsyXSA9IGMgKiBhMTMgKyBzICogYTIzO1xuXG4gICAgb2VbM10gPSBjICogYTIxIC0gcyAqIGExMTtcbiAgICBvZVs0XSA9IGMgKiBhMjIgLSBzICogYTEyO1xuICAgIG9lWzVdID0gYyAqIGEyMyAtIHMgKiBhMTM7XG5cbiAgICBvZVs2XSA9IGEzMTtcbiAgICBvZVs3XSA9IGEzMjtcbiAgICBvZVs4XSA9IGEzMztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSBhIG1hdHJpeCBieSBhIGdpdmVuIHZlY3Rvci5cbiAgICogQHBhcmFtIG0gLSBUaGUgbWF0cml4XG4gICAqIEBwYXJhbSBzIC0gVGhlIGdpdmVuIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNjYWxlZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBzY2FsZShtOiBNYXRyaXgzLCBzOiBWZWN0b3IyLCBvdXQ6IE1hdHJpeDMpOiB2b2lkIHtcbiAgICBjb25zdCB7IF94OiB4LCBfeTogeSB9ID0gcztcbiAgICBjb25zdCBhZSA9IG0uZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBvZVswXSA9IHggKiBhZVswXTtcbiAgICBvZVsxXSA9IHggKiBhZVsxXTtcbiAgICBvZVsyXSA9IHggKiBhZVsyXTtcblxuICAgIG9lWzNdID0geSAqIGFlWzNdO1xuICAgIG9lWzRdID0geSAqIGFlWzRdO1xuICAgIG9lWzVdID0geSAqIGFlWzVdO1xuXG4gICAgb2VbNl0gPSBhZVs2XTtcbiAgICBvZVs3XSA9IGFlWzddO1xuICAgIG9lWzhdID0gYWVbOF07XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNsYXRlIGEgbWF0cml4IGJ5IGEgZ2l2ZW4gdmVjdG9yLlxuICAgKiBAcGFyYW0gbSAtIFRoZSBtYXRyaXhcbiAgICogQHBhcmFtIHRyYW5zbGF0aW9uIC0gVGhlIGdpdmVuIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHRyYW5zbGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgdHJhbnNsYXRlKG06IE1hdHJpeDMsIHRyYW5zbGF0aW9uOiBWZWN0b3IyLCBvdXQ6IE1hdHJpeDMpOiB2b2lkIHtcbiAgICBjb25zdCB7IF94OiB4LCBfeTogeSB9ID0gdHJhbnNsYXRpb247XG4gICAgY29uc3QgYWUgPSBtLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gYWVbMF0sXG4gICAgICBhMTIgPSBhZVsxXSxcbiAgICAgIGExMyA9IGFlWzJdO1xuICAgIGNvbnN0IGEyMSA9IGFlWzNdLFxuICAgICAgYTIyID0gYWVbNF0sXG4gICAgICBhMjMgPSBhZVs1XTtcbiAgICBjb25zdCBhMzEgPSBhZVs2XSxcbiAgICAgIGEzMiA9IGFlWzddLFxuICAgICAgYTMzID0gYWVbOF07XG5cbiAgICBvZVswXSA9IGExMTtcbiAgICBvZVsxXSA9IGExMjtcbiAgICBvZVsyXSA9IGExMztcblxuICAgIG9lWzNdID0gYTIxO1xuICAgIG9lWzRdID0gYTIyO1xuICAgIG9lWzVdID0gYTIzO1xuXG4gICAgb2VbNl0gPSB4ICogYTExICsgeSAqIGEyMSArIGEzMTtcbiAgICBvZVs3XSA9IHggKiBhMTIgKyB5ICogYTIyICsgYTMyO1xuICAgIG9lWzhdID0geCAqIGExMyArIHkgKiBhMjMgKyBhMzM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0cmFuc3Bvc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXguXG4gICAqIEBwYXJhbSBhIC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSB0cmFuc3Bvc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyB0cmFuc3Bvc2UoYTogTWF0cml4Mywgb3V0OiBNYXRyaXgzKTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgY29uc3QgYTEyID0gYWVbMV07XG4gICAgICBjb25zdCBhMTMgPSBhZVsyXTtcbiAgICAgIGNvbnN0IGEyMyA9IGFlWzVdO1xuICAgICAgb2VbMV0gPSBhZVszXTtcbiAgICAgIG9lWzJdID0gYWVbNl07XG4gICAgICBvZVszXSA9IGExMjtcbiAgICAgIG9lWzVdID0gYWVbN107XG4gICAgICBvZVs2XSA9IGExMztcbiAgICAgIG9lWzddID0gYTIzO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZVswXSA9IGFlWzBdO1xuICAgICAgb2VbMV0gPSBhZVszXTtcbiAgICAgIG9lWzJdID0gYWVbNl07XG5cbiAgICAgIG9lWzNdID0gYWVbMV07XG4gICAgICBvZVs0XSA9IGFlWzRdO1xuICAgICAgb2VbNV0gPSBhZVs3XTtcblxuICAgICAgb2VbNl0gPSBhZVsyXTtcbiAgICAgIG9lWzddID0gYWVbNV07XG4gICAgICBvZVs4XSA9IGFlWzhdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBjb250YWluaW5nIHRoZSBlbGVtZW50cyBvZiB0aGUgbWF0cml4IChjb2x1bW4gbWF0cml4KS5cbiAgICogQHJlbWFya3NcbiAgICogZWxlbWVudHNbMF0gZmlyc3QgY29sdW1uIGFuZCBmaXJzdCByb3cgdmFsdWUgbTExXG4gICAqIGVsZW1lbnRzWzFdIGZpcnN0IGNvbHVtbiBhbmQgc2Vjb25kIHJvdyB2YWx1ZSBtMTJcbiAgICogZWxlbWVudHNbMl0gZmlyc3QgY29sdW1uIGFuZCB0aGlyZCByb3cgdmFsdWUgbTEzXG4gICAqIGVsZW1lbnRzWzNdIHNlY29uZCBjb2x1bW4gYW5kIGZpcnN0IHJvdyB2YWx1ZSBtMjFcbiAgICogYW5kIHNvIG9uXG4gICAqL1xuICBlbGVtZW50czogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSg5KTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3Igb2YgMyozIG1hdHJpeC5cbiAgICogQHBhcmFtIG0xMSAtIERlZmF1bHQgMSBjb2x1bW4gMSwgcm93IDFcbiAgICogQHBhcmFtIG0xMiAtIERlZmF1bHQgMCBjb2x1bW4gMSwgcm93IDJcbiAgICogQHBhcmFtIG0xMyAtIERlZmF1bHQgMCBjb2x1bW4gMSwgcm93IDNcbiAgICogQHBhcmFtIG0yMSAtIERlZmF1bHQgMCBjb2x1bW4gMiwgcm93IDFcbiAgICogQHBhcmFtIG0yMiAtIERlZmF1bHQgMSBjb2x1bW4gMiwgcm93IDJcbiAgICogQHBhcmFtIG0yMyAtIERlZmF1bHQgMCBjb2x1bW4gMiwgcm93IDNcbiAgICogQHBhcmFtIG0zMSAtIERlZmF1bHQgMCBjb2x1bW4gMywgcm93IDFcbiAgICogQHBhcmFtIG0zMiAtIERlZmF1bHQgMCBjb2x1bW4gMywgcm93IDJcbiAgICogQHBhcmFtIG0zMyAtIERlZmF1bHQgMSBjb2x1bW4gMywgcm93IDNcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIG0xMTogbnVtYmVyID0gMSxcbiAgICBtMTI6IG51bWJlciA9IDAsXG4gICAgbTEzOiBudW1iZXIgPSAwLFxuICAgIG0yMTogbnVtYmVyID0gMCxcbiAgICBtMjI6IG51bWJlciA9IDEsXG4gICAgbTIzOiBudW1iZXIgPSAwLFxuICAgIG0zMTogbnVtYmVyID0gMCxcbiAgICBtMzI6IG51bWJlciA9IDAsXG4gICAgbTMzOiBudW1iZXIgPSAxLFxuICApIHtcbiAgICBjb25zdCBlOiBGbG9hdDMyQXJyYXkgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgZVswXSA9IG0xMTtcbiAgICBlWzFdID0gbTEyO1xuICAgIGVbMl0gPSBtMTM7XG5cbiAgICBlWzNdID0gbTIxO1xuICAgIGVbNF0gPSBtMjI7XG4gICAgZVs1XSA9IG0yMztcblxuICAgIGVbNl0gPSBtMzE7XG4gICAgZVs3XSA9IG0zMjtcbiAgICBlWzhdID0gbTMzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBtYXRyaXgsIGFuZCByZXR1cm4gdGhpcyBtYXRyaXguXG4gICAqIEBwYXJhbSBtMTFcbiAgICogQHBhcmFtIG0xMlxuICAgKiBAcGFyYW0gbTEzXG4gICAqIEBwYXJhbSBtMjFcbiAgICogQHBhcmFtIG0yMlxuICAgKiBAcGFyYW0gbTIzXG4gICAqIEBwYXJhbSBtMzFcbiAgICogQHBhcmFtIG0zMlxuICAgKiBAcGFyYW0gbTMzXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4XG4gICAqL1xuICBzZXRWYWx1ZShcbiAgICBtMTE6IG51bWJlcixcbiAgICBtMTI6IG51bWJlcixcbiAgICBtMTM6IG51bWJlcixcbiAgICBtMjE6IG51bWJlcixcbiAgICBtMjI6IG51bWJlcixcbiAgICBtMjM6IG51bWJlcixcbiAgICBtMzE6IG51bWJlcixcbiAgICBtMzI6IG51bWJlcixcbiAgICBtMzM6IG51bWJlcixcbiAgKTogTWF0cml4MyB7XG4gICAgY29uc3QgZTogRmxvYXQzMkFycmF5ID0gdGhpcy5lbGVtZW50cztcblxuICAgIGVbMF0gPSBtMTE7XG4gICAgZVsxXSA9IG0xMjtcbiAgICBlWzJdID0gbTEzO1xuXG4gICAgZVszXSA9IG0yMTtcbiAgICBlWzRdID0gbTIyO1xuICAgIGVbNV0gPSBtMjM7XG5cbiAgICBlWzZdID0gbTMxO1xuICAgIGVbN10gPSBtMzI7XG4gICAgZVs4XSA9IG0zMztcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBtYXRyaXggYnkgYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICogQHJldHVybnMgVGhpcyBtYXRyaXhcbiAgICovXG4gIHNldFZhbHVlQnlBcnJheShhcnJheTogQXJyYXlMaWtlPG51bWJlcj4sIG9mZnNldDogbnVtYmVyID0gMCk6IE1hdHJpeDMge1xuICAgIGNvbnN0IHNyY2UgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgc3JjZVtpXSA9IGFycmF5W2kgKyBvZmZzZXRdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoaXMgM3gzIG1hdHJpeCBieSB0aGUgc3BlY2lmaWVkIDR4NCBtYXRyaXguXG4gICAqIHVwcGVyLWxlZnQgcHJpbmNpcGxlXG4gICAqIEBwYXJhbSBhIC0gVGhlIHNwZWNpZmllZCA0eDQgbWF0cml4XG4gICAqIEByZXR1cm5zIFRoaXMgM3gzIG1hdHJpeFxuICAgKi9cbiAgc2V0VmFsdWVCeU1hdHJpeChhOiBNYXRyaXg0KTogTWF0cml4MyB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgZVswXSA9IGFlWzBdO1xuICAgIGVbMV0gPSBhZVsxXTtcbiAgICBlWzJdID0gYWVbMl07XG5cbiAgICBlWzNdID0gYWVbNF07XG4gICAgZVs0XSA9IGFlWzVdO1xuICAgIGVbNV0gPSBhZVs2XTtcblxuICAgIGVbNl0gPSBhZVs4XTtcbiAgICBlWzddID0gYWVbOV07XG4gICAgZVs4XSA9IGFlWzEwXTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoZSB2YWx1ZSBvZiB0aGlzIG1hdHJpeCB0byBhbiBhcnJheS5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb3V0T2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICovXG4gIHRvQXJyYXkob3V0OiBudW1iZXJbXSB8IEZsb2F0MzJBcnJheSB8IEZsb2F0NjRBcnJheSwgb3V0T2Zmc2V0OiBudW1iZXIgPSAwKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBvdXRbb3V0T2Zmc2V0XSA9IGVbMF07XG4gICAgb3V0W291dE9mZnNldCArIDFdID0gZVsxXTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMl0gPSBlWzJdO1xuICAgIG91dFtvdXRPZmZzZXQgKyAzXSA9IGVbM107XG4gICAgb3V0W291dE9mZnNldCArIDRdID0gZVs0XTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgNV0gPSBlWzVdO1xuICAgIG91dFtvdXRPZmZzZXQgKyA2XSA9IGVbNl07XG4gICAgb3V0W291dE9mZnNldCArIDddID0gZVs3XTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgOF0gPSBlWzhdO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGlzIG1hdHJpeFxuICAgKi9cbiAgY2xvbmUoKTogTWF0cml4MyB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgbGV0IHJldCA9IG5ldyBNYXRyaXgzKGVbMF0sIGVbMV0sIGVbMl0sIGVbM10sIGVbNF0sIGVbNV0sIGVbNl0sIGVbN10sIGVbOF0pO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgbWF0cml4IHRvIHRoZSBzcGVjaWZpZWQgbWF0cml4LlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIGNsb25lVG8ob3V0OiBNYXRyaXgzKTogTWF0cml4MyB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBvZVswXSA9IGVbMF07XG4gICAgb2VbMV0gPSBlWzFdO1xuICAgIG9lWzJdID0gZVsyXTtcblxuICAgIG9lWzNdID0gZVszXTtcbiAgICBvZVs0XSA9IGVbNF07XG4gICAgb2VbNV0gPSBlWzVdO1xuXG4gICAgb2VbNl0gPSBlWzZdO1xuICAgIG9lWzddID0gZVs3XTtcbiAgICBvZVs4XSA9IGVbOF07XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHN1bSBvZiB0aGlzIG1hdHJpeCBhbmQgdGhlIHNwZWNpZmllZCBtYXRyaXguXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgbWF0cml4XG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IHRoYXQgc3RvcmUgdGhlIHN1bSBvZiB0aGUgdHdvIG1hdHJpY2VzXG4gICAqL1xuICBhZGQocmlnaHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLmFkZCh0aGlzLCByaWdodCwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoaXMgbWF0cml4IGFuZCB0aGUgc3BlY2lmaWVkIG1hdHJpeC5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHJldHVybnMgVGhpcyBtYXRyaXggdGhhdCBzdG9yZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28gbWF0cmljZXNcbiAgICovXG4gIHN1YnRyYWN0KHJpZ2h0OiBNYXRyaXgzKTogTWF0cml4MyB7XG4gICAgTWF0cml4My5zdWJ0cmFjdCh0aGlzLCByaWdodCwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcHJvZHVjdCBvZiB0aGlzIG1hdHJpeCBhbmQgdGhlIHNwZWNpZmllZCBtYXRyaXguXG4gICAqIEBwYXJhbSByaWdodCAtIFRoZSBzcGVjaWZpZWQgbWF0cml4XG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IHRoYXQgc3RvcmUgdGhlIHByb2R1Y3Qgb2YgdGhlIHR3byBtYXRyaWNlc1xuICAgKi9cbiAgbXVsdGlwbHkocmlnaHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLm11bHRpcGx5KHRoaXMsIHJpZ2h0LCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBkZXRlcm1pbmFudCBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHJldHVybnMgVGhlIGRldGVybWluYW50IG9mIHRoaXMgbWF0cml4XG4gICAqL1xuICBkZXRlcm1pbmFudCgpOiBudW1iZXIge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gZVswXSxcbiAgICAgIGExMiA9IGVbMV0sXG4gICAgICBhMTMgPSBlWzJdO1xuICAgIGNvbnN0IGEyMSA9IGVbM10sXG4gICAgICBhMjIgPSBlWzRdLFxuICAgICAgYTIzID0gZVs1XTtcbiAgICBjb25zdCBhMzEgPSBlWzZdLFxuICAgICAgYTMyID0gZVs3XSxcbiAgICAgIGEzMyA9IGVbOF07XG5cbiAgICBjb25zdCBiMTIgPSBhMzMgKiBhMjIgLSBhMjMgKiBhMzI7XG4gICAgY29uc3QgYjIyID0gLWEzMyAqIGEyMSArIGEyMyAqIGEzMTtcbiAgICBjb25zdCBiMzIgPSBhMzIgKiBhMjEgLSBhMjIgKiBhMzE7XG5cbiAgICByZXR1cm4gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuICB9XG5cbiAgLyoqXG4gICAqIElkZW50aXR5IHRoaXMgbWF0cml4LlxuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCBhZnRlciBpZGVudGl0eVxuICAgKi9cbiAgaWRlbnRpdHkoKTogTWF0cml4MyB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBlWzBdID0gMTtcbiAgICBlWzFdID0gMDtcbiAgICBlWzJdID0gMDtcblxuICAgIGVbM10gPSAwO1xuICAgIGVbNF0gPSAxO1xuICAgIGVbNV0gPSAwO1xuXG4gICAgZVs2XSA9IDA7XG4gICAgZVs3XSA9IDA7XG4gICAgZVs4XSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZlcnQgdGhlIG1hdHJpeC5cbiAgICogQHJldHVybnMgVGhlIG1hdHJpeCBhZnRlciBpbnZlcnRcbiAgICovXG4gIGludmVydCgpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLmludmVydCh0aGlzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1hdHJpeCByb3RhdGVzIGFyb3VuZCBhbiBhbmdsZS5cbiAgICogQHBhcmFtIHIgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCBhZnRlciByb3RhdGVcbiAgICovXG4gIHJvdGF0ZShyOiBudW1iZXIpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLnJvdGF0ZSh0aGlzLCByLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIG1hdHJpeCBieSBhIGdpdmVuIHZlY3Rvci5cbiAgICogQHBhcmFtIHMgLSBUaGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIHNjYWxlXG4gICAqL1xuICBzY2FsZShzOiBWZWN0b3IyKTogTWF0cml4MyB7XG4gICAgTWF0cml4My5zY2FsZSh0aGlzLCBzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgdGhpcyBtYXRyaXggYnkgYSBnaXZlbiB2ZWN0b3IuXG4gICAqIEBwYXJhbSB0cmFuc2xhdGlvbiAtIFRoZSBnaXZlbiB2ZWN0b3JcbiAgICogQHJldHVybnMgVGhpcyBtYXRyaXggYWZ0ZXIgdHJhbnNsYXRlXG4gICAqL1xuICB0cmFuc2xhdGUodHJhbnNsYXRpb246IFZlY3RvcjIpOiBNYXRyaXgzIHtcbiAgICBNYXRyaXgzLnRyYW5zbGF0ZSh0aGlzLCB0cmFuc2xhdGlvbiwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0cmFuc3Bvc2Ugb2YgdGhpcyBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIHRyYW5zcG9zZVxuICAgKi9cbiAgdHJhbnNwb3NlKCk6IE1hdHJpeDMge1xuICAgIE1hdHJpeDMudHJhbnNwb3NlKHRoaXMsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNYXRoVXRpbCB9IGZyb20gJy4vTWF0aFV0aWwnO1xuaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4vTWF0cml4Myc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZm91ciBkaW1lbnNpb25hbCBtYXRoZW1hdGljYWwgcXVhdGVybmlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFF1YXRlcm5pb24ge1xuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyByZWFkb25seSBfdGVtcFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyByZWFkb25seSBfdGVtcFF1YXQxID0gbmV3IFF1YXRlcm5pb24oKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3VtIG9mIHR3byBxdWF0ZXJuaW9ucy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgcXVhdGVybmlvbiB0byBhZGRcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBxdWF0ZXJuaW9uIHRvIGFkZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHN1bSBvZiB0d28gcXVhdGVybmlvbnNcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogUXVhdGVybmlvbiwgcmlnaHQ6IFF1YXRlcm5pb24sIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIG91dC5feCA9IGxlZnQuX3ggKyByaWdodC5feDtcbiAgICBvdXQuX3kgPSBsZWZ0Ll95ICsgcmlnaHQuX3k7XG4gICAgb3V0Ll96ID0gbGVmdC5feiArIHJpZ2h0Ll96O1xuICAgIG91dC5fdyA9IGxlZnQuX3cgKyByaWdodC5fdztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9ucy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgcXVhdGVybmlvbiB0byBtdWx0aXBseVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb24gdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIG91dCAtIFRoZSBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9uc1xuICAgKi9cbiAgc3RhdGljIG11bHRpcGx5KGxlZnQ6IFF1YXRlcm5pb24sIHJpZ2h0OiBRdWF0ZXJuaW9uLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBjb25zdCBheCA9IGxlZnQuX3gsXG4gICAgICBheSA9IGxlZnQuX3ksXG4gICAgICBheiA9IGxlZnQuX3osXG4gICAgICBhdyA9IGxlZnQuX3c7XG4gICAgY29uc3QgYnggPSByaWdodC5feCxcbiAgICAgIGJ5ID0gcmlnaHQuX3ksXG4gICAgICBieiA9IHJpZ2h0Ll96LFxuICAgICAgYncgPSByaWdodC5fdztcblxuICAgIG91dC5feCA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gICAgb3V0Ll95ID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgICBvdXQuX3ogPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIG91dC5fdyA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHF1YXRlcm5pb24gdGhhdCBjb250YWlucyBjb25qdWdhdGVkIHZlcnNpb24gb2YgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBzcGVjaWZpZWQgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNvbmp1Z2F0ZSB2ZXJzaW9uIG9mIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIGNvbmp1Z2F0ZShhOiBRdWF0ZXJuaW9uLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBvdXQuX3ggPSAtYS5feDtcbiAgICBvdXQuX3kgPSAtYS5feTtcbiAgICBvdXQuX3ogPSAtYS5fejtcbiAgICBvdXQuX3cgPSBhLl93O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9ucy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgcXVhdGVybmlvbiB0byBkb3RcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBxdWF0ZXJuaW9uIHRvIGRvdFxuICAgKiBAcmV0dXJucyBUaGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXRlcm5pb25zXG4gICAqL1xuICBzdGF0aWMgZG90KGxlZnQ6IFF1YXRlcm5pb24sIHJpZ2h0OiBRdWF0ZXJuaW9uKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbGVmdC5feCAqIHJpZ2h0Ll94ICsgbGVmdC5feSAqIHJpZ2h0Ll95ICsgbGVmdC5feiAqIHJpZ2h0Ll96ICsgbGVmdC5fdyAqIHJpZ2h0Ll93O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb25zIGFyZSBlcXVhbHMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IHF1YXRlcm5pb24gdG8gY29tcGFyZVxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb24gdG8gY29tcGFyZVxuICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbnMgYXJlIGVxdWFscywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IFF1YXRlcm5pb24sIHJpZ2h0OiBRdWF0ZXJuaW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll94LCByaWdodC5feCkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll95LCByaWdodC5feSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll96LCByaWdodC5feikgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0Ll93LCByaWdodC5fdylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHF1YXRlcm5pb24gcm90YXRlcyBhcm91bmQgYW4gYXJiaXRyYXJ5IGF4aXMuXG4gICAqIEBwYXJhbSBheGlzIC0gVGhlIGF4aXNcbiAgICogQHBhcmFtIHJhZCAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcXVhdGVybmlvbiBhZnRlciByb3RhdGVcbiAgICovXG4gIHN0YXRpYyByb3RhdGlvbkF4aXNBbmdsZShheGlzOiBWZWN0b3IzLCByYWQ6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgY29uc3Qgbm9ybWFsQXhpcyA9IFF1YXRlcm5pb24uX3RlbXBWZWN0b3IzO1xuICAgIFZlY3RvcjMubm9ybWFsaXplKGF4aXMsIG5vcm1hbEF4aXMpO1xuICAgIHJhZCAqPSAwLjU7XG4gICAgY29uc3QgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgb3V0Ll94ID0gbm9ybWFsQXhpcy5feCAqIHM7XG4gICAgb3V0Ll95ID0gbm9ybWFsQXhpcy5feSAqIHM7XG4gICAgb3V0Ll96ID0gbm9ybWFsQXhpcy5feiAqIHM7XG4gICAgb3V0Ll93ID0gTWF0aC5jb3MocmFkKTtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBxdWF0ZXJuaW9uIHJvdGF0ZXMgYXJvdW5kIHgsIHksIHogYXhpcyAocGl0Y2gveWF3L3JvbGwpLlxuICAgKiBAcGFyYW0geCAtIFRoZSByYWRpYW4gb2Ygcm90YXRpb24gYXJvdW5kIFggKHBpdGNoKVxuICAgKiBAcGFyYW0geSAtIFRoZSByYWRpYW4gb2Ygcm90YXRpb24gYXJvdW5kIFkgKHlhdylcbiAgICogQHBhcmFtIHogLSBUaGUgcmFkaWFuIG9mIHJvdGF0aW9uIGFyb3VuZCBaIChyb2xsKVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uRXVsZXIoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgUXVhdGVybmlvbi5yb3RhdGlvbllhd1BpdGNoUm9sbCh5LCB4LCB6LCBvdXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHF1YXRlcm5pb24gZnJvbSB0aGUgc3BlY2lmaWVkIHlhdywgcGl0Y2ggYW5kIHJvbGwgYW5nbGVzLlxuICAgKiBAcGFyYW0geWF3IC0gWWF3IGFyb3VuZCB0aGUgeSBheGlzIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIHBpdGNoIC0gUGl0Y2ggYXJvdW5kIHRoZSB4IGF4aXMgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gcm9sbCAtIFJvbGwgYXJvdW5kIHRoZSB6IGF4aXMgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uWWF3UGl0Y2hSb2xsKHlhdzogbnVtYmVyLCBwaXRjaDogbnVtYmVyLCByb2xsOiBudW1iZXIsIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIGNvbnN0IGhhbGZSb2xsID0gcm9sbCAqIDAuNTtcbiAgICBjb25zdCBoYWxmUGl0Y2ggPSBwaXRjaCAqIDAuNTtcbiAgICBjb25zdCBoYWxmWWF3ID0geWF3ICogMC41O1xuXG4gICAgY29uc3Qgc2luUm9sbCA9IE1hdGguc2luKGhhbGZSb2xsKTtcbiAgICBjb25zdCBjb3NSb2xsID0gTWF0aC5jb3MoaGFsZlJvbGwpO1xuICAgIGNvbnN0IHNpblBpdGNoID0gTWF0aC5zaW4oaGFsZlBpdGNoKTtcbiAgICBjb25zdCBjb3NQaXRjaCA9IE1hdGguY29zKGhhbGZQaXRjaCk7XG4gICAgY29uc3Qgc2luWWF3ID0gTWF0aC5zaW4oaGFsZllhdyk7XG4gICAgY29uc3QgY29zWWF3ID0gTWF0aC5jb3MoaGFsZllhdyk7XG5cbiAgICBjb25zdCBjb3NZYXdQaXRjaCA9IGNvc1lhdyAqIGNvc1BpdGNoO1xuICAgIGNvbnN0IHNpbllhd1BpdGNoID0gc2luWWF3ICogc2luUGl0Y2g7XG5cbiAgICBvdXQuX3ggPSBjb3NZYXcgKiBzaW5QaXRjaCAqIGNvc1JvbGwgKyBzaW5ZYXcgKiBjb3NQaXRjaCAqIHNpblJvbGw7XG4gICAgb3V0Ll95ID0gc2luWWF3ICogY29zUGl0Y2ggKiBjb3NSb2xsIC0gY29zWWF3ICogc2luUGl0Y2ggKiBzaW5Sb2xsO1xuICAgIG91dC5feiA9IGNvc1lhd1BpdGNoICogc2luUm9sbCAtIHNpbllhd1BpdGNoICogY29zUm9sbDtcbiAgICBvdXQuX3cgPSBjb3NZYXdQaXRjaCAqIGNvc1JvbGwgKyBzaW5ZYXdQaXRjaCAqIHNpblJvbGw7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBzcGVjaWZpZWQgM3gzIG1hdHJpeC5cbiAgICogQHBhcmFtIG0gLSBUaGUgc3BlY2lmaWVkIDN4MyBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIHF1YXRlcm5pb25cbiAgICovXG4gIHN0YXRpYyByb3RhdGlvbk1hdHJpeDN4MyhtOiBNYXRyaXgzLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBjb25zdCBtZSA9IG0uZWxlbWVudHM7XG4gICAgY29uc3QgbTExID0gbWVbMF0sXG4gICAgICBtMTIgPSBtZVsxXSxcbiAgICAgIG0xMyA9IG1lWzJdO1xuICAgIGNvbnN0IG0yMSA9IG1lWzNdLFxuICAgICAgbTIyID0gbWVbNF0sXG4gICAgICBtMjMgPSBtZVs1XTtcbiAgICBjb25zdCBtMzEgPSBtZVs2XSxcbiAgICAgIG0zMiA9IG1lWzddLFxuICAgICAgbTMzID0gbWVbOF07XG4gICAgY29uc3Qgc2NhbGUgPSBtMTEgKyBtMjIgKyBtMzM7XG4gICAgbGV0IHNxcnQsIGhhbGY7XG5cbiAgICBpZiAoc2NhbGUgPiAwKSB7XG4gICAgICBzcXJ0ID0gTWF0aC5zcXJ0KHNjYWxlICsgMS4wKTtcbiAgICAgIG91dC5fdyA9IHNxcnQgKiAwLjU7XG4gICAgICBzcXJ0ID0gMC41IC8gc3FydDtcblxuICAgICAgb3V0Ll94ID0gKG0yMyAtIG0zMikgKiBzcXJ0O1xuICAgICAgb3V0Ll95ID0gKG0zMSAtIG0xMykgKiBzcXJ0O1xuICAgICAgb3V0Ll96ID0gKG0xMiAtIG0yMSkgKiBzcXJ0O1xuICAgIH0gZWxzZSBpZiAobTExID49IG0yMiAmJiBtMTEgPj0gbTMzKSB7XG4gICAgICBzcXJ0ID0gTWF0aC5zcXJ0KDEuMCArIG0xMSAtIG0yMiAtIG0zMyk7XG4gICAgICBoYWxmID0gMC41IC8gc3FydDtcblxuICAgICAgb3V0Ll94ID0gMC41ICogc3FydDtcbiAgICAgIG91dC5feSA9IChtMTIgKyBtMjEpICogaGFsZjtcbiAgICAgIG91dC5feiA9IChtMTMgKyBtMzEpICogaGFsZjtcbiAgICAgIG91dC5fdyA9IChtMjMgLSBtMzIpICogaGFsZjtcbiAgICB9IGVsc2UgaWYgKG0yMiA+IG0zMykge1xuICAgICAgc3FydCA9IE1hdGguc3FydCgxLjAgKyBtMjIgLSBtMTEgLSBtMzMpO1xuICAgICAgaGFsZiA9IDAuNSAvIHNxcnQ7XG5cbiAgICAgIG91dC5feCA9IChtMjEgKyBtMTIpICogaGFsZjtcbiAgICAgIG91dC5feSA9IDAuNSAqIHNxcnQ7XG4gICAgICBvdXQuX3ogPSAobTMyICsgbTIzKSAqIGhhbGY7XG4gICAgICBvdXQuX3cgPSAobTMxIC0gbTEzKSAqIGhhbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNxcnQgPSBNYXRoLnNxcnQoMS4wICsgbTMzIC0gbTExIC0gbTIyKTtcbiAgICAgIGhhbGYgPSAwLjUgLyBzcXJ0O1xuXG4gICAgICBvdXQuX3ggPSAobTEzICsgbTMxKSAqIGhhbGY7XG4gICAgICBvdXQuX3kgPSAobTIzICsgbTMyKSAqIGhhbGY7XG4gICAgICBvdXQuX3ogPSAwLjUgKiBzcXJ0O1xuICAgICAgb3V0Ll93ID0gKG0xMiAtIG0yMSkgKiBoYWxmO1xuICAgIH1cbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGludmVyc2Ugb2YgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBxdWF0ZXJuaW9uIHdob3NlIGludmVyc2UgaXMgdG8gYmUgY2FsY3VsYXRlZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGludmVyc2Ugb2YgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBzdGF0aWMgaW52ZXJ0KGE6IFF1YXRlcm5pb24sIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIGNvbnN0IHsgX3g6IHgsIF95OiB5LCBfejogeiwgX3c6IHcgfSA9IGE7XG4gICAgY29uc3QgZG90ID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gICAgaWYgKGRvdCA+IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIGNvbnN0IGludkRvdCA9IDEuMCAvIGRvdDtcbiAgICAgIG91dC5feCA9IC14ICogaW52RG90O1xuICAgICAgb3V0Ll95ID0gLXkgKiBpbnZEb3Q7XG4gICAgICBvdXQuX3ogPSAteiAqIGludkRvdDtcbiAgICAgIG91dC5fdyA9IHcgKiBpbnZEb3Q7XG4gICAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBsaW5lYXIgYmxlbmQgYmV0d2VlbiB0d28gcXVhdGVybmlvbnMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBlbmQgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHQgLSBUaGUgYmxlbmQgYW1vdW50IHdoZXJlIDAgcmV0dXJucyBzdGFydCBhbmQgMSBlbmRcbiAgICogQHBhcmFtIG91dCAtIFRoZSByZXN1bHQgb2YgbGluZWFyIGJsZW5kaW5nIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zXG4gICAqL1xuICBzdGF0aWMgbGVycChzdGFydDogUXVhdGVybmlvbiwgZW5kOiBRdWF0ZXJuaW9uLCB0OiBudW1iZXIsIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIGNvbnN0IGludiA9IDEuMCAtIHQ7XG4gICAgaWYgKFF1YXRlcm5pb24uZG90KHN0YXJ0LCBlbmQpID49IDApIHtcbiAgICAgIG91dC5feCA9IHN0YXJ0Ll94ICogaW52ICsgZW5kLl94ICogdDtcbiAgICAgIG91dC5feSA9IHN0YXJ0Ll95ICogaW52ICsgZW5kLl95ICogdDtcbiAgICAgIG91dC5feiA9IHN0YXJ0Ll96ICogaW52ICsgZW5kLl96ICogdDtcbiAgICAgIG91dC5fdyA9IHN0YXJ0Ll93ICogaW52ICsgZW5kLl93ICogdDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Ll94ID0gc3RhcnQuX3ggKiBpbnYgLSBlbmQuX3ggKiB0O1xuICAgICAgb3V0Ll95ID0gc3RhcnQuX3kgKiBpbnYgLSBlbmQuX3kgKiB0O1xuICAgICAgb3V0Ll96ID0gc3RhcnQuX3ogKiBpbnYgLSBlbmQuX3ogKiB0O1xuICAgICAgb3V0Ll93ID0gc3RhcnQuX3cgKiBpbnYgLSBlbmQuX3cgKiB0O1xuICAgIH1cblxuICAgIG91dC5ub3JtYWxpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgYmxlbmQgYmV0d2VlbiB0d28gcXVhdGVybmlvbnMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBlbmQgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHQgLSBUaGUgYmxlbmQgYW1vdW50IHdoZXJlIDAgcmV0dXJucyBzdGFydCBhbmQgMSBlbmRcbiAgICogQHBhcmFtIG91dCAtIFRoZSByZXN1bHQgb2Ygc3BoZXJpY2FsIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byBxdWF0ZXJuaW9uc1xuICAgKi9cbiAgc3RhdGljIHNsZXJwKHN0YXJ0OiBRdWF0ZXJuaW9uLCBlbmQ6IFF1YXRlcm5pb24sIHQ6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgY29uc3QgYXggPSBzdGFydC5feDtcbiAgICBjb25zdCBheSA9IHN0YXJ0Ll95O1xuICAgIGNvbnN0IGF6ID0gc3RhcnQuX3o7XG4gICAgY29uc3QgYXcgPSBzdGFydC5fdztcbiAgICBsZXQgYnggPSBlbmQuX3g7XG4gICAgbGV0IGJ5ID0gZW5kLl95O1xuICAgIGxldCBieiA9IGVuZC5fejtcbiAgICBsZXQgYncgPSBlbmQuX3c7XG5cbiAgICBsZXQgc2NhbGUwOiBudW1iZXIsIHNjYWxlMTogbnVtYmVyO1xuICAgIC8vIGNhbGMgY29zaW5lXG4gICAgbGV0IGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcbiAgICAvLyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcbiAgICBpZiAoY29zb20gPCAwLjApIHtcbiAgICAgIGNvc29tID0gLWNvc29tO1xuICAgICAgYnggPSAtYng7XG4gICAgICBieSA9IC1ieTtcbiAgICAgIGJ6ID0gLWJ6O1xuICAgICAgYncgPSAtYnc7XG4gICAgfVxuICAgIC8vIGNhbGN1bGF0ZSBjb2VmZmljaWVudHNcbiAgICBpZiAoMS4wIC0gY29zb20gPiBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICAvLyBzdGFuZGFyZCBjYXNlIChzbGVycClcbiAgICAgIGNvbnN0IG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICAgIGNvbnN0IHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgICAgc2NhbGUwID0gTWF0aC5zaW4oKDEuMCAtIHQpICogb21lZ2EpIC8gc2lub207XG4gICAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgcXVhdGVybmlvbnMgYXJlIHZlcnkgY2xvc2VcbiAgICAgIC8vICAuLi4gc28gd2UgY2FuIGRvIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICAgIHNjYWxlMCA9IDEuMCAtIHQ7XG4gICAgICBzY2FsZTEgPSB0O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXG4gICAgb3V0Ll94ID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICBvdXQuX3kgPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIG91dC5feiA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgb3V0Ll93ID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZXMgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uIG1hZ25pdHVkZSB0byB1bml0IGxlbmd0aC5cbiAgICogQHBhcmFtIGEgLSBUaGUgc3BlY2lmaWVkIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIG91dCAtIFRoZSBub3JtYWxpemVkIHF1YXRlcm5pb25cbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemUoYTogUXVhdGVybmlvbiwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96LCBfdyB9ID0gYTtcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfeiArIF93ICogX3cpO1xuICAgIGlmIChsZW4gPiBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgb3V0Ll94ID0gX3ggKiBsZW47XG4gICAgICBvdXQuX3kgPSBfeSAqIGxlbjtcbiAgICAgIG91dC5feiA9IF96ICogbGVuO1xuICAgICAgb3V0Ll93ID0gX3cgKiBsZW47XG4gICAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgcXVhdGVybmlvbiByb3RhdGUgYXJvdW5kIFggYXhpcy5cbiAgICogQHBhcmFtIHJhZCAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBzdGF0aWMgcm90YXRpb25YKHJhZDogbnVtYmVyLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICByYWQgKj0gMC41O1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihyYWQpO1xuICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0Ll94ID0gcztcbiAgICBvdXQuX3kgPSAwO1xuICAgIG91dC5feiA9IDA7XG4gICAgb3V0Ll93ID0gYztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBxdWF0ZXJuaW9uIHJvdGF0ZSBhcm91bmQgWSBheGlzLlxuICAgKiBAcGFyYW0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIHF1YXRlcm5pb25cbiAgICovXG4gIHN0YXRpYyByb3RhdGlvblkocmFkOiBudW1iZXIsIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIHJhZCAqPSAwLjU7XG4gICAgY29uc3QgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgY29uc3QgYyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXQuX3ggPSAwO1xuICAgIG91dC5feSA9IHM7XG4gICAgb3V0Ll96ID0gMDtcbiAgICBvdXQuX3cgPSBjO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHF1YXRlcm5pb24gcm90YXRlIGFyb3VuZCBaIGF4aXMuXG4gICAqIEBwYXJhbSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uWihyYWQ6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgcmFkICo9IDAuNTtcbiAgICBjb25zdCBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICBjb25zdCBjID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dC5feCA9IDA7XG4gICAgb3V0Ll95ID0gMDtcbiAgICBvdXQuX3ogPSBzO1xuICAgIG91dC5fdyA9IGM7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgcXVhdGVybmlvbiB0aGF0IHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbiByb3RhdGUgYXJvdW5kIFggYXhpcy5cbiAgICogQHBhcmFtIHF1YXRlcm5pb24gLSBUaGUgc3BlY2lmaWVkIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHJhZCAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBzdGF0aWMgcm90YXRlWChxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uLCByYWQ6IG51bWJlciwgb3V0OiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96LCBfdyB9ID0gcXVhdGVybmlvbjtcbiAgICByYWQgKj0gMC41O1xuICAgIGNvbnN0IGJ4ID0gTWF0aC5zaW4ocmFkKTtcbiAgICBjb25zdCBidyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXQuX3ggPSBfeCAqIGJ3ICsgX3cgKiBieDtcbiAgICBvdXQuX3kgPSBfeSAqIGJ3ICsgX3ogKiBieDtcbiAgICBvdXQuX3ogPSBfeiAqIGJ3IC0gX3kgKiBieDtcbiAgICBvdXQuX3cgPSBfdyAqIGJ3IC0gX3ggKiBieDtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBxdWF0ZXJuaW9uIHRoYXQgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uIHJvdGF0ZSBhcm91bmQgWSBheGlzLlxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiAtIFRoZSBzcGVjaWZpZWQgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIHF1YXRlcm5pb25cbiAgICovXG4gIHN0YXRpYyByb3RhdGVZKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJhZDogbnVtYmVyLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3osIF93IH0gPSBxdWF0ZXJuaW9uO1xuICAgIHJhZCAqPSAwLjU7XG4gICAgY29uc3QgYnkgPSBNYXRoLnNpbihyYWQpO1xuICAgIGNvbnN0IGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dC5feCA9IF94ICogYncgLSBfeiAqIGJ5O1xuICAgIG91dC5feSA9IF95ICogYncgKyBfdyAqIGJ5O1xuICAgIG91dC5feiA9IF96ICogYncgKyBfeCAqIGJ5O1xuICAgIG91dC5fdyA9IF93ICogYncgLSBfeSAqIGJ5O1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHF1YXRlcm5pb24gdGhhdCB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24gcm90YXRlIGFyb3VuZCBaIGF4aXMuXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gVGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcXVhdGVybmlvblxuICAgKi9cbiAgc3RhdGljIHJvdGF0ZVoocXVhdGVybmlvbjogUXVhdGVybmlvbiwgcmFkOiBudW1iZXIsIG91dDogUXVhdGVybmlvbik6IHZvaWQge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHF1YXRlcm5pb247XG4gICAgcmFkICo9IDAuNTtcbiAgICBjb25zdCBieiA9IE1hdGguc2luKHJhZCk7XG4gICAgY29uc3QgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0Ll94ID0gX3ggKiBidyArIF95ICogYno7XG4gICAgb3V0Ll95ID0gX3kgKiBidyAtIF94ICogYno7XG4gICAgb3V0Ll96ID0gX3ogKiBidyArIF93ICogYno7XG4gICAgb3V0Ll93ID0gX3cgKiBidyAtIF96ICogYno7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgYSBxdWF0ZXJuaW9uIGJ5IGEgZ2l2ZW4gbnVtYmVyLlxuICAgKiBAcGFyYW0gYSAtIFRoZSBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBzIC0gVGhlIGdpdmVuIG51bWJlclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNjYWxlZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBzdGF0aWMgc2NhbGUoYTogUXVhdGVybmlvbiwgczogbnVtYmVyLCBvdXQ6IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICBvdXQuX3ggPSBhLl94ICogcztcbiAgICBvdXQuX3kgPSBhLl95ICogcztcbiAgICBvdXQuX3ogPSBhLl96ICogcztcbiAgICBvdXQuX3cgPSBhLl93ICogcztcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3g6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfeTogbnVtYmVyO1xuICAvKiogQGludGVybmFsICovXG4gIF96OiBudW1iZXI7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3c6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfb25WYWx1ZUNoYW5nZWQ6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHF1YXRlcm5pb24uXG4gICAqL1xuICBwdWJsaWMgZ2V0IHgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5feDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgeCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5feCA9IHZhbHVlO1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHkgY29tcG9uZW50IG9mIHRoZSBxdWF0ZXJuaW9uLlxuICAgKi9cbiAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3k7XG4gIH1cblxuICBwdWJsaWMgc2V0IHkodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3kgPSB2YWx1ZTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvbi5cbiAgICovXG4gIHB1YmxpYyBnZXQgeigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl96O1xuICB9XG5cbiAgcHVibGljIHNldCB6KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl96ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY3Rpbmcgd2hldGhlciB0aGlzIGluc3RhbmNlIGlzIG5vcm1hbGl6ZWQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IG5vcm1hbGl6ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGguYWJzKHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93IC0gMSkgPFxuICAgICAgTWF0aFV0aWwuemVyb1RvbGVyYW5jZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHcgY29tcG9uZW50IG9mIHRoZSBxdWF0ZXJuaW9uLlxuICAgKi9cbiAgcHVibGljIGdldCB3KCkge1xuICAgIHJldHVybiB0aGlzLl93O1xuICB9XG5cbiAgcHVibGljIHNldCB3KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl93ID0gdmFsdWU7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBvZiBRdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvbiwgZGVmYXVsdCAwXG4gICAqIEBwYXJhbSB5IC0gVGhlIHkgY29tcG9uZW50IG9mIHRoZSBxdWF0ZXJuaW9uLCBkZWZhdWx0IDBcbiAgICogQHBhcmFtIHogLSBUaGUgeiBjb21wb25lbnQgb2YgdGhlIHF1YXRlcm5pb24sIGRlZmF1bHQgMFxuICAgKiBAcGFyYW0gdyAtIFRoZSB3IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvbiwgZGVmYXVsdCAxXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwLCB6OiBudW1iZXIgPSAwLCB3OiBudW1iZXIgPSAxKSB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gICAgdGhpcy5feiA9IHo7XG4gICAgdGhpcy5fdyA9IHc7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24sIGFuZCByZXR1cm4gdGhpcyBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvblxuICAgKiBAcGFyYW0geSAtIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvblxuICAgKiBAcGFyYW0geiAtIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gdyAtIFRoZSB3IGNvbXBvbmVudCBvZiB0aGUgcXVhdGVybmlvblxuICAgKiBAcmV0dXJucyBUaGlzIHF1YXRlcm5pb25cbiAgICovXG4gIHNldFZhbHVlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHc6IG51bWJlcik6IFF1YXRlcm5pb24ge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3ogPSB6O1xuICAgIHRoaXMuX3cgPSB3O1xuICAgIHRoaXMuX29uVmFsdWVDaGFuZ2VkICYmIHRoaXMuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24gYnkgYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICBzZXRWYWx1ZUJ5QXJyYXkoYXJyYXk6IEFycmF5TGlrZTxudW1iZXI+LCBvZmZzZXQ6IG51bWJlciA9IDApOiBRdWF0ZXJuaW9uIHtcbiAgICB0aGlzLl94ID0gYXJyYXlbb2Zmc2V0XTtcbiAgICB0aGlzLl95ID0gYXJyYXlbb2Zmc2V0ICsgMV07XG4gICAgdGhpcy5feiA9IGFycmF5W29mZnNldCArIDJdO1xuICAgIHRoaXMuX3cgPSBhcnJheVtvZmZzZXQgKyAzXTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBxdWF0ZXJuaW9uIGludG8gaXRzIGNvbmp1Z2F0ZWQgdmVyc2lvbi5cbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICBjb25qdWdhdGUoKTogUXVhdGVybmlvbiB7XG4gICAgdGhpcy5feCAqPSAtMTtcbiAgICB0aGlzLl95ICo9IC0xO1xuICAgIHRoaXMuX3ogKj0gLTE7XG4gICAgdGhpcy5fb25WYWx1ZUNoYW5nZWQgJiYgdGhpcy5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHJvdGF0aW9uIGF4aXMgYW5kIHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBxdWF0ZXJuaW9uICh1bml0OiByYWRpYW5zKS5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBheGlzIGFzIGFuIG91dHB1dCBwYXJhbWV0ZXJcbiAgICogQHJldHVybnMgVGhlIHJvdGF0aW9uIGFuZ2xlICh1bml0OiByYWRpYW5zKVxuICAgKi9cbiAgZ2V0QXhpc0FuZ2xlKG91dDogVmVjdG9yMyk6IG51bWJlciB7XG4gICAgY29uc3QgeyBfeCwgX3ksIF96IH0gPSB0aGlzO1xuICAgIGNvbnN0IGxlbmd0aCA9IF94ICogX3ggKyBfeSAqIF95ICsgX3ogKiBfejtcblxuICAgIGlmIChsZW5ndGggPCBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICBvdXQuX3ggPSAxO1xuICAgICAgb3V0Ll95ID0gMDtcbiAgICAgIG91dC5feiA9IDA7XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbnYgPSAxLjAgLyBsZW5ndGg7XG4gICAgICBvdXQuX3ggPSB0aGlzLl94ICogaW52O1xuICAgICAgb3V0Ll95ID0gdGhpcy5feSAqIGludjtcbiAgICAgIG91dC5feiA9IHRoaXMuX3ogKiBpbnY7XG5cbiAgICAgIHJldHVybiBNYXRoLmFjb3ModGhpcy5fdykgKiAyLjA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIElkZW50aXR5IHRoaXMgcXVhdGVybmlvbi5cbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uIGFmdGVyIGlkZW50aXR5XG4gICAqL1xuICBpZGVudGl0eSgpOiBRdWF0ZXJuaW9uIHtcbiAgICB0aGlzLl94ID0gMDtcbiAgICB0aGlzLl95ID0gMDtcbiAgICB0aGlzLl96ID0gMDtcbiAgICB0aGlzLl93ID0gMTtcbiAgICB0aGlzLl9vblZhbHVlQ2hhbmdlZCAmJiB0aGlzLl9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIHRoaXMgcXVhdGVybmlvbi5cbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGlzIHF1YXRlcm5pb25cbiAgICovXG4gIGxlbmd0aCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHsgX3gsIF95LCBfeiwgX3cgfSA9IHRoaXM7XG4gICAgcmV0dXJuIE1hdGguc3FydChfeCAqIF94ICsgX3kgKiBfeSArIF96ICogX3ogKyBfdyAqIF93KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHF1YXRlcm5pb24uXG4gICAqIEByZXR1cm5zIFRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIHF1YXRlcm5pb25cbiAgICovXG4gIGxlbmd0aFNxdWFyZWQoKTogbnVtYmVyIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3osIF93IH0gPSB0aGlzO1xuICAgIHJldHVybiBfeCAqIF94ICsgX3kgKiBfeSArIF96ICogX3ogKyBfdyAqIF93O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoaXMgcXVhdGVybmlvbiBpbnRvIGEgdW5pdCBxdWF0ZXJuaW9uLlxuICAgKiBAcmV0dXJucyBUaGlzIHF1YXRlcm5pb25cbiAgICovXG4gIG5vcm1hbGl6ZSgpOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLm5vcm1hbGl6ZSh0aGlzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGV1bGVyIG9mIHRoaXMgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBldWxlciAoaW4gcmFkaWFucykgYXMgYW4gb3V0cHV0IHBhcmFtZXRlclxuICAgKiBAcmV0dXJucyBFdWxlciB4LT5waXRjaCB5LT55YXcgei0+cm9sbFxuICAgKi9cbiAgdG9FdWxlcihvdXQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICB0aGlzLl90b1lhd1BpdGNoUm9sbChvdXQpO1xuXG4gICAgY29uc3QgdCA9IG91dC5feDtcbiAgICBvdXQuX3ggPSBvdXQuX3k7XG4gICAgb3V0Ll95ID0gdDtcbiAgICBvdXQuX29uVmFsdWVDaGFuZ2VkICYmIG91dC5fb25WYWx1ZUNoYW5nZWQoKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZXVsZXIgb2YgdGhpcyBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGV1bGVyIChpbiByYWRpYW5zKSBhcyBhbiBvdXRwdXQgcGFyYW1ldGVyXG4gICAqIEByZXR1cm5zIEV1bGVyIHgtPnlhdyB5LT5waXRjaCB6LT5yb2xsXG4gICAqL1xuICB0b1lhd1BpdGNoUm9sbChvdXQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICB0aGlzLl90b1lhd1BpdGNoUm9sbChvdXQpO1xuICAgIG91dC5fb25WYWx1ZUNoYW5nZWQgJiYgb3V0Ll9vblZhbHVlQ2hhbmdlZCgpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbiB0byBhbiBhcnJheS5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb3V0T2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICovXG4gIHRvQXJyYXkob3V0OiBudW1iZXJbXSB8IEZsb2F0MzJBcnJheSB8IEZsb2F0NjRBcnJheSwgb3V0T2Zmc2V0OiBudW1iZXIgPSAwKSB7XG4gICAgb3V0W291dE9mZnNldF0gPSB0aGlzLl94O1xuICAgIG91dFtvdXRPZmZzZXQgKyAxXSA9IHRoaXMuX3k7XG4gICAgb3V0W291dE9mZnNldCArIDJdID0gdGhpcy5fejtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgM10gPSB0aGlzLl93O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIHF1YXRlcm5pb24uXG4gICAqIEByZXR1cm5zIEEgY2xvbmUgb2YgdGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICBjbG9uZSgpOiBRdWF0ZXJuaW9uIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgcXVhdGVybmlvbiB0byB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24uXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc3BlY2lmaWVkIHF1YXRlcm5pb25cbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uXG4gICAqL1xuICBjbG9uZVRvKG91dDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xuICAgIG91dC5feCA9IHRoaXMuX3g7XG4gICAgb3V0Ll95ID0gdGhpcy5feTtcbiAgICBvdXQuX3ogPSB0aGlzLl96O1xuICAgIG91dC5fdyA9IHRoaXMuX3c7XG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhpcyBxdWF0ZXJuaW9uIHJvdGF0ZSBhcm91bmQgWCBheGlzLlxuICAgKiBAcGFyYW0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICByb3RhdGVYKHJhZDogbnVtYmVyKTogUXVhdGVybmlvbiB7XG4gICAgUXVhdGVybmlvbi5yb3RhdGVYKHRoaXMsIHJhZCwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoaXMgcXVhdGVybmlvbiByb3RhdGUgYXJvdW5kIFkgYXhpcy5cbiAgICogQHBhcmFtIHJhZCAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEByZXR1cm5zIFRoaXMgcXVhdGVybmlvblxuICAgKi9cbiAgcm90YXRlWShyYWQ6IG51bWJlcik6IFF1YXRlcm5pb24ge1xuICAgIFF1YXRlcm5pb24ucm90YXRlWSh0aGlzLCByYWQsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGlzIHF1YXRlcm5pb24gcm90YXRlIGFyb3VuZCBaIGF4aXMuXG4gICAqIEBwYXJhbSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBUaGlzIHF1YXRlcm5pb25cbiAgICovXG4gIHJvdGF0ZVoocmFkOiBudW1iZXIpOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLnJvdGF0ZVoodGhpcywgcmFkLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhpcyBxdWF0ZXJuaW9uIHJvdGF0ZXMgYXJvdW5kIGFuIGFyYml0cmFyeSBheGlzLlxuICAgKiBAcGFyYW0gYXhpcyAtIFRoZSBheGlzXG4gICAqIEBwYXJhbSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBUaGlzIHF1YXRlcm5pb25cbiAgICovXG4gIHJvdGF0aW9uQXhpc0FuZ2xlKGF4aXM6IFZlY3RvcjMsIHJhZDogbnVtYmVyKTogUXVhdGVybmlvbiB7XG4gICAgUXVhdGVybmlvbi5yb3RhdGlvbkF4aXNBbmdsZShheGlzLCByYWQsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBxdWF0ZXJuaW9uIGFuZCB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24uXG4gICAqIEBwYXJhbSBxdWF0IC0gVGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uXG4gICAqIEByZXR1cm5zIFRoZSBwcm9kdWN0IG9mIHRoZSB0d28gcXVhdGVybmlvbnNcbiAgICovXG4gIG11bHRpcGx5KHF1YXQ6IFF1YXRlcm5pb24pOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLm11bHRpcGx5KHRoaXMsIHF1YXQsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEludmVydCB0aGlzIHF1YXRlcm5pb24uXG4gICAqIEByZXR1cm5zIFRoaXMgcXVhdGVybmlvbiBhZnRlciBpbnZlcnRcbiAgICovXG4gIGludmVydCgpOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLmludmVydCh0aGlzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0aGlzIHF1YXRlcm5pb24gYW5kIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIHF1YXQgLSBUaGUgc3BlY2lmaWVkIHF1YXRlcm5pb25cbiAgICogQHJldHVybnMgVGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9uc1xuICAgKi9cbiAgZG90KHF1YXQ6IFF1YXRlcm5pb24pOiBudW1iZXIge1xuICAgIHJldHVybiBRdWF0ZXJuaW9uLmRvdCh0aGlzLCBxdWF0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBibGVuZCBiZXR3ZWVuIHRoaXMgcXVhdGVybmlvbiBhbmQgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gcXVhdCAtIFRoZSBzcGVjaWZpZWQgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gdCAtIFRoZSBibGVuZCBhbW91bnQgd2hlcmUgMCByZXR1cm5zIHRoaXMgYW5kIDEgcXVhdFxuICAgKiBAcmV0dXJucyAtIFRoZSByZXN1bHQgb2YgbGluZWFyIGJsZW5kaW5nIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zXG4gICAqL1xuICBsZXJwKHF1YXQ6IFF1YXRlcm5pb24sIHQ6IG51bWJlcik6IFF1YXRlcm5pb24ge1xuICAgIFF1YXRlcm5pb24ubGVycCh0aGlzLCBxdWF0LCB0LCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhpcyBxdWF0ZXJuaW9uIHJvdGF0aW9uIGFyb3VuZCBhbiBhcmJpdHJhcnkgYXhpcy5cbiAgICogQHBhcmFtIGF4aXMgLSBUaGUgYXhpc1xuICAgKiBAcGFyYW0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHJldHVybnMgVGhpcyBxdWF0ZXJuaW9uXG4gICAqL1xuICByb3RhdGVBeGlzQW5nbGUoYXhpczogVmVjdG9yMywgcmFkOiBudW1iZXIpOiBRdWF0ZXJuaW9uIHtcbiAgICBRdWF0ZXJuaW9uLl90ZW1wUXVhdDEucm90YXRpb25BeGlzQW5nbGUoYXhpcywgcmFkKTtcbiAgICB0aGlzLm11bHRpcGx5KFF1YXRlcm5pb24uX3RlbXBRdWF0MSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwcml2YXRlIF90b1lhd1BpdGNoUm9sbChvdXQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICBjb25zdCB7IF94LCBfeSwgX3osIF93IH0gPSB0aGlzO1xuICAgIGNvbnN0IHh4ID0gX3ggKiBfeDtcbiAgICBjb25zdCB5eSA9IF95ICogX3k7XG4gICAgY29uc3QgenogPSBfeiAqIF96O1xuICAgIGNvbnN0IHh5ID0gX3ggKiBfeTtcbiAgICBjb25zdCB6dyA9IF96ICogX3c7XG4gICAgY29uc3QgenggPSBfeiAqIF94O1xuICAgIGNvbnN0IHl3ID0gX3kgKiBfdztcbiAgICBjb25zdCB5eiA9IF95ICogX3o7XG4gICAgY29uc3QgeHcgPSBfeCAqIF93O1xuXG4gICAgb3V0Ll95ID0gTWF0aC5hc2luKDIuMCAqICh4dyAtIHl6KSk7XG4gICAgaWYgKE1hdGguY29zKG91dC55KSA+IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIG91dC5feiA9IE1hdGguYXRhbjIoMi4wICogKHh5ICsgencpLCAxLjAgLSAyLjAgKiAoenogKyB4eCkpO1xuICAgICAgb3V0Ll94ID0gTWF0aC5hdGFuMigyLjAgKiAoenggKyB5dyksIDEuMCAtIDIuMCAqICh5eSArIHh4KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5feiA9IE1hdGguYXRhbjIoLTIuMCAqICh4eSAtIHp3KSwgMS4wIC0gMi4wICogKHl5ICsgenopKTtcbiAgICAgIG91dC5feCA9IDAuMDtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0aFV0aWwgfSBmcm9tICcuL01hdGhVdGlsJztcbmltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuL01hdHJpeDMnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbic7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgNHg0IG1hdGhlbWF0aWNhbCBtYXRyaXguXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRyaXg0IHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX3RlbXBWZWMzMDogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF90ZW1wVmVjMzE6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfdGVtcFZlYzMyOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX3RlbXBNYXQzMDogTWF0cml4MyA9IG5ldyBNYXRyaXgzKCk7XG5cbiAgLyoqIEBpbnRlcm5hbCBJZGVudGl0eSBtYXRyaXguICovXG4gIHN0YXRpYyByZWFkb25seSBfaWRlbnRpdHk6IE1hdHJpeDQgPSBuZXcgTWF0cml4NChcbiAgICAxLjAsXG4gICAgMC4wLFxuICAgIDAuMCxcbiAgICAwLjAsXG4gICAgMC4wLFxuICAgIDEuMCxcbiAgICAwLjAsXG4gICAgMC4wLFxuICAgIDAuMCxcbiAgICAwLjAsXG4gICAgMS4wLFxuICAgIDAuMCxcbiAgICAwLjAsXG4gICAgMC4wLFxuICAgIDAuMCxcbiAgICAxLjAsXG4gICk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHByb2R1Y3Qgb2YgdHdvIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBtYXRyaXggdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBtYXRyaXggdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIG91dCAtIFRoZSBwcm9kdWN0IG9mIHRoZSB0d28gbWF0cmljZXNcbiAgICovXG4gIHN0YXRpYyBtdWx0aXBseShsZWZ0OiBNYXRyaXg0LCByaWdodDogTWF0cml4NCwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgbGUgPSBsZWZ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHJlID0gcmlnaHQuZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBjb25zdCBsMTEgPSBsZVswXSxcbiAgICAgIGwxMiA9IGxlWzFdLFxuICAgICAgbDEzID0gbGVbMl0sXG4gICAgICBsMTQgPSBsZVszXTtcbiAgICBjb25zdCBsMjEgPSBsZVs0XSxcbiAgICAgIGwyMiA9IGxlWzVdLFxuICAgICAgbDIzID0gbGVbNl0sXG4gICAgICBsMjQgPSBsZVs3XTtcbiAgICBjb25zdCBsMzEgPSBsZVs4XSxcbiAgICAgIGwzMiA9IGxlWzldLFxuICAgICAgbDMzID0gbGVbMTBdLFxuICAgICAgbDM0ID0gbGVbMTFdO1xuICAgIGNvbnN0IGw0MSA9IGxlWzEyXSxcbiAgICAgIGw0MiA9IGxlWzEzXSxcbiAgICAgIGw0MyA9IGxlWzE0XSxcbiAgICAgIGw0NCA9IGxlWzE1XTtcblxuICAgIGNvbnN0IHIxMSA9IHJlWzBdLFxuICAgICAgcjEyID0gcmVbMV0sXG4gICAgICByMTMgPSByZVsyXSxcbiAgICAgIHIxNCA9IHJlWzNdO1xuICAgIGNvbnN0IHIyMSA9IHJlWzRdLFxuICAgICAgcjIyID0gcmVbNV0sXG4gICAgICByMjMgPSByZVs2XSxcbiAgICAgIHIyNCA9IHJlWzddO1xuICAgIGNvbnN0IHIzMSA9IHJlWzhdLFxuICAgICAgcjMyID0gcmVbOV0sXG4gICAgICByMzMgPSByZVsxMF0sXG4gICAgICByMzQgPSByZVsxMV07XG4gICAgY29uc3QgcjQxID0gcmVbMTJdLFxuICAgICAgcjQyID0gcmVbMTNdLFxuICAgICAgcjQzID0gcmVbMTRdLFxuICAgICAgcjQ0ID0gcmVbMTVdO1xuXG4gICAgb2VbMF0gPSBsMTEgKiByMTEgKyBsMjEgKiByMTIgKyBsMzEgKiByMTMgKyBsNDEgKiByMTQ7XG4gICAgb2VbMV0gPSBsMTIgKiByMTEgKyBsMjIgKiByMTIgKyBsMzIgKiByMTMgKyBsNDIgKiByMTQ7XG4gICAgb2VbMl0gPSBsMTMgKiByMTEgKyBsMjMgKiByMTIgKyBsMzMgKiByMTMgKyBsNDMgKiByMTQ7XG4gICAgb2VbM10gPSBsMTQgKiByMTEgKyBsMjQgKiByMTIgKyBsMzQgKiByMTMgKyBsNDQgKiByMTQ7XG5cbiAgICBvZVs0XSA9IGwxMSAqIHIyMSArIGwyMSAqIHIyMiArIGwzMSAqIHIyMyArIGw0MSAqIHIyNDtcbiAgICBvZVs1XSA9IGwxMiAqIHIyMSArIGwyMiAqIHIyMiArIGwzMiAqIHIyMyArIGw0MiAqIHIyNDtcbiAgICBvZVs2XSA9IGwxMyAqIHIyMSArIGwyMyAqIHIyMiArIGwzMyAqIHIyMyArIGw0MyAqIHIyNDtcbiAgICBvZVs3XSA9IGwxNCAqIHIyMSArIGwyNCAqIHIyMiArIGwzNCAqIHIyMyArIGw0NCAqIHIyNDtcblxuICAgIG9lWzhdID0gbDExICogcjMxICsgbDIxICogcjMyICsgbDMxICogcjMzICsgbDQxICogcjM0O1xuICAgIG9lWzldID0gbDEyICogcjMxICsgbDIyICogcjMyICsgbDMyICogcjMzICsgbDQyICogcjM0O1xuICAgIG9lWzEwXSA9IGwxMyAqIHIzMSArIGwyMyAqIHIzMiArIGwzMyAqIHIzMyArIGw0MyAqIHIzNDtcbiAgICBvZVsxMV0gPSBsMTQgKiByMzEgKyBsMjQgKiByMzIgKyBsMzQgKiByMzMgKyBsNDQgKiByMzQ7XG5cbiAgICBvZVsxMl0gPSBsMTEgKiByNDEgKyBsMjEgKiByNDIgKyBsMzEgKiByNDMgKyBsNDEgKiByNDQ7XG4gICAgb2VbMTNdID0gbDEyICogcjQxICsgbDIyICogcjQyICsgbDMyICogcjQzICsgbDQyICogcjQ0O1xuICAgIG9lWzE0XSA9IGwxMyAqIHI0MSArIGwyMyAqIHI0MiArIGwzMyAqIHI0MyArIGw0MyAqIHI0NDtcbiAgICBvZVsxNV0gPSBsMTQgKiByNDEgKyBsMjQgKiByNDIgKyBsMzQgKiByNDMgKyBsNDQgKiByNDQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgbWF0cmljZXMgYXJlIGVxdWFscy5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgbWF0cml4IHRvIGNvbXBhcmVcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBtYXRyaXggdG8gY29tcGFyZVxuICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgbWF0cmljZXMgYXJlIGVxdWFscywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IE1hdHJpeDQsIHJpZ2h0OiBNYXRyaXg0KTogYm9vbGVhbiB7XG4gICAgY29uc3QgbGUgPSBsZWZ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHJlID0gcmlnaHQuZWxlbWVudHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzBdLCByZVswXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxXSwgcmVbMV0pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbMl0sIHJlWzJdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzNdLCByZVszXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVs0XSwgcmVbNF0pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbNV0sIHJlWzVdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzZdLCByZVs2XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVs3XSwgcmVbN10pICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVbOF0sIHJlWzhdKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlWzldLCByZVs5XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxMF0sIHJlWzEwXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxMV0sIHJlWzExXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxMl0sIHJlWzEyXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxM10sIHJlWzEzXSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxNF0sIHJlWzE0XSkgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZVsxNV0sIHJlWzE1XSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gbWF0cmljZXMuXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBmaXJzdCBtYXRyaXhcbiAgICogQHBhcmFtIGVuZCAtIFRoZSBzZWNvbmQgbWF0cml4XG4gICAqIEBwYXJhbSB0IC0gVGhlIGJsZW5kIGFtb3VudCB3aGVyZSAwIHJldHVybnMgc3RhcnQgYW5kIDEgZW5kXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgcmVzdWx0IG9mIGxpbmVhciBibGVuZGluZyBiZXR3ZWVuIHR3byBtYXRyaWNlc1xuICAgKi9cbiAgc3RhdGljIGxlcnAoc3RhcnQ6IE1hdHJpeDQsIGVuZDogTWF0cml4NCwgdDogbnVtYmVyLCBvdXQ6IE1hdHJpeDQpOiB2b2lkIHtcbiAgICBjb25zdCBzZSA9IHN0YXJ0LmVsZW1lbnRzO1xuICAgIGNvbnN0IGVlID0gZW5kLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIGNvbnN0IGludiA9IDEuMCAtIHQ7XG5cbiAgICBvZVswXSA9IHNlWzBdICogaW52ICsgZWVbMF0gKiB0O1xuICAgIG9lWzFdID0gc2VbMV0gKiBpbnYgKyBlZVsxXSAqIHQ7XG4gICAgb2VbMl0gPSBzZVsyXSAqIGludiArIGVlWzJdICogdDtcbiAgICBvZVszXSA9IHNlWzNdICogaW52ICsgZWVbM10gKiB0O1xuXG4gICAgb2VbNF0gPSBzZVs0XSAqIGludiArIGVlWzRdICogdDtcbiAgICBvZVs1XSA9IHNlWzVdICogaW52ICsgZWVbNV0gKiB0O1xuICAgIG9lWzZdID0gc2VbNl0gKiBpbnYgKyBlZVs2XSAqIHQ7XG4gICAgb2VbN10gPSBzZVs3XSAqIGludiArIGVlWzddICogdDtcblxuICAgIG9lWzhdID0gc2VbOF0gKiBpbnYgKyBlZVs4XSAqIHQ7XG4gICAgb2VbOV0gPSBzZVs5XSAqIGludiArIGVlWzldICogdDtcbiAgICBvZVsxMF0gPSBzZVsxMF0gKiBpbnYgKyBlZVsxMF0gKiB0O1xuICAgIG9lWzExXSA9IHNlWzExXSAqIGludiArIGVlWzExXSAqIHQ7XG5cbiAgICBvZVsxMl0gPSBzZVsxMl0gKiBpbnYgKyBlZVsxMl0gKiB0O1xuICAgIG9lWzEzXSA9IHNlWzEzXSAqIGludiArIGVlWzEzXSAqIHQ7XG4gICAgb2VbMTRdID0gc2VbMTRdICogaW52ICsgZWVbMTRdICogdDtcbiAgICBvZVsxNV0gPSBzZVsxNV0gKiBpbnYgKyBlZVsxNV0gKiB0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHJvdGF0aW9uIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIHF1YXRlcm5pb24gLSBUaGUgcXVhdGVybmlvbiB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgbWF0cml4XG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCByb3RhdGlvbiBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyByb3RhdGlvblF1YXRlcm5pb24ocXVhdGVybmlvbjogUXVhdGVybmlvbiwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeyBfeDogeCwgX3k6IHksIF96OiB6LCBfdzogdyB9ID0gcXVhdGVybmlvbjtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeXggPSB5ICogeDI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB6eCA9IHogKiB4MjtcbiAgICBsZXQgenkgPSB6ICogeTI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gICAgb2VbMF0gPSAxIC0geXkgLSB6ejtcbiAgICBvZVsxXSA9IHl4ICsgd3o7XG4gICAgb2VbMl0gPSB6eCAtIHd5O1xuICAgIG9lWzNdID0gMDtcblxuICAgIG9lWzRdID0geXggLSB3ejtcbiAgICBvZVs1XSA9IDEgLSB4eCAtIHp6O1xuICAgIG9lWzZdID0genkgKyB3eDtcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IHp4ICsgd3k7XG4gICAgb2VbOV0gPSB6eSAtIHd4O1xuICAgIG9lWzEwXSA9IDEgLSB4eCAtIHl5O1xuICAgIG9lWzExXSA9IDA7XG5cbiAgICBvZVsxMl0gPSAwO1xuICAgIG9lWzEzXSA9IDA7XG4gICAgb2VbMTRdID0gMDtcbiAgICBvZVsxNV0gPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIG1hdHJpeCByb3RhdGVzIGFyb3VuZCBhbiBhcmJpdHJhcnkgYXhpcy5cbiAgICogQHBhcmFtIGF4aXMgLSBUaGUgYXhpc1xuICAgKiBAcGFyYW0gciAtIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgbWF0cml4IGFmdGVyIHJvdGF0ZVxuICAgKi9cbiAgc3RhdGljIHJvdGF0aW9uQXhpc0FuZ2xlKGF4aXM6IFZlY3RvcjMsIHI6IG51bWJlciwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgbGV0IHsgX3g6IHgsIF95OiB5LCBfejogeiB9ID0gYXhpcztcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gICAgbGV0IHMsIGMsIHQ7XG5cbiAgICBpZiAoTWF0aC5hYnMobGVuKSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHggKj0gbGVuO1xuICAgIHkgKj0gbGVuO1xuICAgIHogKj0gbGVuO1xuXG4gICAgcyA9IE1hdGguc2luKHIpO1xuICAgIGMgPSBNYXRoLmNvcyhyKTtcbiAgICB0ID0gMSAtIGM7XG5cbiAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG9lWzBdID0geCAqIHggKiB0ICsgYztcbiAgICBvZVsxXSA9IHkgKiB4ICogdCArIHogKiBzO1xuICAgIG9lWzJdID0geiAqIHggKiB0IC0geSAqIHM7XG4gICAgb2VbM10gPSAwO1xuXG4gICAgb2VbNF0gPSB4ICogeSAqIHQgLSB6ICogcztcbiAgICBvZVs1XSA9IHkgKiB5ICogdCArIGM7XG4gICAgb2VbNl0gPSB6ICogeSAqIHQgKyB4ICogcztcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IHggKiB6ICogdCArIHkgKiBzO1xuICAgIG9lWzldID0geSAqIHogKiB0IC0geCAqIHM7XG4gICAgb2VbMTBdID0geiAqIHogKiB0ICsgYztcbiAgICBvZVsxMV0gPSAwO1xuXG4gICAgb2VbMTJdID0gMDtcbiAgICBvZVsxM10gPSAwO1xuICAgIG9lWzE0XSA9IDA7XG4gICAgb2VbMTVdID0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gYW5kIGEgdHJhbnNsYXRpb24uXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gVGhlIHF1YXRlcm5pb24gdXNlZCB0byBjYWxjdWxhdGUgdGhlIG1hdHJpeFxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBUaGUgdHJhbnNsYXRpb24gdXNlZCB0byBjYWxjdWxhdGUgdGhlIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgcm90YXRpb25UcmFuc2xhdGlvbihxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uLCB0cmFuc2xhdGlvbjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgTWF0cml4NC5yb3RhdGlvblF1YXRlcm5pb24ocXVhdGVybmlvbiwgb3V0KTtcblxuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIG9lWzEyXSA9IHRyYW5zbGF0aW9uLl94O1xuICAgIG9lWzEzXSA9IHRyYW5zbGF0aW9uLl95O1xuICAgIG9lWzE0XSA9IHRyYW5zbGF0aW9uLl96O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhbiBhZmZpbmUgbWF0cml4LlxuICAgKiBAcGFyYW0gc2NhbGUgLSBUaGUgc2NhbGUgdXNlZCB0byBjYWxjdWxhdGUgbWF0cml4XG4gICAqIEBwYXJhbSByb3RhdGlvbiAtIFRoZSByb3RhdGlvbiB1c2VkIHRvIGNhbGN1bGF0ZSBtYXRyaXhcbiAgICogQHBhcmFtIHRyYW5zbGF0aW9uIC0gVGhlIHRyYW5zbGF0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIG1hdHJpeFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgYWZmaW5lVHJhbnNmb3JtYXRpb24oc2NhbGU6IFZlY3RvcjMsIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLCB0cmFuc2xhdGlvbjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeyBfeDogeCwgX3k6IHksIF96OiB6LCBfdzogdyB9ID0gcm90YXRpb247XG4gICAgbGV0IHgyID0geCArIHg7XG4gICAgbGV0IHkyID0geSArIHk7XG4gICAgbGV0IHoyID0geiArIHo7XG5cbiAgICBsZXQgeHggPSB4ICogeDI7XG4gICAgbGV0IHh5ID0geCAqIHkyO1xuICAgIGxldCB4eiA9IHggKiB6MjtcbiAgICBsZXQgeXkgPSB5ICogeTI7XG4gICAgbGV0IHl6ID0geSAqIHoyO1xuICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICBsZXQgd3ggPSB3ICogeDI7XG4gICAgbGV0IHd5ID0gdyAqIHkyO1xuICAgIGxldCB3eiA9IHcgKiB6MjtcbiAgICBsZXQgc3ggPSBzY2FsZS5feDtcbiAgICBsZXQgc3kgPSBzY2FsZS5feTtcbiAgICBsZXQgc3ogPSBzY2FsZS5fejtcblxuICAgIG9lWzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gICAgb2VbMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgICBvZVsyXSA9ICh4eiAtIHd5KSAqIHN4O1xuICAgIG9lWzNdID0gMDtcblxuICAgIG9lWzRdID0gKHh5IC0gd3opICogc3k7XG4gICAgb2VbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgICBvZVs2XSA9ICh5eiArIHd4KSAqIHN5O1xuICAgIG9lWzddID0gMDtcblxuICAgIG9lWzhdID0gKHh6ICsgd3kpICogc3o7XG4gICAgb2VbOV0gPSAoeXogLSB3eCkgKiBzejtcbiAgICBvZVsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgICBvZVsxMV0gPSAwO1xuXG4gICAgb2VbMTJdID0gdHJhbnNsYXRpb24uX3g7XG4gICAgb2VbMTNdID0gdHJhbnNsYXRpb24uX3k7XG4gICAgb2VbMTRdID0gdHJhbnNsYXRpb24uX3o7XG4gICAgb2VbMTVdID0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYSBtYXRyaXggZnJvbSBzY2FsZSB2ZWN0b3IuXG4gICAqIEBwYXJhbSBzIC0gVGhlIHNjYWxlIHZlY3RvclxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgc2NhbGluZyhzOiBWZWN0b3IzLCBvdXQ6IE1hdHJpeDQpOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBvZVswXSA9IHMuX3g7XG4gICAgb2VbMV0gPSAwO1xuICAgIG9lWzJdID0gMDtcbiAgICBvZVszXSA9IDA7XG5cbiAgICBvZVs0XSA9IDA7XG4gICAgb2VbNV0gPSBzLl95O1xuICAgIG9lWzZdID0gMDtcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IDA7XG4gICAgb2VbOV0gPSAwO1xuICAgIG9lWzEwXSA9IHMuX3o7XG4gICAgb2VbMTFdID0gMDtcblxuICAgIG9lWzEyXSA9IDA7XG4gICAgb2VbMTNdID0gMDtcbiAgICBvZVsxNF0gPSAwO1xuICAgIG9lWzE1XSA9IDE7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgbWF0cml4IGZyb20gdHJhbnNsYXRpb24gdmVjdG9yLlxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBUaGUgdHJhbnNsYXRpb24gdmVjdG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyB0cmFuc2xhdGlvbih0cmFuc2xhdGlvbjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgb2VbMF0gPSAxO1xuICAgIG9lWzFdID0gMDtcbiAgICBvZVsyXSA9IDA7XG4gICAgb2VbM10gPSAwO1xuXG4gICAgb2VbNF0gPSAwO1xuICAgIG9lWzVdID0gMTtcbiAgICBvZVs2XSA9IDA7XG4gICAgb2VbN10gPSAwO1xuXG4gICAgb2VbOF0gPSAwO1xuICAgIG9lWzldID0gMDtcbiAgICBvZVsxMF0gPSAxO1xuICAgIG9lWzExXSA9IDA7XG5cbiAgICBvZVsxMl0gPSB0cmFuc2xhdGlvbi5feDtcbiAgICBvZVsxM10gPSB0cmFuc2xhdGlvbi5feTtcbiAgICBvZVsxNF0gPSB0cmFuc2xhdGlvbi5fejtcbiAgICBvZVsxNV0gPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgaW52ZXJzZSBvZiB0aGUgc3BlY2lmaWVkIG1hdHJpeC5cbiAgICogQHBhcmFtIGEgLSBUaGUgbWF0cml4IHdob3NlIGludmVyc2UgaXMgdG8gYmUgY2FsY3VsYXRlZFxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGludmVyc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBpbnZlcnQoYTogTWF0cml4NCwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgY29uc3QgYTExID0gYWVbMF0sXG4gICAgICBhMTIgPSBhZVsxXSxcbiAgICAgIGExMyA9IGFlWzJdLFxuICAgICAgYTE0ID0gYWVbM107XG4gICAgY29uc3QgYTIxID0gYWVbNF0sXG4gICAgICBhMjIgPSBhZVs1XSxcbiAgICAgIGEyMyA9IGFlWzZdLFxuICAgICAgYTI0ID0gYWVbN107XG4gICAgY29uc3QgYTMxID0gYWVbOF0sXG4gICAgICBhMzIgPSBhZVs5XSxcbiAgICAgIGEzMyA9IGFlWzEwXSxcbiAgICAgIGEzNCA9IGFlWzExXTtcbiAgICBjb25zdCBhNDEgPSBhZVsxMl0sXG4gICAgICBhNDIgPSBhZVsxM10sXG4gICAgICBhNDMgPSBhZVsxNF0sXG4gICAgICBhNDQgPSBhZVsxNV07XG5cbiAgICBjb25zdCBiMDAgPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gICAgY29uc3QgYjAxID0gYTExICogYTIzIC0gYTEzICogYTIxO1xuICAgIGNvbnN0IGIwMiA9IGExMSAqIGEyNCAtIGExNCAqIGEyMTtcbiAgICBjb25zdCBiMDMgPSBhMTIgKiBhMjMgLSBhMTMgKiBhMjI7XG4gICAgY29uc3QgYjA0ID0gYTEyICogYTI0IC0gYTE0ICogYTIyO1xuICAgIGNvbnN0IGIwNSA9IGExMyAqIGEyNCAtIGExNCAqIGEyMztcbiAgICBjb25zdCBiMDYgPSBhMzEgKiBhNDIgLSBhMzIgKiBhNDE7XG4gICAgY29uc3QgYjA3ID0gYTMxICogYTQzIC0gYTMzICogYTQxO1xuICAgIGNvbnN0IGIwOCA9IGEzMSAqIGE0NCAtIGEzNCAqIGE0MTtcbiAgICBjb25zdCBiMDkgPSBhMzIgKiBhNDMgLSBhMzMgKiBhNDI7XG4gICAgY29uc3QgYjEwID0gYTMyICogYTQ0IC0gYTM0ICogYTQyO1xuICAgIGNvbnN0IGIxMSA9IGEzMyAqIGE0NCAtIGEzNCAqIGE0MztcblxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG4gICAgaWYgKCFkZXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvZVswXSA9IChhMjIgKiBiMTEgLSBhMjMgKiBiMTAgKyBhMjQgKiBiMDkpICogZGV0O1xuICAgIG9lWzFdID0gKGExMyAqIGIxMCAtIGExMiAqIGIxMSAtIGExNCAqIGIwOSkgKiBkZXQ7XG4gICAgb2VbMl0gPSAoYTQyICogYjA1IC0gYTQzICogYjA0ICsgYTQ0ICogYjAzKSAqIGRldDtcbiAgICBvZVszXSA9IChhMzMgKiBiMDQgLSBhMzIgKiBiMDUgLSBhMzQgKiBiMDMpICogZGV0O1xuXG4gICAgb2VbNF0gPSAoYTIzICogYjA4IC0gYTIxICogYjExIC0gYTI0ICogYjA3KSAqIGRldDtcbiAgICBvZVs1XSA9IChhMTEgKiBiMTEgLSBhMTMgKiBiMDggKyBhMTQgKiBiMDcpICogZGV0O1xuICAgIG9lWzZdID0gKGE0MyAqIGIwMiAtIGE0MSAqIGIwNSAtIGE0NCAqIGIwMSkgKiBkZXQ7XG4gICAgb2VbN10gPSAoYTMxICogYjA1IC0gYTMzICogYjAyICsgYTM0ICogYjAxKSAqIGRldDtcblxuICAgIG9lWzhdID0gKGEyMSAqIGIxMCAtIGEyMiAqIGIwOCArIGEyNCAqIGIwNikgKiBkZXQ7XG4gICAgb2VbOV0gPSAoYTEyICogYjA4IC0gYTExICogYjEwIC0gYTE0ICogYjA2KSAqIGRldDtcbiAgICBvZVsxMF0gPSAoYTQxICogYjA0IC0gYTQyICogYjAyICsgYTQ0ICogYjAwKSAqIGRldDtcbiAgICBvZVsxMV0gPSAoYTMyICogYjAyIC0gYTMxICogYjA0IC0gYTM0ICogYjAwKSAqIGRldDtcblxuICAgIG9lWzEyXSA9IChhMjIgKiBiMDcgLSBhMjEgKiBiMDkgLSBhMjMgKiBiMDYpICogZGV0O1xuICAgIG9lWzEzXSA9IChhMTEgKiBiMDkgLSBhMTIgKiBiMDcgKyBhMTMgKiBiMDYpICogZGV0O1xuICAgIG9lWzE0XSA9IChhNDIgKiBiMDEgLSBhNDEgKiBiMDMgLSBhNDMgKiBiMDApICogZGV0O1xuICAgIG9lWzE1XSA9IChhMzEgKiBiMDMgLSBhMzIgKiBiMDEgKyBhMzMgKiBiMDApICogZGV0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhIHJpZ2h0LWhhbmRlZCBsb29rLWF0IG1hdHJpeC5cbiAgICogQHBhcmFtIGV5ZSAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgdmlld2VyJ3MgZXllXG4gICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgY2FtZXJhIGxvb2stYXQgdGFyZ2V0XG4gICAqIEBwYXJhbSB1cCAtIFRoZSBjYW1lcmEncyB1cCB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIGxvb2stYXQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgbG9va0F0KGV5ZTogVmVjdG9yMywgdGFyZ2V0OiBWZWN0b3IzLCB1cDogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgY29uc3QgeEF4aXM6IFZlY3RvcjMgPSBNYXRyaXg0Ll90ZW1wVmVjMzA7XG4gICAgY29uc3QgeUF4aXM6IFZlY3RvcjMgPSBNYXRyaXg0Ll90ZW1wVmVjMzE7XG4gICAgY29uc3QgekF4aXM6IFZlY3RvcjMgPSBNYXRyaXg0Ll90ZW1wVmVjMzI7XG5cbiAgICBWZWN0b3IzLnN1YnRyYWN0KGV5ZSwgdGFyZ2V0LCB6QXhpcyk7XG4gICAgekF4aXMubm9ybWFsaXplKCk7XG4gICAgVmVjdG9yMy5jcm9zcyh1cCwgekF4aXMsIHhBeGlzKTtcbiAgICB4QXhpcy5ub3JtYWxpemUoKTtcbiAgICBWZWN0b3IzLmNyb3NzKHpBeGlzLCB4QXhpcywgeUF4aXMpO1xuXG4gICAgb2VbMF0gPSB4QXhpcy5feDtcbiAgICBvZVsxXSA9IHlBeGlzLl94O1xuICAgIG9lWzJdID0gekF4aXMuX3g7XG4gICAgb2VbM10gPSAwO1xuXG4gICAgb2VbNF0gPSB4QXhpcy5feTtcbiAgICBvZVs1XSA9IHlBeGlzLl95O1xuICAgIG9lWzZdID0gekF4aXMuX3k7XG4gICAgb2VbN10gPSAwO1xuXG4gICAgb2VbOF0gPSB4QXhpcy5fejtcbiAgICBvZVs5XSA9IHlBeGlzLl96O1xuICAgIG9lWzEwXSA9IHpBeGlzLl96O1xuICAgIG9lWzExXSA9IDA7XG5cbiAgICBvZVsxMl0gPSAtVmVjdG9yMy5kb3QoeEF4aXMsIGV5ZSk7XG4gICAgb2VbMTNdID0gLVZlY3RvcjMuZG90KHlBeGlzLCBleWUpO1xuICAgIG9lWzE0XSA9IC1WZWN0b3IzLmRvdCh6QXhpcywgZXllKTtcbiAgICBvZVsxNV0gPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBhbiBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGxlZnQgZWRnZSBvZiB0aGUgdmlld2luZ1xuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgcmlnaHQgZWRnZSBvZiB0aGUgdmlld2luZ1xuICAgKiBAcGFyYW0gYm90dG9tIC0gVGhlIGJvdHRvbSBlZGdlIG9mIHRoZSB2aWV3aW5nXG4gICAqIEBwYXJhbSB0b3AgLSBUaGUgdG9wIGVkZ2Ugb2YgdGhlIHZpZXdpbmdcbiAgICogQHBhcmFtIG5lYXIgLSBUaGUgZGVwdGggb2YgdGhlIG5lYXIgcGxhbmVcbiAgICogQHBhcmFtIGZhciAtIFRoZSBkZXB0aCBvZiB0aGUgZmFyIHBsYW5lXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY2FsY3VsYXRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBvcnRobyhcbiAgICBsZWZ0OiBudW1iZXIsXG4gICAgcmlnaHQ6IG51bWJlcixcbiAgICBib3R0b206IG51bWJlcixcbiAgICB0b3A6IG51bWJlcixcbiAgICBuZWFyOiBudW1iZXIsXG4gICAgZmFyOiBudW1iZXIsXG4gICAgb3V0OiBNYXRyaXg0LFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBjb25zdCBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KTtcbiAgICBjb25zdCBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgICBjb25zdCBuZiA9IDEgLyAobmVhciAtIGZhcik7XG5cbiAgICBvZVswXSA9IC0yICogbHI7XG4gICAgb2VbMV0gPSAwO1xuICAgIG9lWzJdID0gMDtcbiAgICBvZVszXSA9IDA7XG5cbiAgICBvZVs0XSA9IDA7XG4gICAgb2VbNV0gPSAtMiAqIGJ0O1xuICAgIG9lWzZdID0gMDtcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IDA7XG4gICAgb2VbOV0gPSAwO1xuICAgIG9lWzEwXSA9IDIgKiBuZjtcbiAgICBvZVsxMV0gPSAwO1xuXG4gICAgb2VbMTJdID0gKGxlZnQgKyByaWdodCkgKiBscjtcbiAgICBvZVsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0O1xuICAgIG9lWzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG9lWzE1XSA9IDE7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSBmb3ZZIC0gRmllbGQgb2YgdmlldyBpbiB0aGUgeSBkaXJlY3Rpb24sIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIGFzcGVjdCAtIEFzcGVjdCByYXRpbywgZGVmaW5lZCBhcyB2aWV3IHNwYWNlIHdpZHRoIGRpdmlkZWQgYnkgaGVpZ2h0XG4gICAqIEBwYXJhbSBuZWFyIC0gVGhlIGRlcHRoIG9mIHRoZSBuZWFyIHBsYW5lXG4gICAqIEBwYXJhbSBmYXIgLSBUaGUgZGVwdGggb2YgdGhlIGZhciBwbGFuZVxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIGNhbGN1bGF0ZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBwZXJzcGVjdGl2ZShmb3ZZOiBudW1iZXIsIGFzcGVjdDogbnVtYmVyLCBuZWFyOiBudW1iZXIsIGZhcjogbnVtYmVyLCBvdXQ6IE1hdHJpeDQpOiB2b2lkIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBjb25zdCBmID0gMS4wIC8gTWF0aC50YW4oZm92WSAvIDIpO1xuICAgIGNvbnN0IG5mID0gMSAvIChuZWFyIC0gZmFyKTtcblxuICAgIG9lWzBdID0gZiAvIGFzcGVjdDtcbiAgICBvZVsxXSA9IDA7XG4gICAgb2VbMl0gPSAwO1xuICAgIG9lWzNdID0gMDtcblxuICAgIG9lWzRdID0gMDtcbiAgICBvZVs1XSA9IGY7XG4gICAgb2VbNl0gPSAwO1xuICAgIG9lWzddID0gMDtcblxuICAgIG9lWzhdID0gMDtcbiAgICBvZVs5XSA9IDA7XG4gICAgb2VbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb2VbMTFdID0gLTE7XG5cbiAgICBvZVsxMl0gPSAwO1xuICAgIG9lWzEzXSA9IDA7XG4gICAgb2VbMTRdID0gMiAqIGZhciAqIG5lYXIgKiBuZjtcbiAgICBvZVsxNV0gPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzcGVjaWZpZWQgbWF0cml4IHJvdGF0ZXMgYXJvdW5kIGFuIGFyYml0cmFyeSBheGlzLlxuICAgKiBAcGFyYW0gbSAtIFRoZSBzcGVjaWZpZWQgbWF0cml4XG4gICAqIEBwYXJhbSBheGlzIC0gVGhlIGF4aXNcbiAgICogQHBhcmFtIHIgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHJvdGF0ZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgcm90YXRlQXhpc0FuZ2xlKG06IE1hdHJpeDQsIGF4aXM6IFZlY3RvcjMsIHI6IG51bWJlciwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgbGV0IHsgX3g6IHgsIF95OiB5LCBfejogeiB9ID0gYXhpcztcbiAgICBsZXQgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG5cbiAgICBpZiAoTWF0aC5hYnMobGVuKSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZSA9IG0uZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG4gICAgbGV0IHMsIGMsIHQ7XG5cbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHggKj0gbGVuO1xuICAgIHkgKj0gbGVuO1xuICAgIHogKj0gbGVuO1xuXG4gICAgcyA9IE1hdGguc2luKHIpO1xuICAgIGMgPSBNYXRoLmNvcyhyKTtcbiAgICB0ID0gMSAtIGM7XG5cbiAgICBsZXQgYTExID0gbWVbMF0sXG4gICAgICBhMTIgPSBtZVsxXSxcbiAgICAgIGExMyA9IG1lWzJdLFxuICAgICAgYTE0ID0gbWVbM107XG4gICAgbGV0IGEyMSA9IG1lWzRdLFxuICAgICAgYTIyID0gbWVbNV0sXG4gICAgICBhMjMgPSBtZVs2XSxcbiAgICAgIGEyNCA9IG1lWzddO1xuICAgIGxldCBhMzEgPSBtZVs4XSxcbiAgICAgIGEzMiA9IG1lWzldLFxuICAgICAgYTMzID0gbWVbMTBdLFxuICAgICAgYTM0ID0gbWVbMTFdO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG4gICAgbGV0IGIxMSA9IHggKiB4ICogdCArIGM7XG4gICAgbGV0IGIxMiA9IHkgKiB4ICogdCArIHogKiBzO1xuICAgIGxldCBiMTMgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgICBsZXQgYjIxID0geCAqIHkgKiB0IC0geiAqIHM7XG4gICAgbGV0IGIyMiA9IHkgKiB5ICogdCArIGM7XG4gICAgbGV0IGIyMyA9IHogKiB5ICogdCArIHggKiBzO1xuICAgIGxldCBiMzEgPSB4ICogeiAqIHQgKyB5ICogcztcbiAgICBsZXQgYjMyID0geSAqIHogKiB0IC0geCAqIHM7XG4gICAgbGV0IGIzMyA9IHogKiB6ICogdCArIGM7XG5cbiAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG9lWzBdID0gYTExICogYjExICsgYTIxICogYjEyICsgYTMxICogYjEzO1xuICAgIG9lWzFdID0gYTEyICogYjExICsgYTIyICogYjEyICsgYTMyICogYjEzO1xuICAgIG9lWzJdID0gYTEzICogYjExICsgYTIzICogYjEyICsgYTMzICogYjEzO1xuICAgIG9lWzNdID0gYTE0ICogYjExICsgYTI0ICogYjEyICsgYTM0ICogYjEzO1xuXG4gICAgb2VbNF0gPSBhMTEgKiBiMjEgKyBhMjEgKiBiMjIgKyBhMzEgKiBiMjM7XG4gICAgb2VbNV0gPSBhMTIgKiBiMjEgKyBhMjIgKiBiMjIgKyBhMzIgKiBiMjM7XG4gICAgb2VbNl0gPSBhMTMgKiBiMjEgKyBhMjMgKiBiMjIgKyBhMzMgKiBiMjM7XG4gICAgb2VbN10gPSBhMTQgKiBiMjEgKyBhMjQgKiBiMjIgKyBhMzQgKiBiMjM7XG5cbiAgICBvZVs4XSA9IGExMSAqIGIzMSArIGEyMSAqIGIzMiArIGEzMSAqIGIzMztcbiAgICBvZVs5XSA9IGExMiAqIGIzMSArIGEyMiAqIGIzMiArIGEzMiAqIGIzMztcbiAgICBvZVsxMF0gPSBhMTMgKiBiMzEgKyBhMjMgKiBiMzIgKyBhMzMgKiBiMzM7XG4gICAgb2VbMTFdID0gYTE0ICogYjMxICsgYTI0ICogYjMyICsgYTM0ICogYjMzO1xuXG4gICAgaWYgKG0gIT09IG91dCkge1xuICAgICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICAgIG9lWzEyXSA9IG1lWzEyXTtcbiAgICAgIG9lWzEzXSA9IG1lWzEzXTtcbiAgICAgIG9lWzE0XSA9IG1lWzE0XTtcbiAgICAgIG9lWzE1XSA9IG1lWzE1XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgYSBtYXRyaXggYnkgYSBnaXZlbiB2ZWN0b3IuXG4gICAqIEBwYXJhbSBtIC0gVGhlIG1hdHJpeFxuICAgKiBAcGFyYW0gcyAtIFRoZSBnaXZlbiB2ZWN0b3JcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzY2FsZWQgbWF0cml4XG4gICAqL1xuICBzdGF0aWMgc2NhbGUobTogTWF0cml4NCwgczogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHsgX3g6IHgsIF95OiB5LCBfejogeiB9ID0gcztcblxuICAgIG9lWzBdID0gbWVbMF0gKiB4O1xuICAgIG9lWzFdID0gbWVbMV0gKiB4O1xuICAgIG9lWzJdID0gbWVbMl0gKiB4O1xuICAgIG9lWzNdID0gbWVbM10gKiB4O1xuXG4gICAgb2VbNF0gPSBtZVs0XSAqIHk7XG4gICAgb2VbNV0gPSBtZVs1XSAqIHk7XG4gICAgb2VbNl0gPSBtZVs2XSAqIHk7XG4gICAgb2VbN10gPSBtZVs3XSAqIHk7XG5cbiAgICBvZVs4XSA9IG1lWzhdICogejtcbiAgICBvZVs5XSA9IG1lWzldICogejtcbiAgICBvZVsxMF0gPSBtZVsxMF0gKiB6O1xuICAgIG9lWzExXSA9IG1lWzExXSAqIHo7XG5cbiAgICBvZVsxMl0gPSBtZVsxMl07XG4gICAgb2VbMTNdID0gbWVbMTNdO1xuICAgIG9lWzE0XSA9IG1lWzE0XTtcbiAgICBvZVsxNV0gPSBtZVsxNV07XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNsYXRlIGEgbWF0cml4IGJ5IGEgZ2l2ZW4gdmVjdG9yLlxuICAgKiBAcGFyYW0gbSAtIFRoZSBtYXRyaXhcbiAgICogQHBhcmFtIHYgLSBUaGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgdHJhbnNsYXRlZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyB0cmFuc2xhdGUobTogTWF0cml4NCwgdjogVmVjdG9yMywgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuICAgIGNvbnN0IHsgX3g6IHgsIF95OiB5LCBfejogeiB9ID0gdjtcblxuICAgIGlmIChtID09PSBvdXQpIHtcbiAgICAgIG9lWzEyXSA9IG1lWzBdICogeCArIG1lWzRdICogeSArIG1lWzhdICogeiArIG1lWzEyXTtcbiAgICAgIG9lWzEzXSA9IG1lWzFdICogeCArIG1lWzVdICogeSArIG1lWzldICogeiArIG1lWzEzXTtcbiAgICAgIG9lWzE0XSA9IG1lWzJdICogeCArIG1lWzZdICogeSArIG1lWzEwXSAqIHogKyBtZVsxNF07XG4gICAgICBvZVsxNV0gPSBtZVszXSAqIHggKyBtZVs3XSAqIHkgKyBtZVsxMV0gKiB6ICsgbWVbMTVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhMTEgPSBtZVswXSxcbiAgICAgICAgYTEyID0gbWVbMV0sXG4gICAgICAgIGExMyA9IG1lWzJdLFxuICAgICAgICBhMTQgPSBtZVszXTtcbiAgICAgIGNvbnN0IGEyMSA9IG1lWzRdLFxuICAgICAgICBhMjIgPSBtZVs1XSxcbiAgICAgICAgYTIzID0gbWVbNl0sXG4gICAgICAgIGEyNCA9IG1lWzddO1xuICAgICAgY29uc3QgYTMxID0gbWVbOF0sXG4gICAgICAgIGEzMiA9IG1lWzldLFxuICAgICAgICBhMzMgPSBtZVsxMF0sXG4gICAgICAgIGEzNCA9IG1lWzExXTtcblxuICAgICAgKG9lWzBdID0gYTExKSwgKG9lWzFdID0gYTEyKSwgKG9lWzJdID0gYTEzKSwgKG9lWzNdID0gYTE0KTtcbiAgICAgIChvZVs0XSA9IGEyMSksIChvZVs1XSA9IGEyMiksIChvZVs2XSA9IGEyMyksIChvZVs3XSA9IGEyNCk7XG4gICAgICAob2VbOF0gPSBhMzEpLCAob2VbOV0gPSBhMzIpLCAob2VbMTBdID0gYTMzKSwgKG9lWzExXSA9IGEzNCk7XG5cbiAgICAgIG9lWzEyXSA9IGExMSAqIHggKyBhMjEgKiB5ICsgYTMxICogeiArIG1lWzEyXTtcbiAgICAgIG9lWzEzXSA9IGExMiAqIHggKyBhMjIgKiB5ICsgYTMyICogeiArIG1lWzEzXTtcbiAgICAgIG9lWzE0XSA9IGExMyAqIHggKyBhMjMgKiB5ICsgYTMzICogeiArIG1lWzE0XTtcbiAgICAgIG9lWzE1XSA9IGExNCAqIHggKyBhMjQgKiB5ICsgYTM0ICogeiArIG1lWzE1XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0cmFuc3Bvc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXguXG4gICAqIEBwYXJhbSBhIC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSB0cmFuc3Bvc2Ugb2YgdGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyB0cmFuc3Bvc2UoYTogTWF0cml4NCwgb3V0OiBNYXRyaXg0KTogdm9pZCB7XG4gICAgY29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuICAgIGNvbnN0IG9lID0gb3V0LmVsZW1lbnRzO1xuXG4gICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgY29uc3QgYTEyID0gYWVbMV07XG4gICAgICBjb25zdCBhMTMgPSBhZVsyXTtcbiAgICAgIGNvbnN0IGExNCA9IGFlWzNdO1xuICAgICAgY29uc3QgYTIzID0gYWVbNl07XG4gICAgICBjb25zdCBhMjQgPSBhZVs3XTtcbiAgICAgIGNvbnN0IGEzNCA9IGFlWzExXTtcblxuICAgICAgb2VbMV0gPSBhZVs0XTtcbiAgICAgIG9lWzJdID0gYWVbOF07XG4gICAgICBvZVszXSA9IGFlWzEyXTtcblxuICAgICAgb2VbNF0gPSBhMTI7XG4gICAgICBvZVs2XSA9IGFlWzldO1xuICAgICAgb2VbN10gPSBhZVsxM107XG5cbiAgICAgIG9lWzhdID0gYTEzO1xuICAgICAgb2VbOV0gPSBhMjM7XG4gICAgICBvZVsxMV0gPSBhZVsxNF07XG5cbiAgICAgIG9lWzEyXSA9IGExNDtcbiAgICAgIG9lWzEzXSA9IGEyNDtcbiAgICAgIG9lWzE0XSA9IGEzNDtcbiAgICB9IGVsc2Uge1xuICAgICAgb2VbMF0gPSBhZVswXTtcbiAgICAgIG9lWzFdID0gYWVbNF07XG4gICAgICBvZVsyXSA9IGFlWzhdO1xuICAgICAgb2VbM10gPSBhZVsxMl07XG5cbiAgICAgIG9lWzRdID0gYWVbMV07XG4gICAgICBvZVs1XSA9IGFlWzVdO1xuICAgICAgb2VbNl0gPSBhZVs5XTtcbiAgICAgIG9lWzddID0gYWVbMTNdO1xuXG4gICAgICBvZVs4XSA9IGFlWzJdO1xuICAgICAgb2VbOV0gPSBhZVs2XTtcbiAgICAgIG9lWzEwXSA9IGFlWzEwXTtcbiAgICAgIG9lWzExXSA9IGFlWzE0XTtcblxuICAgICAgb2VbMTJdID0gYWVbM107XG4gICAgICBvZVsxM10gPSBhZVs3XTtcbiAgICAgIG9lWzE0XSA9IGFlWzExXTtcbiAgICAgIG9lWzE1XSA9IGFlWzE1XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZWxlbWVudHMgb2YgdGhlIG1hdHJpeCAoY29sdW1uIG1hdHJpeCkuXG4gICAqIEByZW1hcmtzXG4gICAqIGVsZW1lbnRzWzBdIGZpcnN0IGNvbHVtbiBhbmQgZmlyc3Qgcm93IHZhbHVlIG0xMVxuICAgKiBlbGVtZW50c1sxXSBmaXJzdCBjb2x1bW4gYW5kIHNlY29uZCByb3cgdmFsdWUgbTEyXG4gICAqIGVsZW1lbnRzWzJdIGZpcnN0IGNvbHVtbiBhbmQgdGhpcmQgcm93IHZhbHVlIG0xM1xuICAgKiBlbGVtZW50c1szXSBmaXJzdCBjb2x1bW4gYW5kIGZvdXJ0aCByb3cgdmFsdWUgbTE0XG4gICAqIGVsZW1lbnRzWzRdIHNlY29uZCBjb2x1bW4gYW5kIGZpcnN0IHJvdyB2YWx1ZSBtMjFcbiAgICogYW5kIHNvIG9uXG4gICAqL1xuICBlbGVtZW50czogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIG9mIDR4NCBNYXRyaXg0LlxuICAgKiBAcGFyYW0gbTExIC0gZGVmYXVsdCAxLCBjb2x1bW4gMSwgcm93IDFcbiAgICogQHBhcmFtIG0xMiAtIGRlZmF1bHQgMCwgY29sdW1uIDEsIHJvdyAyXG4gICAqIEBwYXJhbSBtMTMgLSBkZWZhdWx0IDAsIGNvbHVtbiAxLCByb3cgM1xuICAgKiBAcGFyYW0gbTE0IC0gZGVmYXVsdCAwLCBjb2x1bW4gMSwgcm93IDRcbiAgICogQHBhcmFtIG0yMSAtIGRlZmF1bHQgMCwgY29sdW1uIDIsIHJvdyAxXG4gICAqIEBwYXJhbSBtMjIgLSBkZWZhdWx0IDEsIGNvbHVtbiAyLCByb3cgMlxuICAgKiBAcGFyYW0gbTIzIC0gZGVmYXVsdCAwLCBjb2x1bW4gMiwgcm93IDNcbiAgICogQHBhcmFtIG0yNCAtIGRlZmF1bHQgMCwgY29sdW1uIDIsIHJvdyA0XG4gICAqIEBwYXJhbSBtMzEgLSBkZWZhdWx0IDAsIGNvbHVtbiAzLCByb3cgMVxuICAgKiBAcGFyYW0gbTMyIC0gZGVmYXVsdCAwLCBjb2x1bW4gMywgcm93IDJcbiAgICogQHBhcmFtIG0zMyAtIGRlZmF1bHQgMSwgY29sdW1uIDMsIHJvdyAzXG4gICAqIEBwYXJhbSBtMzQgLSBkZWZhdWx0IDAsIGNvbHVtbiAzLCByb3cgNFxuICAgKiBAcGFyYW0gbTQxIC0gZGVmYXVsdCAwLCBjb2x1bW4gNCwgcm93IDFcbiAgICogQHBhcmFtIG00MiAtIGRlZmF1bHQgMCwgY29sdW1uIDQsIHJvdyAyXG4gICAqIEBwYXJhbSBtNDMgLSBkZWZhdWx0IDAsIGNvbHVtbiA0LCByb3cgM1xuICAgKiBAcGFyYW0gbTQ0IC0gZGVmYXVsdCAxLCBjb2x1bW4gNCwgcm93IDRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIG0xMTogbnVtYmVyID0gMSxcbiAgICBtMTI6IG51bWJlciA9IDAsXG4gICAgbTEzOiBudW1iZXIgPSAwLFxuICAgIG0xNDogbnVtYmVyID0gMCxcbiAgICBtMjE6IG51bWJlciA9IDAsXG4gICAgbTIyOiBudW1iZXIgPSAxLFxuICAgIG0yMzogbnVtYmVyID0gMCxcbiAgICBtMjQ6IG51bWJlciA9IDAsXG4gICAgbTMxOiBudW1iZXIgPSAwLFxuICAgIG0zMjogbnVtYmVyID0gMCxcbiAgICBtMzM6IG51bWJlciA9IDEsXG4gICAgbTM0OiBudW1iZXIgPSAwLFxuICAgIG00MTogbnVtYmVyID0gMCxcbiAgICBtNDI6IG51bWJlciA9IDAsXG4gICAgbTQzOiBudW1iZXIgPSAwLFxuICAgIG00NDogbnVtYmVyID0gMSxcbiAgKSB7XG4gICAgY29uc3QgZTogRmxvYXQzMkFycmF5ID0gdGhpcy5lbGVtZW50cztcblxuICAgIGVbMF0gPSBtMTE7XG4gICAgZVsxXSA9IG0xMjtcbiAgICBlWzJdID0gbTEzO1xuICAgIGVbM10gPSBtMTQ7XG5cbiAgICBlWzRdID0gbTIxO1xuICAgIGVbNV0gPSBtMjI7XG4gICAgZVs2XSA9IG0yMztcbiAgICBlWzddID0gbTI0O1xuXG4gICAgZVs4XSA9IG0zMTtcbiAgICBlWzldID0gbTMyO1xuICAgIGVbMTBdID0gbTMzO1xuICAgIGVbMTFdID0gbTM0O1xuXG4gICAgZVsxMl0gPSBtNDE7XG4gICAgZVsxM10gPSBtNDI7XG4gICAgZVsxNF0gPSBtNDM7XG4gICAgZVsxNV0gPSBtNDQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGlzIG1hdHJpeCwgYW5kIHJldHVybiB0aGlzIG1hdHJpeC5cbiAgICogQHBhcmFtIG0xMSAtIGNvbHVtbiAxLCByb3cgMVxuICAgKiBAcGFyYW0gbTEyIC0gY29sdW1uIDEsIHJvdyAyXG4gICAqIEBwYXJhbSBtMTMgLSBjb2x1bW4gMSwgcm93IDNcbiAgICogQHBhcmFtIG0xNCAtIGNvbHVtbiAxLCByb3cgNFxuICAgKiBAcGFyYW0gbTIxIC0gY29sdW1uIDIsIHJvdyAxXG4gICAqIEBwYXJhbSBtMjIgLSBjb2x1bW4gMiwgcm93IDJcbiAgICogQHBhcmFtIG0yMyAtIGNvbHVtbiAyLCByb3cgM1xuICAgKiBAcGFyYW0gbTI0IC0gY29sdW1uIDIsIHJvdyA0XG4gICAqIEBwYXJhbSBtMzEgLSBjb2x1bW4gMywgcm93IDFcbiAgICogQHBhcmFtIG0zMiAtIGNvbHVtbiAzLCByb3cgMlxuICAgKiBAcGFyYW0gbTMzIC0gY29sdW1uIDMsIHJvdyAzXG4gICAqIEBwYXJhbSBtMzQgLSBjb2x1bW4gMywgcm93IDRcbiAgICogQHBhcmFtIG00MSAtIGNvbHVtbiA0LCByb3cgMVxuICAgKiBAcGFyYW0gbTQyIC0gY29sdW1uIDQsIHJvdyAyXG4gICAqIEBwYXJhbSBtNDMgLSBjb2x1bW4gNCwgcm93IDNcbiAgICogQHBhcmFtIG00NCAtIGNvbHVtbiA0LCByb3cgNFxuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeFxuICAgKi9cbiAgc2V0VmFsdWUoXG4gICAgbTExOiBudW1iZXIsXG4gICAgbTEyOiBudW1iZXIsXG4gICAgbTEzOiBudW1iZXIsXG4gICAgbTE0OiBudW1iZXIsXG4gICAgbTIxOiBudW1iZXIsXG4gICAgbTIyOiBudW1iZXIsXG4gICAgbTIzOiBudW1iZXIsXG4gICAgbTI0OiBudW1iZXIsXG4gICAgbTMxOiBudW1iZXIsXG4gICAgbTMyOiBudW1iZXIsXG4gICAgbTMzOiBudW1iZXIsXG4gICAgbTM0OiBudW1iZXIsXG4gICAgbTQxOiBudW1iZXIsXG4gICAgbTQyOiBudW1iZXIsXG4gICAgbTQzOiBudW1iZXIsXG4gICAgbTQ0OiBudW1iZXIsXG4gICk6IE1hdHJpeDQge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgZVswXSA9IG0xMTtcbiAgICBlWzFdID0gbTEyO1xuICAgIGVbMl0gPSBtMTM7XG4gICAgZVszXSA9IG0xNDtcblxuICAgIGVbNF0gPSBtMjE7XG4gICAgZVs1XSA9IG0yMjtcbiAgICBlWzZdID0gbTIzO1xuICAgIGVbN10gPSBtMjQ7XG5cbiAgICBlWzhdID0gbTMxO1xuICAgIGVbOV0gPSBtMzI7XG4gICAgZVsxMF0gPSBtMzM7XG4gICAgZVsxMV0gPSBtMzQ7XG5cbiAgICBlWzEyXSA9IG00MTtcbiAgICBlWzEzXSA9IG00MjtcbiAgICBlWzE0XSA9IG00MztcbiAgICBlWzE1XSA9IG00NDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBtYXRyaXggYnkgYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheVxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYXJyYXlcbiAgICogQHJldHVybnMgVGhpcyBtYXRyaXhcbiAgICovXG4gIHNldFZhbHVlQnlBcnJheShhcnJheTogQXJyYXlMaWtlPG51bWJlcj4sIG9mZnNldDogbnVtYmVyID0gMCk6IE1hdHJpeDQge1xuICAgIGNvbnN0IHNyY2UgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgc3JjZVtpXSA9IGFycmF5W2kgKyBvZmZzZXRdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgdmFsdWUgb2YgdGhpcyBtYXRyaXggdG8gYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgYXJyYXlcbiAgICogQHBhcmFtIG91dE9mZnNldCAtIFRoZSBzdGFydCBvZmZzZXQgb2YgdGhlIGFycmF5XG4gICAqL1xuICB0b0FycmF5KG91dDogbnVtYmVyW10gfCBGbG9hdDMyQXJyYXkgfCBGbG9hdDY0QXJyYXksIG91dE9mZnNldDogbnVtYmVyID0gMCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgb3V0W291dE9mZnNldF0gPSBlWzBdO1xuICAgIG91dFtvdXRPZmZzZXQgKyAxXSA9IGVbMV07XG4gICAgb3V0W291dE9mZnNldCArIDJdID0gZVsyXTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgM10gPSBlWzNdO1xuICAgIG91dFtvdXRPZmZzZXQgKyA0XSA9IGVbNF07XG4gICAgb3V0W291dE9mZnNldCArIDVdID0gZVs1XTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgNl0gPSBlWzZdO1xuICAgIG91dFtvdXRPZmZzZXQgKyA3XSA9IGVbN107XG4gICAgb3V0W291dE9mZnNldCArIDhdID0gZVs4XTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgOV0gPSBlWzldO1xuICAgIG91dFtvdXRPZmZzZXQgKyAxMF0gPSBlWzEwXTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMTFdID0gZVsxMV07XG4gICAgb3V0W291dE9mZnNldCArIDEyXSA9IGVbMTJdO1xuICAgIG91dFtvdXRPZmZzZXQgKyAxM10gPSBlWzEzXTtcbiAgICBvdXRbb3V0T2Zmc2V0ICsgMTRdID0gZVsxNF07XG4gICAgb3V0W291dE9mZnNldCArIDE1XSA9IGVbMTVdO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIG1hdHJpeC5cbiAgICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGlzIG1hdHJpeFxuICAgKi9cbiAgY2xvbmUoKTogTWF0cml4NCB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgbGV0IHJldCA9IG5ldyBNYXRyaXg0KFxuICAgICAgZVswXSxcbiAgICAgIGVbMV0sXG4gICAgICBlWzJdLFxuICAgICAgZVszXSxcbiAgICAgIGVbNF0sXG4gICAgICBlWzVdLFxuICAgICAgZVs2XSxcbiAgICAgIGVbN10sXG4gICAgICBlWzhdLFxuICAgICAgZVs5XSxcbiAgICAgIGVbMTBdLFxuICAgICAgZVsxMV0sXG4gICAgICBlWzEyXSxcbiAgICAgIGVbMTNdLFxuICAgICAgZVsxNF0sXG4gICAgICBlWzE1XSxcbiAgICApO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgbWF0cml4IHRvIHRoZSBzcGVjaWZpZWQgbWF0cml4LlxuICAgKiBAcGFyYW0gb3V0IC0gVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCBtYXRyaXhcbiAgICovXG4gIGNsb25lVG8ob3V0OiBNYXRyaXg0KTogTWF0cml4NCB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3Qgb2UgPSBvdXQuZWxlbWVudHM7XG5cbiAgICBvZVswXSA9IGVbMF07XG4gICAgb2VbMV0gPSBlWzFdO1xuICAgIG9lWzJdID0gZVsyXTtcbiAgICBvZVszXSA9IGVbM107XG5cbiAgICBvZVs0XSA9IGVbNF07XG4gICAgb2VbNV0gPSBlWzVdO1xuICAgIG9lWzZdID0gZVs2XTtcbiAgICBvZVs3XSA9IGVbN107XG5cbiAgICBvZVs4XSA9IGVbOF07XG4gICAgb2VbOV0gPSBlWzldO1xuICAgIG9lWzEwXSA9IGVbMTBdO1xuICAgIG9lWzExXSA9IGVbMTFdO1xuXG4gICAgb2VbMTJdID0gZVsxMl07XG4gICAgb2VbMTNdID0gZVsxM107XG4gICAgb2VbMTRdID0gZVsxNF07XG4gICAgb2VbMTVdID0gZVsxNV07XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBtYXRyaXggYW5kIHRoZSBzcGVjaWZpZWQgbWF0cml4LlxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgc3BlY2lmaWVkIG1hdHJpeFxuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCB0aGF0IHN0b3JlIHRoZSBwcm9kdWN0IG9mIHRoZSB0d28gbWF0cmljZXNcbiAgICovXG4gIG11bHRpcGx5KHJpZ2h0OiBNYXRyaXg0KTogTWF0cml4NCB7XG4gICAgTWF0cml4NC5tdWx0aXBseSh0aGlzLCByaWdodCwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgZGV0ZXJtaW5hbnQgb2YgdGhpcyBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoZSBkZXRlcm1pbmFudCBvZiB0aGlzIG1hdHJpeFxuICAgKi9cbiAgZGV0ZXJtaW5hbnQoKTogbnVtYmVyIHtcbiAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcblxuICAgIGNvbnN0IGExMSA9IGVbMF0sXG4gICAgICBhMTIgPSBlWzFdLFxuICAgICAgYTEzID0gZVsyXSxcbiAgICAgIGExNCA9IGVbM107XG4gICAgY29uc3QgYTIxID0gZVs0XSxcbiAgICAgIGEyMiA9IGVbNV0sXG4gICAgICBhMjMgPSBlWzZdLFxuICAgICAgYTI0ID0gZVs3XTtcbiAgICBjb25zdCBhMzEgPSBlWzhdLFxuICAgICAgYTMyID0gZVs5XSxcbiAgICAgIGEzMyA9IGVbMTBdLFxuICAgICAgYTM0ID0gZVsxMV07XG4gICAgY29uc3QgYTQxID0gZVsxMl0sXG4gICAgICBhNDIgPSBlWzEzXSxcbiAgICAgIGE0MyA9IGVbMTRdLFxuICAgICAgYTQ0ID0gZVsxNV07XG5cbiAgICBjb25zdCBiMDAgPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gICAgY29uc3QgYjAxID0gYTExICogYTIzIC0gYTEzICogYTIxO1xuICAgIGNvbnN0IGIwMiA9IGExMSAqIGEyNCAtIGExNCAqIGEyMTtcbiAgICBjb25zdCBiMDMgPSBhMTIgKiBhMjMgLSBhMTMgKiBhMjI7XG4gICAgY29uc3QgYjA0ID0gYTEyICogYTI0IC0gYTE0ICogYTIyO1xuICAgIGNvbnN0IGIwNSA9IGExMyAqIGEyNCAtIGExNCAqIGEyMztcbiAgICBjb25zdCBiMDYgPSBhMzEgKiBhNDIgLSBhMzIgKiBhNDE7XG4gICAgY29uc3QgYjA3ID0gYTMxICogYTQzIC0gYTMzICogYTQxO1xuICAgIGNvbnN0IGIwOCA9IGEzMSAqIGE0NCAtIGEzNCAqIGE0MTtcbiAgICBjb25zdCBiMDkgPSBhMzIgKiBhNDMgLSBhMzMgKiBhNDI7XG4gICAgY29uc3QgYjEwID0gYTMyICogYTQ0IC0gYTM0ICogYTQyO1xuICAgIGNvbnN0IGIxMSA9IGEzMyAqIGE0NCAtIGEzNCAqIGE0MztcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICByZXR1cm4gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29tcG9zZSB0aGlzIG1hdHJpeCB0byB0cmFuc2xhdGlvbiwgcm90YXRpb24gYW5kIHNjYWxlIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBUcmFuc2xhdGlvbiB2ZWN0b3IgYXMgYW4gb3V0cHV0IHBhcmFtZXRlclxuICAgKiBAcGFyYW0gcm90YXRpb24gLSBSb3RhdGlvbiBxdWF0ZXJuaW9uIGFzIGFuIG91dHB1dCBwYXJhbWV0ZXJcbiAgICogQHBhcmFtIHNjYWxlIC0gU2NhbGUgdmVjdG9yIGFzIGFuIG91dHB1dCBwYXJhbWV0ZXJcbiAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGlzIG1hdHJpeCBjYW4gYmUgZGVjb21wb3NlZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBkZWNvbXBvc2UodHJhbnNsYXRpb246IFZlY3RvcjMsIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLCBzY2FsZTogVmVjdG9yMyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHJtOiBNYXRyaXgzID0gTWF0cml4NC5fdGVtcE1hdDMwO1xuXG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3Qgcm1lID0gcm0uZWxlbWVudHM7XG5cbiAgICBjb25zdCBtMTEgPSBlWzBdO1xuICAgIGNvbnN0IG0xMiA9IGVbMV07XG4gICAgY29uc3QgbTEzID0gZVsyXTtcbiAgICBjb25zdCBtMTQgPSBlWzNdO1xuICAgIGNvbnN0IG0yMSA9IGVbNF07XG4gICAgY29uc3QgbTIyID0gZVs1XTtcbiAgICBjb25zdCBtMjMgPSBlWzZdO1xuICAgIGNvbnN0IG0yNCA9IGVbN107XG4gICAgY29uc3QgbTMxID0gZVs4XTtcbiAgICBjb25zdCBtMzIgPSBlWzldO1xuICAgIGNvbnN0IG0zMyA9IGVbMTBdO1xuICAgIGNvbnN0IG0zNCA9IGVbMTFdO1xuICAgIHRyYW5zbGF0aW9uLnNldFZhbHVlKGVbMTJdLCBlWzEzXSwgZVsxNF0pO1xuXG4gICAgY29uc3QgeHMgPSBNYXRoLnNpZ24obTExICogbTEyICogbTEzICogbTE0KSA8IDAgPyAtMSA6IDE7XG4gICAgY29uc3QgeXMgPSBNYXRoLnNpZ24obTIxICogbTIyICogbTIzICogbTI0KSA8IDAgPyAtMSA6IDE7XG4gICAgY29uc3QgenMgPSBNYXRoLnNpZ24obTMxICogbTMyICogbTMzICogbTM0KSA8IDAgPyAtMSA6IDE7XG5cbiAgICBjb25zdCBzeCA9IHhzICogTWF0aC5zcXJ0KG0xMSAqIG0xMSArIG0xMiAqIG0xMiArIG0xMyAqIG0xMyk7XG4gICAgY29uc3Qgc3kgPSB5cyAqIE1hdGguc3FydChtMjEgKiBtMjEgKyBtMjIgKiBtMjIgKyBtMjMgKiBtMjMpO1xuICAgIGNvbnN0IHN6ID0genMgKiBNYXRoLnNxcnQobTMxICogbTMxICsgbTMyICogbTMyICsgbTMzICogbTMzKTtcbiAgICBzY2FsZS5zZXRWYWx1ZShzeCwgc3ksIHN6KTtcblxuICAgIGlmIChcbiAgICAgIE1hdGguYWJzKHN4KSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UgfHxcbiAgICAgIE1hdGguYWJzKHN5KSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2UgfHxcbiAgICAgIE1hdGguYWJzKHN6KSA8IE1hdGhVdGlsLnplcm9Ub2xlcmFuY2VcbiAgICApIHtcbiAgICAgIHJvdGF0aW9uLmlkZW50aXR5KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGludlNYID0gMSAvIHN4O1xuICAgICAgY29uc3QgaW52U1kgPSAxIC8gc3k7XG4gICAgICBjb25zdCBpbnZTWiA9IDEgLyBzejtcblxuICAgICAgcm1lWzBdID0gbTExICogaW52U1g7XG4gICAgICBybWVbMV0gPSBtMTIgKiBpbnZTWDtcbiAgICAgIHJtZVsyXSA9IG0xMyAqIGludlNYO1xuICAgICAgcm1lWzNdID0gbTIxICogaW52U1k7XG4gICAgICBybWVbNF0gPSBtMjIgKiBpbnZTWTtcbiAgICAgIHJtZVs1XSA9IG0yMyAqIGludlNZO1xuICAgICAgcm1lWzZdID0gbTMxICogaW52U1o7XG4gICAgICBybWVbN10gPSBtMzIgKiBpbnZTWjtcbiAgICAgIHJtZVs4XSA9IG0zMyAqIGludlNaO1xuICAgICAgUXVhdGVybmlvbi5yb3RhdGlvbk1hdHJpeDN4MyhybSwgcm90YXRpb24pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCByb3RhdGlvbiBmcm9tIHRoaXMgbWF0cml4LlxuICAgKiBAcGFyYW0gb3V0IC0gUm90YXRpb24gcXVhdGVybmlvbiBhcyBhbiBvdXRwdXQgcGFyYW1ldGVyXG4gICAqIEByZXR1cm5zIFRoZSBvdXRcbiAgICovXG4gIGdldFJvdGF0aW9uKG91dDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xuICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGxldCB0cmFjZSA9IGVbMF0gKyBlWzVdICsgZVsxMF07XG5cbiAgICBpZiAodHJhY2UgPiBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICBsZXQgcyA9IE1hdGguc3FydCh0cmFjZSArIDEuMCkgKiAyO1xuICAgICAgb3V0Ll93ID0gMC4yNSAqIHM7XG4gICAgICBvdXQuX3ggPSAoZVs2XSAtIGVbOV0pIC8gcztcbiAgICAgIG91dC5feSA9IChlWzhdIC0gZVsyXSkgLyBzO1xuICAgICAgb3V0Ll96ID0gKGVbMV0gLSBlWzRdKSAvIHM7XG4gICAgfSBlbHNlIGlmIChlWzBdID4gZVs1XSAmJiBlWzBdID4gZVsxMF0pIHtcbiAgICAgIGxldCBzID0gTWF0aC5zcXJ0KDEuMCArIGVbMF0gLSBlWzVdIC0gZVsxMF0pICogMjtcbiAgICAgIG91dC5fdyA9IChlWzZdIC0gZVs5XSkgLyBzO1xuICAgICAgb3V0Ll94ID0gMC4yNSAqIHM7XG4gICAgICBvdXQuX3kgPSAoZVsxXSArIGVbNF0pIC8gcztcbiAgICAgIG91dC5feiA9IChlWzhdICsgZVsyXSkgLyBzO1xuICAgIH0gZWxzZSBpZiAoZVs1XSA+IGVbMTBdKSB7XG4gICAgICBsZXQgcyA9IE1hdGguc3FydCgxLjAgKyBlWzVdIC0gZVswXSAtIGVbMTBdKSAqIDI7XG4gICAgICBvdXQuX3cgPSAoZVs4XSAtIGVbMl0pIC8gcztcbiAgICAgIG91dC5feCA9IChlWzFdICsgZVs0XSkgLyBzO1xuICAgICAgb3V0Ll95ID0gMC4yNSAqIHM7XG4gICAgICBvdXQuX3ogPSAoZVs2XSArIGVbOV0pIC8gcztcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHMgPSBNYXRoLnNxcnQoMS4wICsgZVsxMF0gLSBlWzBdIC0gZVs1XSkgKiAyO1xuICAgICAgb3V0Ll93ID0gKGVbMV0gLSBlWzRdKSAvIHM7XG4gICAgICBvdXQuX3ggPSAoZVs4XSArIGVbMl0pIC8gcztcbiAgICAgIG91dC5feSA9IChlWzZdICsgZVs5XSkgLyBzO1xuICAgICAgb3V0Ll96ID0gMC4yNSAqIHM7XG4gICAgfVxuXG4gICAgb3V0Ll9vblZhbHVlQ2hhbmdlZCAmJiBvdXQuX29uVmFsdWVDaGFuZ2VkKCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc2NhbGUgZnJvbSB0aGlzIG1hdHJpeC5cbiAgICogQHBhcmFtIG91dCAtIFNjYWxlIHZlY3RvciBhcyBhbiBvdXRwdXQgcGFyYW1ldGVyXG4gICAqIEByZXR1cm5zIFRoZSBvdXRcbiAgICovXG4gIGdldFNjYWxpbmcob3V0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgLy9nZXRTY2FsZSgpXG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3QgbTExID0gZVswXSxcbiAgICAgIG0xMiA9IGVbMV0sXG4gICAgICBtMTMgPSBlWzJdO1xuICAgIGNvbnN0IG0yMSA9IGVbNF0sXG4gICAgICBtMjIgPSBlWzVdLFxuICAgICAgbTIzID0gZVs2XTtcbiAgICBjb25zdCBtMzEgPSBlWzhdLFxuICAgICAgbTMyID0gZVs5XSxcbiAgICAgIG0zMyA9IGVbMTBdO1xuXG4gICAgb3V0LnNldFZhbHVlKFxuICAgICAgTWF0aC5zcXJ0KG0xMSAqIG0xMSArIG0xMiAqIG0xMiArIG0xMyAqIG0xMyksXG4gICAgICBNYXRoLnNxcnQobTIxICogbTIxICsgbTIyICogbTIyICsgbTIzICogbTIzKSxcbiAgICAgIE1hdGguc3FydChtMzEgKiBtMzEgKyBtMzIgKiBtMzIgKyBtMzMgKiBtMzMpLFxuICAgICk7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0cmFuc2xhdGlvbiBmcm9tIHRoaXMgbWF0cml4LlxuICAgKiBAcGFyYW0gb3V0IC0gVHJhbnNsYXRpb24gdmVjdG9yIGFzIGFuIG91dHB1dCBwYXJhbWV0ZXJcbiAgICogQHJldHVybnMgVGhlIG91dFxuICAgKi9cbiAgZ2V0VHJhbnNsYXRpb24ob3V0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgY29uc3QgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgb3V0LnNldFZhbHVlKGVbMTJdLCBlWzEzXSwgZVsxNF0pO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogSWRlbnRpdHkgdGhpcyBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIGlkZW50aXR5XG4gICAqL1xuICBpZGVudGl0eSgpOiBNYXRyaXg0IHtcbiAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcblxuICAgIGVbMF0gPSAxO1xuICAgIGVbMV0gPSAwO1xuICAgIGVbMl0gPSAwO1xuICAgIGVbM10gPSAwO1xuXG4gICAgZVs0XSA9IDA7XG4gICAgZVs1XSA9IDE7XG4gICAgZVs2XSA9IDA7XG4gICAgZVs3XSA9IDA7XG5cbiAgICBlWzhdID0gMDtcbiAgICBlWzldID0gMDtcbiAgICBlWzEwXSA9IDE7XG4gICAgZVsxMV0gPSAwO1xuXG4gICAgZVsxMl0gPSAwO1xuICAgIGVbMTNdID0gMDtcbiAgICBlWzE0XSA9IDA7XG4gICAgZVsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogSW52ZXJ0IHRoZSBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoZSBtYXRyaXggYWZ0ZXIgaW52ZXJ0XG4gICAqL1xuICBpbnZlcnQoKTogTWF0cml4NCB7XG4gICAgTWF0cml4NC5pbnZlcnQodGhpcywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtYXRyaXggcm90YXRlcyBhcm91bmQgYW4gYXJiaXRyYXJ5IGF4aXMuXG4gICAqIEBwYXJhbSBheGlzIC0gVGhlIGF4aXNcbiAgICogQHBhcmFtIHIgLSBUaGUgcm90YXRpb24gYW5nbGUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCBhZnRlciByb3RhdGVcbiAgICovXG4gIHJvdGF0ZUF4aXNBbmdsZShheGlzOiBWZWN0b3IzLCByOiBudW1iZXIpOiBNYXRyaXg0IHtcbiAgICBNYXRyaXg0LnJvdGF0ZUF4aXNBbmdsZSh0aGlzLCBheGlzLCByLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIG1hdHJpeCBieSBhIGdpdmVuIHZlY3Rvci5cbiAgICogQHBhcmFtIHMgLSBUaGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIHNjYWxlXG4gICAqL1xuICBzY2FsZShzOiBWZWN0b3IzKTogTWF0cml4NCB7XG4gICAgTWF0cml4NC5zY2FsZSh0aGlzLCBzLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgdGhpcyBtYXRyaXggYnkgYSBnaXZlbiB2ZWN0b3IuXG4gICAqIEBwYXJhbSB2IC0gVGhlIGdpdmVuIHZlY3RvclxuICAgKiBAcmV0dXJucyBUaGlzIG1hdHJpeCBhZnRlciB0cmFuc2xhdGVcbiAgICovXG4gIHRyYW5zbGF0ZSh2OiBWZWN0b3IzKTogTWF0cml4NCB7XG4gICAgTWF0cml4NC50cmFuc2xhdGUodGhpcywgdiwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0cmFuc3Bvc2Ugb2YgdGhpcyBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoaXMgbWF0cml4IGFmdGVyIHRyYW5zcG9zZVxuICAgKi9cbiAgdHJhbnNwb3NlKCk6IE1hdHJpeDQge1xuICAgIE1hdHJpeDQudHJhbnNwb3NlKHRoaXMsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNYXRoVXRpbCB9IGZyb20gJy4vTWF0aFV0aWwnO1xuXG4vKipcbiAqIERlc2NyaWJlcyBhIGNvbG9yIGluIHRoZSBmcm9tIG9mIFJHQkEgKGluIG9yZGVyOiBSLCBHLCBCLCBBKS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbG9yIHtcbiAgLyoqXG4gICAqIE1vZGlmeSBhIHZhbHVlIGZyb20gdGhlIGdhbW1hIHNwYWNlIHRvIHRoZSBsaW5lYXIgc3BhY2UuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSBpbiBnYW1tYSBzcGFjZVxuICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgaW4gbGluZWFyIHNwYWNlXG4gICAqL1xuICBzdGF0aWMgZ2FtbWFUb0xpbmVhclNwYWNlKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgIC8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L09wZW5HTC9leHRlbnNpb25zL0VYVC9FWFRfZnJhbWVidWZmZXJfc1JHQi50eHRcbiAgICAvLyBodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS9PcGVuR0wvZXh0ZW5zaW9ucy9FWFQvRVhUX3RleHR1cmVfc1JHQl9kZWNvZGUudHh0XG5cbiAgICBpZiAodmFsdWUgPD0gMC4wKSByZXR1cm4gMC4wO1xuICAgIGVsc2UgaWYgKHZhbHVlIDw9IDAuMDQwNDUpIHJldHVybiB2YWx1ZSAvIDEyLjkyO1xuICAgIGVsc2UgaWYgKHZhbHVlIDwgMS4wKSByZXR1cm4gTWF0aC5wb3coKHZhbHVlICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgZWxzZSByZXR1cm4gTWF0aC5wb3codmFsdWUsIDIuNCk7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IGEgdmFsdWUgZnJvbSB0aGUgbGluZWFyIHNwYWNlIHRvIHRoZSBnYW1tYSBzcGFjZS5cbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIGluIGxpbmVhciBzcGFjZVxuICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgaW4gZ2FtbWEgc3BhY2VcbiAgICovXG4gIHN0YXRpYyBsaW5lYXJUb0dhbW1hU3BhY2UodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvT3BlbkdML2V4dGVuc2lvbnMvRVhUL0VYVF9mcmFtZWJ1ZmZlcl9zUkdCLnR4dFxuICAgIC8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L09wZW5HTC9leHRlbnNpb25zL0VYVC9FWFRfdGV4dHVyZV9zUkdCX2RlY29kZS50eHRcblxuICAgIGlmICh2YWx1ZSA8PSAwLjApIHJldHVybiAwLjA7XG4gICAgZWxzZSBpZiAodmFsdWUgPCAwLjAwMzEzMDgpIHJldHVybiAxMi45MiAqIHZhbHVlO1xuICAgIGVsc2UgaWYgKHZhbHVlIDwgMS4wKSByZXR1cm4gMS4wNTUgKiBNYXRoLnBvdyh2YWx1ZSwgMC40MTY2NikgLSAwLjA1NTtcbiAgICBlbHNlIHJldHVybiBNYXRoLnBvdyh2YWx1ZSwgMC40MTY2Nik7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgY29sb3JzIGFyZSBlcXVhbHMuXG4gICAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IGNvbG9yIHRvIGNvbXBhcmVcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBjb2xvciB0byBjb21wYXJlXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNwZWNpZmllZCBjb2xvcnMgYXJlIGVxdWFscywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IENvbG9yLCByaWdodDogQ29sb3IpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlZnQuciwgcmlnaHQucikgJiZcbiAgICAgIE1hdGhVdGlsLmVxdWFscyhsZWZ0LmcsIHJpZ2h0LmcpICYmXG4gICAgICBNYXRoVXRpbC5lcXVhbHMobGVmdC5iLCByaWdodC5iKSAmJlxuICAgICAgTWF0aFV0aWwuZXF1YWxzKGxlZnQuYSwgcmlnaHQuYSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHN1bSBvZiB0d28gY29sb3JzLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBmaXJzdCBjb2xvciB0byBhZGRcbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBjb2xvciB0byBhZGRcbiAgICogQHBhcmFtIG91dCAtIFRoZSBzdW0gb2YgdHdvIGNvbG9yc1xuICAgKiBAcmV0dXJucyBUaGUgYWRkZWQgY29sb3JcbiAgICovXG4gIHN0YXRpYyBhZGQobGVmdDogQ29sb3IsIHJpZ2h0OiBDb2xvciwgb3V0OiBDb2xvcik6IENvbG9yIHtcbiAgICBvdXQuciA9IGxlZnQuciArIHJpZ2h0LnI7XG4gICAgb3V0LmcgPSBsZWZ0LmcgKyByaWdodC5nO1xuICAgIG91dC5iID0gbGVmdC5iICsgcmlnaHQuYjtcbiAgICBvdXQuYSA9IGxlZnQuYSArIHJpZ2h0LmE7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIGEgY29sb3IgYnkgdGhlIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSBjb2xvciB0byBzY2FsZVxuICAgKiBAcGFyYW0gcyAtIFRoZSBhbW91bnQgYnkgd2hpY2ggdG8gc2NhbGUgdGhlIGNvbG9yXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgc2NhbGVkIGNvbG9yXG4gICAqIEByZXR1cm5zIFRoZSBzY2FsZWQgY29sb3JcbiAgICovXG4gIHN0YXRpYyBzY2FsZShsZWZ0OiBDb2xvciwgczogbnVtYmVyLCBvdXQ6IENvbG9yKTogQ29sb3Ige1xuICAgIG91dC5yID0gbGVmdC5yICogcztcbiAgICBvdXQuZyA9IGxlZnQuZyAqIHM7XG4gICAgb3V0LmIgPSBsZWZ0LmIgKiBzO1xuICAgIG91dC5hID0gbGVmdC5hICogcztcblxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKiogVGhlIHJlZCBjb21wb25lbnQgb2YgdGhlIGNvbG9yLCAwfjEuICovXG4gIHB1YmxpYyByOiBudW1iZXI7XG4gIC8qKiBUaGUgZ3JlZW4gY29tcG9uZW50IG9mIHRoZSBjb2xvciwgMH4xLiAqL1xuICBwdWJsaWMgZzogbnVtYmVyO1xuICAvKiogVGhlIGJsdWUgY29tcG9uZW50IG9mIHRoZSBjb2xvciwgMH4xLiAqL1xuICBwdWJsaWMgYjogbnVtYmVyO1xuICAvKiogVGhlIGFscGhhIGNvbXBvbmVudCBvZiB0aGUgY29sb3IsIDB+MS4gKi9cbiAgcHVibGljIGE6IG51bWJlcjtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3Igb2YgQ29sb3IuXG4gICAqIEBwYXJhbSByIC0gVGhlIHJlZCBjb21wb25lbnQgb2YgdGhlIGNvbG9yXG4gICAqIEBwYXJhbSBnIC0gVGhlIGdyZWVuIGNvbXBvbmVudCBvZiB0aGUgY29sb3JcbiAgICogQHBhcmFtIGIgLSBUaGUgYmx1ZSBjb21wb25lbnQgb2YgdGhlIGNvbG9yXG4gICAqIEBwYXJhbSBhIC0gVGhlIGFscGhhIGNvbXBvbmVudCBvZiB0aGUgY29sb3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHI6IG51bWJlciA9IDEsIGc6IG51bWJlciA9IDEsIGI6IG51bWJlciA9IDEsIGE6IG51bWJlciA9IDEpIHtcbiAgICB0aGlzLnIgPSByO1xuICAgIHRoaXMuZyA9IGc7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmEgPSBhO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBjb2xvci5cbiAgICogQHBhcmFtIHIgLSBUaGUgcmVkIGNvbXBvbmVudCBvZiB0aGUgY29sb3JcbiAgICogQHBhcmFtIGcgLSBUaGUgZ3JlZW4gY29tcG9uZW50IG9mIHRoZSBjb2xvclxuICAgKiBAcGFyYW0gYiAtIFRoZSBibHVlIGNvbXBvbmVudCBvZiB0aGUgY29sb3JcbiAgICogQHBhcmFtIGEgLSBUaGUgYWxwaGEgY29tcG9uZW50IG9mIHRoZSBjb2xvclxuICAgKiBAcmV0dXJucyBUaGlzIGNvbG9yLlxuICAgKi9cbiAgc2V0VmFsdWUocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYTogbnVtYmVyKTogQ29sb3Ige1xuICAgIHRoaXMuciA9IHI7XG4gICAgdGhpcy5nID0gZztcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYSA9IGE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc3VtIG9mIHRoaXMgY29sb3IgYW5kIHRoZSBzcGVjaWZpZWQgY29sb3IuXG4gICAqIEBwYXJhbSBjb2xvciAtIFRoZSBzcGVjaWZpZWQgY29sb3JcbiAgICogQHJldHVybnMgVGhlIGFkZGVkIGNvbG9yXG4gICAqL1xuICBhZGQoY29sb3I6IENvbG9yKTogQ29sb3Ige1xuICAgIHRoaXMuciArPSBjb2xvci5yO1xuICAgIHRoaXMuZyArPSBjb2xvci5nO1xuICAgIHRoaXMuYiArPSBjb2xvci5iO1xuICAgIHRoaXMuYSArPSBjb2xvci5hO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyBjb2xvciBieSB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAqIEBwYXJhbSBzIC0gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgY29sb3JcbiAgICogQHJldHVybnMgVGhlIHNjYWxlZCBjb2xvclxuICAgKi9cbiAgc2NhbGUoczogbnVtYmVyKTogQ29sb3Ige1xuICAgIHRoaXMuciAqPSBzO1xuICAgIHRoaXMuZyAqPSBzO1xuICAgIHRoaXMuYiAqPSBzO1xuICAgIHRoaXMuYSAqPSBzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgY29sb3IuXG4gICAqIEByZXR1cm5zIEEgY2xvbmUgb2YgdGhpcyBjb2xvclxuICAgKi9cbiAgY2xvbmUoKTogQ29sb3Ige1xuICAgIGNvbnN0IHJldCA9IG5ldyBDb2xvcih0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCB0aGlzLmEpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgY29sb3IgdG8gdGhlIHNwZWNpZmllZCBjb2xvci5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBzcGVjaWZpZWQgY29sb3JcbiAgICogQHJldHVybnMgVGhlIHNwZWNpZmllZCBjb2xvclxuICAgKi9cbiAgY2xvbmVUbyhvdXQ6IENvbG9yKTogQ29sb3Ige1xuICAgIG91dC5yID0gdGhpcy5yO1xuICAgIG91dC5nID0gdGhpcy5nO1xuICAgIG91dC5iID0gdGhpcy5iO1xuICAgIG91dC5hID0gdGhpcy5hO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IGNvbXBvbmVudHMgKHIsIGcsIGIpIG9mIHRoaXMgY29sb3IgZnJvbSBnYW1tYSBzcGFjZSB0byBsaW5lYXIgc3BhY2UuXG4gICAqIEBwYXJhbSBvdXQgLSBUaGUgY29sb3IgaW4gbGluZWFyIHNwYWNlXG4gICAqIEByZXR1cm5zIFRoZSBjb2xvciBpbiBsaW5lYXIgc3BhY2VcbiAgICovXG4gIHRvTGluZWFyKG91dDogQ29sb3IpOiBDb2xvciB7XG4gICAgb3V0LnIgPSBDb2xvci5nYW1tYVRvTGluZWFyU3BhY2UodGhpcy5yKTtcbiAgICBvdXQuZyA9IENvbG9yLmdhbW1hVG9MaW5lYXJTcGFjZSh0aGlzLmcpO1xuICAgIG91dC5iID0gQ29sb3IuZ2FtbWFUb0xpbmVhclNwYWNlKHRoaXMuYik7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb2RpZnkgY29tcG9uZW50cyAociwgZywgYikgb2YgdGhpcyBjb2xvciBmcm9tIGxpbmVhciBzcGFjZSB0byBnYW1tYSBzcGFjZS5cbiAgICogQHBhcmFtIG91dCAtIFRoZSBjb2xvciBpbiBnYW1tYSBzcGFjZVxuICAgKiBAcmV0dXJucyBUaGUgY29sb3IgaW4gZ2FtbWEgc3BhY2VcbiAgICovXG4gIHRvR2FtbWEob3V0OiBDb2xvcik6IENvbG9yIHtcbiAgICBvdXQuciA9IENvbG9yLmxpbmVhclRvR2FtbWFTcGFjZSh0aGlzLnIpO1xuICAgIG91dC5nID0gQ29sb3IubGluZWFyVG9HYW1tYVNwYWNlKHRoaXMuZyk7XG4gICAgb3V0LmIgPSBDb2xvci5saW5lYXJUb0dhbW1hU3BhY2UodGhpcy5iKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG4iLCIvKipcbiAqIEVudW0gdHlwZSBmb3IgYmFja2dyb3VuZCBtb2RlLlxuICovXG5leHBvcnQgZW51bSBCYWNrZ3JvdW5kTW9kZSB7XG4gIC8qIFNvbGlkIGNvbG9yLiAqL1xuICBTb2xpZENvbG9yLFxuICAvKiBTa3kuICovXG4gIFNreSxcbiAgLyoqIFRleHR1cmUgKi9cbiAgVGV4dHVyZSxcbn1cbiIsIi8qKlxuICogQ29sb3IgU3BhY2UuXG4gKi9cbmV4cG9ydCBlbnVtIENvbG9yU3BhY2Uge1xuICAvKiogTGluZWFyIGNvbG9yIHNwYWNlLiAqL1xuICBMaW5lYXIsXG4gIC8qKiBHYW1tYSBjb2xvciBzcGFjZS4gKi9cbiAgR2FtbWEsXG59XG4iLCJpbXBvcnQgeyBNYXRyaXg0LCBWZWN0b3IyLCBWZWN0b3IzLCBWZWN0b3I0LCBDb2xvciB9IGZyb20gJy4uLy4uL21hdGgnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmUnO1xuaW1wb3J0IHsgU2hhZGVyUHJvcGVydHlWYWx1ZVR5cGUgfSBmcm9tICcuL1NoYWRlckRhdGEnO1xuaW1wb3J0IHsgQ29sb3JTcGFjZSB9IGZyb20gJy4uL2VudW1zL0NvbG9yU3BhY2UnO1xuXG4vKipcbiAqIFRoZSBlbmNhcHN1bGF0aW9uIG9mIGVhY2ggdW5pZm9ybSB2YXJpYWJsZSwgaW5jbHVkaW5nIGl0cyBjYWNoZSB2YWx1ZSwgZGF0YSB1cGxvYWQgbWV0aG9kLCBhbmQgZGF0YSBzdG9yYWdlIGFkZHJlc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXJVbmlmb3JtIHtcbiAgbmFtZTogc3RyaW5nO1xuICBwcm9wZXJ0eUlkOiBudW1iZXI7XG4gIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgYXBwbHlGdW5jOiAoc2hhZGVyVW5pZm9ybTogU2hhZGVyVW5pZm9ybSwgdmFsdWU6IFNoYWRlclByb3BlcnR5VmFsdWVUeXBlKSA9PiB2b2lkO1xuICBjYWNoZVZhbHVlOiBudW1iZXIgfCBWZWN0b3IyIHwgVmVjdG9yMyB8IFZlY3RvcjQ7XG4gIHRleHR1cmVJbmRleDogR0xlbnVtIHwgR0xlbnVtW107XG4gIHRleHR1cmVEZWZhdWx0OiBUZXh0dXJlIHwgVGV4dHVyZVtdO1xuXG4gIHByaXZhdGUgX2dsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gIHByaXZhdGUgX2NvbG9yU3BhY2U6IENvbG9yU3BhY2U7XG5cbiAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuICAgIHRoaXMuX2dsID0gZ2w7XG4gIH1cblxuICB1cGxvYWQxZihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY2FjaGVWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2dsLnVuaWZvcm0xZihzaGFkZXJVbmlmb3JtLmxvY2F0aW9uLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNhY2hlVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICB1cGxvYWQxZnYoc2hhZGVyVW5pZm9ybTogU2hhZGVyVW5pZm9ybSwgdmFsdWU6IEZsb2F0MzJBcnJheSk6IHZvaWQge1xuICAgIHRoaXMuX2dsLnVuaWZvcm0xZnYoc2hhZGVyVW5pZm9ybS5sb2NhdGlvbiwgdmFsdWUpO1xuICB9XG5cbiAgdXBsb2FkMmZ2KHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9nbC51bmlmb3JtMmZ2KHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcbiAgfVxuXG4gIHVwbG9hZDNmKHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBWZWN0b3IzIHwgVmVjdG9yNCB8IENvbG9yKTogdm9pZCB7XG4gICAgY29uc3QgY2FjaGVWYWx1ZSA9IDxWZWN0b3IzPnRoaXMuY2FjaGVWYWx1ZTtcbiAgICBpZiAoKDxDb2xvcj52YWx1ZSkuciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY2FjaGVWYWx1ZS54ICE9PSAoPENvbG9yPnZhbHVlKS5yIHx8IGNhY2hlVmFsdWUueSAhPT0gKDxDb2xvcj52YWx1ZSkuZyB8fCBjYWNoZVZhbHVlLnogIT09ICg8Q29sb3I+dmFsdWUpLmIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbG9yU3BhY2UgPT09IENvbG9yU3BhY2UuTGluZWFyKSB7XG4gICAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTNmKFxuICAgICAgICAgICAgc2hhZGVyVW5pZm9ybS5sb2NhdGlvbixcbiAgICAgICAgICAgIENvbG9yLmdhbW1hVG9MaW5lYXJTcGFjZSgoPENvbG9yPnZhbHVlKS5yKSxcbiAgICAgICAgICAgIENvbG9yLmdhbW1hVG9MaW5lYXJTcGFjZSgoPENvbG9yPnZhbHVlKS5nKSxcbiAgICAgICAgICAgIENvbG9yLmdhbW1hVG9MaW5lYXJTcGFjZSgoPENvbG9yPnZhbHVlKS5iKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2dsLnVuaWZvcm0zZihzaGFkZXJVbmlmb3JtLmxvY2F0aW9uLCAoPENvbG9yPnZhbHVlKS5yLCAoPENvbG9yPnZhbHVlKS5nLCAoPENvbG9yPnZhbHVlKS5iKTtcbiAgICAgICAgfVxuICAgICAgICBjYWNoZVZhbHVlLnggPSAoPENvbG9yPnZhbHVlKS5yO1xuICAgICAgICBjYWNoZVZhbHVlLnkgPSAoPENvbG9yPnZhbHVlKS5nO1xuICAgICAgICBjYWNoZVZhbHVlLnogPSAoPENvbG9yPnZhbHVlKS5iO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNhY2hlVmFsdWUueCAhPT0gKDxWZWN0b3IzPnZhbHVlKS54IHx8XG4gICAgICAgIGNhY2hlVmFsdWUueSAhPT0gKDxWZWN0b3IzPnZhbHVlKS55IHx8XG4gICAgICAgIGNhY2hlVmFsdWUueiAhPT0gKDxWZWN0b3IzPnZhbHVlKS56XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTNmKHNoYWRlclVuaWZvcm0ubG9jYXRpb24sICg8VmVjdG9yMz52YWx1ZSkueCwgKDxWZWN0b3IzPnZhbHVlKS55LCAoPFZlY3RvcjM+dmFsdWUpLnopO1xuICAgICAgICBjYWNoZVZhbHVlLnggPSAoPFZlY3RvcjM+dmFsdWUpLng7XG4gICAgICAgIGNhY2hlVmFsdWUueSA9ICg8VmVjdG9yMz52YWx1ZSkueTtcbiAgICAgICAgY2FjaGVWYWx1ZS56ID0gKDxWZWN0b3IzPnZhbHVlKS56O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZDNmdihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgdGhpcy5fZ2wudW5pZm9ybTNmdihzaGFkZXJVbmlmb3JtLmxvY2F0aW9uLCB2YWx1ZSk7XG4gIH1cblxuICB1cGxvYWQ0ZihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogVmVjdG9yNCB8IENvbG9yKTogdm9pZCB7XG4gICAgY29uc3QgY2FjaGVWYWx1ZSA9IDxWZWN0b3I0PnRoaXMuY2FjaGVWYWx1ZTtcbiAgICBpZiAoKDxDb2xvcj52YWx1ZSkuciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNhY2hlVmFsdWUueCAhPT0gKDxDb2xvcj52YWx1ZSkuciB8fFxuICAgICAgICBjYWNoZVZhbHVlLnkgIT09ICg8Q29sb3I+dmFsdWUpLmcgfHxcbiAgICAgICAgY2FjaGVWYWx1ZS56ICE9PSAoPENvbG9yPnZhbHVlKS5iIHx8XG4gICAgICAgIGNhY2hlVmFsdWUudyAhPT0gKDxDb2xvcj52YWx1ZSkuYVxuICAgICAgKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb2xvclNwYWNlID09PSBDb2xvclNwYWNlLkxpbmVhcikge1xuICAgICAgICAgIHRoaXMuX2dsLnVuaWZvcm00ZihcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0ubG9jYXRpb24sXG4gICAgICAgICAgICBDb2xvci5nYW1tYVRvTGluZWFyU3BhY2UoKDxDb2xvcj52YWx1ZSkuciksXG4gICAgICAgICAgICBDb2xvci5nYW1tYVRvTGluZWFyU3BhY2UoKDxDb2xvcj52YWx1ZSkuZyksXG4gICAgICAgICAgICBDb2xvci5nYW1tYVRvTGluZWFyU3BhY2UoKDxDb2xvcj52YWx1ZSkuYiksXG4gICAgICAgICAgICAoPENvbG9yPnZhbHVlKS5hLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTRmKFxuICAgICAgICAgICAgc2hhZGVyVW5pZm9ybS5sb2NhdGlvbixcbiAgICAgICAgICAgICg8Q29sb3I+dmFsdWUpLnIsXG4gICAgICAgICAgICAoPENvbG9yPnZhbHVlKS5nLFxuICAgICAgICAgICAgKDxDb2xvcj52YWx1ZSkuYixcbiAgICAgICAgICAgICg8Q29sb3I+dmFsdWUpLmEsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjYWNoZVZhbHVlLnggPSAoPENvbG9yPnZhbHVlKS5yO1xuICAgICAgICBjYWNoZVZhbHVlLnkgPSAoPENvbG9yPnZhbHVlKS5nO1xuICAgICAgICBjYWNoZVZhbHVlLnogPSAoPENvbG9yPnZhbHVlKS5iO1xuICAgICAgICBjYWNoZVZhbHVlLncgPSAoPENvbG9yPnZhbHVlKS5hO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNhY2hlVmFsdWUueCAhPT0gKDxWZWN0b3I0PnZhbHVlKS54IHx8XG4gICAgICAgIGNhY2hlVmFsdWUueSAhPT0gKDxWZWN0b3I0PnZhbHVlKS55IHx8XG4gICAgICAgIGNhY2hlVmFsdWUueiAhPT0gKDxWZWN0b3I0PnZhbHVlKS56IHx8XG4gICAgICAgIGNhY2hlVmFsdWUudyAhPT0gKDxWZWN0b3I0PnZhbHVlKS53XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTRmKFxuICAgICAgICAgIHNoYWRlclVuaWZvcm0ubG9jYXRpb24sXG4gICAgICAgICAgKDxWZWN0b3I0PnZhbHVlKS54LFxuICAgICAgICAgICg8VmVjdG9yND52YWx1ZSkueSxcbiAgICAgICAgICAoPFZlY3RvcjQ+dmFsdWUpLnosXG4gICAgICAgICAgKDxWZWN0b3I0PnZhbHVlKS53LFxuICAgICAgICApO1xuICAgICAgICBjYWNoZVZhbHVlLnggPSAoPFZlY3RvcjQ+dmFsdWUpLng7XG4gICAgICAgIGNhY2hlVmFsdWUueSA9ICg8VmVjdG9yND52YWx1ZSkueTtcbiAgICAgICAgY2FjaGVWYWx1ZS56ID0gKDxWZWN0b3I0PnZhbHVlKS56O1xuICAgICAgICBjYWNoZVZhbHVlLncgPSAoPFZlY3RvcjQ+dmFsdWUpLnc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBsb2FkNGZ2KHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9nbC51bmlmb3JtNGZ2KHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcbiAgfVxuXG4gIHVwbG9hZDFpKHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jYWNoZVZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fZ2wudW5pZm9ybTFpKHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcbiAgICAgIHRoaXMuY2FjaGVWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHVwbG9hZDFpdihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogSW50MzJBcnJheSk6IHZvaWQge1xuICAgIHRoaXMuX2dsLnVuaWZvcm0xaXYoc2hhZGVyVW5pZm9ybS5sb2NhdGlvbiwgdmFsdWUpO1xuICB9XG5cbiAgdXBsb2FkMml2KHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBJbnQzMkFycmF5KTogdm9pZCB7XG4gICAgdGhpcy5fZ2wudW5pZm9ybTJpdihzaGFkZXJVbmlmb3JtLmxvY2F0aW9uLCB2YWx1ZSk7XG4gIH1cblxuICB1cGxvYWQzaXYoc2hhZGVyVW5pZm9ybTogU2hhZGVyVW5pZm9ybSwgdmFsdWU6IEludDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9nbC51bmlmb3JtM2l2KHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcbiAgfVxuXG4gIHVwbG9hZDRpdihzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogSW50MzJBcnJheSk6IHZvaWQge1xuICAgIHRoaXMuX2dsLnVuaWZvcm00aXYoc2hhZGVyVW5pZm9ybS5sb2NhdGlvbiwgdmFsdWUpO1xuICB9XG5cbiAgdXBsb2FkTWF0NChzaGFkZXJVbmlmb3JtOiBTaGFkZXJVbmlmb3JtLCB2YWx1ZTogTWF0cml4NCk6IHZvaWQge1xuICAgIHRoaXMuX2dsLnVuaWZvcm1NYXRyaXg0ZnYoc2hhZGVyVW5pZm9ybS5sb2NhdGlvbiwgZmFsc2UsIHZhbHVlLmVsZW1lbnRzKTtcbiAgfVxuXG4gIHVwbG9hZE1hdDR2KHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9nbC51bmlmb3JtTWF0cml4NGZ2KHNoYWRlclVuaWZvcm0ubG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7XG4gIH1cblxuICB1cGxvYWRUZXh0dXJlKHNoYWRlclVuaWZvcm06IFNoYWRlclVuaWZvcm0sIHZhbHVlOiBUZXh0dXJlKTogdm9pZCB7XG4gICAgLy8g5byA5ZCv56yseOWPt+e6ueeQhuWNleWFg1xuICAgIHRoaXMuX2dsLmFjdGl2ZVRleHR1cmUoc2hhZGVyVW5pZm9ybS50ZXh0dXJlSW5kZXggYXMgR0xlbnVtKTtcbiAgICAvLyDlkJF0YXJnZXTnu5HlrprnurnnkIblr7nosaFcbiAgICB0aGlzLl9nbC5iaW5kVGV4dHVyZSh2YWx1ZS5fZ2xUYXJnZXQsIHZhbHVlLl9nbFRleHR1cmUpO1xuICB9XG59XG4iLCIvKipcbiAqIFNoYWRlciBkYXRhIGdyb3VwaW5nLlxuICovXG5leHBvcnQgZW51bSBTaGFkZXJEYXRhR3JvdXAge1xuICAvKiogU2NlbmUgZ3JvdXAuICovXG4gIFNjZW5lLFxuICAvKiogQ2FtZXJhIGdyb3VwLiAqL1xuICBDYW1lcmEsXG4gIC8qKiBSZW5kZXJlciBncm91cC4gKi9cbiAgUmVuZGVyZXIsXG4gIC8qKiBtYXRlcmlhbCBncm91cC4gKi9cbiAgTWF0ZXJpYWwsXG4gIC8vIFRPRE86IEdlb2dyYXBoaWNcbn1cbiIsImltcG9ydCB7IFNoYWRlclVuaWZvcm0gfSBmcm9tICcuL1NoYWRlclVuaWZvcm0nO1xuXG4vKipcbiAqIFNoYWRlciB1bmlmb3JtIGJsb2NrLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXJVbmlmb3JtQmxvY2sge1xuICByZWFkb25seSBjb25zdFVuaWZvcm1zOiBTaGFkZXJVbmlmb3JtW10gPSBbXTtcbiAgcmVhZG9ubHkgdGV4dHVyZVVuaWZvcm1zOiBTaGFkZXJVbmlmb3JtW10gPSBbXTtcbn1cbiIsImltcG9ydCB7IFNoYWRlclByb2dyYW0gfSBmcm9tICcuL3NoYWRlci9TaGFkZXJQcm9ncmFtJztcbmltcG9ydCB7IE1lc2gsIFN1Yk1lc2ggfSBmcm9tICcuL2dyYXBoaWMnO1xuXG4vKipcbiAqIFJlbmRlcmVyLCBlYWNoIE1lc2ggd2lsbCBoYXZlIGEgcmVuZGVyZXIgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5kZXJlciB7XG4gIC8qKiBDdXJyZW50IGJpbmQgcHJvZ3JhbS4gKi9cbiAgc3RhdGljIGdsUHJvZ3JhbTogU2hhZGVyUHJvZ3JhbTtcbiAgLy8gVE9ETzog6KaB5o6l5YWld2ViZ2wyLCDlupTor6Xmir3lh7rkuIDkuKrnsbvlnotcbiAgcHJpdmF0ZSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICAvKiogQXJyYXkgb2YgYWRkcmVzc2VzIG9mIGF0dHJpYnV0ZSB2YXJpYWJsZXMgaW4gc2hhZGVyIHByb2dyYW1zLiAqL1xuICBwcm90ZWN0ZWQgYXR0cmliTG9jQXJyYXk6IG51bWJlcltdO1xuICAvKiogTWVzaCB0byBiZSByZW5kZXJlZC4gKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9wcmltaXRpdmU6IE1lc2g7XG5cbiAgLyoqXG4gICAqIFJlbmRlciBiYXNlZCBvbiByZW5kZXJpbmcgY29udGV4dCBhbmQgZ3JpZC5cbiAgICogQHBhcmFtIGdsIFdlYkdMIHJlbmRlcmluZyBjb250ZXh0LlxuICAgKiBAcGFyYW0gcHJpbWl0aXZlIE1lc2ggdG8gYmUgcmVuZGVyZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwcmltaXRpdmU6IE1lc2gpIHtcbiAgICB0aGlzLl9wcmltaXRpdmUgPSBwcmltaXRpdmU7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuaW5pdFJlbmRlclN0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQmluZCBidWZmZXIgYW5kIGF0dHJpYnV0ZS5cbiAgICovXG4gIHByb3RlY3RlZCBiaW5kQnVmZmVyQW5kQXR0cmliKHNoYWRlclByb2dyYW06IFNoYWRlclByb2dyYW0pOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgY29uc3QgcHJpbWl0aXZlID0gdGhpcy5fcHJpbWl0aXZlO1xuICAgIGNvbnN0IHZlcnRleEJ1ZmZlckJpbmRpbmdzID0gcHJpbWl0aXZlLl92ZXJ0ZXhCdWZmZXJCaW5kaW5ncztcblxuICAgIHRoaXMuYXR0cmliTG9jQXJyYXkgPSBbXTtcbiAgICBjb25zdCBhdHRyaWJ1dGVMb2NhdGlvbiA9IHNoYWRlclByb2dyYW0uYXR0cmlidXRlTG9jYXRpb247XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHByaW1pdGl2ZS5fdmVydGV4RWxlbWVudE1hcDtcblxuICAgIGxldCB2Ym86IFdlYkdMQnVmZmVyO1xuICAgIGxldCBsYXN0Qm91bmRWYm86IFdlYkdMQnVmZmVyO1xuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIGF0dHJpYnV0ZUxvY2F0aW9uKSB7XG4gICAgICBjb25zdCBsb2MgPSBhdHRyaWJ1dGVMb2NhdGlvbltuYW1lXTtcbiAgICAgIGlmIChsb2MgPT09IC0xKSBjb250aW51ZTtcblxuICAgICAgY29uc3QgZWxlbWVudCA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgc3RyaWRlIH0gPSB2ZXJ0ZXhCdWZmZXJCaW5kaW5nc1tlbGVtZW50LmJpbmRpbmdJbmRleF07XG4gICAgICAgIHZibyA9IGJ1ZmZlci5fbmF0aXZlQnVmZmVyO1xuICAgICAgICBpZiAobGFzdEJvdW5kVmJvICE9PSB2Ym8pIHtcbiAgICAgICAgICBsYXN0Qm91bmRWYm8gPSB2Ym87XG4gICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZibyk7XG4gICAgICAgIH1cblxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2MpO1xuICAgICAgICBjb25zdCB7IHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQgfSA9IGVsZW1lbnQuX2dsRWxlbWVudEluZm87XG4gICAgICAgIC8vIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCAwLCBlbGVtZW50Lm9mZnNldCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUsIGVsZW1lbnQub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5hdHRyaWJMb2NBcnJheS5wdXNoKGxvYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ3ZlcnRleCBhdHRyaWJ1dGUgbm90IGZvdW5kOiAnICsgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcbiAgfVxuXG4gIC8vIFRPRE86IOi/meS4qua4suafk+eKtuaAgeaYr+S4jeaYr+W6lOivpeiAg+iZkeaUvuWIsOadkOi0qOmHjOmdou+8jOW5tuS4lOaKveWHuuS4gOS4qlJlbmRlclN0YXRlXG4gIC8qKlxuICAgKiBDbGVhciBkZXB0aCwgY29sb3IgYnVmZmVyLCBldGMuXG4gICAqL1xuICBpbml0UmVuZGVyU3RhdGUoKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgIGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XG4gICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xuICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IHRoZSBwcmltaXRpdmUuXG4gICAqL1xuICBkcmF3KHNoYWRlclByb2dyYW06IFNoYWRlclByb2dyYW0sIHN1Yk1lc2g6IFN1Yk1lc2gpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgY29uc3QgcHJpbWl0aXZlID0gdGhpcy5fcHJpbWl0aXZlO1xuXG4gICAgdGhpcy5iaW5kQnVmZmVyQW5kQXR0cmliKHNoYWRlclByb2dyYW0pO1xuXG4gICAgY29uc3QgeyBfaW5kZXhCdWZmZXJCaW5kaW5nLCBfaW5zdGFuY2VDb3VudCwgX2dsSW5kZXhUeXBlLCBfZ2xJbmRleEJ5dGVDb3VudCB9ID0gcHJpbWl0aXZlO1xuICAgIGNvbnN0IHsgdG9wb2xvZ3ksIHN0YXJ0LCBjb3VudCB9ID0gc3ViTWVzaDtcblxuICAgIGlmICghX2luc3RhbmNlQ291bnQpIHtcbiAgICAgIGlmIChfaW5kZXhCdWZmZXJCaW5kaW5nKSB7XG4gICAgICAgIGNvbnN0IHsgX25hdGl2ZUJ1ZmZlciB9ID0gX2luZGV4QnVmZmVyQmluZGluZy5idWZmZXI7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIF9uYXRpdmVCdWZmZXIpO1xuICAgICAgICBnbC5kcmF3RWxlbWVudHModG9wb2xvZ3ksIGNvdW50LCBfZ2xJbmRleFR5cGUsIHN0YXJ0ICogX2dsSW5kZXhCeXRlQ291bnQpO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLmRyYXdBcnJheXModG9wb2xvZ3ksIHN0YXJ0LCBjb3VudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuL1NoYWRlcic7XG5pbXBvcnQgeyBTaGFkZXJVbmlmb3JtIH0gZnJvbSAnLi9TaGFkZXJVbmlmb3JtJztcbmltcG9ydCB7IFNoYWRlckRhdGFHcm91cCB9IGZyb20gJy4vZW51bXMvU2hhZGVyRGF0YUdyb3VwJztcbmltcG9ydCB7IFNoYWRlclVuaWZvcm1CbG9jayB9IGZyb20gJy4vU2hhZGVyVW5pZm9ybUJsb2NrJztcbmltcG9ydCB7IFNoYWRlckRhdGEgfSBmcm9tICcuL1NoYWRlckRhdGEnO1xuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuLi9SZW5kZXJlcic7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9FbmdpbmUnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmUnO1xuaW1wb3J0IHsgVmVjdG9yMywgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgnO1xuXG4vKipcbiAqIFNoYWRlciBwcm9ncmFtLCBjb3JyZXNwb25kaW5nIHRvIHRoZSBHUFUgc2hhZGVyIHByb2dyYW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXJQcm9ncmFtIHtcbiAgLyoqIFNoYWRlciBwcm9ncmFtIGNvdW50ZXIuICovXG4gIHByaXZhdGUgc3RhdGljIF9jb3VudGVyID0gMDtcbiAgLyoqIFNoYWRlciBwcm9ncmFtIGlkLiAqL1xuICBpZDogbnVtYmVyO1xuXG4gIHJlYWRvbmx5IHNjZW5lVW5pZm9ybUJsb2NrOiBTaGFkZXJVbmlmb3JtQmxvY2sgPSBuZXcgU2hhZGVyVW5pZm9ybUJsb2NrKCk7XG4gIHJlYWRvbmx5IGNhbWVyYVVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrID0gbmV3IFNoYWRlclVuaWZvcm1CbG9jaygpO1xuICByZWFkb25seSByZW5kZXJlclVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrID0gbmV3IFNoYWRlclVuaWZvcm1CbG9jaygpO1xuICByZWFkb25seSBtYXRlcmlhbFVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrID0gbmV3IFNoYWRlclVuaWZvcm1CbG9jaygpO1xuICByZWFkb25seSBvdGhlclVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrID0gbmV3IFNoYWRlclVuaWZvcm1CbG9jaygpO1xuXG4gIC8qKiBBdHRyaWJ1dGUgdmFyaWFibGUgbG9jYXRpb24gaW4gd2ViZ2wuICovXG4gIGF0dHJpYnV0ZUxvY2F0aW9uOiBSZWNvcmQ8c3RyaW5nLCBHTGludD4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHByaXZhdGUgX2lzVmFsaWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgX2VuZ2luZTogRW5naW5lO1xuICBwcml2YXRlIF9nbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICBwcml2YXRlIF92ZXJ0ZXhTaGFkZXI6IFdlYkdMU2hhZGVyO1xuICBwcml2YXRlIF9mcmFnbWVudFNoYWRlcjogV2ViR0xTaGFkZXI7XG4gIHByaXZhdGUgX2dsUHJvZ3JhbTogV2ViR0xQcm9ncmFtO1xuICAvLyDlvZPliY3mv4DmtLvnmoTnurnnkIbljZXlhYNcbiAgLyoqIEN1cnJlbnRseSBhY3RpdmUgdGV4dHVyZSB1bml0LiAqL1xuICBwcml2YXRlIF9hY3RpdmVUZXh0dXJlVWludDogbnVtYmVyID0gMDtcblxuICAvKiogV2ViR0wgcHJvZ3JhbS4gKi9cbiAgZ2V0IGdsUHJvZ3JhbSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2xQcm9ncmFtO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBzaGFkZXIgcHJvZ3JhbSBpcyB2YWxpZC5cbiAgICovXG4gIGdldCBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUsIHZlcnRleFNvdXJjZTogc3RyaW5nLCBmcmFnbWVudFNvdXJjZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xuICAgIHRoaXMuX2dsID0gZW5naW5lLmdsO1xuICAgIHRoaXMuX2dsUHJvZ3JhbSA9IHRoaXMuX2NyZWF0ZVByb2dyYW0odmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XG4gICAgLy8gISBiaW5k5LiN5bqU6K+l5pS+5ZyoY29uc3RydWN0b3Lph4zpnaJcbiAgICB0aGlzLmJpbmQoKTtcblxuICAgIGlmICh0aGlzLl9nbFByb2dyYW0pIHtcbiAgICAgIHRoaXMuX2lzVmFsaWQgPSB0cnVlO1xuICAgICAgdGhpcy5fcmVjb3JkTG9jYXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaWQgPSBTaGFkZXJQcm9ncmFtLl9jb3VudGVyKys7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgd2ViZ2wgcHJvZ3JhbSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHZlcnRleFNvdXJjZSBWZXJ0ZXggc291cmNlIGNvZGUuXG4gICAqIEBwYXJhbSBmcmFnbWVudFNvdXJjZSBGcmFnbWVudCBzb3VyY2UgY29kZS5cbiAgICogQHJldHVybnMgV2ViR0wgcHJvZ3JhbS5cbiAgICovXG4gIHByaXZhdGUgX2NyZWF0ZVByb2dyYW0odmVydGV4U291cmNlOiBzdHJpbmcsIGZyYWdtZW50U291cmNlOiBzdHJpbmcpOiBXZWJHTFByb2dyYW0gfCBudWxsIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuXG4gICAgLy8gY3JlYXRlIGFuZCBjb21waWxlIHNoYWRlclxuICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IHRoaXMuX2NyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSLCB2ZXJ0ZXhTb3VyY2UpO1xuICAgIGlmICghdmVydGV4U2hhZGVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IHRoaXMuX2NyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIsIGZyYWdtZW50U291cmNlKTtcbiAgICBpZiAoIWZyYWdtZW50U2hhZGVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBsaW5rIHByb2dyYW0gYW5kIHNoYWRlclxuICAgIGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcbiAgICBnbC52YWxpZGF0ZVByb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICBpZiAoZ2wuaXNDb250ZXh0TG9zdCgpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb250ZXh0IGxvc3Qgd2hpbGUgbGlua2luZyBwcm9ncmFtLicpO1xuICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgICBnbC5kZWxldGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgY29uc29sZS5lcnJvcignQ291bGQgbm90IGxpbmsgV2ViR0wgcHJvZ3JhbS4gXFxuJyArIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcbiAgICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLl92ZXJ0ZXhTaGFkZXIgPSB2ZXJ0ZXhTaGFkZXI7XG4gICAgdGhpcy5fZnJhZ21lbnRTaGFkZXIgPSBmcmFnbWVudFNoYWRlcjtcbiAgICByZXR1cm4gcHJvZ3JhbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGNvbXBpbGUgc2hhZGVyLlxuICAgKiBAcGFyYW0gc2hhZGVyVHlwZSBGcmFnbWVudCBzaGFkZXIgY29kZSBvciB2ZXJ0ZXggc2hhZGVyIGNvZGUuXG4gICAqIEBwYXJhbSBzaGFkZXJTb3VyY2UgRnJhZ21lbnQgc2hhZGVyIHNvdXJjZSBjb2RlIG9yIHZlcnRleCBzaGFkZXIgc291cmNlIGNvZGUuXG4gICAqIEByZXR1cm5zIFdlYkdMU2hhZGVyIHwgbnVsbFxuICAgKi9cbiAgcHJpdmF0ZSBfY3JlYXRlU2hhZGVyKHNoYWRlclR5cGU6IG51bWJlciwgc2hhZGVyU291cmNlOiBzdHJpbmcpOiBXZWJHTFNoYWRlciB8IG51bGwge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHNoYWRlclR5cGUpO1xuXG4gICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvbnRleHQgbG9zdCB3aGlsZSBjcmVhdGUgc2hhZGVyLicpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgICBpZiAoZ2wuaXNDb250ZXh0TG9zdCgpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb250ZXh0IGxvc3Qgd2hpbGUgY29tcGlsaW5nIHNoYWRlci4nKTtcbiAgICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBjb21waWxlIFdlYkdMIHNoYWRlci5cXG4ke2dsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKX1gKTtcbiAgICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYWRlcjtcbiAgfVxuXG4gIC8vIOWwhue6ueeQhuaVsOaNruaIluiAhXVuaWZvcm3mlbDmja7mjqjlhaXlr7nlupTnu4TnmoRibG9ja1xuICAvKipcbiAgICogUHVzaCB0ZXh0dXJlIGRhdGEgb3IgdW5pZm9ybSBkYXRhIGludG8gdGhlIGJsb2NrIG9mIHRoZSBjb3JyZXNwb25kaW5nIGdyb3VwLlxuICAgKiBAcGFyYW0gdW5pZm9ybSBTaGFkZXIgdW5pZm9ybS5cbiAgICogQHBhcmFtIGdyb3VwIFNoYWRlciBkYXRhIGdyb3VwOiBTY2VuZSwgQ2FtZXJhLCBSZW5kZXJlciBhbmQgTWF0ZXJpYWwuXG4gICAqIEBwYXJhbSBpc1RleHR1cmUgSXMgaXQgYSB0ZXh0dXJlIG9yIGEgdW5pZm9ybSB2YXJpYWJsZS5cbiAgICovXG4gIHByaXZhdGUgX2dyb3VwaW5nVW5pZm9ybSh1bmlmb3JtOiBTaGFkZXJVbmlmb3JtLCBncm91cDogU2hhZGVyRGF0YUdyb3VwLCBpc1RleHR1cmU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBzd2l0Y2ggKGdyb3VwKSB7XG4gICAgICBjYXNlIFNoYWRlckRhdGFHcm91cC5TY2VuZTpcbiAgICAgICAgaWYgKGlzVGV4dHVyZSkge1xuICAgICAgICAgIHRoaXMuc2NlbmVVbmlmb3JtQmxvY2sudGV4dHVyZVVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zY2VuZVVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNoYWRlckRhdGFHcm91cC5DYW1lcmE6XG4gICAgICAgIGlmIChpc1RleHR1cmUpIHtcbiAgICAgICAgICB0aGlzLmNhbWVyYVVuaWZvcm1CbG9jay50ZXh0dXJlVW5pZm9ybXMucHVzaCh1bmlmb3JtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNhbWVyYVVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNoYWRlckRhdGFHcm91cC5SZW5kZXJlcjpcbiAgICAgICAgaWYgKGlzVGV4dHVyZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXJVbmlmb3JtQmxvY2sudGV4dHVyZVVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlclVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNoYWRlckRhdGFHcm91cC5NYXRlcmlhbDpcbiAgICAgICAgaWYgKGlzVGV4dHVyZSkge1xuICAgICAgICAgIHRoaXMubWF0ZXJpYWxVbmlmb3JtQmxvY2sudGV4dHVyZVVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tYXRlcmlhbFVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoaXNUZXh0dXJlKSB7XG4gICAgICAgICAgdGhpcy5vdGhlclVuaWZvcm1CbG9jay50ZXh0dXJlVW5pZm9ybXMucHVzaCh1bmlmb3JtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm90aGVyVW5pZm9ybUJsb2NrLmNvbnN0VW5pZm9ybXMucHVzaCh1bmlmb3JtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNvcmQgdGhlIGxvY2F0aW9uIG9mIHVuaWZvcm0vYXR0cmlidXRlLlxuICAgKi9cbiAgcHJpdmF0ZSBfcmVjb3JkTG9jYXRpb24oKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5fZ2xQcm9ncmFtO1xuICAgIGNvbnN0IHVuaWZvcm1JbmZvcyA9IHRoaXMuX2dldFVuaWZvcm1JbmZvcygpO1xuICAgIGNvbnN0IGF0dHJpYnV0ZUluZm9zID0gdGhpcy5fZ2V0QXR0cmlidXRlSW5mb3MoKTtcblxuICAgIHVuaWZvcm1JbmZvcy5mb3JFYWNoKCh7IG5hbWUsIHNpemUsIHR5cGUgfSkgPT4ge1xuICAgICAgY29uc3Qgc2hhZGVyVW5pZm9ybSA9IG5ldyBTaGFkZXJVbmlmb3JtKGdsKTtcbiAgICAgIGxldCBpc0FycmF5ID0gZmFsc2U7XG4gICAgICBsZXQgaXNUZXh0dXJlID0gZmFsc2U7XG5cbiAgICAgIGlmIChuYW1lLmluZGV4T2YoJ1swXScpID4gMCkge1xuICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSAzKTtcbiAgICAgICAgaXNBcnJheSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGdyb3VwID0gU2hhZGVyLl9nZXRTaGFkZXJQcm9wZXJ0eUdyb3VwKG5hbWUpO1xuICAgICAgY29uc3QgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7XG4gICAgICBzaGFkZXJVbmlmb3JtLm5hbWUgPSBuYW1lO1xuICAgICAgc2hhZGVyVW5pZm9ybS5wcm9wZXJ0eUlkID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKG5hbWUpLl91bmlxdWVJZDtcbiAgICAgIHNoYWRlclVuaWZvcm0ubG9jYXRpb24gPSBsb2NhdGlvbjtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgZ2wuRkxPQVQ6XG4gICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQxZnY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQxZjtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uY2FjaGVWYWx1ZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGdsLkZMT0FUX1ZFQzI6XG4gICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQyZnY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGdsLkZMT0FUX1ZFQzM6XG4gICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQzZnY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQzZjtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uY2FjaGVWYWx1ZSA9IG5ldyBWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9WRUM0OlxuICAgICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmFwcGx5RnVuYyA9IHNoYWRlclVuaWZvcm0udXBsb2FkNGZ2O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmFwcGx5RnVuYyA9IHNoYWRlclVuaWZvcm0udXBsb2FkNGY7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmNhY2hlVmFsdWUgPSBuZXcgVmVjdG9yNCgwLCAwLCAwLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZ2wuSU5UOlxuICAgICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmFwcGx5RnVuYyA9IHNoYWRlclVuaWZvcm0udXBsb2FkMWl2O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmFwcGx5RnVuYyA9IHNoYWRlclVuaWZvcm0udXBsb2FkMWk7XG4gICAgICAgICAgICBzaGFkZXJVbmlmb3JtLmNhY2hlVmFsdWUgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBnbC5JTlRfVkVDMjpcbiAgICAgICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICAgICAgc2hhZGVyVW5pZm9ybS5hcHBseUZ1bmMgPSBzaGFkZXJVbmlmb3JtLnVwbG9hZDJpdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZ2wuSU5UX1ZFQzQ6XG4gICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWQ0aXY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDQ6XG4gICAgICAgICAgc2hhZGVyVW5pZm9ybS5hcHBseUZ1bmMgPSBpc0FycmF5ID8gc2hhZGVyVW5pZm9ybS51cGxvYWRNYXQ0diA6IHNoYWRlclVuaWZvcm0udXBsb2FkTWF0NDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBnbC5TQU1QTEVSXzJEOlxuICAgICAgICBjYXNlIGdsLlNBTVBMRVJfQ1VCRTpcbiAgICAgICAgICBsZXQgZGVmYXVsdFRleHR1cmU6IFRleHR1cmU7XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGdsLlNBTVBMRVJfMkQ6XG4gICAgICAgICAgICAgIGRlZmF1bHRUZXh0dXJlID0gdGhpcy5fZW5naW5lLl93aGl0ZVRleHR1cmUyRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGdsLlNBTVBMRVJfQ1VCRTpcbiAgICAgICAgICAgICAgZGVmYXVsdFRleHR1cmUgPSB0aGlzLl9lbmdpbmUuX3doaXRlVGV4dHVyZUN1YmU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0ZXh0dXJlIHR5cGUuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNUZXh0dXJlID0gdHJ1ZTtcbiAgICAgICAgICBjb25zdCB0ZXh0dXJlSW5kZXggPSBnbC5URVhUVVJFMCArIHRoaXMuX2FjdGl2ZVRleHR1cmVVaW50O1xuXG4gICAgICAgICAgc2hhZGVyVW5pZm9ybS50ZXh0dXJlRGVmYXVsdCA9IGRlZmF1bHRUZXh0dXJlO1xuICAgICAgICAgIHNoYWRlclVuaWZvcm0udGV4dHVyZUluZGV4ID0gdGV4dHVyZUluZGV4O1xuICAgICAgICAgIHNoYWRlclVuaWZvcm0uYXBwbHlGdW5jID0gc2hhZGVyVW5pZm9ybS51cGxvYWRUZXh0dXJlO1xuICAgICAgICAgIGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdGhpcy5fYWN0aXZlVGV4dHVyZVVpbnQrKyk7XG4gICAgICAgICAgc2hhZGVyVW5pZm9ybS51cGxvYWRUZXh0dXJlKHNoYWRlclVuaWZvcm0sIGRlZmF1bHRUZXh0dXJlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2dyb3VwaW5nVW5pZm9ybShzaGFkZXJVbmlmb3JtLCBncm91cCwgaXNUZXh0dXJlKTtcbiAgICB9KTtcblxuICAgIGF0dHJpYnV0ZUluZm9zLmZvckVhY2goKHsgbmFtZSB9KSA9PiB7XG4gICAgICB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9uW25hbWVdID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhZGRyZXNzIG9mIHRoZSBhY3RpdmUgdW5pZm9ybSB2YXJpYWJsZSBpbiB0aGUgY3VycmVudCB3ZWJnbCBwcm9ncmFtLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiB1bmlmb3JtIHZhcmlhYmxlIGFkZHJlc3Nlcy5cbiAgICovXG4gIHByaXZhdGUgX2dldFVuaWZvcm1JbmZvcygpOiBXZWJHTEFjdGl2ZUluZm9bXSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5fZ2xQcm9ncmFtO1xuICAgIGNvbnN0IHVuaWZvcm1JbmZvcyA9IG5ldyBBcnJheTxXZWJHTEFjdGl2ZUluZm8+KCk7XG5cbiAgICBjb25zdCB1bmlmb3JtQ291bnQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmlmb3JtQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgaW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0ocHJvZ3JhbSwgaSk7XG4gICAgICB1bmlmb3JtSW5mb3NbaV0gPSBpbmZvO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyh1bmlmb3JtSW5mb3MpO1xuICAgIHJldHVybiB1bmlmb3JtSW5mb3M7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhZGRyZXNzIG9mIHRoZSBhY3RpdmUgYXR0cmlidXRlIHZhcmlhYmxlIGluIHRoZSBjdXJyZW50IHdlYmdsIHByb2dyYW0uXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIGF0dHJpYnV0ZSB2YXJpYWJsZSBhZGRyZXNzZXMuXG4gICAqL1xuICBwcml2YXRlIF9nZXRBdHRyaWJ1dGVJbmZvcygpOiBXZWJHTEFjdGl2ZUluZm9bXSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5fZ2xQcm9ncmFtO1xuICAgIGNvbnN0IGF0dHJpYnV0ZUluZm9zID0gbmV3IEFycmF5PFdlYkdMQWN0aXZlSW5mbz4oKTtcblxuICAgIGNvbnN0IGF0dHJpYnV0ZUNvdW50ID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfQVRUUklCVVRFUyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBpbmZvID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGkpO1xuICAgICAgYXR0cmlidXRlSW5mb3NbaV0gPSBpbmZvO1xuICAgIH1cblxuICAgIHJldHVybiBhdHRyaWJ1dGVJbmZvcztcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgYWxsIHNoYWRlciBkYXRhIGluIHNoYWRlciB1bmlmb3JtIGJsb2NrLlxuICAgKiBAcGFyYW0gdW5pZm9ybUJsb2NrIC0gc2hhZGVyIFVuaWZvcm0gYmxvY2tcbiAgICogQHBhcmFtIHNoYWRlckRhdGEgLSBzaGFkZXIgZGF0YVxuICAgKi9cbiAgdXBsb2FkQWxsKHVuaWZvcm1CbG9jazogU2hhZGVyVW5pZm9ybUJsb2NrLCBzaGFkZXJEYXRhOiBTaGFkZXJEYXRhKTogdm9pZCB7XG4gICAgdGhpcy51cGxvYWRVbmlmb3Jtcyh1bmlmb3JtQmxvY2ssIHNoYWRlckRhdGEpO1xuICAgIHRoaXMudXBsb2FkVGV4dHVyZXModW5pZm9ybUJsb2NrLCBzaGFkZXJEYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgY29uc3RhbnQgc2hhZGVyIGRhdGEgaW4gc2hhZGVyIHVuaWZvcm0gYmxvY2suXG4gICAqIEBwYXJhbSB1bmlmb3JtQmxvY2sgLSBzaGFkZXIgVW5pZm9ybSBibG9ja1xuICAgKiBAcGFyYW0gc2hhZGVyRGF0YSAtIHNoYWRlciBkYXRhXG4gICAqL1xuICB1cGxvYWRVbmlmb3Jtcyh1bmlmb3JtQmxvY2s6IFNoYWRlclVuaWZvcm1CbG9jaywgc2hhZGVyRGF0YTogU2hhZGVyRGF0YSk6IHZvaWQge1xuICAgIC8vIHNoYWRlckRhdGEuX3Byb3BlcnRpZXPmmK/moLnmja5zaGFkZXJwcm9wZXJ0eeeahGlk55qE5YC855qE5ZOI5biM6KGoXG4gICAgLy8g5Zug5Li65Lul5pWw5a2X5Li66ZSu5pWI546H5pu06auYXG4gICAgY29uc3QgcHJvcGVydGllcyA9IHNoYWRlckRhdGEuX3Byb3BlcnRpZXM7XG4gICAgY29uc3QgY29uc3RVbmlmb3JtcyA9IHVuaWZvcm1CbG9jay5jb25zdFVuaWZvcm1zO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIG4gPSBjb25zdFVuaWZvcm1zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgY29uc3QgdW5pZm9ybSA9IGNvbnN0VW5pZm9ybXNbaV07XG4gICAgICBjb25zdCBkYXRhID0gcHJvcGVydGllc1t1bmlmb3JtLnByb3BlcnR5SWRdO1xuICAgICAgLy8gISBIaWdobGlnaHQ6IOi/memHjOebuOW9k+S6juaKikNQVeS4reeahOWAvOWIhumFjee7mUdQVVxuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSAhPSBudWxsICYmIHVuaWZvcm0uYXBwbHlGdW5jKHVuaWZvcm0sIGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVyciwgdW5pZm9ybSwgZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZCB0ZXh0dXJlIHNoYWRlciBkYXRhIGluIHNoYWRlciB1bmlmb3JtIGJsb2NrLlxuICAgKiBAcGFyYW0gdW5pZm9ybUJsb2NrIC0gc2hhZGVyIFVuaWZvcm0gYmxvY2tcbiAgICogQHBhcmFtIHNoYWRlckRhdGEgLSBzaGFkZXIgZGF0YVxuICAgKi9cbiAgdXBsb2FkVGV4dHVyZXModW5pZm9ybUJsb2NrOiBTaGFkZXJVbmlmb3JtQmxvY2ssIHNoYWRlckRhdGE6IFNoYWRlckRhdGEpOiB2b2lkIHtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gc2hhZGVyRGF0YS5fcHJvcGVydGllcztcbiAgICBjb25zdCB0ZXh0dXJlVW5pZm9ybXMgPSB1bmlmb3JtQmxvY2sudGV4dHVyZVVuaWZvcm1zO1xuICAgIC8vIHRleHR1cmVVbmlmb3JtcyBwcm9wZXJ0eSBtYXliZSBudWxsIGlmIFNoYWRlclVuaWZvcm1CbG9jayBub3QgY29udGFpbiBhbnkgdGV4dHVyZS5cbiAgICBpZiAodGV4dHVyZVVuaWZvcm1zKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbiA9IHRleHR1cmVVbmlmb3Jtcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgY29uc3QgdW5pZm9ybSA9IHRleHR1cmVVbmlmb3Jtc1tpXTtcbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IHByb3BlcnRpZXNbdW5pZm9ybS5wcm9wZXJ0eUlkXTtcbiAgICAgICAgaWYgKHRleHR1cmUpIHtcbiAgICAgICAgICB1bmlmb3JtLmFwcGx5RnVuYyh1bmlmb3JtLCB0ZXh0dXJlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bmlmb3JtLmFwcGx5RnVuYyh1bmlmb3JtLCB1bmlmb3JtLnRleHR1cmVEZWZhdWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kIHRoaXMgc2hhZGVyIHByb2dyYW0uXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIHNoYWRlciBwcm9ncmFtIGlzIHN3aXRjaGVkLlxuICAgKi9cbiAgYmluZCgpOiBib29sZWFuIHtcbiAgICBpZiAoUmVuZGVyZXIuZ2xQcm9ncmFtICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLl9nbC51c2VQcm9ncmFtKHRoaXMuX2dsUHJvZ3JhbSk7XG4gICAgICBSZW5kZXJlci5nbFByb2dyYW0gPSB0aGlzO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95KCk6IHZvaWQge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgdGhpcy5fdmVydGV4U2hhZGVyICYmIGdsLmRlbGV0ZVNoYWRlcih0aGlzLl92ZXJ0ZXhTaGFkZXIpO1xuICAgIHRoaXMuX2ZyYWdtZW50U2hhZGVyICYmIGdsLmRlbGV0ZVNoYWRlcih0aGlzLl9mcmFnbWVudFNoYWRlcik7XG4gICAgdGhpcy5fZ2xQcm9ncmFtICYmIGdsLmRlbGV0ZVByb2dyYW0odGhpcy5fZ2xQcm9ncmFtKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU2hhZGVyRGF0YUdyb3VwIH0gZnJvbSAnLi9lbnVtcy9TaGFkZXJEYXRhR3JvdXAnO1xuXG4vKipcbiAqIFNoYWRlciBwcm9wZXJ0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNoYWRlclByb3BlcnR5IHtcbiAgcHJpdmF0ZSBzdGF0aWMgX3Byb3BlcnR5TmFtZUNvdW50ZXI6IG51bWJlciA9IDA7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfdW5pcXVlSWQ6IG51bWJlcjtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZ3JvdXA6IFNoYWRlckRhdGFHcm91cDtcblxuICAvKiogU2hhZGVyIHByb3BlcnR5IG5hbWUuICovXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuX3VuaXF1ZUlkID0gU2hhZGVyUHJvcGVydHkuX3Byb3BlcnR5TmFtZUNvdW50ZXIrKztcbiAgfVxufVxuIiwiaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi4vRW5naW5lJztcbmltcG9ydCB7IFNoYWRlckRhdGFHcm91cCB9IGZyb20gJy4vZW51bXMvU2hhZGVyRGF0YUdyb3VwJztcbmltcG9ydCB7IFNoYWRlclByb2dyYW0gfSBmcm9tICcuL1NoYWRlclByb2dyYW0nO1xuaW1wb3J0IHsgU2hhZGVyUHJvcGVydHkgfSBmcm9tICcuL1NoYWRlclByb3BlcnR5JztcblxuLyoqXG4gKiBTaGFkZXIgY29udGFpbmluZyB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNvdXJjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNoYWRlciB7XG4gIC8qKiBTaGFkZXIgY291bnRlci4gKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX3NoYWRlckNvdW50ZXIgPSAwO1xuICAvKiogU2hhZGVyIG1hcC4gKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX3NoYWRlck1hcDogUmVjb3JkPHN0cmluZywgU2hhZGVyPiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8qKiBTaGFkZXIgY291bnRlci4gKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX3Byb3BlcnR5TmFtZU1hcDogUmVjb3JkPHN0cmluZywgU2hhZGVyUHJvcGVydHk+ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvKiogVGhlIG5hbWUgb2Ygc2hhZGVyLiAqL1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfc2hhZGVySWQgPSAwO1xuXG4gIC8qKiBWZXJ0ZXggc2hhZGVyIHNvdXJjZS4gKi9cbiAgcHJpdmF0ZSBfdmVydGV4U291cmNlOiBzdHJpbmc7XG4gIC8qKiBGcmFnbWVudCBzaGFkZXIgc291cmNlLiAqL1xuICBwcml2YXRlIF9mcmFnbWVudFNvdXJjZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB2ZXJ0ZXhTb3VyY2U6IHN0cmluZywgZnJhZ21lbnRTb3VyY2U6IHN0cmluZykge1xuICAgIHRoaXMuX3NoYWRlcklkID0gU2hhZGVyLl9zaGFkZXJDb3VudGVyKys7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLl92ZXJ0ZXhTb3VyY2UgPSB2ZXJ0ZXhTb3VyY2U7XG4gICAgdGhpcy5fZnJhZ21lbnRTb3VyY2UgPSBmcmFnbWVudFNvdXJjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHN0YXRpYyBfZ2V0U2hhZGVyUHJvcGVydHlHcm91cChwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IFNoYWRlckRhdGFHcm91cCB8IG51bGwge1xuICAgIGNvbnN0IHNoYWRlclByb3BlcnR5ID0gU2hhZGVyLl9wcm9wZXJ0eU5hbWVNYXBbcHJvcGVydHlOYW1lXTtcbiAgICByZXR1cm4gc2hhZGVyUHJvcGVydHk/Ll9ncm91cDtcbiAgfVxuXG4gIC8vIOS4jeWtmOWcqOWwseWIm+W7uuS4gOS4qlxuICAvKipcbiAgICogR2V0IHNoYWRlciBwcm9wZXJ0eSBieSBuYW1lLlxuICAgKiBAcGFyYW0gbmFtZSAtIE5hbWUgb2YgdGhlIHNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBTaGFkZXIgcHJvcGVydHlcbiAgICovXG4gIHN0YXRpYyBnZXRQcm9wZXJ0eUJ5TmFtZShuYW1lOiBzdHJpbmcpOiBTaGFkZXJQcm9wZXJ0eSB7XG4gICAgY29uc3QgcHJvcGVydHlOYW1lTWFwID0gU2hhZGVyLl9wcm9wZXJ0eU5hbWVNYXA7XG4gICAgaWYgKHByb3BlcnR5TmFtZU1hcFtuYW1lXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcHJvcGVydHlOYW1lTWFwW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDlrp7kvovljJbnmoTml7blgJnlubbkuI3liIbphY3liIbnu4TvvIzljbPmraTml7Zwcm9wZXJ0eei/mOayoeaciWdyb3Vw5bGe5oCnXG4gICAgICBjb25zdCBwcm9wZXJ0eSA9IG5ldyBTaGFkZXJQcm9wZXJ0eShuYW1lKTtcbiAgICAgIHByb3BlcnR5TmFtZU1hcFtuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzaGFkZXIuXG4gICAqIEBwYXJhbSBuYW1lIC0gTmFtZSBvZiB0aGUgc2hhZGVyLlxuICAgKiBAcGFyYW0gdmVydGV4U291cmNlIC0gVmVydGV4IHNvdXJjZSBjb2RlLlxuICAgKiBAcGFyYW0gZnJhZ21lbnRTb3VyY2UgLSBGcmFnbWVudCBzb3VyY2UgY29kZS5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGUobmFtZTogc3RyaW5nLCB2ZXJ0ZXhTb3VyY2U6IHN0cmluZywgZnJhZ21lbnRTb3VyY2U6IHN0cmluZyk6IFNoYWRlciB7XG4gICAgY29uc3Qgc2hhZGVyTWFwID0gU2hhZGVyLl9zaGFkZXJNYXA7XG4gICAgaWYgKHNoYWRlck1hcFtuYW1lXSkge1xuICAgICAgdGhyb3cgYFNoYWRlciBuYW1lZCBcIiR7bmFtZX1cIiBhbHJlYWR5IGV4aXN0cy5gO1xuICAgIH1cbiAgICByZXR1cm4gKHNoYWRlck1hcFtuYW1lXSA9IG5ldyBTaGFkZXIobmFtZSwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSBzaGFkZXIgYnkgbmFtZS5cbiAgICogQHBhcmFtIG5hbWUgLSBOYW1lIG9mIHRoZSBzaGFkZXJcbiAgICovXG4gIHN0YXRpYyBmaW5kKG5hbWU6IHN0cmluZyk6IFNoYWRlciB7XG4gICAgcmV0dXJuIFNoYWRlci5fc2hhZGVyTWFwW25hbWVdO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBwcm9ncmFtIGJhc2VkIG9uIHNoYWRlci5cbiAgICogQHBhcmFtIGVuZ2luZVxuICAgKiBAcmV0dXJucyBTaGFkZXIgcHJvZ3JhbS5cbiAgICovXG4gIF9nZXRTaGFkZXJQcm9ncmFtKGVuZ2luZTogRW5naW5lKTogU2hhZGVyUHJvZ3JhbSB7XG4gICAgLy8gVE9ETzog5bCG5bi46YePc2hhZGVy5ou85o6l5Yiw6L+Z6YeMXG4gICAgY29uc3QgdmVydGV4U291cmNlID0gdGhpcy5fdmVydGV4U291cmNlO1xuICAgIGNvbnN0IGZyYWdtZW50U291cmNlID0gdGhpcy5fZnJhZ21lbnRTb3VyY2U7XG5cbiAgICByZXR1cm4gbmV3IFNoYWRlclByb2dyYW0oZW5naW5lLCB2ZXJ0ZXhTb3VyY2UsIGZyYWdtZW50U291cmNlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29sb3IsIE1hdHJpeDQsIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQgfSBmcm9tICcuLi8uLi9tYXRoJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlJztcbmltcG9ydCB7IFNoYWRlckRhdGFHcm91cCB9IGZyb20gJy4vZW51bXMvU2hhZGVyRGF0YUdyb3VwJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4vU2hhZGVyJztcbmltcG9ydCB7IFNoYWRlclByb3BlcnR5IH0gZnJvbSAnLi9TaGFkZXJQcm9wZXJ0eSc7XG5cbmV4cG9ydCB0eXBlIFNoYWRlclByb3BlcnR5VmFsdWVUeXBlID1cbiAgfCBudW1iZXJcbiAgfCBWZWN0b3IyXG4gIHwgVmVjdG9yM1xuICB8IFZlY3RvcjRcbiAgfCBDb2xvclxuICB8IE1hdHJpeDRcbiAgfCBUZXh0dXJlXG4gIHwgVGV4dHVyZVtdXG4gIHwgSW50MzJBcnJheVxuICB8IEZsb2F0MzJBcnJheTtcblxuZXhwb3J0IGNsYXNzIFNoYWRlckRhdGEge1xuICBfZ3JvdXA6IFNoYWRlckRhdGFHcm91cDtcbiAgX3Byb3BlcnRpZXM6IFJlY29yZDxudW1iZXIsIFNoYWRlclByb3BlcnR5VmFsdWVUeXBlPiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgY29uc3RydWN0b3IoZ3JvdXA6IFNoYWRlckRhdGFHcm91cCkge1xuICAgIHRoaXMuX2dyb3VwID0gZ3JvdXA7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGZsb2F0IGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHJldHVybnMgRmxvYXRcbiAgICovXG4gIGdldEZsb2F0KHByb3BlcnR5TmFtZTogc3RyaW5nKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBHZXQgZmxvYXQgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHJldHVybnMgRmxvYXRcbiAgICovXG4gIGdldEZsb2F0KHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSk6IG51bWJlcjtcblxuICBnZXRGbG9hdChwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHkpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9nZXREYXRhKHByb3BlcnR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZmxvYXQgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRpbmcgZmxvYXQgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0gdmFsdWUgLSBGbG9hdFxuICAgKi9cbiAgc2V0RmxvYXQocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXQgZmxvYXQgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kaW5nIGZsb2F0IHNoYWRlciBwcm9wZXJ0eSB0eXBlLlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIC0gRmxvYXRcbiAgICovXG4gIHNldEZsb2F0KHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IG51bWJlcik6IHZvaWQ7XG5cbiAgc2V0RmxvYXQocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGF0YShwcm9wZXJ0eSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBpbnQgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcmV0dXJucyBJbnRcbiAgICovXG4gIGdldEludChwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IG51bWJlcjtcblxuICAvKipcbiAgICogR2V0IGludCBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBJbnRcbiAgICovXG4gIGdldEludChwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHkpOiBudW1iZXI7XG5cbiAgZ2V0SW50KHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGEocHJvcGVydHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBpbnQgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIGludCBhbmQgYm9vbCBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIEludFxuICAgKi9cbiAgc2V0SW50KHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGludCBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIGludCBhbmQgYm9vbCBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSAtIEludFxuICAgKi9cbiAgc2V0SW50KHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IG51bWJlcik6IHZvaWQ7XG5cbiAgc2V0SW50KHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3NldERhdGEocHJvcGVydHksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZmxvYXQgYXJyYXkgYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcmV0dXJucyBGbG9hdCBhcnJheVxuICAgKi9cbiAgZ2V0RmxvYXRBcnJheShwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IEZsb2F0MzJBcnJheTtcblxuICAvKipcbiAgICogR2V0IGZsb2F0IGFycmF5IGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIEZsb2F0IGFycmF5XG4gICAqL1xuICBnZXRGbG9hdEFycmF5KHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSk6IEZsb2F0MzJBcnJheTtcblxuICBnZXRGbG9hdEFycmF5KHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSk6IEZsb2F0MzJBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGEocHJvcGVydHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBmbG9hdCBhcnJheSBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgZmxvYXQgYXJyYXnjgIF2ZWMyIGFycmF544CBdmVjMyBhcnJheeOAgXZlYzQgYXJyYXkgYW5kIG1hdHJpeCBhcnJheSBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIEZsb2F0IGFycmF5XG4gICAqL1xuICBzZXRGbG9hdEFycmF5KHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogRmxvYXQzMkFycmF5KTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGZsb2F0IGFycmF5IGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgZmxvYXQgYXJyYXnjgIF2ZWMyIGFycmF544CBdmVjMyBhcnJheeOAgXZlYzQgYXJyYXkgYW5kIG1hdHJpeCBhcnJheSBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSAtIEZsb2F0IGFycmF5XG4gICAqL1xuICBzZXRGbG9hdEFycmF5KHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IEZsb2F0MzJBcnJheSk6IHZvaWQ7XG5cbiAgc2V0RmxvYXRBcnJheShwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHksIHZhbHVlOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXREYXRhKHByb3BlcnR5LCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGludCBhcnJheSBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEByZXR1cm5zIEludCBBcnJheVxuICAgKi9cbiAgZ2V0SW50QXJyYXkocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBJbnQzMkFycmF5O1xuXG4gIC8qKlxuICAgKiBHZXQgaW50IGFycmF5IGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIEludCBBcnJheVxuICAgKi9cbiAgZ2V0SW50QXJyYXkocHJvcGVydHk6IFNoYWRlclByb3BlcnR5KTogSW50MzJBcnJheTtcblxuICBnZXRJbnRBcnJheShwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHkpOiBJbnQzMkFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YShwcm9wZXJ0eSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGludCBhcnJheSBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgYm9vbCBhcnJheeOAgWludCBhcnJheeOAgWJ2ZWMyIGFycmF544CBYnZlYzMgYXJyYXnjgIFidmVjNCBhcnJheeOAgWl2ZWMyIGFycmF544CBaXZlYzMgYXJyYXkgYW5kIGl2ZWM0IGFycmF5IHNoYWRlciBwcm9wZXJ0eSB0eXBlLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHBhcmFtIHZhbHVlIC0gSW50IEFycmF5XG4gICAqL1xuICBzZXRJbnRBcnJheShwcm9wZXJ0eU5hbWU6IHN0cmluZywgdmFsdWU6IEludDMyQXJyYXkpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXQgaW50IGFycmF5IGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgYm9vbCBhcnJheeOAgWludCBhcnJheeOAgWJ2ZWMyIGFycmF544CBYnZlYzMgYXJyYXnjgIFidmVjNCBhcnJheeOAgWl2ZWMyIGFycmF544CBaXZlYzMgYXJyYXkgYW5kIGl2ZWM0IGFycmF5IHNoYWRlciBwcm9wZXJ0eSB0eXBlLlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIC0gSW50IEFycmF5XG4gICAqL1xuICBzZXRJbnRBcnJheShwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHksIHZhbHVlOiBJbnQzMkFycmF5KTogdm9pZDtcblxuICBzZXRJbnRBcnJheShwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHksIHZhbHVlOiBJbnQzMkFycmF5KTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGF0YShwcm9wZXJ0eSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0d28tZGltZW5zaW9uYWwgZnJvbSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEByZXR1cm5zIFR3by1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIGdldFZlY3RvcjIocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBWZWN0b3IyO1xuXG4gIC8qKlxuICAgKiBHZXQgdHdvLWRpbWVuc2lvbmFsIGZyb20gc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHJldHVybnMgVHdvLWRpbWVuc2lvbmFsIHZlY3RvclxuICAgKi9cbiAgZ2V0VmVjdG9yMihwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHkpOiBWZWN0b3IyO1xuXG4gIGdldFZlY3RvcjIocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5KTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGEocHJvcGVydHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0d28tZGltZW5zaW9uYWwgdmVjdG9yIGZyb20gc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIHZlYzLjgIFpdmVjMiBhbmQgYnZlYzIgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR3by1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIHNldFZlY3RvcjIocHJvcGVydHk6IHN0cmluZywgdmFsdWU6IFZlY3RvcjIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXQgdHdvLWRpbWVuc2lvbmFsIHZlY3RvciBmcm9tIHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgdmVjMuOAgWl2ZWMyIGFuZCBidmVjMiBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR3by1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIHNldFZlY3RvcjIocHJvcGVydHk6IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogVmVjdG9yMik6IHZvaWQ7XG5cbiAgc2V0VmVjdG9yMihwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHksIHZhbHVlOiBWZWN0b3IyKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGF0YShwcm9wZXJ0eSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2ZWN0b3IzIGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHJldHVybnMgVGhyZWUtZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBnZXRWZWN0b3IzKHByb3BlcnR5TmFtZTogc3RyaW5nKTogVmVjdG9yMztcblxuICAvKipcbiAgICogR2V0IHZlY3RvcjMgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHJldHVybnMgVGhyZWUtZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBnZXRWZWN0b3IzKHByb3BlcnR5OiBTaGFkZXJQcm9wZXJ0eSk6IFZlY3RvcjM7XG5cbiAgZ2V0VmVjdG9yMyhwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHkpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YShwcm9wZXJ0eSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRocmVlIGRpbWVuc2lvbmFsIHZlY3RvciBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgdmVjM+OAgWl2ZWMzIGFuZCBidmVjMyBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHBhcmFtIHZhbHVlIC0gVGhyZWUtZGltZW5zaW9uYWwgdmVjdG9yXG4gICAqL1xuICBzZXRWZWN0b3IzKHByb3BlcnR5OiBzdHJpbmcsIHZhbHVlOiBWZWN0b3IzKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IHRocmVlIGRpbWVuc2lvbmFsIHZlY3RvciBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIHZlYzPjgIFpdmVjMyBhbmQgYnZlYzMgc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgLSBUaHJlZS1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIHNldFZlY3RvcjMocHJvcGVydHk6IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogVmVjdG9yMyk6IHZvaWQ7XG5cbiAgc2V0VmVjdG9yMyhwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHksIHZhbHVlOiBWZWN0b3IzKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGF0YShwcm9wZXJ0eSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2ZWN0b3I0IGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHJldHVybnMgRm91ci1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIGdldFZlY3RvcjQocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBWZWN0b3I0O1xuXG4gIC8qKlxuICAgKiBHZXQgdmVjdG9yNCBieSBzaGFkZXIgcHJvcGVydHkuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBGb3VyLWRpbWVuc2lvbmFsIHZlY3RvclxuICAgKi9cbiAgZ2V0VmVjdG9yNChwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHkpOiBWZWN0b3I0O1xuXG4gIGdldFZlY3RvcjQocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5KTogVmVjdG9yNCB7XG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGEocHJvcGVydHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBmb3VyLWRpbWVuc2lvbmFsIHZlY3RvciBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHJlbWFya3MgQ29ycmVzcG9uZGVuY2UgaW5jbHVkZXMgdmVjNOOAgWl2ZWM0IGFuZCBidmVjNCBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHBhcmFtIHZhbHVlIC0gRm91ci1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIHNldFZlY3RvcjQocHJvcGVydHk6IHN0cmluZywgdmFsdWU6IFZlY3RvcjQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXQgZm91ci1kaW1lbnNpb25hbCB2ZWN0b3IgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kZW5jZSBpbmNsdWRlcyB2ZWM044CBaXZlYzQgYW5kIGJ2ZWM0IHNoYWRlciBwcm9wZXJ0eSB0eXBlLlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIC0gRm91ci1kaW1lbnNpb25hbCB2ZWN0b3JcbiAgICovXG4gIHNldFZlY3RvcjQocHJvcGVydHk6IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogVmVjdG9yNCk6IHZvaWQ7XG5cbiAgc2V0VmVjdG9yNChwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHksIHZhbHVlOiBWZWN0b3I0KTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGF0YShwcm9wZXJ0eSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBtYXRyaXggYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBTaGFkZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcmV0dXJucyBNYXRyaXhcbiAgICovXG4gIGdldE1hdHJpeChwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IE1hdHJpeDQ7XG5cbiAgLyoqXG4gICAqIEdldCBtYXRyaXggYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHJldHVybnMgTWF0cml4XG4gICAqL1xuICBnZXRNYXRyaXgocHJvcGVydHk6IFNoYWRlclByb3BlcnR5KTogTWF0cml4NDtcblxuICBnZXRNYXRyaXgocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5KTogTWF0cml4NCB7XG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGEocHJvcGVydHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBtYXRyaXggYnkgc2hhZGVyIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZW1hcmtzIENvcnJlc3BvbmRlbmNlIGluY2x1ZGVzIG1hdHJpeCBzaGFkZXIgcHJvcGVydHkgdHlwZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIE1hdHJpeFxuICAgKi9cbiAgc2V0TWF0cml4KHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogTWF0cml4NCk7XG5cbiAgLyoqXG4gICAqIFNldCBtYXRyaXggYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcmVtYXJrcyBDb3JyZXNwb25kZW5jZSBpbmNsdWRlcyBtYXRyaXggc2hhZGVyIHByb3BlcnR5IHR5cGUuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFNoYWRlciBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgLSBNYXRyaXhcbiAgICovXG4gIHNldE1hdHJpeChwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHksIHZhbHVlOiBNYXRyaXg0KTtcblxuICBzZXRNYXRyaXgocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5LCB2YWx1ZTogTWF0cml4NCk6IHZvaWQge1xuICAgIHRoaXMuX3NldERhdGEocHJvcGVydHksIHZhbHVlKTtcbiAgfVxuXG4gIF9nZXREYXRhPFQgZXh0ZW5kcyBTaGFkZXJQcm9wZXJ0eVZhbHVlVHlwZT4ocHJvcGVydHk6IHN0cmluZyB8IFNoYWRlclByb3BlcnR5KTogVCB7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKHByb3BlcnR5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHkuX3VuaXF1ZUlkXSBhcyBUO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0ZXh0dXJlIGJ5IHNoYWRlciBwcm9wZXJ0eSBuYW1lLlxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gU2hhZGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHJldHVybnMgVGV4dHVyZVxuICAgKi9cbiAgZ2V0VGV4dHVyZShwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IFRleHR1cmU7XG5cbiAgLyoqXG4gICAqIEdldCB0ZXh0dXJlIGJ5IHNoYWRlciBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHByb3BlcnR5IC0gU2hhZGVyIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIFRleHR1cmVcbiAgICovXG4gIGdldFRleHR1cmUocHJvcGVydHk6IFNoYWRlclByb3BlcnR5KTogVGV4dHVyZTtcblxuICBnZXRUZXh0dXJlKHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSk6IFRleHR1cmUge1xuICAgIHJldHVybiB0aGlzLl9nZXREYXRhKHByb3BlcnR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGV4dHVyZSBieSBzaGFkZXIgcHJvcGVydHkgbmFtZS5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFNoYWRlciBwcm9wZXJ0eSBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRleHR1cmVcbiAgICovXG4gIHNldFRleHR1cmUocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBUZXh0dXJlKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IHRleHR1cmUgYnkgc2hhZGVyIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBTaGFkZXIgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIC0gVGV4dHVyZVxuICAgKi9cbiAgc2V0VGV4dHVyZShwcm9wZXJ0eTogU2hhZGVyUHJvcGVydHksIHZhbHVlOiBUZXh0dXJlKTogdm9pZDtcblxuICBzZXRUZXh0dXJlKHByb3BlcnR5OiBzdHJpbmcgfCBTaGFkZXJQcm9wZXJ0eSwgdmFsdWU6IFRleHR1cmUpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXREYXRhKHByb3BlcnR5LCB2YWx1ZSk7XG4gIH1cblxuICAvLyDorr7nva7mlbDmja7nmoTml7blgJnpobrkvr/mjIflrprkuobliIbnu4TvvIHvvIHvvIFcbiAgX3NldERhdGE8VCBleHRlbmRzIFNoYWRlclByb3BlcnR5VmFsdWVUeXBlPihwcm9wZXJ0eTogc3RyaW5nIHwgU2hhZGVyUHJvcGVydHksIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKHByb3BlcnR5KTtcbiAgICB9XG5cbiAgICBpZiAocHJvcGVydHkuX2dyb3VwICE9PSB0aGlzLl9ncm91cCkge1xuICAgICAgaWYgKHByb3BlcnR5Ll9ncm91cCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BlcnR5Ll9ncm91cCA9IHRoaXMuX2dyb3VwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgYFNoYWRlciBwcm9wZXJ0eSAke3Byb3BlcnR5Lm5hbWV9IGhhcyBiZWVuIHVzZWQgYXMgJHtTaGFkZXJEYXRhR3JvdXBbcHJvcGVydHkuX2dyb3VwXX0gcHJvcGVydHkuYDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9wcm9wZXJ0aWVzW3Byb3BlcnR5Ll91bmlxdWVJZF0gPSB2YWx1ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi4vRW5naW5lJztcbmltcG9ydCB7IFNoYWRlciwgU2hhZGVyRGF0YSwgU2hhZGVyRGF0YUdyb3VwIH0gZnJvbSAnLi4vc2hhZGVyJztcblxuLyoqXG4gKiBNYXRlcmlhbCBiYXNlIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgTWF0ZXJpYWwge1xuICAvKiogTmFtZS4gKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogU2hhZGVyIHVzZWQgYnkgdGhlIG1hdGVyaWFsLiAqL1xuICBzaGFkZXI6IFNoYWRlcjtcbiAgLy8gVE9ETzog5o+Q5Y2H5LiA5LiqUmVmT2JqZWN0IVxuICBlbmdpbmU6IEVuZ2luZTtcblxuICAvKiogU2hhZGVyIGRhdGEuICovXG4gIHJlYWRvbmx5IHNoYWRlckRhdGE6IFNoYWRlckRhdGEgPSBuZXcgU2hhZGVyRGF0YShTaGFkZXJEYXRhR3JvdXAuTWF0ZXJpYWwpO1xuXG4gIGNvbnN0cnVjdG9yKGVuZ2luZTogRW5naW5lLCBzaGFkZXI6IFNoYWRlcikge1xuICAgIHRoaXMuc2hhZGVyID0gc2hhZGVyO1xuICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xuICB9XG59XG4iLCIvKipcbiAqIFRleHR1cmUgZm9ybWF0IGVudW1lcmF0aW9uLlxuICovXG5leHBvcnQgZW51bSBUZXh0dXJlRm9ybWF0IHtcbiAgLyoqIFJHQiBmb3JtYXQsOCBiaXRzIHBlciBjaGFubmVsLiAqL1xuICBSOEc4QjgsXG4gIC8qKiBSR0JBIGZvcm1hdCw4IGJpdHMgcGVyIGNoYW5uZWwuICovXG4gIFI4RzhCOEE4LFxuICAvKiogUkdCQSBmb3JtYXQsNCBiaXRzIHBlciBjaGFubmVsLiAqL1xuICBSNEc0QjRBNCxcbiAgLyoqIFJHQkEgZm9ybWF0LDUgYml0cyBpbiBSIGNoYW5uZWwsNSBiaXRzIGluIEcgY2hhbm5lbCw1IGJpdHMgaW4gQiBjaGFubmVsLCAxIGJpdCBpbiBBIGNoYW5uZWwuICovXG4gIFI1RzVCNUExLFxuICAvKiogUkdCIGZvcm1hdCw1IGJpdHMgaW4gUiBjaGFubmVsLDYgYml0cyBpbiBHIGNoYW5uZWwsNSBiaXRzIGluIEIgY2hhbm5lbC4gKi9cbiAgUjVHNkI1LFxuICAvKiogVHJhbnNwYXJlbnQgZm9ybWF0LDggYml0cy4gKi9cbiAgQWxwaGE4LFxuICAvKiogTHVtaW5hbmNlL2FscGhhIGluIFJHQiBjaGFubmVsLCBhbHBoYSBpbiBBIGNoYW5uZWwuICovXG4gIEx1bWluYW5jZUFscGhhLFxuICAvKiogUkdCQSBmb3JtYXQsMTYgYml0cyBwZXIgY2hhbm5lbC4gKi9cbiAgUjE2RzE2QjE2QTE2LFxuICAvKiogUkdCQSBmb3JtYXQsMzIgYml0cyBwZXIgY2hhbm5lbC4gKi9cbiAgUjMyRzMyQjMyQTMyLFxuXG4gIC8qKiBSR0IgY29tcHJlc3NlZCBmb3JtYXTjgIIqL1xuICBEWFQxLFxuICAvKiogUkdCQSBjb21wcmVzc2VkIGZvcm1hdOOAgiovXG4gIERYVDUsXG4gIC8qKiBSR0IgY29tcHJlc3NlZCBmb3JtYXQsNCBiaXRzIHBlciBwaXhlbOOAgiovXG4gIEVUQzFfUkdCLFxuICAvKiogUkdCIGNvbXByZXNzZWQgZm9ybWF0LDQgYml0cyBwZXIgcGl4ZWzjgIIqL1xuICBFVEMyX1JHQixcbiAgLyoqIFJHQkEgY29tcHJlc3NlZCBmb3JtYXQsNSBiaXRzIHBlciBwaXhlbCw0IGJpdCBpbiBSR0IsIDEgYml0IGluIEEuICovXG4gIEVUQzJfUkdCQTUsXG4gIC8qKiBSR0IgY29tcHJlc3NlZCBmb3JtYXQsOCBiaXRzIHBlciBwaXhlbC4gKi9cbiAgRVRDMl9SR0JBOCxcbiAgLyoqIFJHQiBjb21wcmVzc2VkIGZvcm1hdCwyIGJpdHMgcGVyIHBpeGVsLiAqL1xuICBQVlJUQ19SR0IyLFxuICAvKiogUkdCQSBjb21wcmVzc2VkIGZvcm1hdCwyIGJpdHMgcGVyIHBpeGVsLiAqL1xuICBQVlJUQ19SR0JBMixcbiAgLyoqIFJHQiBjb21wcmVzc2VkIGZvcm1hdCw0IGJpdHMgcGVyIHBpeGVsLiAqL1xuICBQVlJUQ19SR0I0LFxuICAvKiogUkdCQSBjb21wcmVzc2VkIGZvcm1hdCw0IGJpdHMgcGVyIHBpeGVsLiAqL1xuICBQVlJUQ19SR0JBNCxcbiAgLyoqIFJHQihBKSBjb21wcmVzc2VkIGZvcm1hdCwxMjggYml0cyBwZXIgNHg0IHBpeGVsIGJsb2NrLiAqL1xuICBBU1RDXzR4NCxcbiAgLyoqIFJHQihBKSBjb21wcmVzc2VkIGZvcm1hdCwxMjggYml0cyBwZXIgNXg1IHBpeGVsIGJsb2NrLiAqL1xuICBBU1RDXzV4NSxcbiAgLyoqIFJHQihBKSBjb21wcmVzc2VkIGZvcm1hdCwxMjggYml0cyBwZXIgNng2IHBpeGVsIGJsb2NrLiAqL1xuICBBU1RDXzZ4NixcbiAgLyoqIFJHQihBKSBjb21wcmVzc2VkIGZvcm1hdCwxMjggYml0cyBwZXIgOHg4IHBpeGVsIGJsb2NrLiAqL1xuICBBU1RDXzh4OCxcbiAgLyoqIFJHQihBKSBjb21wcmVzc2VkIGZvcm1hdCwxMjggYml0cyBwZXIgMTB4MTAgcGl4ZWwgYmxvY2suICovXG4gIEFTVENfMTB4MTAsXG4gIC8qKiBSR0IoQSkgY29tcHJlc3NlZCBmb3JtYXQsMTI4IGJpdHMgcGVyIDEyeDEyIHBpeGVsIGJsb2NrLiAqL1xuICBBU1RDXzEyeDEyLFxuXG4gIC8qKiBSZW5kZXIgdG8gZGVwdGggYnVmZmVyLGVuZ2luZSB3aWxsIGF1dG9tYXRpY2FsbHkgc2VsZWN0IHRoZSBzdXBwb3J0ZWQgcHJlY2lzaW9uLiAqL1xuICBEZXB0aCxcbiAgLyoqIFJlbmRlciB0byBkZXB0aCBzdGVuY2lsIGJ1ZmZlciwgZW5naW5lIHdpbGwgYXV0b21hdGljYWxseSBzZWxlY3QgdGhlIHN1cHBvcnRlZCBwcmVjaXNpb24uICovXG4gIERlcHRoU3RlbmNpbCxcbiAgLyoqIFJlbmRlciB0byBzdGVuY2lsIGJ1ZmZlci4gKi9cbiAgU3RlbmNpbCxcbiAgLyoqIEZvcmNlIDE2LWJpdCBkZXB0aCBidWZmZXIuICovXG4gIERlcHRoMTYsXG4gIC8qKiBGb3JjZSAyNC1iaXQgZGVwdGggYnVmZmVyLiAqL1xuICBEZXB0aDI0LFxuICAvKiogRm9yY2UgMzItYml0IGRlcHRoIGJ1ZmZlci4gKi9cbiAgRGVwdGgzMixcbiAgLyoqIEZvcmNlIDE2LWJpdCBkZXB0aCArIDgtYml0IHN0ZW5jaWwgYnVmZmVyLiAqL1xuICBEZXB0aDI0U3RlbmNpbDgsXG4gIC8qKiBGb3JjZSAzMi1iaXQgZGVwdGggKyA4LWJpdCBzdGVuY2lsIGJ1ZmZlci4gKi9cbiAgRGVwdGgzMlN0ZW5jaWw4LFxufVxuIiwiaW1wb3J0IHsgVGV4dHVyZUZpbHRlck1vZGUgfSBmcm9tICcuL2VudW1zL1RleHR1cmVGaWx0ZXJNb2RlJztcbmltcG9ydCB7IFRleHR1cmVGb3JtYXQgfSBmcm9tICcuL2VudW1zL1RleHR1cmVGb3JtYXQnO1xuaW1wb3J0IHsgVGV4dHVyZVdyYXBNb2RlIH0gZnJvbSAnLi9lbnVtcy9UZXh0dXJlV3JhcE1vZGUnO1xuXG4vKipcbiAqIFRleHR1cmUgc3BlY2lmaWMgZm9ybWF0IGluZm9ybWF0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRleHR1cmVGb3JtYXREZXRhaWwge1xuICAvKiogVGV4dHVyZSBjb2xvciBpbnRlcm5hbCBmb3JtYXQ6IFJHQiwgUkdCQS4gKi9cbiAgaW50ZXJuYWxGb3JtYXQ6IEdMaW50O1xuICAvKiogVGV4dHVyZSBjb2xvciBiYXNlIGZvcm1hdDogUkdCLCBSR0JBLiAqL1xuICBiYXNlRm9ybWF0PzogR0xlbnVtO1xuICAvKiogVGV4ZWwgZGF0YSB0eXBlLiAqL1xuICBkYXRhVHlwZT86IEdMZW51bTtcbiAgLy8gd2ViZ2wy5omN5byA5ZCv57q555CG5Y6L57ypXG4gIC8qKiBXaGV0aGVyIHRleHR1cmUgY29tcHJlc3Npb24uICovXG4gIGlzQ29tcHJlc3NlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBvZiB0ZXh0dXJlLCBjb250YWlucyBzb21lIGNvbW1vbiBmdW5jdGlvbnMgb2YgdGV4dHVyZS1yZWxhdGVkIGNsYXNzZXMuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUZXh0dXJlIHtcbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKiBXaGV0aGVyIHRvIGVuYWJsZSBtaXBtYXAuICovXG4gIF9taXBtYXA6IGJvb2xlYW47XG4gIC8qKiBUZXh0dXJlIG9iamVjdCBzdG9yYWdlIGFkZHJlc3MuICovXG4gIF9nbFRleHR1cmU6IFdlYkdMVGV4dHVyZTtcbiAgLyoqIFRleHR1cmUgc2FtcGxlci4gKi9cbiAgX2dsVGFyZ2V0OiBudW1iZXI7XG4gIC8qKiBUZXh0dXJlIGZvcm1hdCBkZXRhaWwuICovXG4gIF9mb3JtYXREZXRhaWw6IFRleHR1cmVGb3JtYXREZXRhaWw7XG5cbiAgLyoqIFRleHR1cmUgZm9ybWF0LiAqL1xuICBwcm90ZWN0ZWQgX2Zvcm1hdDogVGV4dHVyZUZvcm1hdDtcbiAgLyoqIFRleHR1cmUgd2lkdGguICovXG4gIHByb3RlY3RlZCBfd2lkdGg6IG51bWJlcjtcbiAgLyoqIFRleHR1cmUgaGVpZ2h0LiAqL1xuICBwcm90ZWN0ZWQgX2hlaWdodDogbnVtYmVyO1xuICBwcm90ZWN0ZWQgX21pcG1hcENvdW50OiBudW1iZXI7XG4gIHByb3RlY3RlZCBfZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcblxuICBwcml2YXRlIF93cmFwTW9kZVU6IFRleHR1cmVXcmFwTW9kZTtcbiAgcHJpdmF0ZSBfd3JhcE1vZGVWOiBUZXh0dXJlV3JhcE1vZGU7XG4gIHByaXZhdGUgX2ZpbHRlck1vZGU6IFRleHR1cmVGaWx0ZXJNb2RlO1xuXG4gIGdldCBmb3JtYXQoKTogVGV4dHVyZUZvcm1hdCB7XG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1hdDtcbiAgfVxuXG4gIGdldCB3aWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgfVxuXG4gIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgZ2V0IHdyYXBNb2RlVSgpOiBUZXh0dXJlV3JhcE1vZGUge1xuICAgIHJldHVybiB0aGlzLl93cmFwTW9kZVU7XG4gIH1cblxuICBzZXQgd3JhcE1vZGVVKHZhbHVlOiBUZXh0dXJlV3JhcE1vZGUpIHtcbiAgICBpZiAodmFsdWUgPT09IHRoaXMuX3dyYXBNb2RlVSkgcmV0dXJuO1xuICAgIHRoaXMuX3dyYXBNb2RlVSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHdyYXBNb2RlVigpOiBUZXh0dXJlV3JhcE1vZGUge1xuICAgIHJldHVybiB0aGlzLl93cmFwTW9kZVY7XG4gIH1cblxuICBzZXQgd3JhcE1vZGVWKHZhbHVlOiBUZXh0dXJlV3JhcE1vZGUpIHtcbiAgICBpZiAodmFsdWUgPT09IHRoaXMuX3dyYXBNb2RlVikgcmV0dXJuO1xuICAgIHRoaXMuX3dyYXBNb2RlViA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG1pcG1hcENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21pcG1hcENvdW50O1xuICB9XG5cbiAgZ2V0IGZpbHRlck1vZGUoKTogVGV4dHVyZUZpbHRlck1vZGUge1xuICAgIHJldHVybiB0aGlzLl9maWx0ZXJNb2RlO1xuICB9XG5cbiAgc2V0IGZpbHRlck1vZGUodmFsdWU6IFRleHR1cmVGaWx0ZXJNb2RlKSB7XG4gICAgaWYgKHZhbHVlID09PSB0aGlzLl9maWx0ZXJNb2RlKSByZXR1cm47XG4gICAgdGhpcy5fZmlsdGVyTW9kZSA9IHZhbHVlO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9nZXRNYXhNaXBsZXZlbChzaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgubG9nMihzaXplKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2dldE1pcG1hcENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21pcG1hcCA/IE1hdGguZmxvb3IoTWF0aC5sb2cyKE1hdGgubWF4KHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpKSkgKyAxIDogMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGV0YWlsZWQgdGV4dHVyZSBkZXRhaWwgaW5mb3JtYXRpb24gYmFzZWQgb24gdGV4dHVyZSBmb3JtYXQuXG4gICAqIEBwYXJhbSBmb3JtYXQgVGV4dHVyZSBmb3JtYXQuXG4gICAqIEBwYXJhbSBnbCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuXG4gICAqIEByZXR1cm5zIFRleHR1cmUgZm9ybWF0IGRldGFpbC5cbiAgICovXG4gIHN0YXRpYyBfZ2V0Rm9ybWF0RGV0YWlsKGZvcm1hdDogVGV4dHVyZUZvcm1hdCwgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IFRleHR1cmVGb3JtYXREZXRhaWwge1xuICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICBjYXNlIFRleHR1cmVGb3JtYXQuUjhHOEI4OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGludGVybmFsRm9ybWF0OiBnbC5SR0IsXG4gICAgICAgICAgYmFzZUZvcm1hdDogZ2wuUkdCLFxuICAgICAgICAgIGRhdGFUeXBlOiBnbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICAgIGlzQ29tcHJlc3NlZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICBjYXNlIFRleHR1cmVGb3JtYXQuUjhHOEI4QTg6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW50ZXJuYWxGb3JtYXQ6IGdsLlJHQkEsXG4gICAgICAgICAgYmFzZUZvcm1hdDogZ2wuUkdCQSxcbiAgICAgICAgICBkYXRhVHlwZTogZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICBpc0NvbXByZXNzZWQ6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgY2FzZSBUZXh0dXJlRm9ybWF0LlI0RzRCNEE0OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGludGVybmFsRm9ybWF0OiBnbC5SR0JBLFxuICAgICAgICAgIGJhc2VGb3JtYXQ6IGdsLlJHQkEsXG4gICAgICAgICAgZGF0YVR5cGU6IGdsLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQsXG4gICAgICAgICAgaXNDb21wcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgVGV4dHVyZUZvcm1hdC5SNUc1QjVBMTpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbnRlcm5hbEZvcm1hdDogZ2wuUkdCQSxcbiAgICAgICAgICBiYXNlRm9ybWF0OiBnbC5SR0JBLFxuICAgICAgICAgIGRhdGFUeXBlOiBnbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xLFxuICAgICAgICAgIGlzQ29tcHJlc3NlZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICBjYXNlIFRleHR1cmVGb3JtYXQuUjVHNkI1OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGludGVybmFsRm9ybWF0OiBnbC5SR0IsXG4gICAgICAgICAgYmFzZUZvcm1hdDogZ2wuUkdCLFxuICAgICAgICAgIGRhdGFUeXBlOiBnbC5VTlNJR05FRF9TSE9SVF81XzZfNSxcbiAgICAgICAgICBpc0NvbXByZXNzZWQ6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgY2FzZSBUZXh0dXJlRm9ybWF0LkFscGhhODpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbnRlcm5hbEZvcm1hdDogZ2wuQUxQSEEsXG4gICAgICAgICAgYmFzZUZvcm1hdDogZ2wuQUxQSEEsXG4gICAgICAgICAgZGF0YVR5cGU6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgICAgaXNDb21wcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgVGV4dHVyZUZvcm1hdC5MdW1pbmFuY2VBbHBoYTpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbnRlcm5hbEZvcm1hdDogZ2wuTFVNSU5BTkNFX0FMUEhBLFxuICAgICAgICAgIGJhc2VGb3JtYXQ6IGdsLkxVTUlOQU5DRV9BTFBIQSxcbiAgICAgICAgICBkYXRhVHlwZTogZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICBpc0NvbXByZXNzZWQ6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0aGlzIFRleHR1cmVGb3JtYXQgaXMgbm90IHN1cHBvcnRlZCBpbiBPYXNpcyBFbmdpbmU6ICR7Zm9ybWF0fWApO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBUaGUgZmlsdGVyIG1vZGUgb2YgdGhlIHRleHR1cmUuXG4gKi9cbmV4cG9ydCBlbnVtIFRleHR1cmVGaWx0ZXJNb2RlIHtcbiAgLyoqIFBvaW50IGZpbHRlcmluZy4gKi9cbiAgUG9pbnQgPSAwLFxuICAvKiogQmlsaW5lYXIgZmlsdGVyaW5nLiAqL1xuICBCaWxpbmVhciA9IDEsXG4gIC8qKiBUcmlsaW5lYXIgZmlsdGVyaW5nLiAqL1xuICBUcmlsaW5lYXIgPSAyLFxufVxuIiwiLyoqXG4gKiBXcmFwcGluZyBtb2RlIG9mIHRoZSB0ZXh0dXJlLlxuICovXG5leHBvcnQgZW51bSBUZXh0dXJlV3JhcE1vZGUge1xuICAvKiogQ2xhbXBpbmcgbW9kZS4gdXNlIHRoZSBjb2xvciBvZiBlZGdlIHBpeGVscyBiZXlvbmQgdGhlIHRleHR1cmUgYm91bmRhcnkuICovXG4gIENsYW1wID0gMCxcbiAgLyoqIFJlcGVhdGluZyBtb2RlLiB0aWxpbmcgd2lsbCBiZSByZXBlYXRlZCBpZiBpdCBleGNlZWRzIHRoZSB0ZXh0dXJlIGJvdW5kYXJ5LiAqL1xuICBSZXBlYXQgPSAxLFxuICAvKiogTWlycm9yIHJlcGVhdCBtb2RlLiB0aWxpbmcgd2lsbCBiZSBtaXJyb3JlZCBhbmQgcmVwZWF0ZWQgaWYgaXQgZXhjZWVkcyB0aGUgdGV4dHVyZSBib3VuZGFyeS4gKi9cbiAgTWlycm9yID0gMixcbn1cbiIsImltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL0VuZ2luZSc7XG5pbXBvcnQgeyBUZXh0dXJlRmlsdGVyTW9kZSB9IGZyb20gJy4vZW51bXMvVGV4dHVyZUZpbHRlck1vZGUnO1xuaW1wb3J0IHsgVGV4dHVyZUZvcm1hdCB9IGZyb20gJy4vZW51bXMvVGV4dHVyZUZvcm1hdCc7XG5pbXBvcnQgeyBUZXh0dXJlV3JhcE1vZGUgfSBmcm9tICcuL2VudW1zL1RleHR1cmVXcmFwTW9kZSc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlJztcblxuLyoqXG4gKiBUd28tZGltZW5zaW9uYWwgdGV4dHVyZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRleHR1cmUyRCBleHRlbmRzIFRleHR1cmUge1xuICAvKipcbiAgICogQ3JlYXRlIFRleHR1cmUyRC5cbiAgICogQHBhcmFtIGVuZ2luZSBEZWZpbmUgdGhlIGVuZ2luZSB0byB1c2UgdG8gcmVuZGVyIHRoaXMgdGV4dHVyZS5cbiAgICogQHBhcmFtIHdpZHRoIFRleHR1cmUgd2lkdGguXG4gICAqIEBwYXJhbSBoZWlnaHQgVGV4dHVyZSBoZWlnaHQuXG4gICAqIEBwYXJhbSBmb3JtYXQgVGV4dHVyZSBmb3JtYXQuIGRlZmF1bHQgIGBUZXh0dXJlRm9ybWF0LlI4RzhCOEE4YC5cbiAgICogQHBhcmFtIG1pcG1hcCBXaGV0aGVyIHRvIHVzZSBtdWx0aS1sZXZlbCB0ZXh0dXJlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgZW5naW5lOiBFbmdpbmUsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBmb3JtYXQ6IFRleHR1cmVGb3JtYXQgPSBUZXh0dXJlRm9ybWF0LlI4RzhCOEE4LFxuICAgIG1pcG1hcDogYm9vbGVhbiA9IHRydWUsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fbWlwbWFwID0gbWlwbWFwO1xuICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuX2Zvcm1hdCA9IGZvcm1hdDtcbiAgICB0aGlzLl9taXBtYXBDb3VudCA9IHRoaXMuX2dldE1pcG1hcENvdW50KCk7XG5cbiAgICB0aGlzLmZpbHRlck1vZGUgPSBUZXh0dXJlRmlsdGVyTW9kZS5CaWxpbmVhcjtcbiAgICB0aGlzLndyYXBNb2RlVSA9IHRoaXMud3JhcE1vZGVWID0gVGV4dHVyZVdyYXBNb2RlLlJlcGVhdDtcblxuICAgIHRoaXMuX2dsID0gZW5naW5lLmdsO1xuICAgIHRoaXMuX2dsVGV4dHVyZSA9IHRoaXMuX2dsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICB0aGlzLl9nbFRhcmdldCA9IHRoaXMuX2dsLlRFWFRVUkVfMkQ7XG4gICAgdGhpcy5fZm9ybWF0RGV0YWlsID0gVGV4dHVyZS5fZ2V0Rm9ybWF0RGV0YWlsKGZvcm1hdCwgdGhpcy5fZ2wpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0ZXh0dXJlIGJhc2VkIG9uIHBpeGVsIGJ1ZmZlci5cbiAgICogQHBhcmFtIGNvbG9yQnVmZmVyIENvbG9yIGJ1ZmZlciBhcnJheS5cbiAgICogQHBhcmFtIG1pcExldmVsIE1pcCBsZXZlbC5cbiAgICogQHBhcmFtIHggU3RhcnRpbmcgcG9pbnQgeCBwb3NpdGlvbi5cbiAgICogQHBhcmFtIHkgU3RhcnRpbmcgcG9pbnQgeSBwb3NpdGlvbi5cbiAgICogQHBhcmFtIHdpZHRoIFNldCB3aWR0aC5cbiAgICogQHBhcmFtIGhlaWdodCBTZXQgaGVpZ2h0LlxuICAgKi9cbiAgc2V0UGl4ZWxCdWZmZXIoXG4gICAgY29sb3JCdWZmZXI6IEFycmF5QnVmZmVyVmlldyxcbiAgICBtaXBMZXZlbDogbnVtYmVyID0gMCxcbiAgICB4OiBudW1iZXIgPSAwLFxuICAgIHk6IG51bWJlciA9IDAsXG4gICAgd2lkdGg/OiBudW1iZXIsXG4gICAgaGVpZ2h0PzogbnVtYmVyLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IHsgaW50ZXJuYWxGb3JtYXQsIGJhc2VGb3JtYXQsIGRhdGFUeXBlIH0gPSB0aGlzLl9mb3JtYXREZXRhaWw7XG4gICAgY29uc3QgbWlwV2lkdGggPSBNYXRoLm1heCgxLCB0aGlzLl93aWR0aCA+PiBtaXBMZXZlbCk7XG4gICAgY29uc3QgbWlwSGVpZ2h0ID0gTWF0aC5tYXgoMSwgdGhpcy5oZWlnaHQgPj4gbWlwTGV2ZWwpO1xuXG4gICAgd2lkdGggPSB3aWR0aCB8fCBtaXBXaWR0aCAtIHg7XG4gICAgaGVpZ2h0ID0gaGVpZ2h0IHx8IG1pcEhlaWdodCAtIHk7XG5cbiAgICAvLyB3ZWJnbDIg5omN5Y+v5Lul6ICD6JmR57q555CG5Y6L57ypQVBJIGlzQ29tcHJlc3NlZFxuICAgIGdsLmJpbmRUZXh0dXJlKHRoaXMuX2dsVGFyZ2V0LCB0aGlzLl9nbFRleHR1cmUpO1xuICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIDApO1xuICAgIGdsLnRleFBhcmFtZXRlcmkodGhpcy5fZ2xUYXJnZXQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAvLyBnbC50ZXhTdWJJbWFnZTJEKHRoaXMuX2dsVGFyZ2V0LCBtaXBMZXZlbCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYmFzZUZvcm1hdCwgZGF0YVR5cGUsIGNvbG9yQnVmZmVyKTtcbiAgICBnbC50ZXhJbWFnZTJEKHRoaXMuX2dsVGFyZ2V0LCBtaXBMZXZlbCwgaW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGJhc2VGb3JtYXQsIGRhdGFUeXBlLCBjb2xvckJ1ZmZlcik7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0dXJlIGFjY29yZGluZyB0byB0aGUgcGljdHVyZS5cbiAgICogQHBhcmFtIGltYWdlU291cmNlIEltYWdlIHNvdXJjZS5cbiAgICogQHBhcmFtIG1pcExldmVsIE1pcCBsZXZlbC5cbiAgICogQHBhcmFtIGZsaXBZIFkgYXhpcyByZXZlcnNlZC5cbiAgICovXG4gIHNldEltYWdlU291cmNlKFxuICAgIGltYWdlU291cmNlOiBUZXhJbWFnZVNvdXJjZSxcbiAgICBtaXBMZXZlbDogbnVtYmVyLFxuICAgIGZsaXBZOiBib29sZWFuLFxuICAgIC8vIHByZW11bHRpcGx5QWxwaGE6IGJvb2xlYW4sXG4gICAgLy8geDogbnVtYmVyID0gMCxcbiAgICAvLyB5OiBudW1iZXIgPSAwLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IHsgYmFzZUZvcm1hdCwgZGF0YVR5cGUsIGludGVybmFsRm9ybWF0IH0gPSB0aGlzLl9mb3JtYXREZXRhaWw7XG5cbiAgICBnbC5iaW5kVGV4dHVyZSh0aGlzLl9nbFRhcmdldCwgdGhpcy5fZ2xUZXh0dXJlKTtcbiAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCArZmxpcFkpO1xuICAgIC8vIOWwhkFscGhh6YCa6YGT5LmY5Lul5YW25LuW6aKc6Imy6YCa6YGTXG4gICAgLy8gZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCArcHJlbXVsdGlwbHlBbHBoYSk7XG4gICAgLy8gZ2wudGV4U3ViSW1hZ2UyRCh0aGlzLl9nbFRhcmdldCwgbWlwTGV2ZWwsIHggfHwgMCwgeSB8fCAwLCBiYXNlRm9ybWF0LCBkYXRhVHlwZSwgaW1hZ2VTb3VyY2UpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgIGdsLnRleEltYWdlMkQodGhpcy5fZ2xUYXJnZXQsIG1pcExldmVsLCBpbnRlcm5hbEZvcm1hdCwgYmFzZUZvcm1hdCwgZGF0YVR5cGUsIGltYWdlU291cmNlKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBEZWZpbmUgdGhlIGZhY2Ugb2YgdGhlIGN1YmUgdGV4dHVyZS5cbiAqL1xuZXhwb3J0IGVudW0gVGV4dHVyZUN1YmVGYWNlIHtcbiAgLyoqIFBvc2l0aXZlIFggZmFjZSBmb3IgYSBjdWJlLW1hcHBlZCB0ZXh0dXJlLiAqL1xuICBQb3NpdGl2ZVggPSAwLFxuICAvKiogTmVnYXRpdmUgWCBmYWNlIGZvciBhIGN1YmUtbWFwcGVkIHRleHR1cmUuICovXG4gIE5lZ2F0aXZlWCA9IDEsXG4gIC8qKiBQb3NpdGl2ZSBZIGZhY2UgZm9yIGEgY3ViZS1tYXBwZWQgdGV4dHVyZS4gKi9cbiAgUG9zaXRpdmVZID0gMixcbiAgLyoqIE5lZ2F0aXZlIFkgZmFjZSBmb3IgYSBjdWJlLW1hcHBlZCB0ZXh0dXJlLiAqL1xuICBOZWdhdGl2ZVkgPSAzLFxuICAvKiogUG9zaXRpdmUgWiBmYWNlIGZvciBhIGN1YmUtbWFwcGVkIHRleHR1cmUuICovXG4gIFBvc2l0aXZlWiA9IDQsXG4gIC8qKiBOZWdhdGl2ZSBaIGZhY2UgZm9yIGEgY3ViZS1tYXBwZWQgdGV4dHVyZS4gKi9cbiAgTmVnYXRpdmVaID0gNSxcbn1cbiIsImltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL0VuZ2luZSc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuLi9zaGFkZXInO1xuaW1wb3J0IHsgVGV4dHVyZTJELCBUZXh0dXJlRm9ybWF0IH0gZnJvbSAnLi4vdGV4dHVyZSc7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwnO1xuXG4vKipcbiAqIEltYWdlIG1hdGVyaWFscyB1c2luZyAyRCB0ZXh0dXJlcyB0byBkaXNwbGF5IHRoZSBlYXJ0aCwgcmFzdGVyIHRpbGVzLCBldGMuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbWFnZU1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuICAvKiogVGhlIHRleHR1cmUgdXNlZCBieSB0aGUgaW1hZ2UgbWF0ZXJpYWwuICovXG4gIHRleHR1cmUyZDogVGV4dHVyZTJEO1xuICAvKiogVGhlIGFkZHJlc3Mgb2YgdGhlIHRleHR1cmUgc2FtcGxlciBpbiB0aGUgc2hhZGVyLiAqL1xuICBzdGF0aWMgX3NhbXBsZXByb3AgPSBTaGFkZXIuZ2V0UHJvcGVydHlCeU5hbWUoJ3Vfc2FtcGxlcicpO1xuXG4gIC8vIFRPRE86IOW6lOivpeW7uueri+S4gOS4qnNoYWRlcuaxoO+8jOi/meagt+WwseS4jeeUqOWGjeS8oOWFpXNoYWRlcuS6hlxuICBjb25zdHJ1Y3RvcihlbmdpbmU6IEVuZ2luZSwgc2hhZGVyOiBTaGFkZXIsIHVybDogc3RyaW5nKSB7XG4gICAgc3VwZXIoZW5naW5lLCBzaGFkZXIpO1xuXG4gICAgY29uc3Qgc2hhZGVyRGF0YSA9IHRoaXMuc2hhZGVyRGF0YTtcbiAgICB0aGlzLmxvYWRUZXh0dXJlKHVybClcbiAgICAgIC50aGVuKChpbWFnZSkgPT4ge1xuICAgICAgICB0aGlzLnRleHR1cmUyZCA9IG5ldyBUZXh0dXJlMkQoZW5naW5lLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBUZXh0dXJlRm9ybWF0LlI4RzhCOCwgZmFsc2UpO1xuICAgICAgICB0aGlzLnRleHR1cmUyZC5zZXRJbWFnZVNvdXJjZShpbWFnZSwgMCwgZmFsc2UpO1xuICAgICAgICBzaGFkZXJEYXRhLnNldFRleHR1cmUoSW1hZ2VNYXRlcmlhbC5fc2FtcGxlcHJvcCwgdGhpcy50ZXh0dXJlMmQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIHRleHR1cmUgaW1hZ2UgYWNjb3JkaW5nIHRvIHVybC5cbiAgICogQHBhcmFtIHVybCBUZXh0dXJlIGltYWdlIHVybC5cbiAgICogQHJldHVybnMgUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PlxuICAgKi9cbiAgcHJpdmF0ZSBsb2FkVGV4dHVyZSh1cmw6IHN0cmluZyk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICB9O1xuICAgICAgaW1hZ2Uub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfTtcbiAgICAgIGltYWdlLnNyYyA9IHVybDtcbiAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL0VuZ2luZSc7XG5pbXBvcnQgeyBUZXh0dXJlRmlsdGVyTW9kZSB9IGZyb20gJy4vZW51bXMvVGV4dHVyZUZpbHRlck1vZGUnO1xuaW1wb3J0IHsgVGV4dHVyZUZvcm1hdCB9IGZyb20gJy4vZW51bXMvVGV4dHVyZUZvcm1hdCc7XG5pbXBvcnQgeyBUZXh0dXJlV3JhcE1vZGUgfSBmcm9tICcuL2VudW1zL1RleHR1cmVXcmFwTW9kZSc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlJztcblxuLyoqXG4gKiBDdWJlIHRleHR1cmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0dXJlQ3ViZSBleHRlbmRzIFRleHR1cmUge1xuICAvKipcbiAgICogQ3JlYXRlIFRleHR1cmVDdWJlLlxuICAgKiBAcGFyYW0gZW5naW5lIERlZmluZSB0aGUgZW5naW5lIHRvIHVzZSB0byByZW5kZXIgdGhpcyB0ZXh0dXJlLlxuICAgKiBAcGFyYW0gc2l6ZSBUZXh0dXJlIHNpemUuIHRleHR1cmUgd2lkdGggbXVzdCBiZSBlcXVhbCB0byBoZWlnaHQgaW4gY3ViZSB0ZXh0dXJlLlxuICAgKiBAcGFyYW0gZm9ybWF0IFRleHR1cmUgZm9ybWF0LGRlZmF1bHQgVGV4dHVyZUZvcm1hdC5SOEc4QjhBOC5cbiAgICogQHBhcmFtIG1pcG1hcCBXaGV0aGVyIHRvIHVzZSBtdWx0aS1sZXZlbCB0ZXh0dXJlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUsIHNpemU6IG51bWJlciwgZm9ybWF0OiBUZXh0dXJlRm9ybWF0ID0gVGV4dHVyZUZvcm1hdC5SOEc4QjhBOCwgbWlwbWFwOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9taXBtYXAgPSBtaXBtYXA7XG4gICAgdGhpcy5fd2lkdGggPSBzaXplO1xuICAgIHRoaXMuX2hlaWdodCA9IHNpemU7XG4gICAgdGhpcy5fZm9ybWF0ID0gZm9ybWF0O1xuICAgIHRoaXMuX21pcG1hcENvdW50ID0gdGhpcy5fZ2V0TWlwbWFwQ291bnQoKTtcblxuICAgIHRoaXMuZmlsdGVyTW9kZSA9IFRleHR1cmVGaWx0ZXJNb2RlLkJpbGluZWFyO1xuICAgIHRoaXMud3JhcE1vZGVVID0gdGhpcy53cmFwTW9kZVYgPSBUZXh0dXJlV3JhcE1vZGUuQ2xhbXA7XG5cbiAgICB0aGlzLl9nbCA9IGVuZ2luZS5nbDtcbiAgICB0aGlzLl9nbFRleHR1cmUgPSB0aGlzLl9nbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgdGhpcy5fZ2xUYXJnZXQgPSB0aGlzLl9nbC5URVhUVVJFX0NVQkVfTUFQO1xuICAgIHRoaXMuX2Zvcm1hdERldGFpbCA9IFRleHR1cmUuX2dldEZvcm1hdERldGFpbChmb3JtYXQsIHRoaXMuX2dsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGV4dHVyZSBiYXNlZCBvbiBwaXhlbCBidWZmZXIuXG4gICAqIEBwYXJhbSBmYWNlIFdoaWNoIHNpZGUgb2YgdGhlIGN1YmUuXG4gICAqIEBwYXJhbSBjb2xvckJ1ZmZlciBDb2xvciBidWZmZXIuXG4gICAqIEBwYXJhbSBtaXBMZXZlbCBNaXAgbGV2ZWwuXG4gICAqL1xuICBzZXRQaXhlbEJ1ZmZlcihcbiAgICBmYWNlOiBudW1iZXIsXG4gICAgY29sb3JCdWZmZXI6IEFycmF5QnVmZmVyVmlldyxcbiAgICBtaXBMZXZlbDogbnVtYmVyID0gMCxcbiAgICAvLyB4OiBudW1iZXIgPSAwLFxuICAgIC8vIHk6IG51bWJlciA9IDAsXG4gICAgLy8gd2lkdGg/OiBudW1iZXIsXG4gICAgLy8gaGVpZ2h0PzogbnVtYmVyLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IHsgaW50ZXJuYWxGb3JtYXQsIGJhc2VGb3JtYXQsIGRhdGFUeXBlIH0gPSB0aGlzLl9mb3JtYXREZXRhaWw7XG5cbiAgICBnbC5iaW5kVGV4dHVyZSh0aGlzLl9nbFRhcmdldCwgdGhpcy5fZ2xUZXh0dXJlKTtcblxuICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIDApO1xuICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgMCk7XG5cbiAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgZmFjZSxcbiAgICAgIG1pcExldmVsLFxuICAgICAgaW50ZXJuYWxGb3JtYXQsXG4gICAgICB0aGlzLl93aWR0aCxcbiAgICAgIHRoaXMuX2hlaWdodCxcbiAgICAgIDAsXG4gICAgICBiYXNlRm9ybWF0LFxuICAgICAgZGF0YVR5cGUsXG4gICAgICBjb2xvckJ1ZmZlcixcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dHVyZSBhY2NvcmRpbmcgdG8gdGhlIHBpY3R1cmUuXG4gICAqIEBwYXJhbSBmYWNlIFdoaWNoIHNpZGUgb2YgdGhlIGN1YmUuXG4gICAqIEBwYXJhbSBpbWFnZVNvdXJjZSBJbWFnZSBzb3VyY2UuXG4gICAqIEBwYXJhbSBtaXBMZXZlbCBNaXAgbGV2ZWwuXG4gICAqL1xuICBzZXRJbWFnZVNvdXJjZShcbiAgICBmYWNlOiBudW1iZXIsXG4gICAgaW1hZ2VTb3VyY2U6IFRleEltYWdlU291cmNlIHwgbnVsbCxcbiAgICBtaXBMZXZlbDogbnVtYmVyLFxuICAgIC8vIGZsaXBZOiBib29sZWFuLFxuICAgIC8vIHByZW11bHRpcGx5QWxwaGE6IGJvb2xlYW4sXG4gICAgLy8geDogbnVtYmVyLFxuICAgIC8vIHk6IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCB7IGJhc2VGb3JtYXQsIGRhdGFUeXBlLCBpbnRlcm5hbEZvcm1hdCB9ID0gdGhpcy5fZm9ybWF0RGV0YWlsO1xuXG4gICAgZ2wuYmluZFRleHR1cmUodGhpcy5fZ2xUYXJnZXQsIHRoaXMuX2dsVGV4dHVyZSk7XG4gICAgZ2wudGV4SW1hZ2UyRChmYWNlLCBtaXBMZXZlbCwgaW50ZXJuYWxGb3JtYXQsIGJhc2VGb3JtYXQsIGRhdGFUeXBlLCBpbWFnZVNvdXJjZSk7XG4gICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV9DVUJFX01BUCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL0VuZ2luZSc7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFsJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uL3NoYWRlcic7XG5pbXBvcnQgeyBUZXh0dXJlQ3ViZSB9IGZyb20gJy4uL3RleHR1cmUvVGV4dHVyZUN1YmUnO1xuXG50eXBlIElGYWNlSW5mbyA9IHtcbiAgdGFyZ2V0OiBudW1iZXI7XG4gIHVybDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBIHNreWJveCBtYXRlcmlhbCBidWlsdCB3aXRoIGEgY3ViZSB0ZXh0dXJlLCB1c2VkIHRvIGRpc3BsYXkgdGhlIHN0YXJyeSBza3ksIGV0Yy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNreUJveE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuICAvKiogQ3ViZSB0ZXh0dXJlLiAqL1xuICB0ZXh0dXJlQ3ViZTogVGV4dHVyZUN1YmU7XG4gIC8qKiBTaXggc2lkZWQgaW5mb3JtYXRpb24gYXJyYXkuICovXG4gIGZhY2VJbmZvQXJyOiBJRmFjZUluZm9bXTtcbiAgLyoqIEdldCB0aGUgc2FtcGxlciBmb3IgdGhlIGN1YmUgdGV4dHVyZSBpbiB0aGUgc2hhZGVyLiAqL1xuICBzdGF0aWMgX3NreWJveHByb3AgPSBTaGFkZXIuZ2V0UHJvcGVydHlCeU5hbWUoJ3VfU2t5Ym94Jyk7XG5cbiAgLy8gVE9ETzog5oq9UmVmT2JqZWN0XG4gIGNvbnN0cnVjdG9yKGVuZ2luZTogRW5naW5lLCBmYWNlSW5mb0FycjogSUZhY2VJbmZvW10pIHtcbiAgICBzdXBlcihlbmdpbmUsIFNoYWRlci5maW5kKCdza3lib3gnKSk7XG5cbiAgICBjb25zdCBzaGFkZXJEYXRhID0gdGhpcy5zaGFkZXJEYXRhO1xuICAgIHRoaXMudGV4dHVyZUN1YmUgPSBuZXcgVGV4dHVyZUN1YmUoZW5naW5lLCAxMDI0KTtcbiAgICB0aGlzLmZhY2VJbmZvQXJyID0gZmFjZUluZm9BcnI7XG4gICAgY29uc3QgZ2wgPSBlbmdpbmUuZ2w7XG5cbiAgICB0aGlzLmZhY2VJbmZvQXJyLmZvckVhY2goKGZhY2VJbmZvKSA9PiB7XG4gICAgICBjb25zdCB7IHRhcmdldCwgdXJsIH0gPSBmYWNlSW5mbztcbiAgICAgIGNvbnN0IGxldmVsID0gMDtcblxuICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlLnNyYyA9IHVybDtcbiAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG4gICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMudGV4dHVyZUN1YmUuc2V0SW1hZ2VTb3VyY2UodGFyZ2V0LCBpbWFnZSwgbGV2ZWwpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfQ1VCRV9NQVAsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSX01JUE1BUF9MSU5FQVIpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHNoYWRlckRhdGEuc2V0VGV4dHVyZShTa3lCb3hNYXRlcmlhbC5fc2t5Ym94cHJvcCwgdGhpcy50ZXh0dXJlQ3ViZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQnVmZmVyIGJpbmRpbmcgZmxhZy5cbiAqL1xuZXhwb3J0IGVudW0gQnVmZmVyQmluZEZsYWcge1xuICAvKiogVmVydGV4IGJ1ZmZlciBiaW5kaW5nIGZsYWcgKi9cbiAgVmVydGV4QnVmZmVyLFxuICAvKiogSW5kZXggYnVmZmVyIGJpbmRpbmcgZmxhZyAqL1xuICBJbmRleEJ1ZmZlcixcbn1cbiIsIi8qKlxuICogQnVmZmVyIHVzYWdlLlxuICovXG5leHBvcnQgZW51bSBCdWZmZXJVc2FnZSB7XG4gIC8qKiBUaGUgYnVmZmVyIGNvbnRlbnQgYXJlIGludGVuZGVkIHRvIGJlIHNwZWNpZmllZCBvbmNlLCBhbmQgdXNlZCBtYW55IHRpbWVzICovXG4gIFN0YXRpYyxcbiAgLyoqIFRoZSBidWZmZXIgY29udGVudHMgYXJlIGludGVuZGVkIHRvIGJlIHJlc3BlY2lmaWVkIHJlcGVhdGVkbHksIGFuZCB1c2VkIG1hbnkgdGltZXMgKi9cbiAgRHluYW1pYyxcbiAgLyoqIFRoZSBidWZmZXIgY29udGVudHMgYXJlIGludGVuZGVkIHRvIGJlIHNwZWNpZmllZCBvbmNlLCBhbmQgdXNlZCBhdCBtb3N0IGEgZmV3IHRpbWVzICovXG4gIFN0cmVhbSxcbn1cbiIsIi8qKlxuICogVmVydGV4IGVsZW1lbnQgZm9ybWF0LlxuICovXG5leHBvcnQgZW51bSBWZXJ0ZXhFbGVtZW50Rm9ybWF0IHtcbiAgLyoqIDMyLWJpdCBmbG9hdCAqL1xuICBGbG9hdCxcbiAgLyoqIFR3by1kaW1lbnNpb25hbCAzMi1iaXQgZmxvYXQgKi9cbiAgVmVjdG9yMixcbiAgLyoqIFRocmVlLWRpbWVuc2lvbmFsIDMyLWJpdCBmbG9hdCAqL1xuICBWZWN0b3IzLFxuICAvKiogRm91ci1kaW1lbnNpb25hbCAzMi1iaXQgZmxvYXQgKi9cbiAgVmVjdG9yNCxcbiAgLyoqIEZvdXItZGltZW5zaW9uYWwgOC1iaXQgaW50ZWdlcixyYW5nZSBpcyBbLTEyOCwxMjddICovXG4gIEJ5dGU0LFxuICAvKiogRm91ci1kaW1lbnNpb25hbCA4LWJpdCBVbnNpZ25lZCBpbnRlZ2VyLCByYW5nZSBpcyBbMCwyNTVdICovXG4gIFVCeXRlNCxcbiAgLyoqIEZvdXItZGltZW5zaW9uYWwgOC1iaXQgTm9ybWFsaXplZCBpbnRlZ2VyLCByYW5nZSBpcyBbLTEsMV0gKi9cbiAgTm9ybWFsaXplZEJ5dGU0LFxuICAvKiogRm91ci1kaW1lbnNpb25hbCA4LWJpdCBOb3JtYWxpemVkIHVuc2lnbmVkIGludGVnZXIsIHJhbmdlIGlzIFswLDFdICovXG4gIE5vcm1hbGl6ZWRVQnl0ZTQsXG4gIC8qKiBUd28tZGltZW5zaW9uYWwgMTYtYml0IGludGVnZXIsIHJhbmdlIGlzWy0zMjc2OCwgMzI3NjddICovXG4gIFNob3J0MixcbiAgLyoqIFR3by1kaW1lbnNpb25hbCAxNi1iaXQgVW5zaWduZWQgaW50ZWdlciwgcmFuZ2UgaXMgWzAsIDY1NTM1XSAqL1xuICBVU2hvcnQyLFxuICAvKiogVHdvLWRpbWVuc2lvbmFsIDE2LWJpdCBVbnNpZ25lZCBpbnRlZ2VyLCByYW5nZSBpcyBbLTEsIDFdICovXG4gIE5vcm1hbGl6ZWRTaG9ydDIsXG4gIC8qKiBUd28tZGltZW5zaW9uYWwgMTYtYml0IE5vcm1hbGl6ZWQgdW5zaWduZWQgaW50ZWdlciwgcmFuZ2UgaXMgWzAsIDFdICovXG4gIE5vcm1hbGl6ZWRVU2hvcnQyLFxuICAvKiogRm91ci1kaW1lbnNpb25hbCAxNi1iaXQgaW50ZWdlciwgcmFuZ2UgaXMgWy0zMjc2OCwgMzI3NjddICovXG4gIFNob3J0NCxcbiAgLyoqIEZvdXItZGltZW5zaW9uYWwgMTYtYml0IFVuc2lnbmVkIGludGVnZXIsIHJhbmdlIGlzIFswLCA2NTUzNV0gKi9cbiAgVVNob3J0NCxcbiAgLyoqIEZvdXItZGltZW5zaW9uYWwgMTYtYml0IE5vcm1hbGl6ZWQgaW50ZWdlciwgcmFuZ2UgaXNbLTEsIDFdICovXG4gIE5vcm1hbGl6ZWRTaG9ydDQsXG4gIC8qKiBGb3VyLWRpbWVuc2lvbmFsIDE2LWJpdCBOb3JtYWxpemVkIHVuc2lnbmVkIGludGVnZXIsIHJhbmdlIGlzIFswLCAxXSAqL1xuICBOb3JtYWxpemVkVVNob3J0NCxcbn1cbiIsIi8qKlxuICogRGF0YSB0eXBlIGVudW1lcmF0aW9uXG4gKi9cbmV4cG9ydCBlbnVtIERhdGFUeXBlIHtcbiAgLyoqIEZsb2F0ICovXG4gIEZMT0FUID0gNTEyNiwgLy8gZ2wuRkxPQVRcbiAgLyoqIEZsb2F0aW5nLXBvaW50IHR3by1kaW1lbnNpb25hbCB2ZWN0b3IgKi9cbiAgRkxPQVRfVkVDMiA9IDM1NjY0LCAvLyBnbC5GTE9BVF9WRUMyXG4gIC8qKiBGbG9hdGluZy1wb2ludCB0aHJlZS1kaW1lbnNpb25hbCB2ZWN0b3IgKi9cbiAgRkxPQVRfVkVDMyA9IDM1NjY1LCAvLyBnbC5GTE9BVF9WRUMzXG4gIC8qKiBGbG9hdGluZy1wb2ludCBmb3VyLWRpbWVuc2lvbmFsIHZlY3RvciAqL1xuICBGTE9BVF9WRUM0ID0gMzU2NjYsIC8vIGdsLkZMT0FUX1ZFQzRcblxuICAvKiogSW50ZWdlciAqL1xuICBJTlQgPSA1MTI0LCAvLyBnbC5JTlRcbiAgLyoqIEludGVnZXIgdHdvLWRpbWVuc2lvbmFsIHZlY3RvciAqL1xuICBJTlRfVkVDMiA9IDM1NjY3LCAvLyBnbC5JTlRfVkVDMlxuICAvKiogSW50ZWdlciB0aHJlZS1kaW1lbnNpb25hbCB2ZWN0b3IgKi9cbiAgSU5UX1ZFQzMgPSAzNTY2OCwgLy8gZ2wuSU5UX1ZFQzNcbiAgLyoqIEludGVnZXIgZm91ci1kaW1lbnNpb25hbCB2ZWN0b3IgKi9cbiAgSU5UX1ZFQzQgPSAzNTY2OSwgLy8gZ2wuSU5UX1ZFQzRcblxuICAvKiogQm9vbGVhbiAqL1xuICBCT09MID0gMzU2NzAsIC8vIGdsLkJPT0xcbiAgLyoqIEJvb2xlYW4gdHdvLWRpbWVuc2lvbmFsIHZlY3RvciAqL1xuICBCT09MX1ZFQzIgPSAzNTY3MSwgLy8gZ2wuQk9PTF9WRUMyXG4gIC8qKiBCb29sZWFuIHRocmVlLWRpbWVuc2lvbmFsIHZlY3RvciAqL1xuICBCT09MX1ZFQzMgPSAzNTY3MiwgLy8gZ2wuQk9PTF9WRUMzXG4gIC8qKiBCb29sZWFuIGZvdXItZGltZW5zaW9uYWwgdmVjdG9yICovXG4gIEJPT0xfVkVDNCA9IDM1NjczLCAvLyBnbC5CT09MX1ZFQzRcblxuICAvKiogU2Vjb25kLW9yZGVyIG1hdHJpeCAqL1xuICBGTE9BVF9NQVQyID0gMzU2NzQsIC8vIGdsLkZMT0FUX01BVDJcbiAgLyoqIFRoaXJkLW9yZGVyIG1hdHJpeCAqL1xuICBGTE9BVF9NQVQzID0gMzU2NzUsIC8vIGdsLkZMT0FUX01BVDNcbiAgLyoqIEZvdXJ0aC1vcmRlciBtYXRyaXggKi9cbiAgRkxPQVRfTUFUNCA9IDM1Njc2LCAvLyBnbC5GTE9BVF9NQVQ0XG5cbiAgLyoqIEZsb2F0IGFycmF5ICovXG4gIEZMT0FUX0FSUkFZID0gMzU2NzcsIC8vIGdsLkZMT0FUX0FSUkFZXG4gIC8qKiBGbG9hdGluZy1wb2ludCB0d28tZGltZW5zaW9uYWwgdmVjdG9yIGFycmF5ICovXG4gIEZMT0FUX1ZFQzJfQVJSQVkgPSAxMDAwMDAsXG4gIC8qKiBGbG9hdGluZy1wb2ludCB0aHJlZS1kaW1lbnNpb25hbCB2ZWN0b3IgYXJyYXkgKi9cbiAgRkxPQVRfVkVDM19BUlJBWSxcbiAgLyoqIEZsb2F0aW5nLXBvaW50IGZvdXItZGltZW5zaW9uYWwgdmVjdG9yIGFycmF5ICovXG4gIEZMT0FUX1ZFQzRfQVJSQVksXG5cbiAgLyoqIEludGVnZXIgYXJyYXkgKi9cbiAgSU5UX0FSUkFZLFxuICAvKiogSW50ZWdlciB0d28tZGltZW5zaW9uYWwgdmVjdG9yIGFycmF5ICovXG4gIElOVF9WRUMyX0FSUkFZLFxuICAvKiogSW50ZWdlciB0aHJlZS1kaW1lbnNpb25hbCB2ZWN0b3IgYXJyYXkgKi9cbiAgSU5UX1ZFQzNfQVJSQVksXG4gIC8qKiBJbnRlZ2VyIGZvdXItZGltZW5zaW9uYWwgdmVjdG9yIGFycmF5ICovXG4gIElOVF9WRUM0X0FSUkFZLFxuXG4gIC8qKiBTZWNvbmQtb3JkZXIgbWF0cml4IGFycmF5ICovXG4gIEZMT0FUX01BVDJfQVJSQVksXG4gIC8qKiBUaGlyZC1vcmRlciBtYXRyaXggYXJyYXkgKi9cbiAgRkxPQVRfTUFUM19BUlJBWSxcbiAgLyoqIEZvdXJ0aC1vcmRlciBtYXRyaXggYXJyYXkgKi9cbiAgRkxPQVRfTUFUNF9BUlJBWSxcblxuICAvKiogMkQgdGV4dHVyZSBzYW1wbGVyIGFycmF5ICovXG4gIFNBTVBMRVJfMkRfQVJSQVksXG4gIC8qKiBDdWJlIG1hcCB0ZXh0dXJlIHNhbXBsZXIgYXJyYXkgKi9cbiAgU0FNUExFUl9DVUJFX0FSUkFZLFxuXG4gIC8qKiAyRCBzYW1wbGVyICovXG4gIFNBTVBMRVJfMkQgPSAzNTY3OCwgLy8gZ2wuU0FNUExFUl8yRFxuICAvKiogQ3ViZSBtYXAgVGV4dHVyZSBzYW1wbGVyICovXG4gIFNBTVBMRVJfQ1VCRSA9IDM1NjgwLCAvLyBnbC5TQU1QTEVSX0NVQkVcblxuICAvKiogQnl0ZSAqL1xuICBCWVRFID0gNTEyMCwgLy8gZ2wuQllURVxuICAvKiogVW5zaWduZWQgYnl0ZSAqL1xuICBVTlNJR05FRF9CWVRFID0gNTEyMSwgLy8gZ2wuVU5TSUdORURfQllURVxuICAvKiogU2hvcnQgKi9cbiAgU0hPUlQgPSA1MTIyLCAvLyBnbC5TSE9SVFxuICAvKiogVW5zaWduZWQgc2hvcnQgKi9cbiAgVU5TSUdORURfU0hPUlQgPSA1MTIzLCAvLyBnbC5VTlNJR05FRF9TSE9SVFxuICAvKiogVW5zaWduZWQgaW50ICovXG4gIFVOU0lHTkVEX0lOVCA9IDUxMjUsIC8vIGdsLlVOU0lHTkVEX0lOVFxuXG4gIFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCA9IDM0MDY5LFxuICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1gsXG4gIFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWSxcbiAgVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZLFxuICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1osXG4gIFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWixcbn1cblxuLyoqXG4gKiBHTCBDYXBhYmlsaXRpZXNcbiAqIFNvbWUgY2FwYWJpbGl0aWVzIGNhbiBiZSBzbW9vdGhlZCBvdXQgYnkgZXh0ZW5zaW9uLCBhbmQgc29tZSBjYXBhYmlsaXRpZXMgbXVzdCB1c2UgV2ViR0wgMi4wLlxuICogKi9cbmV4cG9ydCBlbnVtIEdMQ2FwYWJpbGl0eVR5cGUge1xuICBzaGFkZXJWZXJ0ZXhJRCA9ICdzaGFkZXJWZXJ0ZXhJRCcsXG4gIHN0YW5kYXJkRGVyaXZhdGl2ZXMgPSAnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJyxcbiAgc2hhZGVyVGV4dHVyZUxvZCA9ICdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJyxcbiAgZWxlbWVudEluZGV4VWludCA9ICdPRVNfZWxlbWVudF9pbmRleF91aW50JyxcbiAgZGVwdGhUZXh0dXJlID0gJ1dFQkdMX2RlcHRoX3RleHR1cmUnLFxuICBkcmF3QnVmZmVycyA9ICdXRUJHTF9kcmF3X2J1ZmZlcnMnLFxuICB2ZXJ0ZXhBcnJheU9iamVjdCA9ICdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsXG4gIGluc3RhbmNlZEFycmF5cyA9ICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyxcbiAgbXVsdGlwbGVTYW1wbGUgPSAnbXVsdGlwbGVTYW1wbGVPbmx5U3VwcG9ydGVkSW5XZWJHTDInLFxuICB0ZXh0dXJlRmxvYXQgPSAnT0VTX3RleHR1cmVfZmxvYXQnLFxuICB0ZXh0dXJlRmxvYXRMaW5lYXIgPSAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyxcbiAgdGV4dHVyZUhhbGZGbG9hdCA9ICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyxcbiAgdGV4dHVyZUhhbGZGbG9hdExpbmVhciA9ICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicsXG4gIFdFQkdMX2NvbG9yQnVmZmVyRmxvYXQgPSAnV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0JyxcbiAgY29sb3JCdWZmZXJGbG9hdCA9ICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyxcbiAgY29sb3JCdWZmZXJIYWxmRmxvYXQgPSAnRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0JyxcbiAgdGV4dHVyZUZpbHRlckFuaXNvdHJvcGljID0gJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycsXG4gIGJsZW5kTWluTWF4ID0gJ0VYVF9ibGVuZF9taW5tYXgnLFxuXG4gIGFzdGMgPSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnLFxuICBhc3RjX3dlYmtpdCA9ICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnLFxuICBldGMgPSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YycsXG4gIGV0Y193ZWJraXQgPSAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMnLFxuICBldGMxID0gJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyxcbiAgZXRjMV93ZWJraXQgPSAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyxcbiAgcHZydGMgPSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyxcbiAgcHZydGNfd2Via2l0ID0gJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnLFxuICBzM3RjID0gJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyxcbiAgczN0Y193ZWJraXQgPSAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyxcbiAgLy8gYXRjID0gXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXRjXCIsXG4gIC8vIHMzdGNfc3JnYiA9IFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNfc3JnYlwiXG59XG5cbmV4cG9ydCB0eXBlIFR5cGVkQXJyYXkgPVxuICB8IEludDhBcnJheVxuICB8IFVpbnQ4QXJyYXlcbiAgfCBJbnQxNkFycmF5XG4gIHwgVWludDE2QXJyYXlcbiAgfCBJbnQzMkFycmF5XG4gIHwgVWludDMyQXJyYXlcbiAgfCBVaW50OENsYW1wZWRBcnJheVxuICB8IEZsb2F0MzJBcnJheVxuICB8IEZsb2F0NjRBcnJheTtcbiIsIi8qKlxuICogSW5kZXggZm9ybWF0LlxuICovXG5leHBvcnQgZW51bSBJbmRleEZvcm1hdCB7XG4gIC8qKiA4IGJpdCAqL1xuICBVSW50OCxcbiAgLyoqIDE2IGJpdCAqL1xuICBVSW50MTYsXG4gIC8qKiAzMiBiaXQgKi9cbiAgVUludDMyLFxufVxuIiwiaW1wb3J0IHsgQnVmZmVyVXNhZ2UgfSBmcm9tICcuL2VudW1zL0J1ZmZlclVzYWdlJztcbmltcG9ydCB7IFZlcnRleEVsZW1lbnRGb3JtYXQgfSBmcm9tICcuL2VudW1zL1ZlcnRleEVsZW1lbnRGb3JtYXQnO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi9iYXNlL0NvbnN0YW50JztcbmltcG9ydCB7IEluZGV4Rm9ybWF0IH0gZnJvbSAnLi9lbnVtcy9JbmRleEZvcm1hdCc7XG5cbi8qKlxuICogSW5mb3JtYXRpb24gYWJvdXQgYSBzaW5nbGUgdmVydGV4IGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudEluZm8ge1xuICAvKiogTnVtYmVyIG9mIGNvbXBvbmVudHMgcGVyIHZlcnRleC4gKi9cbiAgc2l6ZTogbnVtYmVyO1xuICAvKiogVHlwZSBvZiBkYXRhLiAqL1xuICB0eXBlOiBEYXRhVHlwZTtcbiAgLyoqIFdoZXRoZXIgbm9ybWFsaXphdGlvbiBpcyByZXF1aXJlZC4gKi9cbiAgbm9ybWFsaXplZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgcHJvY2Vzc2luZyBCdWZmZXJzLlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyVXRpbCB7XG4gIC8qKlxuICAgKiBPYnRhaW4gdGhlIHVzYWdlIG9mIEJ1ZmZlciBhY2NvcmRpbmcgdG8gdGhlIGluY29taW5nIGVudW1lcmF0aW9uLlxuICAgKiBAcGFyYW0gZ2wgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHQuXG4gICAqIEBwYXJhbSBidWZmZXJVc2FnZSBCdWZmZXIgdXNhZ2UuXG4gICAqIEByZXR1cm5zIFRoZSBudW1iZXIgY29kZSB1c2VkIGJ5IHRoZSBpbnRlcm5hbCBidWZmZXIgb2YgZ2wuXG4gICAqL1xuICBzdGF0aWMgX2dldEdMQnVmZmVyVXNhZ2UoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgYnVmZmVyVXNhZ2U6IEJ1ZmZlclVzYWdlKTogbnVtYmVyIHtcbiAgICBzd2l0Y2ggKGJ1ZmZlclVzYWdlKSB7XG4gICAgICBjYXNlIEJ1ZmZlclVzYWdlLlN0YXRpYzpcbiAgICAgICAgcmV0dXJuIGdsLlNUQVRJQ19EUkFXO1xuICAgICAgY2FzZSBCdWZmZXJVc2FnZS5EeW5hbWljOlxuICAgICAgICByZXR1cm4gZ2wuRFlOQU1JQ19EUkFXO1xuICAgICAgY2FzZSBCdWZmZXJVc2FnZS5TdHJlYW06XG4gICAgICAgIHJldHVybiBnbC5TVFJFQU1fRFJBVztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGluZGV4IHR5cGUgY29kZS5cbiAgICogQHBhcmFtIGluZGV4Rm9ybWF0IEluZGV4IHR5cGUgZW51bWVyYXRpb24uXG4gICAqIEByZXR1cm5zIFRoZSBudW1iZXIgY29kZSB1c2VkIGJ5IHRoZSBpbnRlcm5hbCB0eXBlIG9mIGdsLlxuICAgKi9cbiAgc3RhdGljIF9nZXRHTEluZGV4VHlwZShpbmRleEZvcm1hdDogSW5kZXhGb3JtYXQpOiBEYXRhVHlwZSB7XG4gICAgc3dpdGNoIChpbmRleEZvcm1hdCkge1xuICAgICAgY2FzZSBJbmRleEZvcm1hdC5VSW50ODpcbiAgICAgICAgcmV0dXJuIERhdGFUeXBlLlVOU0lHTkVEX0JZVEU7XG4gICAgICBjYXNlIEluZGV4Rm9ybWF0LlVJbnQxNjpcbiAgICAgICAgcmV0dXJuIERhdGFUeXBlLlVOU0lHTkVEX1NIT1JUO1xuICAgICAgY2FzZSBJbmRleEZvcm1hdC5VSW50MzI6XG4gICAgICAgIHJldHVybiBEYXRhVHlwZS5VTlNJR05FRF9JTlQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBnbCBpbmRleCBieXRlIGNvdW50LlxuICAgKiBAcGFyYW0gaW5kZXhGb3JtYXQgSW5kZXggdHlwZSBlbnVtZXJhdGlvbi5cbiAgICogQHJldHVybnMgSW5kZXggYnl0ZSBjb3VudC5cbiAgICovXG4gIHN0YXRpYyBfZ2V0R0xJbmRleEJ5dGVDb3VudChpbmRleEZvcm1hdDogSW5kZXhGb3JtYXQpOiBEYXRhVHlwZSB7XG4gICAgc3dpdGNoIChpbmRleEZvcm1hdCkge1xuICAgICAgY2FzZSBJbmRleEZvcm1hdC5VSW50ODpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIEluZGV4Rm9ybWF0LlVJbnQxNjpcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICBjYXNlIEluZGV4Rm9ybWF0LlVJbnQzMjpcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdmVydGV4IGluZm9ybWF0aW9uIGJhc2VkIG9uIHRoZSBlbGVtZW50J3MgdmVydGV4IGZvcm1hdC5cbiAgICovXG4gIHN0YXRpYyBfZ2V0RWxlbWVudEluZm8oZm9ybWF0OiBWZXJ0ZXhFbGVtZW50Rm9ybWF0KTogRWxlbWVudEluZm8ge1xuICAgIGxldCBzaXplOiBudW1iZXI7XG4gICAgbGV0IHR5cGU6IERhdGFUeXBlO1xuICAgIGxldCBub3JtYWxpemVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgY2FzZSBWZXJ0ZXhFbGVtZW50Rm9ybWF0LkZsb2F0OlxuICAgICAgICBzaXplID0gMTtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLkZMT0FUO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5WZWN0b3IyOlxuICAgICAgICBzaXplID0gMjtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLkZMT0FUO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5WZWN0b3IzOlxuICAgICAgICBzaXplID0gMztcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLkZMT0FUO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5WZWN0b3I0OlxuICAgICAgICBzaXplID0gNDtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLkZMT0FUO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5CeXRlNDpcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5CWVRFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5VQnl0ZTQ6XG4gICAgICAgIHNpemUgPSA0O1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuVU5TSUdORURfQllURTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuTm9ybWFsaXplZEJ5dGU0OlxuICAgICAgICBzaXplID0gNDtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLkJZVEU7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5Ob3JtYWxpemVkVUJ5dGU0OlxuICAgICAgICBzaXplID0gNDtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLlVOU0lHTkVEX0JZVEU7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5TaG9ydDI6XG4gICAgICAgIHNpemUgPSAyO1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuU0hPUlQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWZXJ0ZXhFbGVtZW50Rm9ybWF0LlVTaG9ydDI6XG4gICAgICAgIHNpemUgPSAyO1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuVU5TSUdORURfU0hPUlQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWZXJ0ZXhFbGVtZW50Rm9ybWF0Lk5vcm1hbGl6ZWRTaG9ydDI6XG4gICAgICAgIHNpemUgPSAyO1xuICAgICAgICB0eXBlID0gRGF0YVR5cGUuU0hPUlQ7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVmVydGV4RWxlbWVudEZvcm1hdC5Ob3JtYWxpemVkVVNob3J0MjpcbiAgICAgICAgc2l6ZSA9IDI7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5VTlNJR05FRF9TSE9SVDtcbiAgICAgICAgbm9ybWFsaXplZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWZXJ0ZXhFbGVtZW50Rm9ybWF0LlNob3J0NDpcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5TSE9SVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuVVNob3J0NDpcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5VTlNJR05FRF9TSE9SVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZlcnRleEVsZW1lbnRGb3JtYXQuTm9ybWFsaXplZFNob3J0NDpcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgICAgIHR5cGUgPSBEYXRhVHlwZS5TSE9SVDtcbiAgICAgICAgbm9ybWFsaXplZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBWZXJ0ZXhFbGVtZW50Rm9ybWF0Lk5vcm1hbGl6ZWRVU2hvcnQ0OlxuICAgICAgICBzaXplID0gNDtcbiAgICAgICAgdHlwZSA9IERhdGFUeXBlLlVOU0lHTkVEX1NIT1JUO1xuICAgICAgICBub3JtYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHsgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCB9O1xuICB9XG59XG4iLCJpbXBvcnQgeyBCdWZmZXJCaW5kRmxhZyB9IGZyb20gJy4vZW51bXMvQnVmZmVyQmluZEZsYWcnO1xuaW1wb3J0IHsgQnVmZmVyVXNhZ2UgfSBmcm9tICcuL2VudW1zL0J1ZmZlclVzYWdlJztcbmltcG9ydCB7IEJ1ZmZlclV0aWwgfSBmcm9tICcuL0J1ZmZlclV0aWwnO1xuXG4vKipcbiAqIEJ1ZmZlciBiYXNlIGNsYXNzLFxuICogd2hpY2ggY2FuIGJlIGFuIGFycmF5IG9mIHZlcnRleCBidWZmZXJzIG9yIGFuIGFycmF5IG9mIGluZGV4IGJ1ZmZlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWZmZXIge1xuICAvLyBUT0RPOiDmiopnbOaMgui9veWIsFJlZk9iamVjdFxuICBfZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcbiAgX2dsQmluZFRhcmdldDogbnVtYmVyO1xuICBfZ2xCdWZmZXJVc2FnZTogbnVtYmVyO1xuICBfbmF0aXZlQnVmZmVyOiBXZWJHTEJ1ZmZlcjtcblxuICBwcml2YXRlIF90eXBlOiBCdWZmZXJCaW5kRmxhZztcbiAgcHJpdmF0ZSBfYnl0ZUxlbmd0aDogbnVtYmVyO1xuICBwcml2YXRlIF9idWZmZXJVc2FnZTogQnVmZmVyVXNhZ2U7XG5cbiAgLyoqXG4gICAqIEJ1ZmZlciBiaW5kaW5nIGZsYWcuXG4gICAqL1xuICBnZXQgdHlwZSgpOiBCdWZmZXJCaW5kRmxhZyB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gIH1cblxuICAvKipcbiAgICogQnl0ZSBsZW5ndGguXG4gICAqL1xuICBnZXQgYnl0ZUxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9ieXRlTGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1ZmZlciB1c2FnZS5cbiAgICovXG4gIGdldCBidWZmZXJVc2FnZSgpOiBCdWZmZXJVc2FnZSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlclVzYWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBCdWZmZXIuXG4gICAqIEBwYXJhbSBnbCAtIFdlYkdMUmVuZGVyaW5nQ29udGV4dFxuICAgKiBAcGFyYW0gdHlwZSAtIEJ1ZmZlciBiaW5kaW5nIGZsYWdcbiAgICogQHBhcmFtIGJ5dGVMZW5ndGggLSBCeXRlIGxlbmd0aFxuICAgKiBAcGFyYW0gYnVmZmVyVXNhZ2UgLSBCdWZmZXIgdXNhZ2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHR5cGU6IEJ1ZmZlckJpbmRGbGFnLCBieXRlTGVuZ3RoOiBudW1iZXIsIGJ1ZmZlclVzYWdlPzogQnVmZmVyVXNhZ2UpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgQnVmZmVyLlxuICAgKiBAcGFyYW0gZ2wgLSBXZWJHTFJlbmRlcmluZ0NvbnRleHRcbiAgICogQHBhcmFtIHR5cGUgLSBCdWZmZXIgYmluZGluZyBmbGFnXG4gICAqIEBwYXJhbSBkYXRhIC0gQnl0ZVxuICAgKiBAcGFyYW0gYnVmZmVyVXNhZ2UgLSBCdWZmZXIgdXNhZ2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXG4gICAgdHlwZTogQnVmZmVyQmluZEZsYWcsXG4gICAgZGF0YTogQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcsXG4gICAgYnVmZmVyVXNhZ2U/OiBCdWZmZXJVc2FnZSxcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxuICAgIHR5cGU6IEJ1ZmZlckJpbmRGbGFnLFxuICAgIGJ5dGVMZW5ndGhPckRhdGE6IG51bWJlciB8IEFycmF5QnVmZmVyIHwgQXJyYXlCdWZmZXJWaWV3LFxuICAgIGJ1ZmZlclVzYWdlOiBCdWZmZXJVc2FnZSA9IEJ1ZmZlclVzYWdlLlN0YXRpYyxcbiAgKSB7XG4gICAgdGhpcy5fZ2wgPSBnbDtcbiAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgICB0aGlzLl9idWZmZXJVc2FnZSA9IGJ1ZmZlclVzYWdlO1xuXG4gICAgY29uc3QgZ2xCdWZmZXJVc2FnZSA9IEJ1ZmZlclV0aWwuX2dldEdMQnVmZmVyVXNhZ2UoZ2wsIGJ1ZmZlclVzYWdlKTtcbiAgICBjb25zdCBnbEJpbmRUYXJnZXQgPSB0eXBlID09PSBCdWZmZXJCaW5kRmxhZy5WZXJ0ZXhCdWZmZXIgPyBnbC5BUlJBWV9CVUZGRVIgOiBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUjtcblxuICAgIHRoaXMuX25hdGl2ZUJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIHRoaXMuX2dsQnVmZmVyVXNhZ2UgPSBnbEJ1ZmZlclVzYWdlO1xuICAgIHRoaXMuX2dsQmluZFRhcmdldCA9IGdsQmluZFRhcmdldDtcblxuICAgIHRoaXMuYmluZCgpO1xuICAgIGlmICh0eXBlb2YgYnl0ZUxlbmd0aE9yRGF0YSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuX2J5dGVMZW5ndGggPSBieXRlTGVuZ3RoT3JEYXRhO1xuICAgICAgZ2wuYnVmZmVyRGF0YShnbEJpbmRUYXJnZXQsIGJ5dGVMZW5ndGhPckRhdGEsIGdsQnVmZmVyVXNhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aE9yRGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgZ2wuYnVmZmVyRGF0YShnbEJpbmRUYXJnZXQsIGJ5dGVMZW5ndGhPckRhdGEsIGdsQnVmZmVyVXNhZ2UpO1xuICAgIH1cbiAgICBnbC5iaW5kQnVmZmVyKGdsQmluZFRhcmdldCwgbnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogQmluZCBidWZmZXIuXG4gICAqL1xuICBiaW5kKCk6IHZvaWQge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgZ2wuYmluZEJ1ZmZlcih0aGlzLl9nbEJpbmRUYXJnZXQsIHRoaXMuX25hdGl2ZUJ1ZmZlcik7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGJ1ZmZlciBkYXRhLlxuICAgKiBAcGFyYW0gZGF0YSAtIElucHV0IGJ1ZmZlciBkYXRhXG4gICAqL1xuICBzZXREYXRhKGRhdGE6IEFycmF5QnVmZmVyIHwgQXJyYXlCdWZmZXJWaWV3KTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGJ1ZmZlciBkYXRhLlxuICAgKiBAcGFyYW0gZGF0YSAtIElucHV0IGJ1ZmZlciBkYXRhXG4gICAqIEBwYXJhbSBidWZmZXJCeXRlT2Zmc2V0IC0gYnVmZmVyIGJ5dGUgb2Zmc2V0XG4gICAqL1xuICBzZXREYXRhKGRhdGE6IEFycmF5QnVmZmVyIHwgQXJyYXlCdWZmZXJWaWV3LCBidWZmZXJCeXRlT2Zmc2V0OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXQgYnVmZmVyIGRhdGEuXG4gICAqIEBwYXJhbSBkYXRhIC0gSW5wdXQgYnVmZmVyIGRhdGFcbiAgICogQHBhcmFtIGJ1ZmZlckJ5dGVPZmZzZXQgLSBCdWZmZXIgYnl0ZSBvZmZzZXRcbiAgICogQHBhcmFtIGRhdGFPZmZzZXQgLSBCdWZmZXIgYnl0ZSBvZmZzZXRcbiAgICogQHBhcmFtIGRhdGFMZW5ndGggLSBEYXRhIGxlbmd0aFxuICAgKi9cbiAgc2V0RGF0YShkYXRhOiBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldywgYnVmZmVyQnl0ZU9mZnNldDogbnVtYmVyLCBkYXRhT2Zmc2V0OiBudW1iZXIsIGRhdGFMZW5ndGg/OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXQgYnVmZmVyIGRhdGEuXG4gICAqIEBwYXJhbSBkYXRhIC0gSW5wdXQgYnVmZmVyIGRhdGFcbiAgICogQHBhcmFtIGJ1ZmZlckJ5dGVPZmZzZXQgLSBCdWZmZXIgYnl0ZSBvZmZzZXRcbiAgICogQHBhcmFtIGRhdGFPZmZzZXQgLSBCdWZmZXIgYnl0ZSBvZmZzZXRcbiAgICogQHBhcmFtIGRhdGFMZW5ndGggLSBEYXRhIGxlbmd0aFxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFVwZGF0ZSBzdHJhdGVneTogTm9uZS9EaXNjYXJkL05vT3ZlcndyaXRlXG4gICAqL1xuICBzZXREYXRhKGRhdGE6IEFycmF5QnVmZmVyIHwgQXJyYXlCdWZmZXJWaWV3LCBidWZmZXJCeXRlT2Zmc2V0OiBudW1iZXIsIGRhdGFPZmZzZXQ6IG51bWJlciwgZGF0YUxlbmd0aDogbnVtYmVyKTogdm9pZDtcblxuICBzZXREYXRhKFxuICAgIGRhdGE6IEFycmF5QnVmZmVyIHwgQXJyYXlCdWZmZXJWaWV3LFxuICAgIGJ1ZmZlckJ5dGVPZmZzZXQ6IG51bWJlciA9IDAsXG4gICAgZGF0YU9mZnNldDogbnVtYmVyID0gMCxcbiAgICBkYXRhTGVuZ3RoPzogbnVtYmVyLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0ID0gdGhpcy5fZ2w7XG4gICAgY29uc3QgZ2xCaW5kVGFyZ2V0OiBudW1iZXIgPSB0aGlzLl9nbEJpbmRUYXJnZXQ7XG4gICAgdGhpcy5iaW5kKCk7XG5cbiAgICAvLyDmr4/kuKrlhYPntKDmiYDljaDnlKjnmoTlrZfoioLmlbBcbiAgICBjb25zdCBieXRlU2l6ZSA9ICg8VWludDhBcnJheT5kYXRhKS5CWVRFU19QRVJfRUxFTUVOVCB8fCAxO1xuICAgIGNvbnN0IGRhdGFCeXRlTGVuZ3RoID0gZGF0YUxlbmd0aCA/IGJ5dGVTaXplICogZGF0YUxlbmd0aCA6IGRhdGEuYnl0ZUxlbmd0aDtcblxuICAgIGlmIChkYXRhT2Zmc2V0ICE9PSAwIHx8IGRhdGFCeXRlTGVuZ3RoIDwgZGF0YS5ieXRlTGVuZ3RoKSB7XG4gICAgICBjb25zdCBpc0FycmF5QnVmZmVyVmlldyA9ICg8QXJyYXlCdWZmZXJWaWV3PmRhdGEpLmJ5dGVPZmZzZXQgIT09IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IHN1YkRhdGEgPSBuZXcgVWludDhBcnJheShcbiAgICAgICAgaXNBcnJheUJ1ZmZlclZpZXcgPyAoPEFycmF5QnVmZmVyVmlldz5kYXRhKS5idWZmZXIgOiA8QXJyYXlCdWZmZXI+ZGF0YSxcbiAgICAgICAgZGF0YU9mZnNldCAqIGJ5dGVTaXplLFxuICAgICAgICBkYXRhQnl0ZUxlbmd0aCxcbiAgICAgICk7XG4gICAgICBnbC5idWZmZXJTdWJEYXRhKGdsQmluZFRhcmdldCwgYnVmZmVyQnl0ZU9mZnNldCwgc3ViRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLmJ1ZmZlclN1YkRhdGEoZ2xCaW5kVGFyZ2V0LCBidWZmZXJCeXRlT2Zmc2V0LCBkYXRhKTtcbiAgICB9XG4gICAgZ2wuYmluZEJ1ZmZlcihnbEJpbmRUYXJnZXQsIG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBidWZmZXIgZGF0YS5cbiAgICogQHBhcmFtIGRhdGEgLSBPdXRwdXQgYnVmZmVyIGRhdGFcbiAgICovXG4gIGdldERhdGEoZGF0YTogQXJyYXlCdWZmZXJWaWV3KTogdm9pZDtcblxuICAvKipcbiAgICogR2V0IGJ1ZmZlciBkYXRhLlxuICAgKiBAcGFyYW0gZGF0YSAtIE91dHB1dCBidWZmZXIgZGF0YVxuICAgKiBAcGFyYW0gYnVmZmVyQnl0ZU9mZnNldCAtIEJ1ZmZlciBieXRlIG9mZnNldFxuICAgKi9cbiAgZ2V0RGF0YShkYXRhOiBBcnJheUJ1ZmZlclZpZXcsIGJ1ZmZlckJ5dGVPZmZzZXQ6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEdldCBidWZmZXIgZGF0YS5cbiAgICogQHBhcmFtIGRhdGEgLSBPdXRwdXQgYnVmZmVyIGRhdGFcbiAgICogQHBhcmFtIGJ1ZmZlckJ5dGVPZmZzZXQgLSBCdWZmZXIgYnl0ZSBvZmZzZXRcbiAgICogQHBhcmFtIGRhdGFPZmZzZXQgLSBPdXRwdXQgZGF0YSBvZmZzZXRcbiAgICogQHBhcmFtIGRhdGFMZW5ndGggLSBPdXRwdXQgZGF0YSBsZW5ndGhcbiAgICovXG4gIGdldERhdGEoZGF0YTogQXJyYXlCdWZmZXJWaWV3LCBidWZmZXJCeXRlT2Zmc2V0OiBudW1iZXIsIGRhdGFPZmZzZXQ6IG51bWJlciwgZGF0YUxlbmd0aDogbnVtYmVyKTogdm9pZDtcblxuICBnZXREYXRhKGRhdGE6IEFycmF5QnVmZmVyVmlldywgYnVmZmVyQnl0ZU9mZnNldDogbnVtYmVyID0gMCwgZGF0YU9mZnNldDogbnVtYmVyID0gMCwgZGF0YUxlbmd0aD86IG51bWJlcik6IHZvaWQge1xuICAgIHRocm93ICdCdWZmZXIgaXMgd3JpdGUtb25seSBvbiBXZWJHTDEuMCBwbGF0Zm9ybXMuJztcbiAgfVxufVxuIiwiLyoqXG4gKiBNZXNoIHRvcG9sb2d5LlxuICovXG5leHBvcnQgZW51bSBNZXNoVG9wb2xvZ3kge1xuICAvKiogRHJhd3MgYSBzaW5nbGUgZG90ICovXG4gIFBvaW50cyA9IDAsXG4gIC8qKiBEcmF3cyBhIGxpbmUgYmV0d2VlbiBhIHBhaXIgb2YgdmVydGljZXMgKi9cbiAgTGluZXMgPSAxLFxuICAvKiogRHJhd3MgYSBzdHJhaWdodCBsaW5lIHRvIHRoZSBuZXh0IHZlcnRleCwgYW5kIGNvbm5lY3RzIHRoZSBsYXN0IHZlcnRleCBiYWNrIHRvIHRoZSBmaXJzdCAqL1xuICBMaW5lTG9vcCA9IDIsXG4gIC8qKiBEcmF3cyBhIHN0cmFpZ2h0IGxpbmUgdG8gdGhlIG5leHQgdmVydGV4LiAqL1xuICBMaW5lU3RyaXAgPSAzLFxuICAvKiogRHJhd3MgYSB0cmlhbmdsZSBmb3IgYSBncm91cCBvZiB0aHJlZSB2ZXJ0aWNlcyAqL1xuICBUcmlhbmdsZXMgPSA0LFxuICAvKiogRHJhd3MgYSB0cmlhbmdsZSBzdHJpcCAqL1xuICBUcmlhbmdsZVN0cmlwID0gNSxcbiAgLyoqIERyYXdzIGEgdHJpYW5nbGUgZmFuICovXG4gIFRyaWFuZ2xlRmFuID0gNixcbn1cbiIsImltcG9ydCB7IEluZGV4Rm9ybWF0IH0gZnJvbSAnLi9lbnVtcy9JbmRleEZvcm1hdCc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICcuL0J1ZmZlcic7XG5cbi8qKlxuICogSW5kZXggYnVmZmVyIGJpbmRpbmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmRleEJ1ZmZlckJpbmRpbmcge1xuICAvKiogSW5kZXggYnVmZmVyIGJvdW5kIGJ1ZmZlci4gKi9cbiAgX2J1ZmZlcjogQnVmZmVyO1xuICAvKiogSW5kZXggZm9ybWF0LiAqL1xuICBfZm9ybWF0OiBJbmRleEZvcm1hdDtcblxuICAvKipcbiAgICogSW5kZXggYnVmZmVyLlxuICAgKi9cbiAgZ2V0IGJ1ZmZlcigpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXI7XG4gIH1cblxuICAvKipcbiAgICogSW5kZXggYnVmZmVyIGZvcm1hdC5cbiAgICovXG4gIGdldCBmb3JtYXQoKTogSW5kZXhGb3JtYXQge1xuICAgIHJldHVybiB0aGlzLl9mb3JtYXQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGluZGV4IGJ1ZmZlciBiaW5kaW5nLlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gSW5kZXggYnVmZmVyXG4gICAqIEBwYXJhbSBmb3JtYXQgLSBJbmRleCBidWZmZXIgZm9ybWF0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihidWZmZXI6IEJ1ZmZlciwgZm9ybWF0OiBJbmRleEZvcm1hdCkge1xuICAgIHRoaXMuX2J1ZmZlciA9IGJ1ZmZlcjtcbiAgICB0aGlzLl9mb3JtYXQgPSBmb3JtYXQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1lc2hUb3BvbG9neSB9IGZyb20gJy4vZW51bXMvTWVzaFRvcG9sb2d5JztcblxuLyoqXG4gKiBTdWItbWVzaCwgbWFpbmx5IGNvbnRhaW5zIGRyYXdpbmcgaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJNZXNoIHtcbiAgLyoqIFN0YXJ0IGRyYXdpbmcgb2Zmc2V0LiAqL1xuICBzdGFydDogbnVtYmVyO1xuICAvKiogRHJhd2luZyBjb3VudC4gKi9cbiAgY291bnQ6IG51bWJlcjtcbiAgLyoqIERyYXdpbmcgdG9wb2xvZ3kuICovXG4gIHRvcG9sb2d5OiBNZXNoVG9wb2xvZ3k7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHN1Yi1tZXNoLlxuICAgKiBAcGFyYW0gc3RhcnQgLSBTdGFydCBkcmF3aW5nIG9mZnNldFxuICAgKiBAcGFyYW0gY291bnQgLSBEcmF3aW5nIGNvdW50XG4gICAqIEBwYXJhbSB0b3BvbG9neSAtIERyYXdpbmcgdG9wb2xvZ3lcbiAgICovXG4gIGNvbnN0cnVjdG9yKHN0YXJ0OiBudW1iZXIgPSAwLCBjb3VudDogbnVtYmVyID0gMCwgdG9wb2xvZ3k6IE1lc2hUb3BvbG9neSA9IE1lc2hUb3BvbG9neS5UcmlhbmdsZXMpIHtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgIHRoaXMudG9wb2xvZ3kgPSB0b3BvbG9neTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQnVmZmVyVXRpbCB9IGZyb20gJy4uL2dyYXBoaWMvQnVmZmVyVXRpbCc7XG5pbXBvcnQgeyBJbmRleEJ1ZmZlckJpbmRpbmcgfSBmcm9tICcuLi9ncmFwaGljL0luZGV4QnVmZmVyQmluZGluZyc7XG5pbXBvcnQgeyBWZXJ0ZXhCdWZmZXJCaW5kaW5nIH0gZnJvbSAnLi4vZ3JhcGhpYy9WZXJ0ZXhCdWZmZXJCaW5kaW5nJztcbmltcG9ydCB7IFZlcnRleEVsZW1lbnQgfSBmcm9tICcuLi9ncmFwaGljL1ZlcnRleEVsZW1lbnQnO1xuaW1wb3J0IHsgU3ViTWVzaCB9IGZyb20gJy4uL2dyYXBoaWMvU3ViTWVzaCc7XG5pbXBvcnQgeyBTaGFkZXJQcm9ncmFtIH0gZnJvbSAnLi4vc2hhZGVyL1NoYWRlclByb2dyYW0nO1xuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuLi9SZW5kZXJlcic7XG5pbXBvcnQgeyBNZXNoVG9wb2xvZ3kgfSBmcm9tICcuL2VudW1zL01lc2hUb3BvbG9neSc7XG5cbi8qKlxuICogR3JpZCBhYnN0cmFjdCBjbGFzcy5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1lc2gge1xuICAvKiogTmFtZS4gKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogVmVydGV4IGVudGl0eSByZWNvcmQgdGFibGUsIHVzZWQgZm9yIGNhY2hpbmcuICovXG4gIF92ZXJ0ZXhFbGVtZW50TWFwOiBSZWNvcmQ8c3RyaW5nLCBWZXJ0ZXhFbGVtZW50PiA9IHt9O1xuICAvKiogVGhlIHN0b3JhZ2UgdHlwZSBvZiB0aGUgaW5kZXgsIGZvciBleGFtcGxlOiBVSW50OC4gKi9cbiAgX2dsSW5kZXhUeXBlOiBudW1iZXI7XG4gIC8qKiBFYWNoIGluZGV4IG9jY3VwaWVzIHNldmVyYWwgYnl0ZXMsIDggYml0cyBwZXIgYnl0ZS4gKi9cbiAgX2dsSW5kZXhCeXRlQ291bnQ6IG51bWJlcjtcbiAgLyoqIEEgcGxhdGZvcm0gdGhhdCBwcm92aWRlcyByZW5kZXJpbmcgY2FwYWJpbGl0aWVzLiAqL1xuICBfcGxhdGZvcm1QcmltaXRpdmU6IFJlbmRlcmVyO1xuICAvKiogQSBNZXNoIG1heSBjb25zaXN0IG9mIG11bHRpcGxlIHZlcnRleCBpbnN0YW5jZXMuICovXG4gIF9pbnN0YW5jZUNvdW50OiBudW1iZXIgPSAwO1xuICAvKiogVGhlIHZlcnRleCBidWZmZXIgY29ycmVzcG9uZGluZyB0byB0aGUgbWVzaC4gKi9cbiAgX3ZlcnRleEJ1ZmZlckJpbmRpbmdzOiBWZXJ0ZXhCdWZmZXJCaW5kaW5nW10gPSBbXTtcbiAgLyoqIFRoZSBpbmRleCBidWZmZXIgY29ycmVzcG9uZGluZyB0byB0aGUgbWVzaCAqL1xuICBfaW5kZXhCdWZmZXJCaW5kaW5nOiBJbmRleEJ1ZmZlckJpbmRpbmcgPSBudWxsO1xuICAvKiogQXJyYXkgb2YgdmVydGV4IGVsZW1lbnRzLiAqL1xuICBfdmVydGV4RWxlbWVudHM6IFZlcnRleEVsZW1lbnRbXSA9IFtdO1xuXG4gIHByb3RlY3RlZCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICAvKiogRHJhd2luZyBpbmZvcm1hdGlvbiBmb3IgZWFjaCBlbGVtZW50LiAqL1xuICBwcml2YXRlIF9zdWJNZXNoZXM6IFN1Yk1lc2hbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBGaXJzdCBzdWItbWVzaC4gUmVuZGVyZWQgdXNpbmcgdGhlIGZpcnN0IG1hdGVyaWFsLlxuICAgKi9cbiAgZ2V0IHN1Yk1lc2goKTogU3ViTWVzaCB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9zdWJNZXNoZXNbMF0gfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGNvbGxlY3Rpb24gb2Ygc3ViLW1lc2gsIGVhY2ggc3ViLW1lc2ggY2FuIGJlIHJlbmRlcmVkIHdpdGggYW4gaW5kZXBlbmRlbnQgbWF0ZXJpYWwuXG4gICAqL1xuICBnZXQgc3ViTWVzaGVzKCk6IFJlYWRvbmx5PFN1Yk1lc2hbXT4ge1xuICAgIHJldHVybiB0aGlzLl9zdWJNZXNoZXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIHN1Yi1tZXNoLCBlYWNoIHN1Yi1tZXNoIGNhbiBjb3JyZXNwb25kIHRvIGFuIGluZGVwZW5kZW50IG1hdGVyaWFsLlxuICAgKiBAcGFyYW0gc3ViTWVzaCAtIFN0YXJ0IGRyYXdpbmcgb2Zmc2V0LCBpZiB0aGUgaW5kZXggYnVmZmVyIGlzIHNldCwgaXQgbWVhbnMgdGhlIG9mZnNldCBpbiB0aGUgaW5kZXggYnVmZmVyLCBpZiBub3Qgc2V0LCBpdCBtZWFucyB0aGUgb2Zmc2V0IGluIHRoZSB2ZXJ0ZXggYnVmZmVyXG4gICAqIEByZXR1cm5zIFN1Yi1tZXNoXG4gICAqL1xuICBhZGRTdWJNZXNoKHN1Yk1lc2g6IFN1Yk1lc2gpOiBTdWJNZXNoO1xuXG4gIC8qKlxuICAgKiBBZGQgc3ViLW1lc2gsIGVhY2ggc3ViLW1lc2ggY2FuIGNvcnJlc3BvbmQgdG8gYW4gaW5kZXBlbmRlbnQgbWF0ZXJpYWwuXG4gICAqIEBwYXJhbSBzdGFydCAtIFN0YXJ0IGRyYXdpbmcgb2Zmc2V0LCBpZiB0aGUgaW5kZXggYnVmZmVyIGlzIHNldCwgaXQgbWVhbnMgdGhlIG9mZnNldCBpbiB0aGUgaW5kZXggYnVmZmVyLCBpZiBub3Qgc2V0LCBpdCBtZWFucyB0aGUgb2Zmc2V0IGluIHRoZSB2ZXJ0ZXggYnVmZmVyXG4gICAqIEBwYXJhbSBjb3VudCAtIERyYXdpbmcgY291bnQsIGlmIHRoZSBpbmRleCBidWZmZXIgaXMgc2V0LCBpdCBtZWFucyB0aGUgY291bnQgaW4gdGhlIGluZGV4IGJ1ZmZlciwgaWYgbm90IHNldCwgaXQgbWVhbnMgdGhlIGNvdW50IGluIHRoZSB2ZXJ0ZXggYnVmZmVyXG4gICAqIEBwYXJhbSB0b3BvbG9neSAtIERyYXdpbmcgdG9wb2xvZ3ksIGRlZmF1bHQgaXMgTWVzaFRvcG9sb2d5LlRyaWFuZ2xlc1xuICAgKiBAcmV0dXJucyBTdWItbWVzaFxuICAgKi9cbiAgYWRkU3ViTWVzaChzdGFydDogbnVtYmVyLCBjb3VudDogbnVtYmVyLCB0b3BvbG9neT86IE1lc2hUb3BvbG9neSk6IFN1Yk1lc2g7XG5cbiAgYWRkU3ViTWVzaChcbiAgICBzdGFydE9yU3ViTWVzaDogbnVtYmVyIHwgU3ViTWVzaCxcbiAgICBjb3VudD86IG51bWJlcixcbiAgICB0b3BvbG9neTogTWVzaFRvcG9sb2d5ID0gTWVzaFRvcG9sb2d5LlRyaWFuZ2xlcyxcbiAgKTogU3ViTWVzaCB7XG4gICAgaWYgKHR5cGVvZiBzdGFydE9yU3ViTWVzaCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN0YXJ0T3JTdWJNZXNoID0gbmV3IFN1Yk1lc2goc3RhcnRPclN1Yk1lc2gsIGNvdW50LCB0b3BvbG9neSk7XG4gICAgfVxuICAgIHRoaXMuX3N1Yk1lc2hlcy5wdXNoKHN0YXJ0T3JTdWJNZXNoKTtcbiAgICByZXR1cm4gc3RhcnRPclN1Yk1lc2g7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHN1Yi1tZXNoLlxuICAgKiBAcGFyYW0gc3ViTWVzaCAtIFN1Yi1tZXNoIG5lZWRzIHRvIGJlIHJlbW92ZWRcbiAgICovXG4gIHJlbW92ZVN1Yk1lc2goc3ViTWVzaDogU3ViTWVzaCk6IHZvaWQge1xuICAgIGNvbnN0IHN1Yk1lc2hlcyA9IHRoaXMuX3N1Yk1lc2hlcztcbiAgICBjb25zdCBpbmRleCA9IHN1Yk1lc2hlcy5pbmRleE9mKHN1Yk1lc2gpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN1Yk1lc2hlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgc3ViLW1lc2guXG4gICAqL1xuICBjbGVhclN1Yk1lc2goKTogdm9pZCB7XG4gICAgdGhpcy5fc3ViTWVzaGVzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBuYW1lPzogc3RyaW5nKSB7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5fcGxhdGZvcm1QcmltaXRpdmUgPSBuZXcgUmVuZGVyZXIoZ2wsIHRoaXMpO1xuICB9XG5cbiAgX2NsZWFyVmVydGV4RWxlbWVudHMoKTogdm9pZCB7XG4gICAgLy8g6L+Z5Liq5riF56m65pa55rOV5aaZ5ZWKXG4gICAgdGhpcy5fdmVydGV4RWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICBjb25zdCB2ZXJ0ZXhFbGVtZW50TWFwID0gdGhpcy5fdmVydGV4RWxlbWVudE1hcDtcbiAgICBmb3IgKGNvbnN0IGsgaW4gdmVydGV4RWxlbWVudE1hcCkge1xuICAgICAgZGVsZXRlIHZlcnRleEVsZW1lbnRNYXBba107XG4gICAgfVxuICB9XG5cbiAgX2FkZFZlcnRleEVsZW1lbnQoZWxlbWVudDogVmVydGV4RWxlbWVudCk6IHZvaWQge1xuICAgIGNvbnN0IHsgc2VtYW50aWMgfSA9IGVsZW1lbnQ7XG4gICAgdGhpcy5fdmVydGV4RWxlbWVudE1hcFtzZW1hbnRpY10gPSBlbGVtZW50O1xuICAgIHRoaXMuX3ZlcnRleEVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gIH1cblxuICBfZHJhdyhzaGFkZXJQcm9ncmFtOiBTaGFkZXJQcm9ncmFtLCBzdWJNZXNoOiBTdWJNZXNoKTogdm9pZCB7XG4gICAgdGhpcy5fcGxhdGZvcm1QcmltaXRpdmUuZHJhdyhzaGFkZXJQcm9ncmFtLCBzdWJNZXNoKTtcbiAgfVxuXG4gIF9vbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5fdmVydGV4QnVmZmVyQmluZGluZ3MgPSBudWxsO1xuICAgIHRoaXMuX2luZGV4QnVmZmVyQmluZGluZyA9IG51bGw7XG4gICAgdGhpcy5fdmVydGV4RWxlbWVudHMgPSBudWxsO1xuICAgIHRoaXMuX3ZlcnRleEVsZW1lbnRNYXAgPSBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9zZXRWZXJ0ZXhFbGVtZW50cyhlbGVtZW50czogVmVydGV4RWxlbWVudFtdKTogdm9pZCB7XG4gICAgdGhpcy5fY2xlYXJWZXJ0ZXhFbGVtZW50cygpO1xuICAgIGZvciAobGV0IGkgPSAwLCBuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICB0aGlzLl9hZGRWZXJ0ZXhFbGVtZW50KGVsZW1lbnRzW2ldKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgX3NldFZlcnRleEJ1ZmZlckJpbmRpbmcoaW5kZXg6IG51bWJlciwgYmluZGluZzogVmVydGV4QnVmZmVyQmluZGluZyk6IHZvaWQge1xuICAgIHRoaXMuX3ZlcnRleEJ1ZmZlckJpbmRpbmdzW2luZGV4XSA9IGJpbmRpbmc7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3NldEluZGV4QnVmZmVyQmluZGluZyhiaW5kaW5nOiBJbmRleEJ1ZmZlckJpbmRpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgaWYgKGJpbmRpbmcpIHtcbiAgICAgIHRoaXMuX2luZGV4QnVmZmVyQmluZGluZyA9IGJpbmRpbmc7XG4gICAgICB0aGlzLl9nbEluZGV4VHlwZSA9IEJ1ZmZlclV0aWwuX2dldEdMSW5kZXhUeXBlKGJpbmRpbmcuZm9ybWF0KTtcbiAgICAgIHRoaXMuX2dsSW5kZXhCeXRlQ291bnQgPSBCdWZmZXJVdGlsLl9nZXRHTEluZGV4Qnl0ZUNvdW50KGJpbmRpbmcuZm9ybWF0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faW5kZXhCdWZmZXJCaW5kaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX2dsSW5kZXhUeXBlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnLi9CdWZmZXInO1xuXG4vKipcbiAqIFZlcnRleCBidWZmZXIgYmluZGluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZlcnRleEJ1ZmZlckJpbmRpbmcge1xuICAvKiogQnVmZmVyIHRvIHdoaWNoIHZlcnRleCBlbGVtZW50cyBhcmUgYm91bmQuICovXG4gIF9idWZmZXI6IEJ1ZmZlcjtcbiAgLyoqIFNwYW4gYmV0d2VlbiBlYWNoIHZlcnRleC4gKi9cbiAgX3N0cmlkZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBWZXJ0ZXggYnVmZmVyLlxuICAgKi9cbiAgZ2V0IGJ1ZmZlcigpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXI7XG4gIH1cblxuICAvKipcbiAgICogVmVydGV4IGJ1ZmZlciBzdHJpZGUuXG4gICAqL1xuICBnZXQgc3RyaWRlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmlkZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdmVydGV4IGJ1ZmZlci5cbiAgICogQHBhcmFtIGJ1ZmZlciAtIFZlcnRleCBidWZmZXJcbiAgICogQHBhcmFtIHN0cmlkZSAtIFZlcnRleCBidWZmZXIgc3RyaWRlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihidWZmZXI6IEJ1ZmZlciwgc3RyaWRlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy5fc3RyaWRlID0gc3RyaWRlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBWZXJ0ZXhFbGVtZW50Rm9ybWF0IH0gZnJvbSAnLi9lbnVtcy9WZXJ0ZXhFbGVtZW50Rm9ybWF0JztcbmltcG9ydCB7IEVsZW1lbnRJbmZvLCBCdWZmZXJVdGlsIH0gZnJvbSAnLi9CdWZmZXJVdGlsJztcblxuLyoqXG4gKiBWZXJ0ZXggZWxlbWVudHMgY29udGFpbiBjb29yZGluYXRlIGluZm9ybWF0aW9uLCB0ZXh0dXJlIGluZm9ybWF0aW9uLCBub3JtYWwgdmVjdG9yIGluZm9ybWF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgVmVydGV4RWxlbWVudCB7XG4gIF9nbEVsZW1lbnRJbmZvOiBFbGVtZW50SW5mbztcblxuICBwcml2YXRlIF9zZW1hbnRpYzogc3RyaW5nO1xuICBwcml2YXRlIF9vZmZzZXQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfZm9ybWF0OiBWZXJ0ZXhFbGVtZW50Rm9ybWF0O1xuICBwcml2YXRlIF9iaW5kaW5nSW5kZXg6IG51bWJlcjtcbiAgcHJpdmF0ZSBfaW5zdGFuY2VTdGVwUmF0ZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBWZXJ0ZXggc2VtYW50aWMuXG4gICAqL1xuICBnZXQgc2VtYW50aWMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc2VtYW50aWM7XG4gIH1cblxuICAvKipcbiAgICogVmVydGV4IGRhdGEgYnl0ZSBvZmZzZXQuXG4gICAqL1xuICBnZXQgb2Zmc2V0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX29mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJ0ZXggZGF0YSBmb3JtYXQuXG4gICAqL1xuICBnZXQgZm9ybWF0KCk6IFZlcnRleEVsZW1lbnRGb3JtYXQge1xuICAgIHJldHVybiB0aGlzLl9mb3JtYXQ7XG4gIH1cblxuICAvKipcbiAgICogVmVydGV4IGJ1ZmZlciBiaW5kaW5nIGluZGV4LlxuICAgKi9cbiAgZ2V0IGJpbmRpbmdJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9iaW5kaW5nSW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogSW5zdGFuY2UgY2FkZW5jZSwgdGhlIG51bWJlciBvZiBpbnN0YW5jZXMgZHJhd24gZm9yIGVhY2ggdmVydGV4IGluIHRoZSBidWZmZXIsIG5vbi1pbnN0YW5jZSBlbGVtZW50cyBtdXN0IGJlIDAuXG4gICAqL1xuICBnZXQgaW5zdGFuY2VTdGVwUmF0ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZVN0ZXBSYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB2ZXJ0ZXggZWxlbWVudC5cbiAgICogQHBhcmFtIHNlbWFudGljIC0gSW5wdXQgdmVydGV4IHNlbWFudGljXG4gICAqIEBwYXJhbSBvZmZzZXQgLSBWZXJ0ZXggZGF0YSBieXRlIG9mZnNldFxuICAgKiBAcGFyYW0gZm9ybWF0IC0gVmVydGV4IGRhdGEgZm9ybWF0XG4gICAqIEBwYXJhbSBiaW5kaW5nSW5kZXggLSBWZXJ0ZXggYnVmZmVyIGJpbmRpbmcgaW5kZXhcbiAgICogQHBhcmFtIGluc3RhbmNlU3RlcFJhdGUgLSBJbnN0YW5jZSBjYWRlbmNlLCB0aGUgbnVtYmVyIG9mIGluc3RhbmNlcyBkcmF3biBmb3IgZWFjaCB2ZXJ0ZXggaW4gdGhlIGJ1ZmZlciwgbm9uLWluc3RhbmNlIGVsZW1lbnRzIG11c3QgYmUgMC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNlbWFudGljOiBzdHJpbmcsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgZm9ybWF0OiBWZXJ0ZXhFbGVtZW50Rm9ybWF0LFxuICAgIGJpbmRpbmdJbmRleDogbnVtYmVyLFxuICAgIGluc3RhbmNlU3RlcFJhdGU6IG51bWJlciA9IDAsXG4gICkge1xuICAgIHRoaXMuX3NlbWFudGljID0gc2VtYW50aWM7XG4gICAgdGhpcy5fb2Zmc2V0ID0gb2Zmc2V0O1xuICAgIHRoaXMuX2Zvcm1hdCA9IGZvcm1hdDtcbiAgICB0aGlzLl9iaW5kaW5nSW5kZXggPSBiaW5kaW5nSW5kZXg7XG4gICAgdGhpcy5fZ2xFbGVtZW50SW5mbyA9IEJ1ZmZlclV0aWwuX2dldEVsZW1lbnRJbmZvKHRoaXMuZm9ybWF0KTtcbiAgICB0aGlzLl9pbnN0YW5jZVN0ZXBSYXRlID0gTWF0aC5mbG9vcihpbnN0YW5jZVN0ZXBSYXRlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVmVjdG9yMywgVmVjdG9yMiB9IGZyb20gJ0AvbWF0aCc7XG5pbXBvcnQge1xuICBNZXNoLFxuICBJbmRleEZvcm1hdCxcbiAgVmVydGV4RWxlbWVudCxcbiAgVmVydGV4RWxlbWVudEZvcm1hdCxcbiAgQnVmZmVyLFxuICBCdWZmZXJCaW5kRmxhZyxcbiAgQnVmZmVyVXNhZ2UsXG4gIFZlcnRleEJ1ZmZlckJpbmRpbmcsXG4gIEluZGV4QnVmZmVyQmluZGluZyxcbn0gZnJvbSAnLi4vZ3JhcGhpYyc7XG5cbi8qKlxuICogQ3JlYXRlIGEgbW9kZWwgZnJvbSBhbiBhcnJheSBvZiBpbmZvcm1hdGlvbiBzdWNoIGFzIHZlcnRpY2VzLCBpbmRpY2VzLCBub3JtYWwgdmVjdG9ycywgZXRjLlxuICovXG5leHBvcnQgY2xhc3MgTW9kZWxNZXNoIGV4dGVuZHMgTWVzaCB7XG4gIC8qKiBUaGUgbnVtYmVyIG9mIHZlcnRpY2VzIGluIHRoZSBtb2RlbC4gKi9cbiAgcHJpdmF0ZSBfdmVydGV4Q291bnQ6IG51bWJlciA9IDA7XG4gIC8qKiBBdmFpbGFiaWxpdHkgb2YgdGhlIG1vZGVsLiAqL1xuICBwcml2YXRlIF9hY2Nlc3NpYmxlOiBib29sZWFuID0gdHJ1ZTtcblxuICBwcml2YXRlIF92ZXJ0aWNlc0Zsb2F0MzI6IEZsb2F0MzJBcnJheSB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIF92ZXJ0aWNlc1VpbnQ4OiBVaW50OEFycmF5IHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqIEEgdmVydGV4IGhhcyBzZXZlcmFsIGVsZW1lbnRzLCB4eXogaXMgMy4gKi9cbiAgcHJpdmF0ZSBfZWxlbWVudENvdW50OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9sYXN0VXBsb2FkVmVydGV4Q291bnQ6IG51bWJlciA9IC0xO1xuICAvKiogSW5kZXggZm9ybWF0LiAqL1xuICBwcml2YXRlIF9pbmRpY2VzRm9ybWF0OiBJbmRleEZvcm1hdCA9IG51bGw7XG4gIC8qKiBJbmRleCB0eXBlIGFycmF5LiAqL1xuICBwcml2YXRlIF9pbmRpY2VzOiBVaW50OEFycmF5IHwgVWludDE2QXJyYXkgfCBVaW50MzJBcnJheSB8IG51bGwgPSBudWxsO1xuICAvKiogQXJyYXkgb2YgdmVydGV4IHBvc2l0aW9ucy4gKi9cbiAgcHJpdmF0ZSBfcG9zaXRpb25zOiBWZWN0b3IzW10gPSBbXTtcbiAgLyoqIEFycmF5IG9mIG5vcm1hbCB2ZWN0b3JzLiAqL1xuICBwcml2YXRlIF9ub3JtYWxzOiBWZWN0b3IzW10gfCBudWxsID0gbnVsbDtcbiAgLyoqIEFycmF5IG9mIHRleHR1cmUgY29vcmRpbmF0ZXMgKi9cbiAgcHJpdmF0ZSBfdXY6IFZlY3RvcjJbXSB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFjY2VzcyBkYXRhIG9mIHRoZSBtZXNoLlxuICAgKi9cbiAgZ2V0IGFjY2Vzc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FjY2Vzc2libGU7XG4gIH1cblxuICAvKipcbiAgICogVmVydGV4IGNvdW50IG9mIGN1cnJlbnQgbWVzaC5cbiAgICovXG4gIGdldCB2ZXJ0ZXhDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl92ZXJ0ZXhDb3VudDtcbiAgfVxuXG4gIC8vIFRPRE86IOi/meS4quS5n+W6lOivpeaKveWIsFJlZk9iamVjdC5cbiAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbmFtZT86IHN0cmluZykge1xuICAgIHN1cGVyKGdsKTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmVydGV4IHBvc2l0aW9uIGluZm9ybWF0aW9uIG9mIHRoZSBtb2RlbC5cbiAgICogQHBhcmFtIHBvc2l0aW9ucyBBcnJheSBvZiBtb2RlbCB2ZXJ0ZXggY29vcmRpbmF0ZXMuXG4gICAqL1xuICBzZXRQb3NpdGlvbnMocG9zaXRpb25zOiBWZWN0b3IzW10pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2FjY2Vzc2libGUpIHtcbiAgICAgIHRocm93ICdOb3QgYWxsb3dlZCB0byBhY2Nlc3MgZGF0YSB3aGlsZSBhY2Nlc3NpYmxlIGlzIGZhbHNlLic7XG4gICAgfVxuICAgIHRoaXMuX3Bvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICB0aGlzLl92ZXJ0ZXhDb3VudCA9IHBvc2l0aW9ucy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB2ZXJ0ZXggcG9zaXRpb24gaW5mb3JtYXRpb24gb2YgdGhlIG1vZGVsLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBtb2RlbCB2ZXJ0ZXggY29vcmRpbmF0ZXMuXG4gICAqL1xuICBnZXRQb3N0aW9ucygpOiBWZWN0b3IzW10ge1xuICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IG1vZGVsIG5vcm1hbCB2ZWN0b3IuXG4gICAqIEBwYXJhbSBub3JtYWxzIEFycmF5IG9mIG5vcm1hbCB2ZWN0b3JzLlxuICAgKi9cbiAgc2V0Tm9ybWFscyhub3JtYWxzOiBWZWN0b3IzW10pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2FjY2Vzc2libGUpIHtcbiAgICAgIHRocm93ICdOb3QgYWxsb3dlZCB0byBhY2Nlc3MgZGF0YSB3aGlsZSBhY2Nlc3NpYmxlIGlzIGZhbHNlLic7XG4gICAgfVxuXG4gICAgaWYgKG5vcm1hbHMubGVuZ3RoICE9PSB0aGlzLl92ZXJ0ZXhDb3VudCkge1xuICAgICAgdGhyb3cgJ1RoZSBhcnJheSBwcm92aWRlZCBuZWVkcyB0byBiZSB0aGUgc2FtZSBzaXplIGFzIHZlcnRleCBjb3VudC4nO1xuICAgIH1cblxuICAgIHRoaXMuX25vcm1hbHMgPSBub3JtYWxzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBtb2RlbCBub3JtYWwgdmVjdG9yLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBub3JtYWwgdmVjdG9ycy5cbiAgICovXG4gIGdldE5vcm1hbHMoKTogVmVjdG9yM1tdIHtcbiAgICByZXR1cm4gdGhpcy5fbm9ybWFscztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGV4dHVyZSBjb29yZGluYXRlcy5cbiAgICogQHBhcmFtIHV2IFRleHR1cmUgY29vcmRpbmF0ZXMuXG4gICAqL1xuICBzZXRVVnModXY6IFZlY3RvcjJbXSk6IHZvaWQge1xuICAgIHRoaXMuX3V2ID0gdXY7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRleHR1cmUgY29vcmRpbmF0ZXMuXG4gICAqIEByZXR1cm5zIFRleHR1cmUgY29vcmRpbmF0ZXMuXG4gICAqL1xuICBnZXRVVnMoKTogVmVjdG9yMltdIHtcbiAgICByZXR1cm4gdGhpcy5fdXY7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGluZGljZXMgZm9yIHRoZSBtZXNoLlxuICAgKiBAcGFyYW0gaW5kaWNlcyAtIFRoZSBpbmRpY2VzIGZvciB0aGUgbWVzaC5cbiAgICovXG4gIHNldEluZGljZXMoaW5kaWNlczogVWludDhBcnJheSB8IFVpbnQxNkFycmF5IHwgVWludDMyQXJyYXkpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2FjY2Vzc2libGUpIHtcbiAgICAgIHRocm93ICdOb3QgYWxsb3dlZCB0byBhY2Nlc3MgZGF0YSB3aGlsZSBhY2Nlc3NpYmxlIGlzIGZhbHNlLic7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2luZGljZXMgIT09IGluZGljZXMpIHtcbiAgICAgIHRoaXMuX2luZGljZXMgPSBpbmRpY2VzO1xuICAgICAgaWYgKGluZGljZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHRoaXMuX2luZGljZXNGb3JtYXQgPSBJbmRleEZvcm1hdC5VSW50ODtcbiAgICAgIH0gZWxzZSBpZiAoaW5kaWNlcyBpbnN0YW5jZW9mIFVpbnQxNkFycmF5KSB7XG4gICAgICAgIHRoaXMuX2luZGljZXNGb3JtYXQgPSBJbmRleEZvcm1hdC5VSW50MTY7XG4gICAgICB9IGVsc2UgaWYgKGluZGljZXMgaW5zdGFuY2VvZiBVaW50MzJBcnJheSkge1xuICAgICAgICB0aGlzLl9pbmRpY2VzRm9ybWF0ID0gSW5kZXhGb3JtYXQuVUludDMyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgaW5kaWNlcyBmb3IgdGhlIG1lc2guXG4gICAqL1xuICBnZXRJbmRpY2VzKCk6IFVpbnQ4QXJyYXkgfCBVaW50MTZBcnJheSB8IFVpbnQzMkFycmF5IHtcbiAgICBpZiAoIXRoaXMuX2FjY2Vzc2libGUpIHtcbiAgICAgIHRocm93ICdOb3QgYWxsb3dlZCB0byBhY2Nlc3MgZGF0YSB3aGlsZSBhY2Nlc3NpYmxlIGlzIGZhbHNlLic7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbmRpY2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZCBNZXNoIERhdGEgdG8gdGhlIGdyYXBoaWNzIEFQSS5cbiAgICovXG4gIHVwbG9hZERhdGEobm9Mb25nZXJBY2Nlc3NpYmxlOiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fYWNjZXNzaWJsZSkge1xuICAgICAgdGhyb3cgJ05vdCBhbGxvd2VkIHRvIGFjY2VzcyBkYXRhIHdoaWxlIGFjY2Vzc2libGUgaXMgZmFsc2UuJztcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVWZXJ0ZXhFbGVtZW50cygpO1xuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAvLyBwb3NpdGlvbnPnmoRWZWN0b3Iz55qE5Liq5pWwXG4gICAgY29uc3QgeyBfdmVydGV4Q291bnQ6IHZlcnRleENvdW50IH0gPSB0aGlzO1xuICAgIGNvbnN0IHZlcnRleENvdW50Q2hhbmdlID0gdGhpcy5fbGFzdFVwbG9hZFZlcnRleENvdW50ICE9PSB2ZXJ0ZXhDb3VudDtcblxuICAgIGNvbnN0IHZlcnRleEJ1ZmZlciA9IHRoaXMuX3ZlcnRleEJ1ZmZlckJpbmRpbmdzWzBdPy5fYnVmZmVyO1xuICAgIGlmICh2ZXJ0ZXhDb3VudENoYW5nZSkge1xuICAgICAgLy8g5LiA57uE5pWw5o2u5pyJ5aSa5bCR5Liq5YWD57Sg77yM5q+U5aaC77ya6aG254K5KDMpICsg5rOV5ZCR6YePKDMpICsg57q555CGKDIpID0gOFxuICAgICAgY29uc3QgZWxlbWVudENvdW50ID0gdGhpcy5fZWxlbWVudENvdW50O1xuICAgICAgLy8gRmxvYXQzMkFycmF55pWw57uE6K+l57uZ5aSa5bCR56m66Ze0XG4gICAgICBjb25zdCB2ZXJ0ZXhGbG9hdENvdW50ID0gZWxlbWVudENvdW50ICogdmVydGV4Q291bnQ7XG4gICAgICBjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4RmxvYXRDb3VudCk7XG4gICAgICB0aGlzLl92ZXJ0aWNlc0Zsb2F0MzIgPSB2ZXJ0aWNlcztcbiAgICAgIC8vIOi/meS4quS4nOilv+acieS7gOS5iOeUqOWunuWcqOaQnuS4jeaYjueZve+8n1xuICAgICAgdGhpcy5fdmVydGljZXNVaW50OCA9IG5ldyBVaW50OEFycmF5KHZlcnRpY2VzLmJ1ZmZlcik7XG4gICAgICB0aGlzLl91cGRhdGVWZXJ0aWNlcyh2ZXJ0aWNlcyk7XG5cbiAgICAgIGNvbnN0IG5ld1ZlcnRleEJ1ZmZlciA9IG5ldyBCdWZmZXIoXG4gICAgICAgIGdsLFxuICAgICAgICBCdWZmZXJCaW5kRmxhZy5WZXJ0ZXhCdWZmZXIsXG4gICAgICAgIHZlcnRpY2VzLFxuICAgICAgICBub0xvbmdlckFjY2Vzc2libGUgPyBCdWZmZXJVc2FnZS5TdGF0aWMgOiBCdWZmZXJVc2FnZS5EeW5hbWljLFxuICAgICAgKTtcbiAgICAgIC8vIOWboOS4uuaYr0Zsb2F0MzJBcnJhee+8jDMy5L2N77yMNOS4quWtl+iKgu+8jOaVhXN0cmlkZeS4umVsZW1lbnRDb3VudCAqIDRcbiAgICAgIHRoaXMuX3NldFZlcnRleEJ1ZmZlckJpbmRpbmcoMCwgbmV3IFZlcnRleEJ1ZmZlckJpbmRpbmcobmV3VmVydGV4QnVmZmVyLCBlbGVtZW50Q291bnQgKiA0KSk7XG4gICAgICB0aGlzLl9sYXN0VXBsb2FkVmVydGV4Q291bnQgPSB2ZXJ0ZXhDb3VudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdmVydGljZXMgPSB0aGlzLl92ZXJ0aWNlc0Zsb2F0MzI7XG4gICAgICB0aGlzLl91cGRhdGVWZXJ0aWNlcyh2ZXJ0aWNlcyk7XG4gICAgICB2ZXJ0ZXhCdWZmZXIuc2V0RGF0YSh2ZXJ0aWNlcyk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBfaW5kaWNlcyB9ID0gdGhpcztcbiAgICBjb25zdCBpbmRleEJ1ZmZlciA9IHRoaXMuX2luZGV4QnVmZmVyQmluZGluZz8uX2J1ZmZlcjtcbiAgICBpZiAoX2luZGljZXMpIHtcbiAgICAgIGlmICghaW5kZXhCdWZmZXIgfHwgX2luZGljZXMuYnl0ZUxlbmd0aCAhPSBpbmRleEJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IG5ld0luZGV4QnVmZmVyID0gbmV3IEJ1ZmZlcihnbCwgQnVmZmVyQmluZEZsYWcuSW5kZXhCdWZmZXIsIF9pbmRpY2VzKTtcbiAgICAgICAgdGhpcy5fc2V0SW5kZXhCdWZmZXJCaW5kaW5nKG5ldyBJbmRleEJ1ZmZlckJpbmRpbmcobmV3SW5kZXhCdWZmZXIsIHRoaXMuX2luZGljZXNGb3JtYXQpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGluZGV4QnVmZmVyKSB7XG4gICAgICB0aGlzLl9zZXRJbmRleEJ1ZmZlckJpbmRpbmcobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZlcnRleCBlbGVtZW50cyBhcmUgY29tcG9zZWQgb2YgdmVydGV4IGNvb3JkaW5hdGVzLCB0ZXh0dXJlIGNvb3JkaW5hdGVzLCBub3JtYWwgdmVjdG9ycyBhbmQgb3RoZXIgaW5mb3JtYXRpb24uXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVWZXJ0ZXhFbGVtZW50cygpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGVhclZlcnRleEVsZW1lbnRzKCk7XG4gICAgLy8g5Zug5Li66aG254K55YWD57Sg5piv5b+F6aG75pyJ55qE77yBXG4gICAgdGhpcy5fYWRkVmVydGV4RWxlbWVudChQT1NJVElPTl9WRVJURVhfRUxFTUVOVCk7XG4gICAgLy8gMyAqIDQgPSAxMlxuICAgIGxldCBvZmZzZXQgPSAxMjtcbiAgICBsZXQgZWxlbWVudENvdW50ID0gMztcbiAgICBpZiAodGhpcy5fbm9ybWFscykge1xuICAgICAgdGhpcy5fYWRkVmVydGV4RWxlbWVudChuZXcgVmVydGV4RWxlbWVudCgnTk9STUFMJywgb2Zmc2V0LCBWZXJ0ZXhFbGVtZW50Rm9ybWF0LlZlY3RvcjMsIDApKTtcbiAgICAgIG9mZnNldCArPSAxMjtcbiAgICAgIGVsZW1lbnRDb3VudCArPSAzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdXYpIHtcbiAgICAgIHRoaXMuX2FkZFZlcnRleEVsZW1lbnQobmV3IFZlcnRleEVsZW1lbnQoJ1RFWENPT1JEXzAnLCBvZmZzZXQsIFZlcnRleEVsZW1lbnRGb3JtYXQuVmVjdG9yMiwgMCkpO1xuICAgICAgb2Zmc2V0ICs9IDg7XG4gICAgICBlbGVtZW50Q291bnQgKz0gMjtcbiAgICB9XG4gICAgLy8gISDntKLlvJXkv6Hmga/msqHlpITnkIZcblxuICAgIHRoaXMuX2VsZW1lbnRDb3VudCA9IGVsZW1lbnRDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxsIHRoZSB2b2lkIEZsb2F0MzJBcnJheSB3aXRoIHBvc3Rpb24sIG5vcm1hbCBhbmQgdXZzLlxuICAgKiBAcGFyYW0gdmVydGljZXMgdm9pZCBGbG9hdDMyQXJyYXlcbiAgICovXG4gIHByaXZhdGUgX3VwZGF0ZVZlcnRpY2VzKHZlcnRpY2VzOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICBjb25zdCB7IF9lbGVtZW50Q291bnQsIF92ZXJ0ZXhDb3VudCwgX3Bvc2l0aW9ucywgX25vcm1hbHMsIF91diB9ID0gdGhpcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX3ZlcnRleENvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gX2VsZW1lbnRDb3VudCAqIGk7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IF9wb3NpdGlvbnNbaV07XG4gICAgICB2ZXJ0aWNlc1tzdGFydF0gPSBwb3NpdGlvbi54O1xuICAgICAgdmVydGljZXNbc3RhcnQgKyAxXSA9IHBvc2l0aW9uLnk7XG4gICAgICB2ZXJ0aWNlc1tzdGFydCArIDJdID0gcG9zaXRpb24uejtcbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMztcblxuICAgIGlmIChfbm9ybWFscykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfdmVydGV4Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBzdGFydCA9IF9lbGVtZW50Q291bnQgKiBpICsgb2Zmc2V0O1xuICAgICAgICBjb25zdCBub3JtYWwgPSBfbm9ybWFsc1tpXTtcbiAgICAgICAgaWYgKG5vcm1hbCkge1xuICAgICAgICAgIHZlcnRpY2VzW3N0YXJ0XSA9IG5vcm1hbC54O1xuICAgICAgICAgIHZlcnRpY2VzW3N0YXJ0ICsgMV0gPSBub3JtYWwueTtcbiAgICAgICAgICB2ZXJ0aWNlc1tzdGFydCArIDJdID0gbm9ybWFsLno7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSAzO1xuICAgIH1cblxuICAgIGlmIChfdXYpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX3ZlcnRleENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBfZWxlbWVudENvdW50ICogaSArIG9mZnNldDtcbiAgICAgICAgY29uc3QgdXYgPSBfdXZbaV07XG4gICAgICAgIGlmICh1dikge1xuICAgICAgICAgIHZlcnRpY2VzW3N0YXJ0XSA9IHV2Lng7XG4gICAgICAgICAgdmVydGljZXNbc3RhcnQgKyAxXSA9IHV2Lnk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSAyO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBQT1NJVElPTl9WRVJURVhfRUxFTUVOVCA9IG5ldyBWZXJ0ZXhFbGVtZW50KCdQT1NJVElPTicsIDAsIFZlcnRleEVsZW1lbnRGb3JtYXQuVmVjdG9yMywgMCk7XG4iLCJpbXBvcnQgeyBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aCc7XG5pbXBvcnQgeyBNb2RlbE1lc2ggfSBmcm9tICcuL01vZGVsTWVzaCc7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9FbmdpbmUnO1xuXG4vKipcbiAqIENyZWF0ZSBhIE1lc2ggb2YgU2ltcGxlIEdlb21ldHJ5LlxuICovXG5leHBvcnQgY2xhc3MgUHJpbWl0aXZlTWVzaCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjdWJvaWQgbWVzaC5cbiAgICogQHBhcmFtIHdpZHRoIC0gQ3Vib2lkIHdpZHRoXG4gICAqIEBwYXJhbSBoZWlnaHQgLSBDdWJvaWQgaGVpZ2h0XG4gICAqIEBwYXJhbSBkZXB0aCAtIEN1Ym9pZCBkZXB0aFxuICAgKiBAcmV0dXJucyBDdWJvaWQgbW9kZWwgbWVzaFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUN1Ym9pZChlbmdpbmU6IEVuZ2luZSwgd2lkdGg6IG51bWJlciA9IDEsIGhlaWdodDogbnVtYmVyID0gMSwgZGVwdGg6IG51bWJlciA9IDEpOiBNb2RlbE1lc2gge1xuICAgIGNvbnN0IGdsID0gZW5naW5lLmdsO1xuICAgIGNvbnN0IG1lc2ggPSBuZXcgTW9kZWxNZXNoKGdsLCAnQ3Vib2lkJyk7XG5cbiAgICBjb25zdCBoYWxmV2lkdGg6IG51bWJlciA9IHdpZHRoIC8gMjtcbiAgICBjb25zdCBoYWxmSGVpZ2h0OiBudW1iZXIgPSBoZWlnaHQgLyAyO1xuICAgIGNvbnN0IGhhbGZEZXB0aDogbnVtYmVyID0gZGVwdGggLyAyO1xuXG4gICAgY29uc3QgcG9zaXRpb25zOiBWZWN0b3IzW10gPSBuZXcgQXJyYXkoMjQpO1xuICAgIGNvbnN0IG5vcm1hbHM6IFZlY3RvcjNbXSA9IG5ldyBBcnJheSgyNCk7XG4gICAgY29uc3QgdXZzOiBWZWN0b3IyW10gPSBuZXcgQXJyYXkoMjQpO1xuXG4gICAgLy8gVXBcbiAgICBwb3NpdGlvbnNbMF0gPSBuZXcgVmVjdG9yMygtaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbMV0gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIGhhbGZIZWlnaHQsIC1oYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1syXSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgaGFsZkhlaWdodCwgaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbM10gPSBuZXcgVmVjdG9yMygtaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCBoYWxmRGVwdGgpO1xuICAgIG5vcm1hbHNbMF0gPSBuZXcgVmVjdG9yMygwLCAxLCAwKTtcbiAgICBub3JtYWxzWzFdID0gbmV3IFZlY3RvcjMoMCwgMSwgMCk7XG4gICAgbm9ybWFsc1syXSA9IG5ldyBWZWN0b3IzKDAsIDEsIDApO1xuICAgIG5vcm1hbHNbM10gPSBuZXcgVmVjdG9yMygwLCAxLCAwKTtcbiAgICB1dnNbMF0gPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICB1dnNbMV0gPSBuZXcgVmVjdG9yMigxLCAwKTtcbiAgICB1dnNbMl0gPSBuZXcgVmVjdG9yMigxLCAxKTtcbiAgICB1dnNbM10gPSBuZXcgVmVjdG9yMigwLCAxKTtcbiAgICAvLyBEb3duXG4gICAgcG9zaXRpb25zWzRdID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIC1oYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1s1XSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIC1oYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1s2XSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzddID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgbm9ybWFsc1s0XSA9IG5ldyBWZWN0b3IzKDAsIC0xLCAwKTtcbiAgICBub3JtYWxzWzVdID0gbmV3IFZlY3RvcjMoMCwgLTEsIDApO1xuICAgIG5vcm1hbHNbNl0gPSBuZXcgVmVjdG9yMygwLCAtMSwgMCk7XG4gICAgbm9ybWFsc1s3XSA9IG5ldyBWZWN0b3IzKDAsIC0xLCAwKTtcbiAgICB1dnNbNF0gPSBuZXcgVmVjdG9yMigwLCAxKTtcbiAgICB1dnNbNV0gPSBuZXcgVmVjdG9yMigxLCAxKTtcbiAgICB1dnNbNl0gPSBuZXcgVmVjdG9yMigxLCAwKTtcbiAgICB1dnNbN10gPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICAvLyBMZWZ0XG4gICAgcG9zaXRpb25zWzhdID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgaGFsZkhlaWdodCwgLWhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzldID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgaGFsZkhlaWdodCwgaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbMTBdID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzExXSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBub3JtYWxzWzhdID0gbmV3IFZlY3RvcjMoLTEsIDAsIDApO1xuICAgIG5vcm1hbHNbOV0gPSBuZXcgVmVjdG9yMygtMSwgMCwgMCk7XG4gICAgbm9ybWFsc1sxMF0gPSBuZXcgVmVjdG9yMygtMSwgMCwgMCk7XG4gICAgbm9ybWFsc1sxMV0gPSBuZXcgVmVjdG9yMygtMSwgMCwgMCk7XG4gICAgdXZzWzhdID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgdXZzWzldID0gbmV3IFZlY3RvcjIoMSwgMCk7XG4gICAgdXZzWzEwXSA9IG5ldyBWZWN0b3IyKDEsIDEpO1xuICAgIHV2c1sxMV0gPSBuZXcgVmVjdG9yMigwLCAxKTtcbiAgICAvLyBSaWdodFxuICAgIHBvc2l0aW9uc1sxMl0gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIGhhbGZIZWlnaHQsIC1oYWxmRGVwdGgpO1xuICAgIHBvc2l0aW9uc1sxM10gPSBuZXcgVmVjdG9yMyhoYWxmV2lkdGgsIGhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzE0XSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzE1XSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIC1oYWxmRGVwdGgpO1xuICAgIG5vcm1hbHNbMTJdID0gbmV3IFZlY3RvcjMoMSwgMCwgMCk7XG4gICAgbm9ybWFsc1sxM10gPSBuZXcgVmVjdG9yMygxLCAwLCAwKTtcbiAgICBub3JtYWxzWzE0XSA9IG5ldyBWZWN0b3IzKDEsIDAsIDApO1xuICAgIG5vcm1hbHNbMTVdID0gbmV3IFZlY3RvcjMoMSwgMCwgMCk7XG4gICAgdXZzWzEyXSA9IG5ldyBWZWN0b3IyKDEsIDApO1xuICAgIHV2c1sxM10gPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICB1dnNbMTRdID0gbmV3IFZlY3RvcjIoMCwgMSk7XG4gICAgdXZzWzE1XSA9IG5ldyBWZWN0b3IyKDEsIDEpO1xuICAgIC8vIEZyb250XG4gICAgcG9zaXRpb25zWzE2XSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIGhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzE3XSA9IG5ldyBWZWN0b3IzKGhhbGZXaWR0aCwgaGFsZkhlaWdodCwgaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbMThdID0gbmV3IFZlY3RvcjMoaGFsZldpZHRoLCAtaGFsZkhlaWdodCwgaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbMTldID0gbmV3IFZlY3RvcjMoLWhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsIGhhbGZEZXB0aCk7XG4gICAgbm9ybWFsc1sxNl0gPSBuZXcgVmVjdG9yMygwLCAwLCAxKTtcbiAgICBub3JtYWxzWzE3XSA9IG5ldyBWZWN0b3IzKDAsIDAsIDEpO1xuICAgIG5vcm1hbHNbMThdID0gbmV3IFZlY3RvcjMoMCwgMCwgMSk7XG4gICAgbm9ybWFsc1sxOV0gPSBuZXcgVmVjdG9yMygwLCAwLCAxKTtcbiAgICB1dnNbMTZdID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgdXZzWzE3XSA9IG5ldyBWZWN0b3IyKDEsIDApO1xuICAgIHV2c1sxOF0gPSBuZXcgVmVjdG9yMigxLCAxKTtcbiAgICB1dnNbMTldID0gbmV3IFZlY3RvcjIoMCwgMSk7XG4gICAgLy8gQmFja1xuICAgIHBvc2l0aW9uc1syMF0gPSBuZXcgVmVjdG9yMygtaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbMjFdID0gbmV3IFZlY3RvcjMoaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBwb3NpdGlvbnNbMjJdID0gbmV3IFZlY3RvcjMoaGFsZldpZHRoLCAtaGFsZkhlaWdodCwgLWhhbGZEZXB0aCk7XG4gICAgcG9zaXRpb25zWzIzXSA9IG5ldyBWZWN0b3IzKC1oYWxmV2lkdGgsIC1oYWxmSGVpZ2h0LCAtaGFsZkRlcHRoKTtcbiAgICBub3JtYWxzWzIwXSA9IG5ldyBWZWN0b3IzKDAsIDAsIC0xKTtcbiAgICBub3JtYWxzWzIxXSA9IG5ldyBWZWN0b3IzKDAsIDAsIC0xKTtcbiAgICBub3JtYWxzWzIyXSA9IG5ldyBWZWN0b3IzKDAsIDAsIC0xKTtcbiAgICBub3JtYWxzWzIzXSA9IG5ldyBWZWN0b3IzKDAsIDAsIC0xKTtcbiAgICB1dnNbMjBdID0gbmV3IFZlY3RvcjIoMSwgMCk7XG4gICAgdXZzWzIxXSA9IG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIHV2c1syMl0gPSBuZXcgVmVjdG9yMigwLCAxKTtcbiAgICB1dnNbMjNdID0gbmV3IFZlY3RvcjIoMSwgMSk7XG5cbiAgICBjb25zdCBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KDM2KTtcblxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIC8vIFVwXG4gICAgaW5kaWNlc1swXSA9IDAsIGluZGljZXNbMV0gPSAyLCBpbmRpY2VzWzJdID0gMSwgaW5kaWNlc1szXSA9IDIsIGluZGljZXNbNF0gPSAwLCBpbmRpY2VzWzVdID0gMyxcbiAgICAvLyBEb3duXG4gICAgaW5kaWNlc1s2XSA9IDQsIGluZGljZXNbN10gPSA2LCBpbmRpY2VzWzhdID0gNywgaW5kaWNlc1s5XSA9IDYsIGluZGljZXNbMTBdID0gNCwgaW5kaWNlc1sxMV0gPSA1LFxuICAgIC8vIExlZnRcbiAgICBpbmRpY2VzWzEyXSA9IDgsIGluZGljZXNbMTNdID0gMTAsIGluZGljZXNbMTRdID0gOSwgaW5kaWNlc1sxNV0gPSAxMCwgaW5kaWNlc1sxNl0gPSA4LCBpbmRpY2VzWzE3XSA9IDExLFxuICAgIC8vIFJpZ2h0XG4gICAgaW5kaWNlc1sxOF0gPSAxMiwgaW5kaWNlc1sxOV0gPSAxNCwgaW5kaWNlc1syMF0gPSAxNSwgaW5kaWNlc1syMV0gPSAxNCwgaW5kaWNlc1syMl0gPSAxMiwgaW5kaWNlc1syM10gPSAxMyxcbiAgICAvLyBGcm9udFxuICAgIGluZGljZXNbMjRdID0gMTYsIGluZGljZXNbMjVdID0gMTgsIGluZGljZXNbMjZdID0gMTcsIGluZGljZXNbMjddID0gMTgsIGluZGljZXNbMjhdID0gMTYsIGluZGljZXNbMjldID0gMTksXG4gICAgLy8gQmFja1xuICAgIGluZGljZXNbMzBdID0gMjAsIGluZGljZXNbMzFdID0gMjIsIGluZGljZXNbMzJdID0gMjMsIGluZGljZXNbMzNdID0gMjIsIGluZGljZXNbMzRdID0gMjAsIGluZGljZXNbMzVdID0gMjE7XG5cbiAgICBQcmltaXRpdmVNZXNoLl9pbml0aWFsaXplKG1lc2gsIHBvc2l0aW9ucywgbm9ybWFscywgdXZzLCBpbmRpY2VzKTtcbiAgICByZXR1cm4gbWVzaDtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZW5naW5lIOW8leaTjuWunuS+i1xuICAgKiBAcGFyYW0gbGV2ZWwg5q2j5Zub6Z2i5L2T6YCS5b2S5YiH5YiG562J57qnXG4gICAqIEByZXR1cm5zIOeQg+e9keagvOWunuS+i1xuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVNwaGVyZUJ5U2xpY2VUZXRyYWhlZHJvbihlbmdpbmU6IEVuZ2luZSwgbGV2ZWwgPSAwKTogTW9kZWxNZXNoIHtcbiAgICBjb25zdCBnbCA9IGVuZ2luZS5nbDtcbiAgICBjb25zdCBtZXNoID0gbmV3IE1vZGVsTWVzaChnbCwgJ1NwaGVyZScpO1xuXG4gICAgY29uc3QgbmVnYXRpdmVSb290VHdvT3ZlclRocmVlID0gLU1hdGguc3FydCgyLjApIC8gMy4wO1xuICAgIGNvbnN0IG5lZ2F0aXZlT25lVGhpcmQgPSAtMS4wIC8gMy4wO1xuICAgIGNvbnN0IHJvb3RTaXhPdmVyVGhyZWUgPSBNYXRoLnNxcnQoNi4wKSAvIDMuMDtcblxuICAgIGNvbnN0IHBvc2l0aW9uczogVmVjdG9yM1tdID0gW107XG4gICAgcG9zaXRpb25zLnB1c2gobmV3IFZlY3RvcjMoMCwgMCwgMSkpO1xuICAgIHBvc2l0aW9ucy5wdXNoKG5ldyBWZWN0b3IzKDAsICgyICogTWF0aC5zcXJ0KDIpKSAvIDMsIG5lZ2F0aXZlT25lVGhpcmQpKTtcbiAgICBwb3NpdGlvbnMucHVzaChuZXcgVmVjdG9yMygtcm9vdFNpeE92ZXJUaHJlZSwgbmVnYXRpdmVSb290VHdvT3ZlclRocmVlLCBuZWdhdGl2ZU9uZVRoaXJkKSk7XG4gICAgcG9zaXRpb25zLnB1c2gobmV3IFZlY3RvcjMocm9vdFNpeE92ZXJUaHJlZSwgbmVnYXRpdmVSb290VHdvT3ZlclRocmVlLCBuZWdhdGl2ZU9uZVRoaXJkKSk7XG5cbiAgICBsZXQgaW5kaWNlczogYW55ID0gW107XG4gICAgUHJpbWl0aXZlTWVzaC5zdWJkaXZpZGUocG9zaXRpb25zLCBpbmRpY2VzLCBbMCwgMSwgMl0sIGxldmVsKTtcbiAgICBQcmltaXRpdmVNZXNoLnN1YmRpdmlkZShwb3NpdGlvbnMsIGluZGljZXMsIFswLCAyLCAzXSwgbGV2ZWwpO1xuICAgIFByaW1pdGl2ZU1lc2guc3ViZGl2aWRlKHBvc2l0aW9ucywgaW5kaWNlcywgWzAsIDMsIDFdLCBsZXZlbCk7XG4gICAgUHJpbWl0aXZlTWVzaC5zdWJkaXZpZGUocG9zaXRpb25zLCBpbmRpY2VzLCBbMSwgMywgMl0sIGxldmVsKTtcblxuICAgIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoaW5kaWNlcyk7XG5cbiAgICBQcmltaXRpdmVNZXNoLl9pbml0aWFsaXplKG1lc2gsIHBvc2l0aW9ucywgbnVsbCwgbnVsbCwgaW5kaWNlcyk7XG4gICAgcmV0dXJuIG1lc2g7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgc3BoZXJlIG1lc2guXG4gICAqIEBwYXJhbSBlbmdpbmUgLSBFbmdpbmVcbiAgICogQHBhcmFtIHJhZGl1cyAtIFNwaGVyZSByYWRpdXNcbiAgICogQHBhcmFtIHNlZ21lbnRzIC0gTnVtYmVyIG9mIHNlZ21lbnRzXG4gICAqIEByZXR1cm5zIFNwaGVyZSBtb2RlbCBtZXNoXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlU3BoZXJlQnlQYXJhbUVxdWF0aW9uKGVuZ2luZTogRW5naW5lLCByYWRpdXM6IG51bWJlciA9IDAuNSwgc2VnbWVudHM6IG51bWJlciA9IDE4KTogTW9kZWxNZXNoIHtcbiAgICBjb25zdCBtZXNoID0gbmV3IE1vZGVsTWVzaChlbmdpbmUuZ2wpO1xuICAgIHNlZ21lbnRzID0gTWF0aC5tYXgoMiwgTWF0aC5mbG9vcihzZWdtZW50cykpO1xuXG4gICAgY29uc3QgY291bnQgPSBzZWdtZW50cyArIDE7XG4gICAgY29uc3QgdmVydGV4Q291bnQgPSBjb3VudCAqIGNvdW50O1xuICAgIGNvbnN0IHJlY3RhbmdsZUNvdW50ID0gc2VnbWVudHMgKiBzZWdtZW50cztcbiAgICBjb25zdCBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KHJlY3RhbmdsZUNvdW50ICogNik7XG4gICAgY29uc3QgdGhldGFSYW5nZSA9IE1hdGguUEk7XG4gICAgY29uc3QgYWxwaGFSYW5nZSA9IHRoZXRhUmFuZ2UgKiAyO1xuICAgIGNvbnN0IGNvdW50UmVjaXByb2NhbCA9IDEuMCAvIGNvdW50O1xuICAgIGNvbnN0IHNlZ21lbnRzUmVjaXByb2NhbCA9IDEuMCAvIHNlZ21lbnRzO1xuXG4gICAgY29uc3QgcG9zaXRpb25zOiBWZWN0b3IzW10gPSBuZXcgQXJyYXkodmVydGV4Q291bnQpO1xuICAgIGNvbnN0IG5vcm1hbHM6IFZlY3RvcjNbXSA9IG5ldyBBcnJheSh2ZXJ0ZXhDb3VudCk7XG4gICAgY29uc3QgdXZzOiBWZWN0b3IyW10gPSBuZXcgQXJyYXkodmVydGV4Q291bnQpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCB4ID0gaSAlIGNvdW50O1xuICAgICAgY29uc3QgeSA9IChpICogY291bnRSZWNpcHJvY2FsKSB8IDA7XG4gICAgICBjb25zdCB1ID0geCAqIHNlZ21lbnRzUmVjaXByb2NhbDtcbiAgICAgIGNvbnN0IHYgPSB5ICogc2VnbWVudHNSZWNpcHJvY2FsO1xuICAgICAgY29uc3QgYWxwaGFEZWx0YSA9IHUgKiBhbHBoYVJhbmdlO1xuICAgICAgY29uc3QgdGhldGFEZWx0YSA9IHYgKiB0aGV0YVJhbmdlO1xuICAgICAgY29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbih0aGV0YURlbHRhKTtcblxuICAgICAgbGV0IHBvc1ggPSAtcmFkaXVzICogTWF0aC5jb3MoYWxwaGFEZWx0YSkgKiBzaW5UaGV0YTtcbiAgICAgIGxldCBwb3NZID0gcmFkaXVzICogTWF0aC5jb3ModGhldGFEZWx0YSk7XG4gICAgICBsZXQgcG9zWiA9IHJhZGl1cyAqIE1hdGguc2luKGFscGhhRGVsdGEpICogc2luVGhldGE7XG5cbiAgICAgIC8vIFBvc2l0aW9uXG4gICAgICBwb3NpdGlvbnNbaV0gPSBuZXcgVmVjdG9yMyhwb3NYLCBwb3NZLCBwb3NaKTtcbiAgICAgIC8vIE5vcm1hbFxuICAgICAgbm9ybWFsc1tpXSA9IG5ldyBWZWN0b3IzKHBvc1gsIHBvc1ksIHBvc1opO1xuICAgICAgLy8gVGV4Y29vcmRcbiAgICAgIHV2c1tpXSA9IG5ldyBWZWN0b3IyKHUsIHYpO1xuICAgIH1cblxuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjdGFuZ2xlQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgeCA9IGkgJSBzZWdtZW50cztcbiAgICAgIGNvbnN0IHkgPSAoaSAqIHNlZ21lbnRzUmVjaXByb2NhbCkgfCAwO1xuXG4gICAgICBjb25zdCBhID0geSAqIGNvdW50ICsgeDtcbiAgICAgIGNvbnN0IGIgPSBhICsgMTtcbiAgICAgIGNvbnN0IGMgPSBhICsgY291bnQ7XG4gICAgICBjb25zdCBkID0gYyArIDE7XG5cbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYjtcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYTtcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gZDtcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYTtcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gYztcbiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gZDtcbiAgICB9XG5cbiAgICBQcmltaXRpdmVNZXNoLl9pbml0aWFsaXplKG1lc2gsIHBvc2l0aW9ucywgbm9ybWFscywgdXZzLCBpbmRpY2VzKTtcbiAgICByZXR1cm4gbWVzaDtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZW5naW5lIC0gRW5naW5lXG4gICAqIEBwYXJhbSB3aWR0aCAtIFBsYW5lIHdpZHRoXG4gICAqIEBwYXJhbSBoZWlnaHQgLSBQbGFuZSBoZWlnaHRcbiAgICogQHBhcmFtIGhvcml6b250YWxTZWdtZW50cyAtIFBsYW5lIGhvcml6b250YWwgc2VnbWVudHNcbiAgICogQHBhcmFtIHZlcnRpY2FsU2VnbWVudHMgLSBQbGFuZSB2ZXJ0aWNhbCBzZWdtZW50c1xuICAgKiBAcGFyYW0gbm9Mb25nZXJBY2Nlc3NpYmxlIC0gQWNjZXNzaWJsZVxuICAgKiBAcmV0dXJucyBQbGFuZSBtZXNoXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlUGxhbmUoXG4gICAgZW5naW5lOiBFbmdpbmUsXG4gICAgd2lkdGg6IG51bWJlciA9IDEsXG4gICAgaGVpZ2h0OiBudW1iZXIgPSAxLFxuICAgIGhvcml6b250YWxTZWdtZW50czogbnVtYmVyID0gMSxcbiAgICB2ZXJ0aWNhbFNlZ21lbnRzOiBudW1iZXIgPSAxLFxuICAgIG5vTG9uZ2VyQWNjZXNzaWJsZTogYm9vbGVhbiA9IHRydWUsXG4gICkge1xuICAgIC8vIFRPRE86IOebtOaOpeS8oOWFpeW8leaTju+8jOS4jeaPkOWOu2ds5LqGXG4gICAgY29uc3QgbWVzaCA9IG5ldyBNb2RlbE1lc2goZW5naW5lLmdsKTtcbiAgICBob3Jpem9udGFsU2VnbWVudHMgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKGhvcml6b250YWxTZWdtZW50cykpO1xuICAgIHZlcnRpY2FsU2VnbWVudHMgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHZlcnRpY2FsU2VnbWVudHMpKTtcblxuICAgIGNvbnN0IGhvcml6b250YWxDb3VudCA9IGhvcml6b250YWxTZWdtZW50cyArIDE7XG4gICAgY29uc3QgdmVydGljYWxDb3VudCA9IHZlcnRpY2FsU2VnbWVudHMgKyAxO1xuICAgIGNvbnN0IGhhbGZXaWR0aCA9IHdpZHRoIC8gMjtcbiAgICBjb25zdCBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcbiAgICBjb25zdCBncmlkV2lkdGggPSB3aWR0aCAvIGhvcml6b250YWxTZWdtZW50cztcbiAgICBjb25zdCBncmlkSGVpZ2h0ID0gaGVpZ2h0IC8gdmVydGljYWxTZWdtZW50cztcbiAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IGhvcml6b250YWxDb3VudCAqIHZlcnRpY2FsQ291bnQ7XG4gICAgY29uc3QgcmVjdGFuZ2xlQ291bnQgPSB2ZXJ0aWNhbFNlZ21lbnRzICogaG9yaXpvbnRhbFNlZ21lbnRzO1xuICAgIGNvbnN0IGluZGljZXMgPSBQcmltaXRpdmVNZXNoLl9nZW5lcmF0ZUluZGljZXMoZW5naW5lLCB2ZXJ0ZXhDb3VudCwgcmVjdGFuZ2xlQ291bnQgKiA2KTtcbiAgICBjb25zdCBob3Jpem9udGFsQ291bnRSZWNpcHJvY2FsID0gMS4wIC8gaG9yaXpvbnRhbENvdW50O1xuICAgIGNvbnN0IGhvcml6b250YWxTZWdtZW50c1JlY2lwcm9jYWwgPSAxLjAgLyBob3Jpem9udGFsU2VnbWVudHM7XG4gICAgY29uc3QgdmVydGljYWxTZWdtZW50c1JlY2lwcm9jYWwgPSAxLjAgLyB2ZXJ0aWNhbFNlZ21lbnRzO1xuXG4gICAgY29uc3QgcG9zaXRpb25zOiBWZWN0b3IzW10gPSBuZXcgQXJyYXkodmVydGV4Q291bnQpO1xuICAgIGNvbnN0IG5vcm1hbHM6IFZlY3RvcjNbXSA9IG5ldyBBcnJheSh2ZXJ0ZXhDb3VudCk7XG4gICAgY29uc3QgdXZzOiBWZWN0b3IyW10gPSBuZXcgQXJyYXkodmVydGV4Q291bnQpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCB4ID0gaSAlIGhvcml6b250YWxDb3VudDtcbiAgICAgIGNvbnN0IHogPSAoaSAqIGhvcml6b250YWxDb3VudFJlY2lwcm9jYWwpIHwgMDtcblxuICAgICAgLy8gUG9zaXRpb25cbiAgICAgIHBvc2l0aW9uc1tpXSA9IG5ldyBWZWN0b3IzKHggKiBncmlkV2lkdGggLSBoYWxmV2lkdGgsIDAsIHogKiBncmlkSGVpZ2h0IC0gaGFsZkhlaWdodCk7XG4gICAgICAvLyBOb3JtYWxcbiAgICAgIG5vcm1hbHNbaV0gPSBuZXcgVmVjdG9yMygwLCAxLCAwKTtcbiAgICAgIC8vIFRleGNvb3JkXG4gICAgICB1dnNbaV0gPSBuZXcgVmVjdG9yMih4ICogaG9yaXpvbnRhbFNlZ21lbnRzUmVjaXByb2NhbCwgeiAqIHZlcnRpY2FsU2VnbWVudHNSZWNpcHJvY2FsKTtcbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlY3RhbmdsZUNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHggPSBpICUgaG9yaXpvbnRhbFNlZ21lbnRzO1xuICAgICAgY29uc3QgeSA9IChpICogaG9yaXpvbnRhbFNlZ21lbnRzUmVjaXByb2NhbCkgfCAwO1xuXG4gICAgICBjb25zdCBhID0geSAqIGhvcml6b250YWxDb3VudCArIHg7XG4gICAgICBjb25zdCBiID0gYSArIDE7XG4gICAgICBjb25zdCBjID0gYSArIGhvcml6b250YWxDb3VudDtcbiAgICAgIGNvbnN0IGQgPSBjICsgMTtcblxuICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBhO1xuICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBjO1xuICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBiO1xuICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBjO1xuICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBkO1xuICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBiO1xuICAgIH1cblxuICAgIC8vIFRPRE86IOWKoOS4iuaYr+WQpuWPr+iOt+WPluWPguaVsO+8gVxuICAgIFByaW1pdGl2ZU1lc2guX2luaXRpYWxpemUobWVzaCwgcG9zaXRpb25zLCBub3JtYWxzLCB1dnMsIGluZGljZXMpO1xuICAgIHJldHVybiBtZXNoO1xuICB9XG5cbiAgc3RhdGljIHN1YmRpdmlkZShwb3NpdGlvbnM6IFZlY3RvcjNbXSwgaW5kaWNlczogbnVtYmVyW10sIHRyaWFuZ2xlOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGxldmVsID0gMCkge1xuICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgIGxldCB0bXAxID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgIGxldCB0bXAyID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgIGxldCB0bXAzID0gbmV3IFZlY3RvcjMoKTtcblxuICAgICAgVmVjdG9yMy5hZGQocG9zaXRpb25zW3RyaWFuZ2xlWzBdXSwgcG9zaXRpb25zW3RyaWFuZ2xlWzFdXSwgdG1wMSk7XG4gICAgICBWZWN0b3IzLnNjYWxlKHRtcDEsIDAuNSwgdG1wMSk7XG4gICAgICBWZWN0b3IzLmFkZChwb3NpdGlvbnNbdHJpYW5nbGVbMV1dLCBwb3NpdGlvbnNbdHJpYW5nbGVbMl1dLCB0bXAyKTtcbiAgICAgIFZlY3RvcjMuc2NhbGUodG1wMiwgMC41LCB0bXAyKTtcbiAgICAgIFZlY3RvcjMuYWRkKHBvc2l0aW9uc1t0cmlhbmdsZVsyXV0sIHBvc2l0aW9uc1t0cmlhbmdsZVswXV0sIHRtcDMpO1xuICAgICAgVmVjdG9yMy5zY2FsZSh0bXAzLCAwLjUsIHRtcDMpO1xuXG4gICAgICBwb3NpdGlvbnMucHVzaCh0bXAxLm5vcm1hbGl6ZSgpLCB0bXAyLm5vcm1hbGl6ZSgpLCB0bXAzLm5vcm1hbGl6ZSgpKTtcblxuICAgICAgbGV0IGkwMSA9IHBvc2l0aW9ucy5sZW5ndGggLSAzO1xuICAgICAgbGV0IGkxMiA9IHBvc2l0aW9ucy5sZW5ndGggLSAyO1xuICAgICAgbGV0IGkyMCA9IHBvc2l0aW9ucy5sZW5ndGggLSAxO1xuXG4gICAgICBjb25zdCBuZXdMZXZlbCA9IGxldmVsIC0gMTtcbiAgICAgIFByaW1pdGl2ZU1lc2guc3ViZGl2aWRlKHBvc2l0aW9ucywgaW5kaWNlcywgW3RyaWFuZ2xlWzBdLCBpMDEsIGkyMF0sIG5ld0xldmVsKTtcbiAgICAgIFByaW1pdGl2ZU1lc2guc3ViZGl2aWRlKHBvc2l0aW9ucywgaW5kaWNlcywgW2kwMSwgdHJpYW5nbGVbMV0sIGkxMl0sIG5ld0xldmVsKTtcbiAgICAgIFByaW1pdGl2ZU1lc2guc3ViZGl2aWRlKHBvc2l0aW9ucywgaW5kaWNlcywgW2kwMSwgaTEyLCBpMjBdLCBuZXdMZXZlbCk7XG4gICAgICBQcmltaXRpdmVNZXNoLnN1YmRpdmlkZShwb3NpdGlvbnMsIGluZGljZXMsIFtpMjAsIGkxMiwgdHJpYW5nbGVbMl1dLCBuZXdMZXZlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGljZXMucHVzaCguLi50cmlhbmdsZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFjY29yZGluZyBhIHNlcmllcyBvZiBkYXRhIHRpIGluaXRpYWxpemUgbWVzaFxuICAgKiBAcGFyYW0gbWVzaCBvYmplY3QncyBtZXNoXG4gICAqIEBwYXJhbSBwb3NpdGlvbnMgb2JqZWN0J3MgcG9zaXRpb24gYXJyYXlcbiAgICogQHBhcmFtIG5vcm1hbHMgb2JqZWN0J3Mgbm9ybWFscyBhcnJheVxuICAgKiBAcGFyYW0gdXYgb2JqZWN0J3MgdXYgYXJyYXlcbiAgICogQHBhcmFtIGluZGljZXMgb2JqZWN0J3MgaW5kaWNlcyBhcnJheVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX2luaXRpYWxpemUoXG4gICAgbWVzaDogTW9kZWxNZXNoLFxuICAgIHBvc2l0aW9uczogVmVjdG9yM1tdLFxuICAgIG5vcm1hbHM6IFZlY3RvcjNbXSB8IG51bGwsXG4gICAgdXZzOiBWZWN0b3IyW10gfCBudWxsLFxuICAgIGluZGljZXM6IFVpbnQxNkFycmF5IHwgVWludDMyQXJyYXksXG4gICkge1xuICAgIG1lc2guc2V0UG9zaXRpb25zKHBvc2l0aW9ucyk7XG4gICAgbWVzaC5zZXRJbmRpY2VzKGluZGljZXMpO1xuICAgIC8vIOWboOS4uuS4jeS4gOWumuimgeaYvuekuuaMh+WumuazleWQkemHj+WSjOe6ueeQhuWdkOagh1xuICAgIGlmIChub3JtYWxzKSBtZXNoLnNldE5vcm1hbHMobm9ybWFscyk7XG4gICAgaWYgKHV2cykgbWVzaC5zZXRVVnModXZzKTtcblxuICAgIG1lc2gudXBsb2FkRGF0YSgpO1xuICAgIG1lc2guYWRkU3ViTWVzaCgwLCBpbmRpY2VzLmxlbmd0aCk7XG4gIH1cblxuICAvLyBUT0RPOiDlr7npobbngrnmlbDph4/mnInopoHmsYLvvIzogIzkuJTov5jmsqHmnInlhbzlrrlXZWJHTDIhXG4gIHByaXZhdGUgc3RhdGljIF9nZW5lcmF0ZUluZGljZXMoZW5naW5lOiBFbmdpbmUsIHZlcnRleENvdW50OiBudW1iZXIsIGluZGV4Q291bnQ6IG51bWJlcik6IFVpbnQxNkFycmF5IHwgVWludDMyQXJyYXkge1xuICAgIGxldCBpbmRpY2VzOiBVaW50MTZBcnJheSB8IFVpbnQzMkFycmF5ID0gbnVsbDtcbiAgICBpZiAodmVydGV4Q291bnQgPiA2NTUzNSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1RoZSB2ZXJ0ZXggY291bnQgaXMgb3ZlciBsaW1pdC4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheShpbmRleENvdW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGljZXM7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBlYXJ0aFVybCA9IGBodHRwOi8vMTIxLjE5OS4xNjAuMjAyL2ltYWdlcy9lYXJ0aC5qcGdgO1xuIiwiaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi9jb3JlJztcblxuZXhwb3J0IGNvbnN0IHNreVN0YXJDb25maWcgPSBbXG4gIHtcbiAgICB0YXJnZXQ6IERhdGFUeXBlLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCxcbiAgICB1cmw6ICdodHRwOi8vMTIxLjE5OS4xNjAuMjAyL2ltYWdlcy9za3lib3gvdHljaG8ydDNfODBfbXguanBnJyxcbiAgfSxcbiAge1xuICAgIHRhcmdldDogRGF0YVR5cGUuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YLFxuICAgIHVybDogJ2h0dHA6Ly8xMjEuMTk5LjE2MC4yMDIvaW1hZ2VzL3NreWJveC90eWNobzJ0M184MF9weC5qcGcnLFxuICB9LFxuICB7XG4gICAgdGFyZ2V0OiBEYXRhVHlwZS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ksXG4gICAgdXJsOiAnaHR0cDovLzEyMS4xOTkuMTYwLjIwMi9pbWFnZXMvc2t5Ym94L3R5Y2hvMnQzXzgwX3B5LmpwZycsXG4gIH0sXG4gIHtcbiAgICB0YXJnZXQ6IERhdGFUeXBlLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWSxcbiAgICB1cmw6ICdodHRwOi8vMTIxLjE5OS4xNjAuMjAyL2ltYWdlcy9za3lib3gvdHljaG8ydDNfODBfbXkuanBnJyxcbiAgfSxcbiAge1xuICAgIHRhcmdldDogRGF0YVR5cGUuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aLFxuICAgIHVybDogJ2h0dHA6Ly8xMjEuMTk5LjE2MC4yMDIvaW1hZ2VzL3NreWJveC90eWNobzJ0M184MF9tei5qcGcnLFxuICB9LFxuICB7XG4gICAgdGFyZ2V0OiBEYXRhVHlwZS5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1osXG4gICAgdXJsOiAnaHR0cDovLzEyMS4xOTkuMTYwLjIwMi9pbWFnZXMvc2t5Ym94L3R5Y2hvMnQzXzgwX3B6LmpwZycsXG4gIH0sXG5dO1xuIiwiaW1wb3J0IHsgQ29sb3IsIFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoJztcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4vRW5naW5lJztcbmltcG9ydCB7IEJhY2tncm91bmRNb2RlIH0gZnJvbSAnLi9lbnVtcy9CYWNrZ3JvdW5kTW9kZSc7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSAnLi9ncmFwaGljJztcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9tYXRlcmlhbCc7XG5pbXBvcnQgeyBTa3lCb3hNYXRlcmlhbCB9IGZyb20gJy4vbWF0ZXJpYWwvU2t5Qm94TWF0ZXJpYWwnO1xuaW1wb3J0IHsgTW9kZWxNZXNoIH0gZnJvbSAnLi9tZXNoJztcbmltcG9ydCB7IHNreVN0YXJDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuXG4vKipcbiAqIEJhY2tncm91bmQgb2YgdGhlIHNjZW5lLlxuICovXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZCB7XG4gIC8qKlxuICAgKiBUaGUgcGF0dGVybiBvZiB0aGUgYmFja2dyb3VuZCwgd2hpY2ggbWF5IGJlIGEgc2luZ2xlIGNvbG9yLCBhIHNreWJveCBvciBhIHBpY3R1cmUgdGV4dHVyZS5cbiAgICovXG4gIG1vZGU6IEJhY2tncm91bmRNb2RlID0gQmFja2dyb3VuZE1vZGUuU29saWRDb2xvcjtcblxuICAvKiogR3JpZCBmb3IgYmFja2dyb3VuZC4gKi9cbiAgX21lc2g6IE1lc2g7XG4gIC8qKiBUaGUgbWF0ZXJpYWwgdXNlZCBmb3IgdGhlIGJhY2tncm91bmQuICovXG4gIF9tYXRlcmlhbDogTWF0ZXJpYWw7XG5cbiAgLyoqIEZpeGVkIGNvbG9yIGJlZm9yZSBza3lib3ggb3IgdGV4dHVyZSBpcyBsb2FkZWQgc3VjY2Vzc2Z1bGx5LiAqL1xuICBzb2xpZENvbG9yOiBDb2xvciA9IG5ldyBDb2xvcigwLjI1LCAwLjI1LCAwLjI1LCAxLjApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VuZ2luZTogRW5naW5lKSB7XG4gICAgdGhpcy5fbWVzaCA9IHRoaXMuX2NyZWF0ZVBsYW5lKHRoaXMuX2VuZ2luZSk7XG4gICAgdGhpcy5fbWF0ZXJpYWwgPSBuZXcgU2t5Qm94TWF0ZXJpYWwodGhpcy5fZW5naW5lLCBza3lTdGFyQ29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCYWNrZ3JvdW5kIHdpdGggZmxhdCBncmlkLlxuICAgKiBAcGFyYW0gZW5naW5lIEVuZ2luZSBpbnN0YW5jZS5cbiAgICogQHJldHVybnMgTWVzaFxuICAgKi9cbiAgcHJpdmF0ZSBfY3JlYXRlUGxhbmUoZW5naW5lOiBFbmdpbmUpOiBNb2RlbE1lc2gge1xuICAgIGNvbnN0IG1lc2ggPSBuZXcgTW9kZWxNZXNoKGVuZ2luZS5nbCk7XG4gICAgLy8gY29uc3QgaW5kaWNlcyA9IG5ldyBVaW50OEFycmF5KFswLCAzLCAxLCAxLCAzLCAyXSk7XG5cbiAgICBjb25zdCBwb3NpdGlvbnM6IFZlY3RvcjNbXSA9IFtcbiAgICAgIG5ldyBWZWN0b3IzKC0xLCAtMSwgMCksXG4gICAgICBuZXcgVmVjdG9yMygxLCAtMSwgMCksXG4gICAgICBuZXcgVmVjdG9yMygtMSwgMSwgMCksXG4gICAgICBuZXcgVmVjdG9yMygtMSwgMSwgMCksXG4gICAgICBuZXcgVmVjdG9yMygxLCAtMSwgMCksXG4gICAgICBuZXcgVmVjdG9yMygxLCAxLCAwKSxcbiAgICBdO1xuXG4gICAgbWVzaC5zZXRQb3NpdGlvbnMocG9zaXRpb25zKTtcbiAgICAvLyBtZXNoLnNldEluZGljZXMoaW5kaWNlcyk7XG5cbiAgICBtZXNoLnVwbG9hZERhdGEoZmFsc2UpO1xuICAgIG1lc2guYWRkU3ViTWVzaCgwLCA2KTtcbiAgICByZXR1cm4gbWVzaDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVmVjdG9yMywgTWF0aFV0aWwgfSBmcm9tICcuLi9tYXRoJztcblxuLyoqIFByZXZlbnQgZ2ltYmFsIGxvY2suICovXG5jb25zdCBFU1AgPSBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlO1xuXG4vKipcbiAqIFNwaGVyaWNhbC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNwaGVyaWNhbCB7XG4gIC8qKiBTcGhlcmljYWwgcmFkaXVzLiAqL1xuICBwdWJsaWMgcmFkaXVzOiBudW1iZXI7XG4gIC8qKiBJbiB0aGUgeG95IHBsYW5lLCB0aGUgYW5nbGUgd2l0aCB0aGUgeC1heGlzLiAqL1xuICBwdWJsaWMgcGhpOiBudW1iZXI7XG4gIC8qKiBBbmdsZSB3aXRoIHotYXhpcy4gKi9cbiAgcHVibGljIHRoZXRhOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEJ1aWxkIHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSBzcGhlcmUuXG4gICAqIEBwYXJhbSByYWRpdXMgU3BoZXJpY2FsIHJhZGl1cywgZGVmYXVsdCBpcyAxLjAuXG4gICAqIEBwYXJhbSBwaGkgQW5nbGUgd2l0aCB0aGUgeC1heGlzLCBkZWZhdWx0IGlzIDAuXG4gICAqIEBwYXJhbSB0aGV0YSBBbmdsZSB3aXRoIHRoZSB6LWF4aXMsIGRlZmF1bHQgaXMgMC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJhZGl1cz86IG51bWJlciwgcGhpPzogbnVtYmVyLCB0aGV0YT86IG51bWJlcikge1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzICE9PSB1bmRlZmluZWQgPyByYWRpdXMgOiAxLjA7XG4gICAgdGhpcy5waGkgPSBwaGkgIT09IHVuZGVmaW5lZCA/IHBoaSA6IDA7XG4gICAgdGhpcy50aGV0YSA9IHRoZXRhICE9PSB1bmRlZmluZWQgPyB0aGV0YSA6IDA7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHNwaGVyaWNhbCBzdGF0ZVxuICAgKiBAcGFyYW0gcmFkaXVzIFNwaGVyaWNhbCByYWRpdXMuXG4gICAqIEBwYXJhbSBwaGkgQW5nbGUgd2l0aCB0aGUgeC1heGlzLlxuICAgKiBAcGFyYW0gdGhldGEgQW5nbGUgd2l0aCB0aGUgei1heGlzLlxuICAgKiBAcmV0dXJucyBTcGhlcmljYWwuXG4gICAqL1xuICBzZXQocmFkaXVzOiBudW1iZXIsIHBoaTogbnVtYmVyLCB0aGV0YTogbnVtYmVyKSB7XG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gICAgdGhpcy5waGkgPSBwaGk7XG4gICAgdGhpcy50aGV0YSA9IHRoZXRhO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtYWtlU2FmZSgpIHtcbiAgICB0aGlzLnBoaSA9IE1hdGhVdGlsLmNsYW1wKHRoaXMucGhpLCBFU1AsIE1hdGguUEkgLSBFU1ApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBzcGhlcmUgc3RhdGUgZnJvbSB2ZWN0b3IuXG4gICAqIEBwYXJhbSB2MyBWZWN0b3IzLlxuICAgKiBAcmV0dXJucyBTcGhlcmljYWwuXG4gICAqL1xuICBzZXRGcm9tVmVjMyh2MzogVmVjdG9yMykge1xuICAgIHRoaXMucmFkaXVzID0gdjMubGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMucmFkaXVzID09PSAwKSB7XG4gICAgICB0aGlzLnRoZXRhID0gMDtcbiAgICAgIHRoaXMucGhpID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aGV0YSA9IE1hdGguYXRhbjIodjMueCwgdjMueik7XG4gICAgICB0aGlzLnBoaSA9IE1hdGguYWNvcyhNYXRoVXRpbC5jbGFtcCh2My55IC8gdGhpcy5yYWRpdXMsIC0xLCAxKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IFZlY3RvcjMgZnJvbSBzcGhlcmUgc3RhdGUuXG4gICAqIEBwYXJhbSB2MyBWZWN0b3IzLlxuICAgKiBAcmV0dXJucyBTcGhlcmljYWwuXG4gICAqL1xuICBzZXRUb1ZlYzModjM6IFZlY3RvcjMpIHtcbiAgICBjb25zdCBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbih0aGlzLnBoaSkgKiB0aGlzLnJhZGl1cztcbiAgICB2My5zZXRWYWx1ZShcbiAgICAgIHNpblBoaVJhZGl1cyAqIE1hdGguc2luKHRoaXMudGhldGEpLFxuICAgICAgTWF0aC5jb3ModGhpcy5waGkpICogdGhpcy5yYWRpdXMsXG4gICAgICBzaW5QaGlSYWRpdXMgKiBNYXRoLmNvcyh0aGlzLnRoZXRhKSxcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiIsImltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4uL2NvcmUvQ2FtZXJhJztcbmltcG9ydCB7IE1hdHJpeDQsIFZlY3RvcjIsIFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoJztcbmltcG9ydCB7IFNwaGVyaWNhbCB9IGZyb20gJy4vU3BoZXJpY2FsJztcblxudHlwZSBNb3VzZVdoZWVsRXZlbnQgPSBhbnk7XG5cbi8qKlxuICogT3JiaXRhbCBjb250cm9scyBmb3Igem9vbWluZyBhcm91bmQgYSBjZW50ZXIgcG9pbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBPcmJpdENvbnRyb2wge1xuICAvKiogQ2FtZXJhIGluc3RhbmNlLCB0aGUgZXNzZW5jZSBvZiBvcmJpdCBjb250cm9sIGlzIHRvIGNoYW5nZSB0aGUgY2FtZXJhIHBvc2l0aW9uLiAqL1xuICBjYW1lcmE6IENhbWVyYTtcbiAgLyoqIERPTSBlbGVtZW50LCBtYWlubHkgdXNlZCB0byBsaXN0ZW4gZm9yIG1vdXNlIHVwIGV2ZW50cy4gKi9cbiAgZG9tRWxlbWVudDogSFRNTEVsZW1lbnQgfCBEb2N1bWVudDtcbiAgLyoqIENhbnZhcyBlbGVtZW50LCBtYWlubHkgdXNlZCB0byBtb25pdG9yIG1vdXNlIG1vdmVtZW50IGV2ZW50cy4gKi9cbiAgbWFpbkVsZW1lbnQ6IEhUTUxDYW52YXNFbGVtZW50O1xuICAvKiogQ2FtZXJhIGZydXN0dW0gYW5nbGUuICovXG4gIGZvdjogbnVtYmVyO1xuICAvKiogV2hlcmUgdGhlIGNhbWVyYSBpcyBsb29raW5nLiAqL1xuICB0YXJnZXQ6IFZlY3RvcjM7XG4gIC8qKiBDYW1lcmEgdXAuICovXG4gIHVwOiBWZWN0b3IzO1xuICAvKiogVGhlIG1pbmltdW0gZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSBvYmplY3QuICovXG4gIG1pbkRpc3RhbmNlOiBudW1iZXI7XG4gIC8qKiBUaGUgbWF4aW11bSBkaXN0YW5jZSBmcm9tIHRoZSBjYW1lcmEgdG8gdGhlIG9iamVjdC4gKi9cbiAgbWF4RGlzdGFuY2U6IG51bWJlcjtcbiAgLyoqIFRoZSBzbWFsbGVzdCB6b29tIHNjYWxlIG9mIHRoZSBjYW1lcmEuICovXG4gIG1pblpvb206IG51bWJlcjtcbiAgLyoqIFRoZSBtYXhpbXVtIHpvb20gc2NhbGUgb2YgdGhlIGNhbWVyYS4gKi9cbiAgbWF4Wm9vbTogbnVtYmVyO1xuICAvKiogU2NhbGluZyBmYWN0b3IuICovXG4gIHpvb21GYWN0b3I6IG51bWJlcjtcbiAgLyoqIE1pbiBwb2xhciBhbmdsZS4gKi9cbiAgbWluUG9sYXJBbmdsZTogbnVtYmVyO1xuICAvKiogTWF4IHBvbGFyIGFuZ2xlLiAqL1xuICBtYXhQb2xhckFuZ2xlOiBudW1iZXI7XG4gIC8qKiBNaW4gYXppbXV0aCBhbmdsZS4gKi9cbiAgbWluQXppbXV0aEFuZ2xlOiBudW1iZXI7XG4gIC8qKiBNYXggYXppbXV0aCBhbmdsZS4gKi9cbiAgbWF4QXppbXV0aEFuZ2xlOiBudW1iZXI7XG4gIC8qKiBXaGV0aGVyIHRvIGVuYWJsZSBkYW1waW5nLiAqL1xuICBlbmFibGVEYW1waW5nOiBib29sZWFuO1xuICAvKiogV2hldGhlciB0byBlbmFibGUgcm90YXRlLiAqL1xuICBlbmFibGVSb3RhdGU6IGJvb2xlYW47XG4gIC8qKiBXaGV0aGVyIHRvIGVuYWJsZSB6b29tLiAqL1xuICBlbmFibGVab29tOiBib29sZWFuO1xuICAvKiogV2hldGhlciB0byBlbmFibGUgcGFuLiAqL1xuICBlbmFibGVQYW46IGJvb2xlYW47XG4gIC8qKiBEYW1waW5nIGZhY3RvciAqL1xuICBkYW1waW5nRmFjdG9yOiBudW1iZXI7XG4gIC8qKiBab29tIHNwZWVkICovXG4gIHpvb21TcGVlZDogbnVtYmVyO1xuICAvKiogV2hldGhlciB0byBhdXRvIHJvdGF0ZS4gKi9cbiAgYXV0b1JvdGF0ZTogYm9vbGVhbjtcbiAgLyoqIEF1dG8gcm90YXRlIHNwZWVkLiAqL1xuICBhdXRvUm90YXRlU3BlZWQ6IG51bWJlciA9IE1hdGguUEk7XG4gIC8qKiBSb3RhdGUgc3BlZWQuICovXG4gIHJvdGF0ZVNwZWVkOiBudW1iZXI7XG4gIC8qKiBDbGlja2luZyB0aGUgY29ycmVzcG9uZGluZyBrZXkgd2l0aCB0aGUgbW91c2UgaXMgYWN0dWFsbHkgdGhlIGtleSBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IGJ1dHRvbiwgdGhlIHNjcm9sbCB3aGVlbCBhbmQgdGhlIHJpZ2h0IGJ1dHRvbi4gKi9cbiAgbW91c2VCdXR0b25zOiB7IE9SQklUOiBudW1iZXI7IFpPT006IG51bWJlcjsgUEFOOiBudW1iZXIgfTtcbiAgLyoqIFdoYXQgc3RhdGUgaXMgdGhlIGN1cnJlbnQgY29udHJvbGxlciBpbi4gKi9cbiAgU1RBVEU6IHtcbiAgICBST1RBVEU6IG51bWJlcjtcbiAgICBaT09NOiBudW1iZXI7XG4gICAgTk9ORTogbnVtYmVyO1xuICAgIFBBTjogbnVtYmVyO1xuICB9O1xuICAvKiogQ29udGFpbnMgbW91c2Vtb3ZlIGFuZCBtb3VzZXVwLiAqL1xuICBtb3VzZVVwRXZlbnRzOiB7IGxpc3RlbmVyOiBhbnk7IHR5cGU6IHN0cmluZyB9W107XG4gIC8qKiBDb250YWlucyBtb3VzZWRvd24gYW5kIHdoZWVsLiAqL1xuICBjb25zdEV2ZW50czogeyBsaXN0ZW5lcjogYW55OyB0eXBlOiBzdHJpbmc7IGVsZW1lbnQ/OiBXaW5kb3cgfVtdO1xuXG4gIHByaXZhdGUgX3Bvc2l0aW9uOiBWZWN0b3IzO1xuICBwcml2YXRlIF9vZmZzZXQ6IFZlY3RvcjM7XG4gIHByaXZhdGUgX3NwaGVyaWNhbDogU3BoZXJpY2FsO1xuICBwcml2YXRlIF9zcGhlcmljYWxEZWx0YTogU3BoZXJpY2FsO1xuICBwcml2YXRlIF9zcGhlcmljYWxEdW1wOiBTcGhlcmljYWw7XG4gIHByaXZhdGUgX3pvb21GcmFnOiBudW1iZXI7XG4gIHByaXZhdGUgX3NjYWxlOiBudW1iZXI7XG4gIHByaXZhdGUgX3Bhbk9mZnNldDogVmVjdG9yMztcbiAgcHJpdmF0ZSBfaXNNb3VzZVVwOiBib29sZWFuO1xuICBwcml2YXRlIF92UGFuOiBWZWN0b3IzO1xuICBwcml2YXRlIF9zdGF0ZTogYW55O1xuICBwcml2YXRlIF9yb3RhdGVTdGFydDogVmVjdG9yMjtcbiAgcHJpdmF0ZSBfcm90YXRlRW5kOiBWZWN0b3IyO1xuICBwcml2YXRlIF9yb3RhdGVEZWx0YTogVmVjdG9yMjtcbiAgcHJpdmF0ZSBfcGFuU3RhcnQ6IFZlY3RvcjI7XG4gIHByaXZhdGUgX3BhbkVuZDogVmVjdG9yMjtcbiAgcHJpdmF0ZSBfcGFuRGVsdGE6IFZlY3RvcjI7XG4gIHByaXZhdGUgX3pvb21TdGFydDogVmVjdG9yMjtcbiAgcHJpdmF0ZSBfem9vbUVuZDogVmVjdG9yMjtcbiAgcHJpdmF0ZSBfem9vbURlbHRhOiBWZWN0b3IyO1xuXG4gIGNvbnN0cnVjdG9yKGNhbWVyYTogQ2FtZXJhKSB7XG4gICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG4gICAgdGhpcy5kb21FbGVtZW50ID0gZG9jdW1lbnQ7XG4gICAgdGhpcy5tYWluRWxlbWVudCA9IGNhbWVyYS5lbmdpbmUuY2FudmFzLl9jYW52YXM7XG4gICAgdGhpcy5mb3YgPSA0NTtcbiAgICB0aGlzLnRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG4gICAgdGhpcy51cCA9IG5ldyBWZWN0b3IzKDAsIDEsIDApO1xuICAgIHRoaXMubWluRGlzdGFuY2UgPSAwLjE7XG4gICAgdGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xuICAgIHRoaXMubWluWm9vbSA9IDAuMDtcbiAgICB0aGlzLm1heFpvb20gPSBJbmZpbml0eTtcbiAgICB0aGlzLm1pblBvbGFyQW5nbGUgPSAwO1xuICAgIHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7XG4gICAgdGhpcy5taW5BemltdXRoQW5nbGUgPSAtSW5maW5pdHk7XG4gICAgdGhpcy5tYXhBemltdXRoQW5nbGUgPSBJbmZpbml0eTtcbiAgICB0aGlzLmVuYWJsZURhbXBpbmcgPSB0cnVlO1xuICAgIHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMTtcbiAgICB0aGlzLnpvb21GYWN0b3IgPSAwLjI7XG4gICAgdGhpcy5lbmFibGVab29tID0gdHJ1ZTtcbiAgICB0aGlzLnpvb21TcGVlZCA9IDEuMDtcbiAgICB0aGlzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG4gICAgdGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcbiAgICB0aGlzLmVuYWJsZVBhbiA9IHRydWU7XG4gICAgdGhpcy5hdXRvUm90YXRlID0gZmFsc2U7XG4gICAgdGhpcy5tb3VzZUJ1dHRvbnMgPSB7XG4gICAgICBPUkJJVDogMCxcbiAgICAgIFpPT006IDEsXG4gICAgICBQQU46IDIsXG4gICAgfTtcblxuICAgIC8vIFJldXNlIG9iamVjdHMgdG8gcHJldmVudCBleGNlc3NpdmUgc3RhY2sgYWxsb2NhdGlvbi5cbiAgICAvLyB1cGRhdGVcbiAgICB0aGlzLl9wb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG4gICAgdGhpcy5fb2Zmc2V0ID0gbmV3IFZlY3RvcjMoKTtcbiAgICB0aGlzLl9zcGhlcmljYWwgPSBuZXcgU3BoZXJpY2FsKCk7XG4gICAgdGhpcy5fc3BoZXJpY2FsRGVsdGEgPSBuZXcgU3BoZXJpY2FsKCk7XG4gICAgdGhpcy5fc3BoZXJpY2FsRHVtcCA9IG5ldyBTcGhlcmljYWwoKTtcbiAgICB0aGlzLl96b29tRnJhZyA9IDA7XG4gICAgdGhpcy5fc2NhbGUgPSAxO1xuICAgIHRoaXMuX3Bhbk9mZnNldCA9IG5ldyBWZWN0b3IzKCk7XG4gICAgdGhpcy5faXNNb3VzZVVwID0gdHJ1ZTtcblxuICAgIC8vIHBhblxuICAgIHRoaXMuX3ZQYW4gPSBuZXcgVmVjdG9yMygpO1xuXG4gICAgLy8gc3RhdGVcbiAgICB0aGlzLl9yb3RhdGVTdGFydCA9IG5ldyBWZWN0b3IyKCk7XG4gICAgdGhpcy5fcm90YXRlRW5kID0gbmV3IFZlY3RvcjIoKTtcbiAgICB0aGlzLl9yb3RhdGVEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cbiAgICB0aGlzLl9wYW5TdGFydCA9IG5ldyBWZWN0b3IyKCk7XG4gICAgdGhpcy5fcGFuRW5kID0gbmV3IFZlY3RvcjIoKTtcbiAgICB0aGlzLl9wYW5EZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cbiAgICB0aGlzLl96b29tU3RhcnQgPSBuZXcgVmVjdG9yMigpO1xuICAgIHRoaXMuX3pvb21FbmQgPSBuZXcgVmVjdG9yMigpO1xuICAgIHRoaXMuX3pvb21EZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cbiAgICB0aGlzLlNUQVRFID0ge1xuICAgICAgTk9ORTogLTEsXG4gICAgICBST1RBVEU6IDAsXG4gICAgICBaT09NOiAxLFxuICAgICAgUEFOOiAyLFxuICAgIH07XG4gICAgdGhpcy5fc3RhdGUgPSB0aGlzLlNUQVRFLk5PTkU7XG5cbiAgICB0aGlzLmNvbnN0RXZlbnRzID0gW1xuICAgICAgeyB0eXBlOiAnbW91c2Vkb3duJywgbGlzdGVuZXI6IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKSB9LFxuICAgICAgeyB0eXBlOiAnd2hlZWwnLCBsaXN0ZW5lcjogdGhpcy5vbk1vdXNlV2hlZWwuYmluZCh0aGlzKSB9LFxuICAgIF07XG5cbiAgICB0aGlzLm1vdXNlVXBFdmVudHMgPSBbXG4gICAgICB7IHR5cGU6ICdtb3VzZW1vdmUnLCBsaXN0ZW5lcjogdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpIH0sXG4gICAgICB7IHR5cGU6ICdtb3VzZXVwJywgbGlzdGVuZXI6IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcykgfSxcbiAgICBdO1xuXG4gICAgLy8gb25Nb3VzZURvd27ph4zpnaLlpITnkIbkuoZtb3VzZW1vdmXlkoxtb3VzZXVw55qE5LqL5Lu2XG4gICAgdGhpcy5jb25zdEV2ZW50cy5mb3JFYWNoKChlbGUpID0+IHtcbiAgICAgIGlmIChlbGUuZWxlbWVudCkge1xuICAgICAgICBlbGUuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGVsZS50eXBlLCBlbGUubGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWFpbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihlbGUudHlwZSwgZWxlLmxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGxpZmUgY3ljbGUgb2YgdHJhY2sgY29udHJvbCBkZXN0cnVjdGlvbiwgdXNlZCB0byByZW1vdmUgbGlzdGVuZXIgZXZlbnRzLlxuICAgKi9cbiAgb25EZXN0b3J5KCk6IHZvaWQge1xuICAgIHRoaXMuY29uc3RFdmVudHMuZm9yRWFjaCgoZWxlKSA9PiB7XG4gICAgICBpZiAoZWxlLmVsZW1lbnQpIHtcbiAgICAgICAgZWxlLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGUudHlwZSwgZWxlLmxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1haW5FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlLnR5cGUsIGVsZS5saXN0ZW5lciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gdGhpcy5kb21FbGVtZW50LmJvZHkgOiB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgdGhpcy5tYWluRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubW91c2VVcEV2ZW50c1swXS50eXBlLCB0aGlzLm1vdXNlVXBFdmVudHNbMF0ubGlzdGVuZXIsIGZhbHNlKTtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5tb3VzZVVwRXZlbnRzWzFdLnR5cGUsIHRoaXMubW91c2VVcEV2ZW50c1sxXS5saXN0ZW5lciwgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBvcmJpdCBjb250cm9scyB0aGUgbGlmZSBjeWNsZSwgdXBkYXRpbmcgdGhlIHZpZXcgYmFzZWQgb24gdGhlIGN1cnJlbnQgbW91c2UgY2hhbmdlcy5cbiAgICogQHBhcmFtIGR0aW1lIFVzZWQgdG8gY2FsY3VsYXRlIGhvdyBtYW55IGRlZ3JlZXMgdG8gcm90YXRlLlxuICAgKi9cbiAgb25VcGRhdGUoZHRpbWU6IG51bWJlcikge1xuICAgIGNvbnN0IHBvc2l0aW9uOiBWZWN0b3IzID0gdGhpcy5jYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uO1xuICAgIHBvc2l0aW9uLmNsb25lVG8odGhpcy5fb2Zmc2V0KTtcbiAgICB0aGlzLl9vZmZzZXQuc3VidHJhY3QodGhpcy50YXJnZXQpO1xuICAgIHRoaXMuX3NwaGVyaWNhbC5zZXRGcm9tVmVjMyh0aGlzLl9vZmZzZXQpO1xuXG4gICAgaWYgKHRoaXMuYXV0b1JvdGF0ZSAmJiB0aGlzLl9zdGF0ZSA9PT0gdGhpcy5TVEFURS5OT05FKSB7XG4gICAgICB0aGlzLnJvdGF0ZUxlZnQodGhpcy5nZXRBdXRvUm90YXRpb25BbmdsZShkdGltZSkpO1xuICAgIH1cblxuICAgIHRoaXMuX3NwaGVyaWNhbC50aGV0YSArPSB0aGlzLl9zcGhlcmljYWxEZWx0YS50aGV0YTtcbiAgICB0aGlzLl9zcGhlcmljYWwucGhpICs9IHRoaXMuX3NwaGVyaWNhbERlbHRhLnBoaTtcblxuICAgIHRoaXMuX3NwaGVyaWNhbC50aGV0YSA9IE1hdGgubWF4KHRoaXMubWluQXppbXV0aEFuZ2xlLCBNYXRoLm1pbih0aGlzLm1heEF6aW11dGhBbmdsZSwgdGhpcy5fc3BoZXJpY2FsLnRoZXRhKSk7XG4gICAgdGhpcy5fc3BoZXJpY2FsLnBoaSA9IE1hdGgubWF4KHRoaXMubWluUG9sYXJBbmdsZSwgTWF0aC5taW4odGhpcy5tYXhQb2xhckFuZ2xlLCB0aGlzLl9zcGhlcmljYWwucGhpKSk7XG4gICAgdGhpcy5fc3BoZXJpY2FsLm1ha2VTYWZlKCk7XG5cbiAgICBpZiAodGhpcy5fc2NhbGUgIT09IDEpIHtcbiAgICAgIHRoaXMuX3pvb21GcmFnID0gdGhpcy5fc3BoZXJpY2FsLnJhZGl1cyAqICh0aGlzLl9zY2FsZSAtIDEpO1xuICAgIH1cblxuICAgIHRoaXMuX3NwaGVyaWNhbC5yYWRpdXMgKz0gdGhpcy5fem9vbUZyYWc7XG4gICAgdGhpcy5fc3BoZXJpY2FsLnJhZGl1cyA9IE1hdGgubWF4KHRoaXMubWluRGlzdGFuY2UsIE1hdGgubWluKHRoaXMubWF4RGlzdGFuY2UsIHRoaXMuX3NwaGVyaWNhbC5yYWRpdXMpKTtcblxuICAgIHRoaXMudGFyZ2V0LmFkZCh0aGlzLl9wYW5PZmZzZXQpO1xuICAgIHRoaXMuX3NwaGVyaWNhbC5zZXRUb1ZlYzModGhpcy5fb2Zmc2V0KTtcbiAgICB0aGlzLnRhcmdldC5jbG9uZVRvKHRoaXMuX3Bvc2l0aW9uKTtcbiAgICB0aGlzLl9wb3NpdGlvbi5hZGQodGhpcy5fb2Zmc2V0KTtcblxuICAgIHRoaXMuY2FtZXJhLnRyYW5zZm9ybS5wb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uO1xuICAgIHRoaXMuY2FtZXJhLnRyYW5zZm9ybS5sb29rQXQodGhpcy50YXJnZXQsIHRoaXMudXApO1xuXG4gICAgaWYgKHRoaXMuZW5hYmxlRGFtcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5fc3BoZXJpY2FsRHVtcC50aGV0YSAqPSAxIC0gdGhpcy5kYW1waW5nRmFjdG9yO1xuICAgICAgdGhpcy5fc3BoZXJpY2FsRHVtcC5waGkgKj0gMSAtIHRoaXMuZGFtcGluZ0ZhY3RvcjtcbiAgICAgIHRoaXMuX3pvb21GcmFnICo9IDEgLSB0aGlzLnpvb21GYWN0b3I7XG5cbiAgICAgIGlmICh0aGlzLl9pc01vdXNlVXApIHtcbiAgICAgICAgdGhpcy5fc3BoZXJpY2FsRGVsdGEudGhldGEgPSB0aGlzLl9zcGhlcmljYWxEdW1wLnRoZXRhO1xuICAgICAgICB0aGlzLl9zcGhlcmljYWxEZWx0YS5waGkgPSB0aGlzLl9zcGhlcmljYWxEdW1wLnBoaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NwaGVyaWNhbERlbHRhLnNldCgwLCAwLCAwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc3BoZXJpY2FsRGVsdGEuc2V0KDAsIDAsIDApO1xuICAgICAgdGhpcy5fem9vbUZyYWcgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuX3NjYWxlID0gMTtcbiAgICB0aGlzLl9wYW5PZmZzZXQuc2V0VmFsdWUoMCwgMCwgMCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGxlZnQgYW5kIHJpZ2h0IHRyYW5zbGF0aW9uLlxuICAgKiBAcGFyYW0gZGlzdGFuY2UgQ2FtZXJhIHRyYW5zbGF0aW9uIGRpc3RhbmNlLlxuICAgKiBAcGFyYW0gd29ybGRNYXRyaXggQ2FtZXJhJ3Mgd29ybGQgY29vcmRpbmF0ZSBtYXRyaXguXG4gICAqL1xuICBwYW5MZWZ0KGRpc3RhbmNlOiBudW1iZXIsIHdvcmxkTWF0cml4OiBNYXRyaXg0KSB7XG4gICAgY29uc3QgZSA9IHdvcmxkTWF0cml4LmVsZW1lbnRzO1xuICAgIHRoaXMuX3ZQYW4uc2V0VmFsdWUoZVswXSwgZVsxXSwgZVsyXSk7XG4gICAgdGhpcy5fdlBhbi5zY2FsZShkaXN0YW5jZSk7XG4gICAgdGhpcy5fcGFuT2Zmc2V0LmFkZCh0aGlzLl92UGFuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdXAgYW5kIGRvd24gdHJhbnNsYXRpb24uXG4gICAqIEBwYXJhbSBkaXN0YW5jZSBDYW1lcmEgdHJhbnNsYXRpb24gZGlzdGFuY2UuXG4gICAqIEBwYXJhbSB3b3JsZE1hdHJpeCBDYW1lcmEncyB3b3JsZCBjb29yZGluYXRlIG1hdHJpeC5cbiAgICovXG4gIHBhblVwKGRpc3RhbmNlOiBudW1iZXIsIHdvcmxkTWF0cml4OiBNYXRyaXg0KSB7XG4gICAgY29uc3QgZSA9IHdvcmxkTWF0cml4LmVsZW1lbnRzO1xuICAgIHRoaXMuX3ZQYW4uc2V0VmFsdWUoZVs0XSwgZVs1XSwgZVs2XSk7XG4gICAgdGhpcy5fdlBhbi5zY2FsZShkaXN0YW5jZSk7XG4gICAgdGhpcy5fcGFuT2Zmc2V0LmFkZCh0aGlzLl92UGFuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYW4gYWNjb3JkaW5nIHRvIHBhbkxlZnQgYW5kIHBhblVwLlxuICAgKiBAcGFyYW0gZGVsdGFYIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIG1vdXNlIGFuZCB0aGUgeC1kaXJlY3Rpb24gb2YgdGhlIHByZXZpb3VzIHZpZXcuXG4gICAqIEBwYXJhbSBkZWx0YVkgVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgbW91c2UgYW5kIHRoZSB5LWRpcmVjdGlvbiBvZiB0aGUgcHJldmlvdXMgdmlld1xuICAgKi9cbiAgcGFuKGRlbHRhWDogbnVtYmVyLCBkZWx0YVk6IG51bWJlcikge1xuICAgIC8vIHBlcnNwZWN0aXZlIG9ubHlcbiAgICBjb25zdCBwb3NpdGlvbjogVmVjdG9yMyA9IHRoaXMuY2FtZXJhLnRyYW5zZm9ybS5wb3NpdGlvbjtcbiAgICBwb3NpdGlvbi5jbG9uZVRvKHRoaXMuX3ZQYW4pO1xuICAgIHRoaXMuX3ZQYW4uc3VidHJhY3QodGhpcy50YXJnZXQpO1xuICAgIGxldCB0YXJnZXREaXN0YW5jZSA9IHRoaXMuX3ZQYW4ubGVuZ3RoKCk7XG5cbiAgICB0YXJnZXREaXN0YW5jZSAqPSAodGhpcy5mb3YgLyAyKSAqIChNYXRoLlBJIC8gMTgwKTtcbiAgICAvLyDmiJHku6zlnKjov5nph4zlj6rkvb/nlKhjbGllbnRIZWlnaHTvvIzov5nmoLfnurXmqKrmr5TkuI3kvJrmia3mm7LpgJ/luqZcbiAgICB0aGlzLnBhbkxlZnQoLTIgKiBkZWx0YVggKiAodGFyZ2V0RGlzdGFuY2UgLyB0aGlzLm1haW5FbGVtZW50LmNsaWVudEhlaWdodCksIHRoaXMuY2FtZXJhLnRyYW5zZm9ybS53b3JsZE1hdHJpeCk7XG4gICAgdGhpcy5wYW5VcCgyICogZGVsdGFZICogKHRhcmdldERpc3RhbmNlIC8gdGhpcy5tYWluRWxlbWVudC5jbGllbnRIZWlnaHQpLCB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ud29ybGRNYXRyaXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFpvb20gaW4gdmlldy5cbiAgICogQHBhcmFtIHpvb21TY2FsZSBab29tIHNjYWxlLlxuICAgKi9cbiAgem9vbUluKHpvb21TY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gcGVyc3BlY3RpdmUgb25seVxuICAgIHRoaXMuX3NjYWxlICo9IHpvb21TY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBab29tIG91dCB2aWV3LlxuICAgKiBAcGFyYW0gem9vbVNjYWxlIFpvb20gc2NhbGUuXG4gICAqL1xuICB6b29tT3V0KHpvb21TY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gcGVyc3BlY3RpdmUgb25seVxuICAgIHRoaXMuX3NjYWxlIC89IHpvb21TY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgem9vbSBsZXZlbC5cbiAgICogQHJldHVybnMgWm9vbSBzY2FsZS5cbiAgICovXG4gIGdldFpvb21TY2FsZSgpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coMC45NSwgdGhpcy56b29tU3BlZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJvdGF0ZSBsZWZ0IGFuZCByaWdodC5cbiAgICogQHBhcmFtIHJhZGlhbiBSb3RhdGlvbiBhbmdsZSwgcmFkaWFuIHN5c3RlbS5cbiAgICovXG4gIHJvdGF0ZUxlZnQocmFkaWFuOiBudW1iZXIpIHtcbiAgICB0aGlzLl9zcGhlcmljYWxEZWx0YS50aGV0YSAtPSByYWRpYW47XG4gICAgaWYgKHRoaXMuZW5hYmxlRGFtcGluZykge1xuICAgICAgdGhpcy5fc3BoZXJpY2FsRHVtcC50aGV0YSA9IC1yYWRpYW47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJvdGF0ZSB1cCBhbmQgZG93bi5cbiAgICogQHBhcmFtIHJhZGlhbiBSb3RhdGlvbiBhbmdsZSwgcmFkaWFuIHN5c3RlbS5cbiAgICovXG4gIHJvdGF0ZVVwKHJhZGlhbjogbnVtYmVyKSB7XG4gICAgdGhpcy5fc3BoZXJpY2FsRGVsdGEucGhpIC09IHJhZGlhbjtcbiAgICBpZiAodGhpcy5lbmFibGVEYW1waW5nKSB7XG4gICAgICB0aGlzLl9zcGhlcmljYWxEdW1wLnBoaSA9IC1yYWRpYW47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhdXRvIHJvdGF0aW9uIGFuZ2xlLlxuICAgKiBAcGFyYW0gZHRpbWUgUmVuZGVyaW5nIHRoZSB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgY3VycmVudCBmcmFtZSBhbmQgdGhlIHByZXZpb3VzIGZyYW1lLlxuICAgKiBAcmV0dXJucyBBdXRvIHJvdGF0ZSBzcGVlZC5cbiAgICovXG4gIGdldEF1dG9Sb3RhdGlvbkFuZ2xlKGR0aW1lOiBudW1iZXIpIHtcbiAgICByZXR1cm4gKHRoaXMuYXV0b1JvdGF0ZVNwZWVkIC8gMTAwMCkgKiBkdGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcm90YXRlIHN0YXJ0IHdoZW4gc3RhdGUgaXMgcm90YXRlLlxuICAgKiBAcGFyYW0gZXZlbnQgTW91c2UgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVNb3VzZURvd25Sb3RhdGUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLl9yb3RhdGVTdGFydC5zZXRWYWx1ZShldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgem9vbSBzdGFydCB3aGVuIHN0YXRlIGlzIHpvb20uXG4gICAqIEBwYXJhbSBldmVudCBNb3VzZSBldmVudC5cbiAgICovXG4gIGhhbmRsZU1vdXNlRG93blpvb20oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLl96b29tU3RhcnQuc2V0VmFsdWUoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHBhbiBzdGFydCB3aGVuIHN0YXRlIGlzIHBhbi5cbiAgICogQHBhcmFtIGV2ZW50IE1vdXNlIGV2ZW50LlxuICAgKi9cbiAgaGFuZGxlTW91c2VEb3duUGFuKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5fcGFuU3RhcnQuc2V0VmFsdWUoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSByb3RhdGlvbiBkaWZmZXJlbmNlIHdoZW4gdGhlIG1vdXNlIGlzIG1vdmVkLlxuICAgKiBAcGFyYW0gZXZlbnQgTW91c2UgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVNb3VzZU1vdmVSb3RhdGUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLl9yb3RhdGVFbmQuc2V0VmFsdWUoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgVmVjdG9yMi5zdWJ0cmFjdCh0aGlzLl9yb3RhdGVFbmQsIHRoaXMuX3JvdGF0ZVN0YXJ0LCB0aGlzLl9yb3RhdGVEZWx0YSk7XG5cbiAgICAvLyB45pa55ZCR5bmz56e755qE55m+5YiG5q+UXG4gICAgdGhpcy5yb3RhdGVMZWZ0KDIgKiBNYXRoLlBJICogKHRoaXMuX3JvdGF0ZURlbHRhLnggLyB0aGlzLm1haW5FbGVtZW50LmNsaWVudFdpZHRoKSAqIHRoaXMucm90YXRlU3BlZWQpO1xuICAgIC8vIHnmlrnlkJHlubPnp7vnmoTnmb7liIbmr5RcbiAgICB0aGlzLnJvdGF0ZVVwKDIgKiBNYXRoLlBJICogKHRoaXMuX3JvdGF0ZURlbHRhLnkgLyB0aGlzLm1haW5FbGVtZW50LmNsaWVudEhlaWdodCkgKiB0aGlzLnJvdGF0ZVNwZWVkKTtcbiAgICAvLyDlsIZlbmTorr7nva7kuLrmlrDnmoRzdGFydFxuICAgIHRoaXMuX3JvdGF0ZUVuZC5jbG9uZVRvKHRoaXMuX3JvdGF0ZVN0YXJ0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIHJvdGF0aW9uIGRpZmZlcmVuY2Ugd2hlbiB0aGUgbW91c2UgaXMgbW92ZWQuXG4gICAqIEBwYXJhbSBldmVudCBNb3VzZSBldmVudC5cbiAgICovXG4gIGhhbmRsZU1vdXNlTW92ZVpvb20oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLl96b29tRW5kLnNldFZhbHVlKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgIFZlY3RvcjIuc3VidHJhY3QodGhpcy5fem9vbUVuZCwgdGhpcy5fem9vbVN0YXJ0LCB0aGlzLl96b29tRGVsdGEpO1xuXG4gICAgaWYgKHRoaXMuX3pvb21EZWx0YS55ID4gMCkge1xuICAgICAgdGhpcy56b29tT3V0KHRoaXMuZ2V0Wm9vbVNjYWxlKCkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fem9vbURlbHRhLnkgPCAwKSB7XG4gICAgICB0aGlzLnpvb21Jbih0aGlzLmdldFpvb21TY2FsZSgpKTtcbiAgICB9XG4gICAgLy8g5bCGZW5k5aSN5Yi25Yiw5paw55qEc3RhcnRcbiAgICB0aGlzLl96b29tRW5kLmNsb25lVG8odGhpcy5fem9vbVN0YXJ0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIHBhbiBkaWZmZXJlbmNlIHdoZW4gdGhlIG1vdXNlIGlzIG1vdmVkLlxuICAgKiBAcGFyYW0gZXZlbnQgTW91c2UgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVNb3VzZU1vdmVQYW4oZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLl9wYW5FbmQuc2V0VmFsdWUoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgVmVjdG9yMi5zdWJ0cmFjdCh0aGlzLl9wYW5FbmQsIHRoaXMuX3BhblN0YXJ0LCB0aGlzLl9wYW5EZWx0YSk7XG5cbiAgICB0aGlzLnBhbih0aGlzLl9wYW5EZWx0YS54LCB0aGlzLl9wYW5EZWx0YS55KTtcblxuICAgIHRoaXMuX3BhbkVuZC5jbG9uZVRvKHRoaXMuX3BhblN0YXJ0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIHdoZWVsIGRpZmZlcmVuY2Ugd2hlbiB0aGUgbW91c2UgaXMgbW92ZWQuXG4gICAqIEBwYXJhbSBldmVudCBNb3VzZSBldmVudC5cbiAgICovXG4gIGhhbmRsZU1vdXNlV2hlZWwoZXZlbnQ6IE1vdXNlV2hlZWxFdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC5kZWx0YVkgPCAwKSB7XG4gICAgICB0aGlzLnpvb21Jbih0aGlzLmdldFpvb21TY2FsZSgpKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgIHRoaXMuem9vbU91dCh0aGlzLmdldFpvb21TY2FsZSgpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuIHRvIHRoZSBtb3VzZSBjbGljayBldmVudCxcbiAgICogYW5kIHNldCB0aGUgY29udGV4dCBzdGF0ZSB0byB0aGUgbW91c2UgY2xpY2sgdHlwZSBhY2NvcmRpbmcgdG8gdGhlIGNsaWNrIHR5cGUsXG4gICAqIGFuZCB0aGVuIHNlbGVjdCB0aGUgY29ycmVzcG9uZGluZyBwcm9jZXNzaW5nIG1ldGhvZFxuICAgKiBAcGFyYW0gZXZlbnQgTW91c2UgZXZlbnQuXG4gICAqL1xuICBvbk1vdXNlRG93bihldmVudDogTW91c2VFdmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB0aGlzLl9pc01vdXNlVXAgPSBmYWxzZTtcblxuICAgIHN3aXRjaCAoZXZlbnQuYnV0dG9uKSB7XG4gICAgICBjYXNlIHRoaXMubW91c2VCdXR0b25zLk9SQklUOlxuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlRG93blJvdGF0ZShldmVudCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5TVEFURS5ST1RBVEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0aGlzLm1vdXNlQnV0dG9ucy5aT09NOlxuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlRG93blpvb20oZXZlbnQpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuU1RBVEUuWk9PTTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRoaXMubW91c2VCdXR0b25zLlBBTjpcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZURvd25QYW4oZXZlbnQpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuU1RBVEUuUEFOO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc3RhdGUgIT09IHRoaXMuU1RBVEUuTk9ORSkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQgPyB0aGlzLmRvbUVsZW1lbnQuYm9keSA6IHRoaXMuZG9tRWxlbWVudDtcbiAgICAgIC8vIGNhbnZhc+WFg+e0oOebkeWQrG1vdmXkuovku7ZcbiAgICAgIC8vIG9uTW91c2VNb3ZlXG4gICAgICB0aGlzLm1haW5FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5tb3VzZVVwRXZlbnRzWzBdLnR5cGUsIHRoaXMubW91c2VVcEV2ZW50c1swXS5saXN0ZW5lciwgZmFsc2UpO1xuICAgICAgLy8g54i257qn5YWD57Sg55uR5ZCs6byg5qCHdXDkuovku7ZcbiAgICAgIC8vIG9uTW91c2VVcFxuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMubW91c2VVcEV2ZW50c1sxXS50eXBlLCB0aGlzLm1vdXNlVXBFdmVudHNbMV0ubGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW9uaXRvciBtb3VzZSBtb3ZlbWVudCBldmVudHMsXG4gICAqIHNlbGVjdCB0aGUgY29ycmVzcG9uZGluZyBtb3ZlbWVudCBwcm9jZXNzaW5nIG1ldGhvZCBmb3IgdGhlIGN1cnJlbnQgY29udGV4dCBzdGF0ZS5cbiAgICogQHBhcmFtIGV2ZW50IE1vdXNlIGV2ZW50LlxuICAgKi9cbiAgb25Nb3VzZU1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgc3dpdGNoICh0aGlzLl9zdGF0ZSkge1xuICAgICAgY2FzZSB0aGlzLlNUQVRFLlJPVEFURTpcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU1vdmVSb3RhdGUoZXZlbnQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSB0aGlzLlNUQVRFLlpPT006XG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VNb3ZlWm9vbShldmVudCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIHRoaXMuU1RBVEUuUEFOOlxuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlTW92ZVBhbihldmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gZm9yIHRoZSBtb3VzZSB1cCBldmVudCxcbiAgICogcmVtb3ZlIHRoZSBjb3JyZXNwb25kaW5nIGxpc3RlbmVyIGV2ZW50IGFuZCBzZXQgdGhlIGNvbnRleHQgc3RhdGUgdG8gbm9uZS5cbiAgICovXG4gIG9uTW91c2VVcCgpIHtcbiAgICB0aGlzLl9pc01vdXNlVXAgPSB0cnVlO1xuXG4gICAgdGhpcy5tb3VzZVVwRXZlbnRzLmZvckVhY2goKGVsZSkgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQgPyB0aGlzLmRvbUVsZW1lbnQuYm9keSA6IHRoaXMuZG9tRWxlbWVudDtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGUudHlwZSwgZWxlLmxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICB0aGlzLm1haW5FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlLnR5cGUsIGVsZS5saXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fc3RhdGUgPSB0aGlzLlNUQVRFLk5PTkU7XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuIHRvIHRoZSBtb3VzZSB3aGVlbCBldmVudCxcbiAgICogcHJldmVudCB0aGUgZGVmYXVsdCBiZWhhdmlvcixcbiAgICogYW5kIHNjYWxlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBldmVudCBldmVudCBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIGV2ZW50IE1vdXNlIHdoZWVsIGV2ZW50LlxuICAgKi9cbiAgb25Nb3VzZVdoZWVsKGV2ZW50OiBNb3VzZVdoZWVsRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgdGhpcy5oYW5kbGVNb3VzZVdoZWVsKGV2ZW50KTtcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFV0aWwgPSB7XG4gIGlzQXJyYXk6XG4gICAgJ2lzQXJyYXknIGluIEFycmF5XG4gICAgICA/IEFycmF5LmlzQXJyYXlcbiAgICAgIDogKHZhbHVlOiBhbnkpOiBib29sZWFuID0+IHtcbiAgICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgICAgIH0sXG4gIGlzQXJyYXlMaWtlKHg6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJztcbiAgfSxcbiAgY2xvbmU8VD4ob2JqOiBUKTogVCB7XG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgbGV0IHJzdDtcbiAgICBpZiAoVXRpbC5pc0FycmF5TGlrZShvYmopKSB7XG4gICAgICByc3QgPSAob2JqIGFzIGFueSkuc2xpY2UoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gKG9iaiBhcyBhbnkpLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICByc3RbaV0gPSBVdGlsLmNsb25lKG9ialtpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJzdCA9IHt9O1xuICAgICAgZm9yIChjb25zdCBrIGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgcnN0W2tdID0gVXRpbC5jbG9uZShvYmpba10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJzdDtcbiAgfSxcblxuICBkb3dubG9hZEJsb2IoYmxvYjogQmxvYiwgZmlsZU5hbWU6IHN0cmluZyA9ICcnKSB7XG4gICAgbGV0IHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGEuaHJlZiA9IHVybDtcbiAgICBhLmRvd25sb2FkID0gZmlsZU5hbWU7XG4gICAgYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGlmIChhLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgYS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGEuY2xpY2soKTtcbiAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IGlzQXJyYXlMaWtlID0gPFQ+KHg6IGFueSk6IHggaXMgQXJyYXlMaWtlPFQ+ID0+XG4gIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJztcblxuLyoqXG4gKiBGYXN0bHkgcmVtb3ZlIGFuIGVsZW1lbnQgZnJvbSBhcnJheS5cbiAqIEBwYXJhbSBhcnJheSAtIEFycmF5XG4gKiBAcGFyYW0gaXRlbSAtIEVsZW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUZyb21BcnJheShhcnJheTogYW55W10sIGl0ZW06IGFueSk6IGJvb2xlYW4ge1xuICBjb25zdCBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbGFzdCA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCAhPT0gbGFzdCkge1xuICAgIGNvbnN0IGVuZCA9IGFycmF5W2xhc3RdO1xuICAgIGFycmF5W2luZGV4XSA9IGVuZDtcbiAgfVxuICBhcnJheS5sZW5ndGgtLTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBhbiBvYmplY3Qgb3IgYXJyYXkuXG4gKiBAcGFyYW0gb2JqIE9iamVjdCBvciBBcnJheS5cbiAqIEByZXR1cm5zIE9iamVjdCB2YWx1ZSBhcnJheS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE9iamVjdFZhbHVlcyhvYmo6IGFueSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoKGtleTogYW55KSA9PiBvYmpba2V5XSk7XG59XG4iLCJpbXBvcnQgeyByZW1vdmVGcm9tQXJyYXkgfSBmcm9tICcuL2Jhc2UvVXRpbCc7XG5pbXBvcnQgeyBVcGRhdGVGbGFnTWFuYWdlciB9IGZyb20gJy4vVXBkYXRlRmxhZ01hbmFnZXInO1xuXG4vKipcbiAqIFVzZWQgdG8gdXBkYXRlIHRhZ3MuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBVcGRhdGVGbGFnIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZmxhZ01hbmFnZXJzOiBVcGRhdGVGbGFnTWFuYWdlcltdID0gW107XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoLlxuICAgKiBAcGFyYW0gcGFyYW0gLSBQYXJhbWV0ZXJcbiAgICovXG4gIGFic3RyYWN0IGRpc3BhdGNoKHBhcmFtPzogT2JqZWN0KTogdm9pZDtcblxuICAvKipcbiAgICogQ2xlYXIuXG4gICAqL1xuICBjbGVhckZyb21NYW5hZ2VycygpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW1vdmVGcm9tTWFuYWdlcnMoKTtcbiAgICB0aGlzLl9mbGFnTWFuYWdlcnMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95LlxuICAgKi9cbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW1vdmVGcm9tTWFuYWdlcnMoKTtcbiAgICB0aGlzLl9mbGFnTWFuYWdlcnMgPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVtb3ZlRnJvbU1hbmFnZXJzKCk6IHZvaWQge1xuICAgIGNvbnN0IGZsYWdNYW5hZ2VycyA9IHRoaXMuX2ZsYWdNYW5hZ2VycztcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IGZsYWdNYW5hZ2Vycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIHJlbW92ZUZyb21BcnJheShmbGFnTWFuYWdlcnNbaV0uX3VwZGF0ZUZsYWdzLCB0aGlzKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFVwZGF0ZUZsYWcgfSBmcm9tICcuL1VwZGF0ZUZsYWcnO1xuXG4vKipcbiAqIFVzZWQgdG8gdXBkYXRlIHRhZ3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBCb29sVXBkYXRlRmxhZyBleHRlbmRzIFVwZGF0ZUZsYWcge1xuICAvKiogRmxhZy4gKi9cbiAgZmxhZyA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqL1xuICBkaXNwYXRjaCgpOiB2b2lkIHtcbiAgICB0aGlzLmZsYWcgPSB0cnVlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBVcGRhdGVGbGFnIH0gZnJvbSAnLi9VcGRhdGVGbGFnJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFVwZGF0ZUZsYWdNYW5hZ2VyIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfdXBkYXRlRmxhZ3M6IFVwZGF0ZUZsYWdbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBVcGRhdGVGbGFnLlxuICAgKiBAcmV0dXJucyAtIFRoZSBVcGRhdGVGbGFnLlxuICAgKi9cbiAgY3JlYXRlRmxhZzxUIGV4dGVuZHMgVXBkYXRlRmxhZz4odHlwZTogbmV3ICgpID0+IFQpOiBUIHtcbiAgICBjb25zdCBmbGFnID0gbmV3IHR5cGUoKTtcbiAgICB0aGlzLmFkZEZsYWcoZmxhZyk7XG4gICAgcmV0dXJuIGZsYWc7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgVXBkYXRlRmxhZy5cbiAgICogQHBhcmFtIGZsYWcgLSBUaGUgVXBkYXRlRmxhZy5cbiAgICovXG4gIGFkZEZsYWcoZmxhZzogVXBkYXRlRmxhZyk6IHZvaWQge1xuICAgIHRoaXMuX3VwZGF0ZUZsYWdzLnB1c2goZmxhZyk7XG4gICAgZmxhZy5fZmxhZ01hbmFnZXJzLnB1c2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2guXG4gICAqL1xuICBkaXNwYXRjaChwYXJhbT86IE9iamVjdCk6IHZvaWQge1xuICAgIGNvbnN0IHVwZGF0ZUZsYWdzID0gdGhpcy5fdXBkYXRlRmxhZ3M7XG4gICAgZm9yIChsZXQgaSA9IHVwZGF0ZUZsYWdzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB1cGRhdGVGbGFnc1tpXS5kaXNwYXRjaChwYXJhbSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IzLCBNYXRyaXg0LCBRdWF0ZXJuaW9uLCBNYXRoVXRpbCwgTWF0cml4MyB9IGZyb20gJy4uL21hdGgnO1xuaW1wb3J0IHsgQm9vbFVwZGF0ZUZsYWcgfSBmcm9tICcuL0Jvb2xVcGRhdGVGbGFnJztcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4vRW50aXR5JztcbmltcG9ydCB7IFVwZGF0ZUZsYWdNYW5hZ2VyIH0gZnJvbSAnLi9VcGRhdGVGbGFnTWFuYWdlcic7XG5cbi8qKlxuICogVXNlZCB0byBpbXBsZW1lbnQgdHJhbnNmb3JtYXRpb24gcmVsYXRlZCBmdW5jdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2Zvcm0ge1xuICBwcml2YXRlIHN0YXRpYyBfdGVtcFF1YXQwOiBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcbiAgcHJpdmF0ZSBzdGF0aWMgX3RlbXBWZWMzMDogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG4gIHByaXZhdGUgc3RhdGljIF90ZW1wVmVjMzE6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuICBwcml2YXRlIHN0YXRpYyBfdGVtcFZlYzMyOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcbiAgcHJpdmF0ZSBzdGF0aWMgX3RlbXBNYXQzMDogTWF0cml4MyA9IG5ldyBNYXRyaXgzKCk7XG4gIHByaXZhdGUgc3RhdGljIF90ZW1wTWF0MzE6IE1hdHJpeDMgPSBuZXcgTWF0cml4MygpO1xuICBwcml2YXRlIHN0YXRpYyBfdGVtcE1hdDMyOiBNYXRyaXgzID0gbmV3IE1hdHJpeDMoKTtcbiAgcHJpdmF0ZSBzdGF0aWMgX3RlbXBNYXQ0MTogTWF0cml4NCA9IG5ldyBNYXRyaXg0KCk7XG4gIHByaXZhdGUgc3RhdGljIF90ZW1wTWF0NDI6IE1hdHJpeDQgPSBuZXcgTWF0cml4NCgpO1xuXG4gIHByaXZhdGUgX3Bvc2l0aW9uOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblxuICBwcml2YXRlIF9yb3RhdGlvbjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG5cbiAgcHJpdmF0ZSBfcm90YXRpb25RdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuICBwcml2YXRlIF9zY2FsZTogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKDEsIDEsIDEpO1xuXG4gIHByaXZhdGUgX3dvcmxkUG9zaXRpb246IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXG4gIHByaXZhdGUgX3dvcmxkUm90YXRpb246IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXG4gIHByaXZhdGUgX3dvcmxkUm90YXRpb25RdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuICBwcml2YXRlIF9sb3NzeVdvcmxkU2NhbGU6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygxLCAxLCAxKTtcblxuICBwcml2YXRlIF9sb2NhbE1hdHJpeDogTWF0cml4NCA9IG5ldyBNYXRyaXg0KCk7XG5cbiAgcHJpdmF0ZSBfd29ybGRNYXRyaXg6IE1hdHJpeDQgPSBuZXcgTWF0cml4NCgpO1xuICBwcml2YXRlIF91cGRhdGVGbGFnTWFuYWdlcjogVXBkYXRlRmxhZ01hbmFnZXIgPSBuZXcgVXBkYXRlRmxhZ01hbmFnZXIoKTtcbiAgcHJpdmF0ZSBfaXNQYXJlbnREaXJ0eTogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgX3BhcmVudFRyYW5zZm9ybUNhY2hlOiBUcmFuc2Zvcm0gPSBudWxsO1xuXG4gIHByaXZhdGUgX2VudGl0eTogRW50aXR5O1xuXG4gIHByaXZhdGUgX2RpcnR5RmxhZzogbnVtYmVyID0gVHJhbnNmb3JtRmxhZy5XbVdwV2VXcVdzO1xuXG4gIC8qKlxuICAgKiBMb2NhbCBwb3NpdGlvbi5cbiAgICovXG4gIGdldCBwb3NpdGlvbigpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XG4gIH1cblxuICBzZXQgcG9zaXRpb24odmFsdWU6IFZlY3RvcjMpIHtcbiAgICBpZiAodGhpcy5fcG9zaXRpb24gIT09IHZhbHVlKSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX3Bvc2l0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV29ybGQgcG9zaXRpb24uXG4gICAqL1xuICBnZXQgd29ybGRQb3NpdGlvbigpOiBWZWN0b3IzIHtcbiAgICBjb25zdCB3b3JsZFBvc2l0aW9uID0gdGhpcy5fd29ybGRQb3NpdGlvbjtcbiAgICBpZiAodGhpcy5faXNDb250YWluRGlydHlGbGFnKFRyYW5zZm9ybUZsYWcuV29ybGRQb3NpdGlvbikpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgd29ybGRQb3NpdGlvbi5fb25WYWx1ZUNoYW5nZWQgPSBudWxsO1xuICAgICAgLy8gaWYgKHRoaXMuX2dldFBhcmVudFRyYW5zZm9ybSgpKSB7XG4gICAgICBpZiAobnVsbCkge1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4LmdldFRyYW5zbGF0aW9uKHdvcmxkUG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcG9zaXRpb24uY2xvbmVUbyh3b3JsZFBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgd29ybGRQb3NpdGlvbi5fb25WYWx1ZUNoYW5nZWQgPSB0aGlzLl9vbldvcmxkUG9zaXRpb25DaGFuZ2VkO1xuICAgICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Xb3JsZFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd29ybGRQb3NpdGlvbjtcbiAgfVxuXG4gIHNldCB3b3JsZFBvc2l0aW9uKHZhbHVlOiBWZWN0b3IzKSB7XG4gICAgaWYgKHRoaXMuX3dvcmxkUG9zaXRpb24gIT09IHZhbHVlKSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX3dvcmxkUG9zaXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2NhbCByb3RhdGlvbiwgZGVmaW5pbmcgdGhlIHJvdGF0aW9uIHZhbHVlIGluIGRlZ3JlZXMuXG4gICAqIFJvdGF0aW9ucyBhcmUgcGVyZm9ybWVkIGFyb3VuZCB0aGUgWSBheGlzLCB0aGUgWCBheGlzLCBhbmQgdGhlIFogYXhpcywgaW4gdGhhdCBvcmRlci5cbiAgICovXG4gIGdldCByb3RhdGlvbigpOiBWZWN0b3IzIHtcbiAgICBjb25zdCByb3RhdGlvbiA9IHRoaXMuX3JvdGF0aW9uO1xuICAgIGlmICh0aGlzLl9pc0NvbnRhaW5EaXJ0eUZsYWcoVHJhbnNmb3JtRmxhZy5Mb2NhbEV1bGVyKSkge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICByb3RhdGlvbi5fb25WYWx1ZUNoYW5nZWQgPSBudWxsO1xuICAgICAgdGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uLnRvRXVsZXIocm90YXRpb24pO1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICByb3RhdGlvbi5fb25WYWx1ZUNoYW5nZWQgPSB0aGlzLl9vblJvdGF0aW9uQ2hhbmdlZDtcbiAgICAgIHJvdGF0aW9uLnNjYWxlKE1hdGhVdGlsLnJhZFRvRGVncmVlRmFjdG9yKTsgLy8gcmFkaWFucyB0byBkZWdyZWVzXG4gICAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLkxvY2FsRXVsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiByb3RhdGlvbjtcbiAgfVxuXG4gIHNldCByb3RhdGlvbih2YWx1ZTogVmVjdG9yMykge1xuICAgIGlmICh0aGlzLl9yb3RhdGlvbiAhPT0gdmFsdWUpIHtcbiAgICAgIHZhbHVlLmNsb25lVG8odGhpcy5fcm90YXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXb3JsZCByb3RhdGlvbiwgZGVmaW5pbmcgdGhlIHJvdGF0aW9uIHZhbHVlIGluIGRlZ3JlZXMuXG4gICAqIFJvdGF0aW9ucyBhcmUgcGVyZm9ybWVkIGFyb3VuZCB0aGUgWSBheGlzLCB0aGUgWCBheGlzLCBhbmQgdGhlIFogYXhpcywgaW4gdGhhdCBvcmRlci5cbiAgICovXG4gIGdldCB3b3JsZFJvdGF0aW9uKCk6IFZlY3RvcjMge1xuICAgIGNvbnN0IHdvcmxkUm90YXRpb24gPSB0aGlzLl93b3JsZFJvdGF0aW9uO1xuICAgIGlmICh0aGlzLl9pc0NvbnRhaW5EaXJ0eUZsYWcoVHJhbnNmb3JtRmxhZy5Xb3JsZEV1bGVyKSkge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICB3b3JsZFJvdGF0aW9uLl9vblZhbHVlQ2hhbmdlZCA9IG51bGw7XG4gICAgICB0aGlzLndvcmxkUm90YXRpb25RdWF0ZXJuaW9uLnRvRXVsZXIod29ybGRSb3RhdGlvbik7XG4gICAgICB3b3JsZFJvdGF0aW9uLnNjYWxlKE1hdGhVdGlsLnJhZFRvRGVncmVlRmFjdG9yKTsgLy8gUmFkaWFuIHRvIGFuZ2xlXG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIHdvcmxkUm90YXRpb24uX29uVmFsdWVDaGFuZ2VkID0gdGhpcy5fb25Xb3JsZFJvdGF0aW9uQ2hhbmdlZDtcbiAgICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuV29ybGRFdWxlcik7XG4gICAgfVxuICAgIHJldHVybiB3b3JsZFJvdGF0aW9uO1xuICB9XG5cbiAgc2V0IHdvcmxkUm90YXRpb24odmFsdWU6IFZlY3RvcjMpIHtcbiAgICBpZiAodGhpcy5fd29ybGRSb3RhdGlvbiAhPT0gdmFsdWUpIHtcbiAgICAgIHZhbHVlLmNsb25lVG8odGhpcy5fd29ybGRSb3RhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvY2FsIHJvdGF0aW9uLCBkZWZpbmluZyB0aGUgcm90YXRpb24gYnkgdXNpbmcgYSB1bml0IHF1YXRlcm5pb24uXG4gICAqL1xuICBnZXQgcm90YXRpb25RdWF0ZXJuaW9uKCk6IFF1YXRlcm5pb24ge1xuICAgIGNvbnN0IHJvdGF0aW9uUXVhdGVybmlvbiA9IHRoaXMuX3JvdGF0aW9uUXVhdGVybmlvbjtcbiAgICBpZiAodGhpcy5faXNDb250YWluRGlydHlGbGFnKFRyYW5zZm9ybUZsYWcuTG9jYWxRdWF0KSkge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICByb3RhdGlvblF1YXRlcm5pb24uX29uVmFsdWVDaGFuZ2VkID0gbnVsbDtcbiAgICAgIFF1YXRlcm5pb24ucm90YXRpb25FdWxlcihcbiAgICAgICAgTWF0aFV0aWwuZGVncmVlVG9SYWRpYW4odGhpcy5fcm90YXRpb24ueCksXG4gICAgICAgIE1hdGhVdGlsLmRlZ3JlZVRvUmFkaWFuKHRoaXMuX3JvdGF0aW9uLnkpLFxuICAgICAgICBNYXRoVXRpbC5kZWdyZWVUb1JhZGlhbih0aGlzLl9yb3RhdGlvbi56KSxcbiAgICAgICAgcm90YXRpb25RdWF0ZXJuaW9uLFxuICAgICAgKTtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgcm90YXRpb25RdWF0ZXJuaW9uLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uUm90YXRpb25RdWF0ZXJuaW9uQ2hhbmdlZDtcbiAgICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuTG9jYWxRdWF0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJvdGF0aW9uUXVhdGVybmlvbjtcbiAgfVxuXG4gIHNldCByb3RhdGlvblF1YXRlcm5pb24odmFsdWU6IFF1YXRlcm5pb24pIHtcbiAgICBpZiAodGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uICE9PSB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlLm5vcm1hbGl6ZWQpIHtcbiAgICAgICAgdmFsdWUuY2xvbmVUbyh0aGlzLl9yb3RhdGlvblF1YXRlcm5pb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUXVhdGVybmlvbi5ub3JtYWxpemUodmFsdWUsIHRoaXMuX3JvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlLm5vcm1hbGl6ZWQgfHwgdmFsdWUubm9ybWFsaXplKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdvcmxkIHJvdGF0aW9uLCBkZWZpbmluZyB0aGUgcm90YXRpb24gYnkgdXNpbmcgYSB1bml0IHF1YXRlcm5pb24uXG4gICAqL1xuICBnZXQgd29ybGRSb3RhdGlvblF1YXRlcm5pb24oKTogUXVhdGVybmlvbiB7XG4gICAgY29uc3Qgd29ybGRSb3RhdGlvblF1YXRlcm5pb24gPSB0aGlzLl93b3JsZFJvdGF0aW9uUXVhdGVybmlvbjtcbiAgICBpZiAodGhpcy5faXNDb250YWluRGlydHlGbGFnKFRyYW5zZm9ybUZsYWcuV29ybGRRdWF0KSkge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICB3b3JsZFJvdGF0aW9uUXVhdGVybmlvbi5fb25WYWx1ZUNoYW5nZWQgPSBudWxsO1xuICAgICAgY29uc3QgcGFyZW50ID0gbnVsbDtcbiAgICAgIC8vIGNvbnN0IHBhcmVudCA9IHRoaXMuX2dldFBhcmVudFRyYW5zZm9ybSgpO1xuICAgICAgaWYgKHBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgIFF1YXRlcm5pb24ubXVsdGlwbHkocGFyZW50LndvcmxkUm90YXRpb25RdWF0ZXJuaW9uLCB0aGlzLnJvdGF0aW9uUXVhdGVybmlvbiwgd29ybGRSb3RhdGlvblF1YXRlcm5pb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yb3RhdGlvblF1YXRlcm5pb24uY2xvbmVUbyh3b3JsZFJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgICB9XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uV29ybGRSb3RhdGlvblF1YXRlcm5pb25DaGFuZ2VkO1xuICAgICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Xb3JsZFF1YXQpO1xuICAgIH1cbiAgICByZXR1cm4gd29ybGRSb3RhdGlvblF1YXRlcm5pb247XG4gIH1cblxuICBzZXQgd29ybGRSb3RhdGlvblF1YXRlcm5pb24odmFsdWU6IFF1YXRlcm5pb24pIHtcbiAgICBpZiAodGhpcy5fd29ybGRSb3RhdGlvblF1YXRlcm5pb24gIT09IHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUubm9ybWFsaXplZCkge1xuICAgICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX3dvcmxkUm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFF1YXRlcm5pb24ubm9ybWFsaXplKHZhbHVlLCB0aGlzLl93b3JsZFJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgICB9XG4gICAgfVxuICAgIHZhbHVlLm5vcm1hbGl6ZWQgfHwgdmFsdWUubm9ybWFsaXplKCk7XG4gIH1cblxuICAvKipcbiAgICogTG9jYWwgc2NhbGluZy5cbiAgICovXG4gIGdldCBzY2FsZSgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gIH1cblxuICBzZXQgc2NhbGUodmFsdWU6IFZlY3RvcjMpIHtcbiAgICBpZiAodGhpcy5fc2NhbGUgIT09IHZhbHVlKSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX3NjYWxlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9jYWwgbG9zc3kgc2NhbGluZy5cbiAgICogQHJlbWFya3MgVGhlIHZhbHVlIG9idGFpbmVkIG1heSBub3QgYmUgY29ycmVjdCB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMoZm9yIGV4YW1wbGUsIHRoZSBwYXJlbnQgbm9kZSBoYXMgc2NhbGluZyxcbiAgICogYW5kIHRoZSBjaGlsZCBub2RlIGhhcyBhIHJvdGF0aW9uKSwgdGhlIHNjYWxpbmcgd2lsbCBiZSB0aWx0ZWQuIFZlY3RvcjMgY2Fubm90IGJlIHVzZWQgdG8gY29ycmVjdGx5IHJlcHJlc2VudCB0aGUgc2NhbGluZy4gTXVzdCB1c2UgTWF0cml4My5cbiAgICovXG4gIGdldCBsb3NzeVdvcmxkU2NhbGUoKTogVmVjdG9yMyB7XG4gICAgaWYgKHRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZyhUcmFuc2Zvcm1GbGFnLldvcmxkU2NhbGUpKSB7XG4gICAgICAvLyBpZiAodGhpcy5fZ2V0UGFyZW50VHJhbnNmb3JtKCkpIHtcbiAgICAgIGlmIChudWxsKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlTWF0ID0gdGhpcy5fZ2V0U2NhbGVNYXRyaXgoKTtcbiAgICAgICAgY29uc3QgZSA9IHNjYWxlTWF0LmVsZW1lbnRzO1xuICAgICAgICB0aGlzLl9sb3NzeVdvcmxkU2NhbGUuc2V0VmFsdWUoZVswXSwgZVs0XSwgZVs4XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zY2FsZS5jbG9uZVRvKHRoaXMuX2xvc3N5V29ybGRTY2FsZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLldvcmxkU2NhbGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbG9zc3lXb3JsZFNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIExvY2FsIG1hdHJpeC5cbiAgICogQHJlbWFya3MgTmVlZCB0byByZS1hc3NpZ24gYWZ0ZXIgbW9kaWZpY2F0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSBtb2RpZmljYXRpb24gdGFrZXMgZWZmZWN0LlxuICAgKi9cbiAgZ2V0IGxvY2FsTWF0cml4KCk6IE1hdHJpeDQge1xuICAgIGlmICh0aGlzLl9pc0NvbnRhaW5EaXJ0eUZsYWcoVHJhbnNmb3JtRmxhZy5Mb2NhbE1hdHJpeCkpIHtcbiAgICAgIE1hdHJpeDQuYWZmaW5lVHJhbnNmb3JtYXRpb24odGhpcy5fc2NhbGUsIHRoaXMucm90YXRpb25RdWF0ZXJuaW9uLCB0aGlzLl9wb3NpdGlvbiwgdGhpcy5fbG9jYWxNYXRyaXgpO1xuICAgICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Mb2NhbE1hdHJpeCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9sb2NhbE1hdHJpeDtcbiAgfVxuXG4gIHNldCBsb2NhbE1hdHJpeCh2YWx1ZTogTWF0cml4NCkge1xuICAgIGlmICh0aGlzLl9sb2NhbE1hdHJpeCAhPT0gdmFsdWUpIHtcbiAgICAgIHZhbHVlLmNsb25lVG8odGhpcy5fbG9jYWxNYXRyaXgpO1xuICAgIH1cblxuICAgIHRoaXMuX2xvY2FsTWF0cml4LmRlY29tcG9zZSh0aGlzLl9wb3NpdGlvbiwgdGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uLCB0aGlzLl9zY2FsZSk7XG5cbiAgICB0aGlzLl9zZXREaXJ0eUZsYWdUcnVlKFRyYW5zZm9ybUZsYWcuTG9jYWxFdWxlcik7XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Mb2NhbE1hdHJpeCk7XG4gICAgdGhpcy5fdXBkYXRlQWxsV29ybGRGbGFnKCk7XG4gIH1cblxuICAvKipcbiAgICogV29ybGQgbWF0cml4LlxuICAgKiBAcmVtYXJrcyBOZWVkIHRvIHJlLWFzc2lnbiBhZnRlciBtb2RpZmljYXRpb24gdG8gZW5zdXJlIHRoYXQgdGhlIG1vZGlmaWNhdGlvbiB0YWtlcyBlZmZlY3QuXG4gICAqL1xuICBnZXQgd29ybGRNYXRyaXgoKTogTWF0cml4NCB7XG4gICAgaWYgKHRoaXMuX2lzQ29udGFpbkRpcnR5RmxhZyhUcmFuc2Zvcm1GbGFnLldvcmxkTWF0cml4KSkge1xuICAgICAgLy8gY29uc3QgcGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50VHJhbnNmb3JtKCk7XG4gICAgICBjb25zdCBwYXJlbnQgPSBudWxsO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBNYXRyaXg0Lm11bHRpcGx5KHBhcmVudC53b3JsZE1hdHJpeCwgdGhpcy5sb2NhbE1hdHJpeCwgdGhpcy5fd29ybGRNYXRyaXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2NhbE1hdHJpeC5jbG9uZVRvKHRoaXMuX3dvcmxkTWF0cml4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuV29ybGRNYXRyaXgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd29ybGRNYXRyaXg7XG4gIH1cblxuICBzZXQgd29ybGRNYXRyaXgodmFsdWU6IE1hdHJpeDQpIHtcbiAgICBpZiAodGhpcy5fd29ybGRNYXRyaXggIT09IHZhbHVlKSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX3dvcmxkTWF0cml4KTtcbiAgICB9XG4gICAgLy8gY29uc3QgcGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50VHJhbnNmb3JtKCk7XG4gICAgY29uc3QgcGFyZW50ID0gbnVsbDtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBNYXRyaXg0LmludmVydChwYXJlbnQud29ybGRNYXRyaXgsIFRyYW5zZm9ybS5fdGVtcE1hdDQyKTtcbiAgICAgIE1hdHJpeDQubXVsdGlwbHkodmFsdWUsIFRyYW5zZm9ybS5fdGVtcE1hdDQyLCB0aGlzLl9sb2NhbE1hdHJpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlLmNsb25lVG8odGhpcy5fbG9jYWxNYXRyaXgpO1xuICAgIH1cbiAgICB0aGlzLmxvY2FsTWF0cml4ID0gdGhpcy5fbG9jYWxNYXRyaXg7XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Xb3JsZE1hdHJpeCk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbnRpdHk6IEVudGl0eSA9IG51bGwpIHtcbiAgICB0aGlzLl9lbnRpdHkgPSBlbnRpdHk7XG5cbiAgICB0aGlzLl9vblBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX29uUG9zaXRpb25DaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Xb3JsZFBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX29uV29ybGRQb3NpdGlvbkNoYW5nZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vblJvdGF0aW9uQ2hhbmdlZCA9IHRoaXMuX29uUm90YXRpb25DaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Xb3JsZFJvdGF0aW9uQ2hhbmdlZCA9IHRoaXMuX29uV29ybGRSb3RhdGlvbkNoYW5nZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vblJvdGF0aW9uUXVhdGVybmlvbkNoYW5nZWQgPSB0aGlzLl9vblJvdGF0aW9uUXVhdGVybmlvbkNoYW5nZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbldvcmxkUm90YXRpb25RdWF0ZXJuaW9uQ2hhbmdlZCA9IHRoaXMuX29uV29ybGRSb3RhdGlvblF1YXRlcm5pb25DaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25TY2FsZUNoYW5nZWQgPSB0aGlzLl9vblNjYWxlQ2hhbmdlZC5iaW5kKHRoaXMpO1xuXG4gICAgLy9AdHMtaWdub3JlXG4gICAgdGhpcy5fcG9zaXRpb24uX29uVmFsdWVDaGFuZ2VkID0gdGhpcy5fb25Qb3NpdGlvbkNoYW5nZWQ7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgdGhpcy5fd29ybGRQb3NpdGlvbi5fb25WYWx1ZUNoYW5nZWQgPSB0aGlzLl9vbldvcmxkUG9zaXRpb25DaGFuZ2VkO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuX3JvdGF0aW9uLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uUm90YXRpb25DaGFuZ2VkO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuX3dvcmxkUm90YXRpb24uX29uVmFsdWVDaGFuZ2VkID0gdGhpcy5fb25Xb3JsZFJvdGF0aW9uQ2hhbmdlZDtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB0aGlzLl9yb3RhdGlvblF1YXRlcm5pb24uX29uVmFsdWVDaGFuZ2VkID0gdGhpcy5fb25Sb3RhdGlvblF1YXRlcm5pb25DaGFuZ2VkO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuX3dvcmxkUm90YXRpb25RdWF0ZXJuaW9uLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uV29ybGRSb3RhdGlvblF1YXRlcm5pb25DaGFuZ2VkO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuX3NjYWxlLl9vblZhbHVlQ2hhbmdlZCA9IHRoaXMuX29uU2NhbGVDaGFuZ2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsb2NhbCBwb3NpdGlvbiBieSBYLCBZLCBaIHZhbHVlLlxuICAgKiBAcGFyYW0geCAtIFggY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0geSAtIFkgY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0geiAtIFogY29vcmRpbmF0ZVxuICAgKi9cbiAgc2V0UG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3Bvc2l0aW9uLnNldFZhbHVlKHgsIHksIHopO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsb2NhbCByb3RhdGlvbiBieSB0aGUgWCwgWSwgWiBjb21wb25lbnRzIG9mIHRoZSBldWxlciBhbmdsZSwgdW5pdCBpbiBkZWdyZWVzLlxuICAgKiBSb3RhdGlvbnMgYXJlIHBlcmZvcm1lZCBhcm91bmQgdGhlIFkgYXhpcywgdGhlIFggYXhpcywgYW5kIHRoZSBaIGF4aXMsIGluIHRoYXQgb3JkZXIuXG4gICAqIEBwYXJhbSB4IC0gVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGFyb3VuZCB0aGUgWCBheGlzXG4gICAqIEBwYXJhbSB5IC0gVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGFyb3VuZCB0aGUgWSBheGlzXG4gICAqIEBwYXJhbSB6IC0gVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGFyb3VuZCB0aGUgWiBheGlzXG4gICAqL1xuICBzZXRSb3RhdGlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fcm90YXRpb24uc2V0VmFsdWUoeCwgeSwgeik7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGxvY2FsIHJvdGF0aW9uIGJ5IHRoZSBYLCBZLCBaLCBhbmQgVyBjb21wb25lbnRzIG9mIHRoZSBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0geCAtIFggY29tcG9uZW50IG9mIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHkgLSBZIGNvbXBvbmVudCBvZiBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSB6IC0gWiBjb21wb25lbnQgb2YgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gdyAtIFcgY29tcG9uZW50IG9mIHF1YXRlcm5pb25cbiAgICovXG4gIHNldFJvdGF0aW9uUXVhdGVybmlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCB3OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9yb3RhdGlvblF1YXRlcm5pb24uc2V0VmFsdWUoeCwgeSwgeiwgdyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGxvY2FsIHNjYWxpbmcgYnkgc2NhbGluZyB2YWx1ZXMgYWxvbmcgWCwgWSwgWiBheGlzLlxuICAgKiBAcGFyYW0geCAtIFNjYWxpbmcgYWxvbmcgWCBheGlzXG4gICAqIEBwYXJhbSB5IC0gU2NhbGluZyBhbG9uZyBZIGF4aXNcbiAgICogQHBhcmFtIHogLSBTY2FsaW5nIGFsb25nIFogYXhpc1xuICAgKi9cbiAgc2V0U2NhbGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3NjYWxlLnNldFZhbHVlKHgsIHksIHopO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB3b3JsZCBwb3NpdGlvbiBieSBYLCBZLCBaIHZhbHVlLlxuICAgKiBAcGFyYW0geCAtIFggY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0geSAtIFkgY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0geiAtIFogY29vcmRpbmF0ZVxuICAgKi9cbiAgc2V0V29ybGRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fd29ybGRQb3NpdGlvbi5zZXRWYWx1ZSh4LCB5LCB6KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgd29ybGQgcm90YXRpb24gYnkgdGhlIFgsIFksIFogY29tcG9uZW50cyBvZiB0aGUgZXVsZXIgYW5nbGUsIHVuaXQgaW4gZGVncmVlcywgWWF3L1BpdGNoL1JvbGwgc2VxdWVuY2UuXG4gICAqIEBwYXJhbSB4IC0gVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGFyb3VuZCB0aGUgWCBheGlzXG4gICAqIEBwYXJhbSB5IC0gVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGFyb3VuZCB0aGUgWSBheGlzXG4gICAqIEBwYXJhbSB6IC0gVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGFyb3VuZCB0aGUgWiBheGlzXG4gICAqL1xuICBzZXRXb3JsZFJvdGF0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl93b3JsZFJvdGF0aW9uLnNldFZhbHVlKHgsIHksIHopO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsb2NhbCByb3RhdGlvbiBieSB0aGUgWCwgWSwgWiwgYW5kIFcgY29tcG9uZW50cyBvZiB0aGUgcXVhdGVybmlvbi5cbiAgICogQHBhcmFtIHggLSBYIGNvbXBvbmVudCBvZiBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSB5IC0gWSBjb21wb25lbnQgb2YgcXVhdGVybmlvblxuICAgKiBAcGFyYW0geiAtIFogY29tcG9uZW50IG9mIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHcgLSBXIGNvbXBvbmVudCBvZiBxdWF0ZXJuaW9uXG4gICAqL1xuICBzZXRXb3JsZFJvdGF0aW9uUXVhdGVybmlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCB3OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl93b3JsZFJvdGF0aW9uUXVhdGVybmlvbi5zZXRWYWx1ZSh4LCB5LCB6LCB3KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZvcndhcmQgZGlyZWN0aW9uIGluIHdvcmxkIHNwYWNlLlxuICAgKiBAcGFyYW0gZm9yd2FyZCAtIEZvcndhcmQgdmVjdG9yXG4gICAqIEByZXR1cm5zIEZvcndhcmQgdmVjdG9yXG4gICAqL1xuICBnZXRXb3JsZEZvcndhcmQoZm9yd2FyZDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIGNvbnN0IGUgPSB0aGlzLndvcmxkTWF0cml4LmVsZW1lbnRzO1xuICAgIGZvcndhcmQuc2V0VmFsdWUoLWVbOF0sIC1lWzldLCAtZVsxMF0pO1xuICAgIHJldHVybiBmb3J3YXJkLm5vcm1hbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcmlnaHQgZGlyZWN0aW9uIGluIHdvcmxkIHNwYWNlLlxuICAgKiBAcGFyYW0gcmlnaHQgLSBSaWdodCB2ZWN0b3JcbiAgICogQHJldHVybnMgUmlnaHQgdmVjdG9yXG4gICAqL1xuICBnZXRXb3JsZFJpZ2h0KHJpZ2h0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgY29uc3QgZSA9IHRoaXMud29ybGRNYXRyaXguZWxlbWVudHM7XG4gICAgcmlnaHQuc2V0VmFsdWUoZVswXSwgZVsxXSwgZVsyXSk7XG4gICAgcmV0dXJuIHJpZ2h0Lm5vcm1hbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdXAgZGlyZWN0aW9uIGluIHdvcmxkIHNwYWNlLlxuICAgKiBAcGFyYW0gdXAgLSBVcCB2ZWN0b3JcbiAgICogQHJldHVybnMgVXAgdmVjdG9yXG4gICAqL1xuICBnZXRXb3JsZFVwKHVwOiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgY29uc3QgZSA9IHRoaXMud29ybGRNYXRyaXguZWxlbWVudHM7XG4gICAgdXAuc2V0VmFsdWUoZVs0XSwgZVs1XSwgZVs2XSk7XG4gICAgcmV0dXJuIHVwLm5vcm1hbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZSBhbG9uZyB0aGUgcGFzc2VkIFZlY3RvcjMuXG4gICAqIEBwYXJhbSB0cmFuc2xhdGlvbiAtIERpcmVjdGlvbiBhbmQgZGlzdGFuY2Ugb2YgdHJhbnNsYXRpb25cbiAgICogQHBhcmFtIHJlbGF0aXZlVG9Mb2NhbCAtIFJlbGF0aXZlIHRvIGxvY2FsIHNwYWNlXG4gICAqL1xuICB0cmFuc2xhdGUodHJhbnNsYXRpb246IFZlY3RvcjMsIHJlbGF0aXZlVG9Mb2NhbD86IGJvb2xlYW4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgYWxvbmcgdGhlIHBhc3NlZCBYLCBZLCBaIHZhbHVlLlxuICAgKiBAcGFyYW0geCAtIFRyYW5zbGF0ZSBkaXJlY3Rpb24gYW5kIGRpc3RhbmNlIGFsb25nIHggYXhpc1xuICAgKiBAcGFyYW0geSAtIFRyYW5zbGF0ZSBkaXJlY3Rpb24gYW5kIGRpc3RhbmNlIGFsb25nIHkgYXhpc1xuICAgKiBAcGFyYW0geiAtIFRyYW5zbGF0ZSBkaXJlY3Rpb24gYW5kIGRpc3RhbmNlIGFsb25nIHogYXhpc1xuICAgKiBAcGFyYW0gcmVsYXRpdmVUb0xvY2FsIC0gUmVsYXRpdmUgdG8gbG9jYWwgc3BhY2VcbiAgICovXG4gIHRyYW5zbGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCByZWxhdGl2ZVRvTG9jYWw/OiBib29sZWFuKTogdm9pZDtcblxuICB0cmFuc2xhdGUoXG4gICAgdHJhbnNsYXRpb25Pclg6IFZlY3RvcjMgfCBudW1iZXIsXG4gICAgcmVsYXRpdmVUb0xvY2FsT3JZPzogYm9vbGVhbiB8IG51bWJlcixcbiAgICB6PzogbnVtYmVyLFxuICAgIHJlbGF0aXZlVG9Mb2NhbD86IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgdHJhbnNsYXRpb25PclggPT09ICdudW1iZXInKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGUgPSBUcmFuc2Zvcm0uX3RlbXBWZWMzMDtcbiAgICAgIHRyYW5zbGF0ZS5zZXRWYWx1ZSh0cmFuc2xhdGlvbk9yWCwgPG51bWJlcj5yZWxhdGl2ZVRvTG9jYWxPclksIHopO1xuICAgICAgdGhpcy5fdHJhbnNsYXRlKHRyYW5zbGF0ZSwgcmVsYXRpdmVUb0xvY2FsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdHJhbnNsYXRlKHRyYW5zbGF0aW9uT3JYLCA8Ym9vbGVhbj5yZWxhdGl2ZVRvTG9jYWxPclkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSb3RhdGUgYXJvdW5kIHRoZSBwYXNzZWQgVmVjdG9yMy5cbiAgICogQHBhcmFtIHJvdGF0aW9uIC0gRXVsZXIgYW5nbGUgaW4gZGVncmVlc1xuICAgKiBAcGFyYW0gcmVsYXRpdmVUb0xvY2FsIC0gUmVsYXRpdmUgdG8gbG9jYWwgc3BhY2VcbiAgICovXG4gIHJvdGF0ZShyb3RhdGlvbjogVmVjdG9yMywgcmVsYXRpdmVUb0xvY2FsPzogYm9vbGVhbik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJvdGF0ZSBhcm91bmQgdGhlIHBhc3NlZCBWZWN0b3IzLlxuICAgKiBAcGFyYW0geCAtIFJvdGF0aW9uIGFsb25nIHggYXhpcywgaW4gZGVncmVlc1xuICAgKiBAcGFyYW0geSAtIFJvdGF0aW9uIGFsb25nIHkgYXhpcywgaW4gZGVncmVlc1xuICAgKiBAcGFyYW0geiAtIFJvdGF0aW9uIGFsb25nIHogYXhpcywgaW4gZGVncmVlc1xuICAgKiBAcGFyYW0gcmVsYXRpdmVUb0xvY2FsIC0gUmVsYXRpdmUgdG8gbG9jYWwgc3BhY2VcbiAgICovXG4gIHJvdGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCByZWxhdGl2ZVRvTG9jYWw/OiBib29sZWFuKTogdm9pZDtcblxuICByb3RhdGUoXG4gICAgcm90YXRpb25Pclg6IFZlY3RvcjMgfCBudW1iZXIsXG4gICAgcmVsYXRpdmVUb0xvY2FsT3JZPzogYm9vbGVhbiB8IG51bWJlcixcbiAgICB6PzogbnVtYmVyLFxuICAgIHJlbGF0aXZlVG9Mb2NhbD86IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIGlmICh0eXBlb2Ygcm90YXRpb25PclggPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLl9yb3RhdGVYWVoocm90YXRpb25PclgsIDxudW1iZXI+cmVsYXRpdmVUb0xvY2FsT3JZLCB6LCByZWxhdGl2ZVRvTG9jYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yb3RhdGVYWVoocm90YXRpb25PclgueCwgcm90YXRpb25PclgueSwgcm90YXRpb25PclgueiwgPGJvb2xlYW4+cmVsYXRpdmVUb0xvY2FsT3JZKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUm90YXRlIGFyb3VuZCB0aGUgc3BlY2lmaWVkIGF4aXMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgYW5nbGUuXG4gICAqIEBwYXJhbSBheGlzIC0gUm90YXRlIGF4aXNcbiAgICogQHBhcmFtIGFuZ2xlIC0gUm90YXRlIGFuZ2xlIGluIGRlZ3JlZXNcbiAgICogQHBhcmFtIHJlbGF0aXZlVG9Mb2NhbCAtIFJlbGF0aXZlIHRvIGxvY2FsIHNwYWNlXG4gICAqL1xuICByb3RhdGVCeUF4aXMoYXhpczogVmVjdG9yMywgYW5nbGU6IG51bWJlciwgcmVsYXRpdmVUb0xvY2FsOiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgIGNvbnN0IHJhZCA9IGFuZ2xlICogTWF0aFV0aWwuZGVncmVlVG9SYWRGYWN0b3I7XG4gICAgUXVhdGVybmlvbi5yb3RhdGlvbkF4aXNBbmdsZShheGlzLCByYWQsIFRyYW5zZm9ybS5fdGVtcFF1YXQwKTtcbiAgICB0aGlzLl9yb3RhdGVCeVF1YXQoVHJhbnNmb3JtLl90ZW1wUXVhdDAsIHJlbGF0aXZlVG9Mb2NhbCk7XG4gIH1cblxuICAvKipcbiAgICogUm90YXRlIGFuZCBlbnN1cmUgdGhhdCB0aGUgd29ybGQgZnJvbnQgdmVjdG9yIHBvaW50cyB0byB0aGUgdGFyZ2V0IHdvcmxkIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0gdGFyZ2V0UG9zaXRpb24gLSBUYXJnZXQgd29ybGQgcG9zaXRpb25cbiAgICogQHBhcmFtIHdvcmxkVXAgLSBVcCBkaXJlY3Rpb24gaW4gd29ybGQgc3BhY2UsIGRlZmF1bHQgaXMgVmVjdG9yMygwLCAxLCAwKVxuICAgKi9cbiAgbG9va0F0KHRhcmdldFBvc2l0aW9uOiBWZWN0b3IzLCB3b3JsZFVwPzogVmVjdG9yMyk6IHZvaWQge1xuICAgIGNvbnN0IHpBeGlzID0gVHJhbnNmb3JtLl90ZW1wVmVjMzA7XG4gICAgVmVjdG9yMy5zdWJ0cmFjdCh0aGlzLndvcmxkUG9zaXRpb24sIHRhcmdldFBvc2l0aW9uLCB6QXhpcyk7XG4gICAgbGV0IGF4aXNMZW4gPSB6QXhpcy5sZW5ndGgoKTtcbiAgICBpZiAoYXhpc0xlbiA8PSBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICAvLyBUaGUgY3VycmVudCBwb3NpdGlvbiBhbmQgdGhlIHRhcmdldCBwb3NpdGlvbiBhcmUgYWxtb3N0IHRoZSBzYW1lLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB6QXhpcy5zY2FsZSgxIC8gYXhpc0xlbik7XG4gICAgY29uc3QgeEF4aXMgPSBUcmFuc2Zvcm0uX3RlbXBWZWMzMTtcbiAgICBpZiAod29ybGRVcCkge1xuICAgICAgVmVjdG9yMy5jcm9zcyh3b3JsZFVwLCB6QXhpcywgeEF4aXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB4QXhpcy5zZXRWYWx1ZSh6QXhpcy56LCAwLCAtekF4aXMueCk7XG4gICAgfVxuICAgIGF4aXNMZW4gPSB4QXhpcy5sZW5ndGgoKTtcbiAgICBpZiAoYXhpc0xlbiA8PSBNYXRoVXRpbC56ZXJvVG9sZXJhbmNlKSB7XG4gICAgICAvLyBAdG9kbzpcbiAgICAgIC8vIDEud29ybGR1cCBpc++8iDAsMCww77yJXG4gICAgICAvLyAyLndvcmxkVXAgaXMgcGFyYWxsZWwgdG8gekF4aXNcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgeEF4aXMuc2NhbGUoMSAvIGF4aXNMZW4pO1xuICAgIGNvbnN0IHlBeGlzID0gVHJhbnNmb3JtLl90ZW1wVmVjMzI7XG4gICAgVmVjdG9yMy5jcm9zcyh6QXhpcywgeEF4aXMsIHlBeGlzKTtcblxuICAgIGNvbnN0IHJvdE1hdCA9IFRyYW5zZm9ybS5fdGVtcE1hdDQxO1xuICAgIGNvbnN0IHsgZWxlbWVudHM6IGUgfSA9IHJvdE1hdDtcbiAgICAoZVswXSA9IHhBeGlzLngpLCAoZVsxXSA9IHhBeGlzLnkpLCAoZVsyXSA9IHhBeGlzLnopO1xuICAgIChlWzRdID0geUF4aXMueCksIChlWzVdID0geUF4aXMueSksIChlWzZdID0geUF4aXMueik7XG4gICAgKGVbOF0gPSB6QXhpcy54KSwgKGVbOV0gPSB6QXhpcy55KSwgKGVbMTBdID0gekF4aXMueik7XG4gICAgcm90TWF0LmdldFJvdGF0aW9uKHRoaXMuX3dvcmxkUm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciB3b3JsZCB0cmFuc2Zvcm0gY2hhbmdlIGZsYWcuXG4gICAqIEByZXR1cm5zIENoYW5nZSBmbGFnXG4gICAqL1xuICByZWdpc3RlcldvcmxkQ2hhbmdlRmxhZygpOiBCb29sVXBkYXRlRmxhZyB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZUZsYWdNYW5hZ2VyLmNyZWF0ZUZsYWcoQm9vbFVwZGF0ZUZsYWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3BhcmVudENoYW5nZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9pc1BhcmVudERpcnR5ID0gdHJ1ZTtcbiAgICB0aGlzLl91cGRhdGVBbGxXb3JsZEZsYWcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9pc0Zyb250RmFjZUludmVydCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMubG9zc3lXb3JsZFNjYWxlO1xuICAgIGxldCBpc0ludmVydCA9IHNjYWxlLnggPCAwO1xuICAgIHNjYWxlLnkgPCAwICYmIChpc0ludmVydCA9ICFpc0ludmVydCk7XG4gICAgc2NhbGUueiA8IDAgJiYgKGlzSW52ZXJ0ID0gIWlzSW52ZXJ0KTtcbiAgICByZXR1cm4gaXNJbnZlcnQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHdvcmxkTWF0cml4OiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkTWF0cml4IHVwZGF0ZSBvZiBpdHNlbGYgYW5kIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFBvc2l0aW9uOiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkTWF0cml4LCBsb2NhbCBwb3NpdGlvbiB1cGRhdGUgb2YgaXRzZWxmIGFuZCB0aGUgd29ybGRNYXRyaXggdXBkYXRlIG9mIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEluIHN1bW1hcnksIGFueSB1cGRhdGUgb2YgcmVsYXRlZCB2YXJpYWJsZXMgd2lsbCBjYXVzZSB0aGUgZGlydHkgbWFyayBvZiBvbmUgb2YgdGhlIGZ1bGwgcHJvY2VzcyAod29ybGRNYXRyaXggb3Igd29ybGRSb3RhdGlvblF1YXRlcm5pb24pIHRvIGJlIGZhbHNlLlxuICAgKi9cbiAgcHJpdmF0ZSBfdXBkYXRlV29ybGRQb3NpdGlvbkZsYWcoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9pc0NvbnRhaW5EaXJ0eUZsYWdzKFRyYW5zZm9ybUZsYWcuV21XcCkpIHtcbiAgICAgIHRoaXMuX3dvcmxkQXNzb2NpYXRlZENoYW5nZShUcmFuc2Zvcm1GbGFnLldtV3ApO1xuICAgICAgLy8gY29uc3Qgbm9kZUNoaWxkcmVuID0gdGhpcy5fZW50aXR5Ll9jaGlsZHJlbjtcbiAgICAgIGNvbnN0IG5vZGVDaGlsZHJlbiA9IFtdO1xuICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMCwgbjogbnVtYmVyID0gbm9kZUNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBub2RlQ2hpbGRyZW5baV0udHJhbnNmb3JtPy5fdXBkYXRlV29ybGRQb3NpdGlvbkZsYWcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHdvcmxkTWF0cml4OiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkTWF0cml4IHVwZGF0ZSBvZiBpdHNlbGYgYW5kIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFBvc2l0aW9uOiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkTWF0cml4LCBsb2NhbCBwb3NpdGlvbiB1cGRhdGUgb2YgaXRzZWxmIGFuZCB0aGUgd29ybGRNYXRyaXggdXBkYXRlIG9mIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFJvdGF0aW9uUXVhdGVybmlvbjogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZCByb3RhdGlvbiAoaW4gcXVhdGVybmlvbikgdXBkYXRlIG9mIGl0c2VsZiBhbmQgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogR2V0IHdvcmxkUm90YXRpb246IFdpbGwgdHJpZ2dlciB0aGUgd29ybGQgcm90YXRpb24oaW4gZXVsZXIgYW5kIHF1YXRlcm5pb24pIHVwZGF0ZSBvZiBpdHNlbGYgYW5kIHdvcmxkIHJvdGF0aW9uKGluIHF1YXRlcm5pb24pIHVwZGF0ZSBvZiBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBJbiBzdW1tYXJ5LCBhbnkgdXBkYXRlIG9mIHJlbGF0ZWQgdmFyaWFibGVzIHdpbGwgY2F1c2UgdGhlIGRpcnR5IG1hcmsgb2Ygb25lIG9mIHRoZSBmdWxsIHByb2Nlc3MgKHdvcmxkTWF0cml4IG9yIHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uKSB0byBiZSBmYWxzZS5cbiAgICovXG4gIHByaXZhdGUgX3VwZGF0ZVdvcmxkUm90YXRpb25GbGFnKCkge1xuICAgIGlmICghdGhpcy5faXNDb250YWluRGlydHlGbGFncyhUcmFuc2Zvcm1GbGFnLldtV2VXcSkpIHtcbiAgICAgIHRoaXMuX3dvcmxkQXNzb2NpYXRlZENoYW5nZShUcmFuc2Zvcm1GbGFnLldtV2VXcSk7XG4gICAgICAvLyBjb25zdCBub2RlQ2hpbGRyZW4gPSB0aGlzLl9lbnRpdHkuX2NoaWxkcmVuO1xuICAgICAgY29uc3Qgbm9kZUNoaWxkcmVuID0gW107XG4gICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwLCBuOiBudW1iZXIgPSBub2RlQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIG5vZGVDaGlsZHJlbltpXS50cmFuc2Zvcm0/Ll91cGRhdGVXb3JsZFBvc2l0aW9uQW5kUm90YXRpb25GbGFnKCk7IC8vIFJvdGF0aW9uIHVwZGF0ZSBvZiBwYXJlbnQgZW50aXR5IHdpbGwgdHJpZ2dlciB3b3JsZCBwb3NpdGlvbiBhbmQgcm90YXRpb24gdXBkYXRlIG9mIGFsbCBjaGlsZCBlbnRpdHkuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3b3JsZE1hdHJpeDogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZE1hdHJpeCB1cGRhdGUgb2YgaXRzZWxmIGFuZCBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBHZXQgd29ybGRQb3NpdGlvbjogV2lsbCB0cmlnZ2VyIHRoZSB3b3JsZE1hdHJpeCwgbG9jYWwgcG9zaXRpb24gdXBkYXRlIG9mIGl0c2VsZiBhbmQgdGhlIHdvcmxkTWF0cml4IHVwZGF0ZSBvZiBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBHZXQgd29ybGRSb3RhdGlvblF1YXRlcm5pb246IFdpbGwgdHJpZ2dlciB0aGUgd29ybGQgcm90YXRpb24gKGluIHF1YXRlcm5pb24pIHVwZGF0ZSBvZiBpdHNlbGYgYW5kIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFJvdGF0aW9uOiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkIHJvdGF0aW9uKGluIGV1bGVyIGFuZCBxdWF0ZXJuaW9uKSB1cGRhdGUgb2YgaXRzZWxmIGFuZCB3b3JsZCByb3RhdGlvbihpbiBxdWF0ZXJuaW9uKSB1cGRhdGUgb2YgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogSW4gc3VtbWFyeSwgYW55IHVwZGF0ZSBvZiByZWxhdGVkIHZhcmlhYmxlcyB3aWxsIGNhdXNlIHRoZSBkaXJ0eSBtYXJrIG9mIG9uZSBvZiB0aGUgZnVsbCBwcm9jZXNzICh3b3JsZE1hdHJpeCBvciB3b3JsZFJvdGF0aW9uUXVhdGVybmlvbikgdG8gYmUgZmFsc2UuXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVXb3JsZFBvc2l0aW9uQW5kUm90YXRpb25GbGFnKCkge1xuICAgIGlmICghdGhpcy5faXNDb250YWluRGlydHlGbGFncyhUcmFuc2Zvcm1GbGFnLldtV3BXZVdxKSkge1xuICAgICAgdGhpcy5fd29ybGRBc3NvY2lhdGVkQ2hhbmdlKFRyYW5zZm9ybUZsYWcuV21XcFdlV3EpO1xuICAgICAgLy8gY29uc3Qgbm9kZUNoaWxkcmVuID0gdGhpcy5fZW50aXR5Ll9jaGlsZHJlbjtcbiAgICAgIGNvbnN0IG5vZGVDaGlsZHJlbiA9IFtdO1xuICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMCwgbjogbnVtYmVyID0gbm9kZUNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBub2RlQ2hpbGRyZW5baV0udHJhbnNmb3JtPy5fdXBkYXRlV29ybGRQb3NpdGlvbkFuZFJvdGF0aW9uRmxhZygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd29ybGRNYXRyaXg6IFdpbGwgdHJpZ2dlciB0aGUgd29ybGRNYXRyaXggdXBkYXRlIG9mIGl0c2VsZiBhbmQgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogR2V0IHdvcmxkUG9zaXRpb246IFdpbGwgdHJpZ2dlciB0aGUgd29ybGRNYXRyaXgsIGxvY2FsIHBvc2l0aW9uIHVwZGF0ZSBvZiBpdHNlbGYgYW5kIHRoZSB3b3JsZE1hdHJpeCB1cGRhdGUgb2YgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogR2V0IHdvcmxkU2NhbGU6IFdpbGwgdHJpZ2dlciB0aGUgc2NhbGluZyB1cGRhdGUgb2YgaXRzZWxmIGFuZCBhbGwgcGFyZW50IGVudGl0aWVzLlxuICAgKiBJbiBzdW1tYXJ5LCBhbnkgdXBkYXRlIG9mIHJlbGF0ZWQgdmFyaWFibGVzIHdpbGwgY2F1c2UgdGhlIGRpcnR5IG1hcmsgb2Ygb25lIG9mIHRoZSBmdWxsIHByb2Nlc3MgKHdvcmxkTWF0cml4KSB0byBiZSBmYWxzZS5cbiAgICovXG4gIHByaXZhdGUgX3VwZGF0ZVdvcmxkU2NhbGVGbGFnKCkge1xuICAgIGlmICghdGhpcy5faXNDb250YWluRGlydHlGbGFncyhUcmFuc2Zvcm1GbGFnLldtV3MpKSB7XG4gICAgICB0aGlzLl93b3JsZEFzc29jaWF0ZWRDaGFuZ2UoVHJhbnNmb3JtRmxhZy5XbVdzKTtcbiAgICAgIC8vIGNvbnN0IG5vZGVDaGlsZHJlbiA9IHRoaXMuX2VudGl0eS5fY2hpbGRyZW47XG4gICAgICBjb25zdCBub2RlQ2hpbGRyZW4gPSBbXTtcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDAsIG46IG51bWJlciA9IG5vZGVDaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgbm9kZUNoaWxkcmVuW2ldLnRyYW5zZm9ybT8uX3VwZGF0ZVdvcmxkUG9zaXRpb25BbmRTY2FsZUZsYWcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHdvcmxkTWF0cml4OiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkTWF0cml4IHVwZGF0ZSBvZiBpdHNlbGYgYW5kIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFBvc2l0aW9uOiBXaWxsIHRyaWdnZXIgdGhlIHdvcmxkTWF0cml4LCBsb2NhbCBwb3NpdGlvbiB1cGRhdGUgb2YgaXRzZWxmIGFuZCB0aGUgd29ybGRNYXRyaXggdXBkYXRlIG9mIGFsbCBwYXJlbnQgZW50aXRpZXMuXG4gICAqIEdldCB3b3JsZFNjYWxlOiBXaWxsIHRyaWdnZXIgdGhlIHNjYWxpbmcgdXBkYXRlIG9mIGl0c2VsZiBhbmQgYWxsIHBhcmVudCBlbnRpdGllcy5cbiAgICogSW4gc3VtbWFyeSwgYW55IHVwZGF0ZSBvZiByZWxhdGVkIHZhcmlhYmxlcyB3aWxsIGNhdXNlIHRoZSBkaXJ0eSBtYXJrIG9mIG9uZSBvZiB0aGUgZnVsbCBwcm9jZXNzICh3b3JsZE1hdHJpeCkgdG8gYmUgZmFsc2UuXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVXb3JsZFBvc2l0aW9uQW5kU2NhbGVGbGFnKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5faXNDb250YWluRGlydHlGbGFncyhUcmFuc2Zvcm1GbGFnLldtV3BXcykpIHtcbiAgICAgIHRoaXMuX3dvcmxkQXNzb2NpYXRlZENoYW5nZShUcmFuc2Zvcm1GbGFnLldtV3BXcyk7XG4gICAgICAvLyBjb25zdCBub2RlQ2hpbGRyZW4gPSB0aGlzLl9lbnRpdHkuX2NoaWxkcmVuO1xuICAgICAgY29uc3Qgbm9kZUNoaWxkcmVuID0gW107XG4gICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwLCBuOiBudW1iZXIgPSBub2RlQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIG5vZGVDaGlsZHJlbltpXS50cmFuc2Zvcm0/Ll91cGRhdGVXb3JsZFBvc2l0aW9uQW5kU2NhbGVGbGFnKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhbGwgd29ybGQgdHJhbnNmb3JtIHByb3BlcnR5IGRpcnR5IGZsYWcsIHRoZSBwcmluY2lwbGUgaXMgdGhlIHNhbWUgYXMgYWJvdmUuXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVBbGxXb3JsZEZsYWcoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9pc0NvbnRhaW5EaXJ0eUZsYWdzKFRyYW5zZm9ybUZsYWcuV21XcFdlV3FXcykpIHtcbiAgICAgIHRoaXMuX3dvcmxkQXNzb2NpYXRlZENoYW5nZShUcmFuc2Zvcm1GbGFnLldtV3BXZVdxV3MpO1xuICAgICAgLy8gY29uc3Qgbm9kZUNoaWxkcmVuID0gdGhpcy5fZW50aXR5Ll9jaGlsZHJlbjtcbiAgICAgIGNvbnN0IG5vZGVDaGlsZHJlbiA9IFtdO1xuICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMCwgbjogbnVtYmVyID0gbm9kZUNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBub2RlQ2hpbGRyZW5baV0udHJhbnNmb3JtPy5fdXBkYXRlQWxsV29ybGRGbGFnKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0UGFyZW50VHJhbnNmb3JtKCk6IFRyYW5zZm9ybSB8IG51bGwge1xuICAgIGlmICghdGhpcy5faXNQYXJlbnREaXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudFRyYW5zZm9ybUNhY2hlO1xuICAgIH1cbiAgICBsZXQgcGFyZW50Q2FjaGU6IFRyYW5zZm9ybSA9IG51bGw7XG4gICAgbGV0IHBhcmVudCA9IHRoaXMuX2VudGl0eS5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgY29uc3QgdHJhbnNmb3JtID0gcGFyZW50LnRyYW5zZm9ybTtcbiAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgcGFyZW50Q2FjaGUgPSB0cmFuc2Zvcm07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fcGFyZW50VHJhbnNmb3JtQ2FjaGUgPSBwYXJlbnRDYWNoZTtcbiAgICB0aGlzLl9pc1BhcmVudERpcnR5ID0gZmFsc2U7XG4gICAgcmV0dXJuIHBhcmVudENhY2hlO1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0U2NhbGVNYXRyaXgoKTogTWF0cml4MyB7XG4gICAgY29uc3QgaW52Um90YXRpb24gPSBUcmFuc2Zvcm0uX3RlbXBRdWF0MDtcbiAgICBjb25zdCBpbnZSb3RhdGlvbk1hdCA9IFRyYW5zZm9ybS5fdGVtcE1hdDMwO1xuICAgIGNvbnN0IHdvcmxkUm90U2NhTWF0ID0gVHJhbnNmb3JtLl90ZW1wTWF0MzE7XG4gICAgY29uc3Qgc2NhTWF0ID0gVHJhbnNmb3JtLl90ZW1wTWF0MzI7XG4gICAgd29ybGRSb3RTY2FNYXQuc2V0VmFsdWVCeU1hdHJpeCh0aGlzLndvcmxkTWF0cml4KTtcbiAgICBRdWF0ZXJuaW9uLmludmVydCh0aGlzLndvcmxkUm90YXRpb25RdWF0ZXJuaW9uLCBpbnZSb3RhdGlvbik7XG4gICAgTWF0cml4My5yb3RhdGlvblF1YXRlcm5pb24oaW52Um90YXRpb24sIGludlJvdGF0aW9uTWF0KTtcbiAgICBNYXRyaXgzLm11bHRpcGx5KGludlJvdGF0aW9uTWF0LCB3b3JsZFJvdFNjYU1hdCwgc2NhTWF0KTtcbiAgICByZXR1cm4gc2NhTWF0O1xuICB9XG5cbiAgcHJpdmF0ZSBfaXNDb250YWluRGlydHlGbGFncyh0YXJnZXREaXJ0eUZsYWdzOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMuX2RpcnR5RmxhZyAmIHRhcmdldERpcnR5RmxhZ3MpID09PSB0YXJnZXREaXJ0eUZsYWdzO1xuICB9XG5cbiAgcHJpdmF0ZSBfaXNDb250YWluRGlydHlGbGFnKHR5cGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5fZGlydHlGbGFnICYgdHlwZSkgIT0gMDtcbiAgfVxuXG4gIHByaXZhdGUgX3NldERpcnR5RmxhZ1RydWUodHlwZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZGlydHlGbGFnIHw9IHR5cGU7XG4gIH1cblxuICBwcml2YXRlIF9zZXREaXJ0eUZsYWdGYWxzZSh0eXBlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9kaXJ0eUZsYWcgJj0gfnR5cGU7XG4gIH1cblxuICBwcml2YXRlIF93b3JsZEFzc29jaWF0ZWRDaGFuZ2UodHlwZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZGlydHlGbGFnIHw9IHR5cGU7XG4gICAgdGhpcy5fdXBkYXRlRmxhZ01hbmFnZXIuZGlzcGF0Y2goKTtcbiAgfVxuXG4gIHByaXZhdGUgX3JvdGF0ZUJ5UXVhdChyb3RhdGVRdWF0OiBRdWF0ZXJuaW9uLCByZWxhdGl2ZVRvTG9jYWw6IGJvb2xlYW4pIHtcbiAgICBpZiAocmVsYXRpdmVUb0xvY2FsKSB7XG4gICAgICBRdWF0ZXJuaW9uLm11bHRpcGx5KHRoaXMucm90YXRpb25RdWF0ZXJuaW9uLCByb3RhdGVRdWF0LCB0aGlzLl9yb3RhdGlvblF1YXRlcm5pb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBRdWF0ZXJuaW9uLm11bHRpcGx5KHJvdGF0ZVF1YXQsIHRoaXMud29ybGRSb3RhdGlvblF1YXRlcm5pb24sIHRoaXMuX3dvcmxkUm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF90cmFuc2xhdGUodHJhbnNsYXRpb246IFZlY3RvcjMsIHJlbGF0aXZlVG9Mb2NhbDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICBpZiAocmVsYXRpdmVUb0xvY2FsKSB7XG4gICAgICB0aGlzLl9wb3NpdGlvbi5hZGQodHJhbnNsYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93b3JsZFBvc2l0aW9uLmFkZCh0cmFuc2xhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfcm90YXRlWFlaKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHJlbGF0aXZlVG9Mb2NhbDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICBjb25zdCByYWRGYWN0b3IgPSBNYXRoVXRpbC5kZWdyZWVUb1JhZEZhY3RvcjtcbiAgICBjb25zdCByb3RRdWF0ID0gVHJhbnNmb3JtLl90ZW1wUXVhdDA7XG4gICAgUXVhdGVybmlvbi5yb3RhdGlvbkV1bGVyKHggKiByYWRGYWN0b3IsIHkgKiByYWRGYWN0b3IsIHogKiByYWRGYWN0b3IsIHJvdFF1YXQpO1xuICAgIHRoaXMuX3JvdGF0ZUJ5UXVhdChyb3RRdWF0LCByZWxhdGl2ZVRvTG9jYWwpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Qb3NpdGlvbkNoYW5nZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnVHJ1ZShUcmFuc2Zvcm1GbGFnLkxvY2FsTWF0cml4KTtcbiAgICB0aGlzLl91cGRhdGVXb3JsZFBvc2l0aW9uRmxhZygpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Xb3JsZFBvc2l0aW9uQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICBjb25zdCB3b3JsZFBvc2l0aW9uID0gdGhpcy5fd29ybGRQb3NpdGlvbjtcbiAgICAvLyBjb25zdCBwYXJlbnQgPSB0aGlzLl9nZXRQYXJlbnRUcmFuc2Zvcm0oKTtcbiAgICBjb25zdCBwYXJlbnQgPSBudWxsO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIE1hdHJpeDQuaW52ZXJ0KHBhcmVudC53b3JsZE1hdHJpeCwgVHJhbnNmb3JtLl90ZW1wTWF0NDEpO1xuICAgICAgVmVjdG9yMy50cmFuc2Zvcm1Db29yZGluYXRlKHdvcmxkUG9zaXRpb24sIFRyYW5zZm9ybS5fdGVtcE1hdDQxLCB0aGlzLl9wb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdvcmxkUG9zaXRpb24uY2xvbmVUbyh0aGlzLl9wb3NpdGlvbik7XG4gICAgfVxuICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuV29ybGRQb3NpdGlvbik7XG4gIH1cblxuICBwcml2YXRlIF9vblJvdGF0aW9uQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXREaXJ0eUZsYWdUcnVlKFRyYW5zZm9ybUZsYWcuTG9jYWxNYXRyaXggfCBUcmFuc2Zvcm1GbGFnLkxvY2FsUXVhdCk7XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnRmFsc2UoVHJhbnNmb3JtRmxhZy5Mb2NhbEV1bGVyKTtcbiAgICB0aGlzLl91cGRhdGVXb3JsZFJvdGF0aW9uRmxhZygpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Xb3JsZFJvdGF0aW9uQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICBjb25zdCB3b3JsZFJvdGF0aW9uID0gdGhpcy5fd29ybGRSb3RhdGlvbjtcbiAgICBRdWF0ZXJuaW9uLnJvdGF0aW9uRXVsZXIoXG4gICAgICBNYXRoVXRpbC5kZWdyZWVUb1JhZGlhbih3b3JsZFJvdGF0aW9uLngpLFxuICAgICAgTWF0aFV0aWwuZGVncmVlVG9SYWRpYW4od29ybGRSb3RhdGlvbi55KSxcbiAgICAgIE1hdGhVdGlsLmRlZ3JlZVRvUmFkaWFuKHdvcmxkUm90YXRpb24ueiksXG4gICAgICB0aGlzLl93b3JsZFJvdGF0aW9uUXVhdGVybmlvbixcbiAgICApO1xuICAgIHRoaXMuX3NldERpcnR5RmxhZ0ZhbHNlKFRyYW5zZm9ybUZsYWcuV29ybGRFdWxlcik7XG4gIH1cblxuICBwcml2YXRlIF9vblJvdGF0aW9uUXVhdGVybmlvbkNoYW5nZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0RGlydHlGbGFnVHJ1ZShUcmFuc2Zvcm1GbGFnLkxvY2FsTWF0cml4IHwgVHJhbnNmb3JtRmxhZy5Mb2NhbEV1bGVyKTtcbiAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLkxvY2FsUXVhdCk7XG4gICAgdGhpcy5fdXBkYXRlV29ybGRSb3RhdGlvbkZsYWcoKTtcbiAgfVxuXG4gIHByaXZhdGUgX29uV29ybGRSb3RhdGlvblF1YXRlcm5pb25DaGFuZ2VkKCk6IHZvaWQge1xuICAgIGNvbnN0IHdvcmxkUm90YXRpb25RdWF0ZXJuaW9uID0gdGhpcy5fd29ybGRSb3RhdGlvblF1YXRlcm5pb247XG4gICAgLy8gY29uc3QgcGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50VHJhbnNmb3JtKCk7XG4gICAgY29uc3QgcGFyZW50ID0gbnVsbDtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBjb25zdCBpbnZQYXJlbnRRdWF0ZXJuaW9uID0gVHJhbnNmb3JtLl90ZW1wUXVhdDA7XG4gICAgICBRdWF0ZXJuaW9uLmludmVydChwYXJlbnQud29ybGRSb3RhdGlvblF1YXRlcm5pb24sIGludlBhcmVudFF1YXRlcm5pb24pO1xuICAgICAgUXVhdGVybmlvbi5tdWx0aXBseShpbnZQYXJlbnRRdWF0ZXJuaW9uLCB3b3JsZFJvdGF0aW9uUXVhdGVybmlvbiwgdGhpcy5fcm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd29ybGRSb3RhdGlvblF1YXRlcm5pb24uY2xvbmVUbyh0aGlzLl9yb3RhdGlvblF1YXRlcm5pb24pO1xuICAgIH1cbiAgICB0aGlzLl9zZXREaXJ0eUZsYWdGYWxzZShUcmFuc2Zvcm1GbGFnLldvcmxkUXVhdCk7XG4gIH1cblxuICBwcml2YXRlIF9vblNjYWxlQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXREaXJ0eUZsYWdUcnVlKFRyYW5zZm9ybUZsYWcuTG9jYWxNYXRyaXgpO1xuICAgIHRoaXMuX3VwZGF0ZVdvcmxkU2NhbGVGbGFnKCk7XG4gIH1cbn1cbi8qKlxuICogRGlydHkgZmxhZyBvZiB0cmFuc2Zvcm0uXG4gKi9cbmVudW0gVHJhbnNmb3JtRmxhZyB7XG4gIExvY2FsRXVsZXIgPSAweDEsXG4gIExvY2FsUXVhdCA9IDB4MixcbiAgV29ybGRQb3NpdGlvbiA9IDB4NCxcbiAgV29ybGRFdWxlciA9IDB4OCxcbiAgV29ybGRRdWF0ID0gMHgxMCxcbiAgV29ybGRTY2FsZSA9IDB4MjAsXG4gIExvY2FsTWF0cml4ID0gMHg0MCxcbiAgV29ybGRNYXRyaXggPSAweDgwLFxuXG4gIC8qKiBXb3JsZE1hdHJpeCB8IFdvcmxkUG9zaXRpb24gKi9cbiAgLy8gMTMyXG4gIFdtV3AgPSAweDg0LFxuICAvKiogV29ybGRNYXRyaXggfCBXb3JsZEV1bGVyIHwgV29ybGRRdWF0ICovXG4gIC8vIDE1MlxuICBXbVdlV3EgPSAweDk4LFxuICAvKiogV29ybGRNYXRyaXggfCBXb3JsZFBvc2l0aW9uIHwgV29ybGRFdWxlciB8IFdvcmxkUXVhdCAqL1xuICAvLyAxNTZcbiAgV21XcFdlV3EgPSAweDljLFxuICAvKiogV29ybGRNYXRyaXggfCBXb3JsZFNjYWxlICovXG4gIC8vIDE2MFxuICBXbVdzID0gMHhhMCxcbiAgLyoqIFdvcmxkTWF0cml4IHwgV29ybGRQb3NpdGlvbiB8IFdvcmxkU2NhbGUgKi9cbiAgLy8gMTY0XG4gIFdtV3BXcyA9IDB4YTQsXG4gIC8qKiBXb3JsZE1hdHJpeCB8IFdvcmxkUG9zaXRpb24gfCBXb3JsZEV1bGVyIHwgV29ybGRRdWF0IHwgV29ybGRTY2FsZSAqL1xuICAvLyAxMSAqIDE2ICsgMTIgPSAxODhcbiAgV21XcFdlV3FXcyA9IDB4YmMsXG59XG4iLCJpbXBvcnQgeyBPcmJpdENvbnRyb2wgfSBmcm9tICcuLi9jb250cm9scy9PcmJpdENvbnRyb2wnO1xuaW1wb3J0IHsgTWF0aFV0aWwsIE1hdHJpeDQsIFF1YXRlcm5pb24sIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQgfSBmcm9tICcuLi9tYXRoJztcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4vRW5naW5lJztcbmltcG9ydCB7IFNoYWRlciwgU2hhZGVyRGF0YSwgU2hhZGVyRGF0YUdyb3VwIH0gZnJvbSAnLi9zaGFkZXInO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9UcmFuc2Zvcm0nO1xuXG4vKipcbiAqIENhbWVyYS5cbiAqL1xuZXhwb3J0IGNsYXNzIENhbWVyYSB7XG4gIC8vIOaKiuW8leaTjuS5n+W8lei/m+adpeS4u+imgeaYr+S4uuS6huiOt+WPluWIsGNhbnZhc+eahOWuvemrmFxuICAvLyDkvr/kuo7orr7nva7pgI/op4bmipXlvbHnn6npmLXkuI7lrr3pq5jmr5RcbiAgLy8gVE9ET+W+hemHjeaehO+8jOaKveWHuuS4gOS4qkNvbXBvbmVudFxuICBwcml2YXRlIF9lbmdpbmU6IEVuZ2luZTtcblxuICAvLyDkuLvopoHmmK/kuLrkuoborqlPcmJpdENvbnRyb2zojrflj5bliLBjYW52YXNcbiAgZ2V0IGVuZ2luZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZW5naW5lO1xuICB9XG5cbiAgcHVibGljIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuXG4gIHByaXZhdGUgc3RhdGljIF92aWV3TWF0cml4UHJvcGVydHkgPSBTaGFkZXIuZ2V0UHJvcGVydHlCeU5hbWUoJ3Vfdmlld01hdCcpO1xuICBwcml2YXRlIHN0YXRpYyBfcHJvamVjdGlvbk1hdHJpeFByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X3Byb2pNYXQnKTtcbiAgcHJpdmF0ZSBzdGF0aWMgX2ludmVyc2VWUE1hdHJpeFByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X2ludlZQTWF0Jyk7XG4gIHByaXZhdGUgc3RhdGljIF92cE1hdHJpeFByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X3ZwTWF0Jyk7XG4gIHByaXZhdGUgc3RhdGljIF9jYW1lcmFQb3NpdGlvblByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X2NhbWVyYVBvcycpO1xuICBwcml2YXRlIHN0YXRpYyBfY2FtZXJhUG9zU3F1YXJlZFByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X2NhbWVyYVBvc1NxdWFyZWQnKTtcblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgaW52ZXJzZSBvZiB0aGUgcm90YXRpb24gdHJhbnNsYXRpb24gbWF0cml4LlxuICAgKiBAcGFyYW0gcm90YXRpb24gLSBUaGUgcm90YXRpb24gdXNlZCB0byBjYWxjdWxhdGUgbWF0cml4XG4gICAqIEBwYXJhbSB0cmFuc2xhdGlvbiAtIFRoZSB0cmFuc2xhdGlvbiB1c2VkIHRvIGNhbGN1bGF0ZSBtYXRyaXhcbiAgICogQHBhcmFtIG91dCAtIFRoZSBjYWxjdWxhdGVkIG1hdHJpeFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX3JvdGF0aW9uVHJhbnNsYXRpb25JbnYocm90YXRpb246IFF1YXRlcm5pb24sIHRyYW5zbGF0aW9uOiBWZWN0b3IzLCBvdXQ6IE1hdHJpeDQpIHtcbiAgICBjb25zdCBvZSA9IG91dC5lbGVtZW50cztcbiAgICBjb25zdCB7IHgsIHksIHosIHcgfSA9IHJvdGF0aW9uO1xuICAgIGxldCB4MiA9IHggKyB4O1xuICAgIGxldCB5MiA9IHkgKyB5O1xuICAgIGxldCB6MiA9IHogKyB6O1xuXG4gICAgbGV0IHh4ID0geCAqIHgyO1xuICAgIGxldCB4eSA9IHggKiB5MjtcbiAgICBsZXQgeHogPSB4ICogejI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB5eiA9IHkgKiB6MjtcbiAgICBsZXQgenogPSB6ICogejI7XG4gICAgbGV0IHd4ID0gdyAqIHgyO1xuICAgIGxldCB3eSA9IHcgKiB5MjtcbiAgICBsZXQgd3ogPSB3ICogejI7XG5cbiAgICBvZVswXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgb2VbMV0gPSB4eSArIHd6O1xuICAgIG9lWzJdID0geHogLSB3eTtcbiAgICBvZVszXSA9IDA7XG5cbiAgICBvZVs0XSA9IHh5IC0gd3o7XG4gICAgb2VbNV0gPSAxIC0gKHh4ICsgenopO1xuICAgIG9lWzZdID0geXogKyB3eDtcbiAgICBvZVs3XSA9IDA7XG5cbiAgICBvZVs4XSA9IHh6ICsgd3k7XG4gICAgb2VbOV0gPSB5eiAtIHd4O1xuICAgIG9lWzEwXSA9IDEgLSAoeHggKyB5eSk7XG4gICAgb2VbMTFdID0gMDtcblxuICAgIG9lWzEyXSA9IHRyYW5zbGF0aW9uLng7XG4gICAgb2VbMTNdID0gdHJhbnNsYXRpb24ueTtcbiAgICBvZVsxNF0gPSB0cmFuc2xhdGlvbi56O1xuICAgIG9lWzE1XSA9IDE7XG5cbiAgICBvdXQuaW52ZXJ0KCk7XG4gIH1cblxuICAvKiogU2hhZGVyIGRhdGEuICovXG4gIHJlYWRvbmx5IHNoYWRlckRhdGE6IFNoYWRlckRhdGEgPSBuZXcgU2hhZGVyRGF0YShTaGFkZXJEYXRhR3JvdXAuQ2FtZXJhKTtcblxuICAvKiogUmVuZGVyaW5nIHByaW9yaXR5IC0gQSBDYW1lcmEgd2l0aCBoaWdoZXIgcHJpb3JpdHkgd2lsbCBiZSByZW5kZXJlZCBvbiB0b3Agb2YgYSBjYW1lcmEgd2l0aCBsb3dlciBwcmlvcml0eS4gKi9cbiAgcHJpb3JpdHk6IG51bWJlciA9IDA7XG4gIG9yYml0Q29udHJvbDogT3JiaXRDb250cm9sO1xuXG4gIHByaXZhdGUgX2lzT3J0aG9ncmFwaGljOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX25lYXJDbGlwUGxhbmU6IG51bWJlciA9IDAuMTtcbiAgcHJpdmF0ZSBfZmFyQ2xpcFBsYW5lOiBudW1iZXIgPSAxMDA7XG4gIHByaXZhdGUgX2ZpZWxkT2ZWaWV3OiBudW1iZXIgPSA0NTtcbiAgcHJpdmF0ZSBfb3J0aG9ncmFwaGljU2l6ZTogbnVtYmVyID0gMTA7XG4gIC8vIFRPRE9cbiAgcHJpdmF0ZSBfY3VzdG9tQXNwZWN0UmF0aW86IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIF9wcm9qZWN0aW9uTWF0cml4OiBNYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTtcbiAgcHJpdmF0ZSBfdmlld01hdHJpeDogTWF0cml4NCA9IG5ldyBNYXRyaXg0KCk7XG4gIHByaXZhdGUgX3ZpZXdwb3J0OiBWZWN0b3I0ID0gbmV3IFZlY3RvcjQoMCwgMCwgMSwgMSk7XG4gIC8vIOi/meS4quS4nOilv+acieS7gOS5iOeUqOWRolxuICBwcml2YXRlIF9sYXN0QXNwZWN0U2l6ZTogVmVjdG9yMiA9IG5ldyBWZWN0b3IyKDAsIDApO1xuXG4gIGdldCB2aWV3TWF0cml4KCk6IFJlYWRvbmx5PE1hdHJpeDQ+IHtcbiAgICBDYW1lcmEuX3JvdGF0aW9uVHJhbnNsYXRpb25JbnYoXG4gICAgICB0aGlzLnRyYW5zZm9ybS53b3JsZFJvdGF0aW9uUXVhdGVybmlvbixcbiAgICAgIHRoaXMudHJhbnNmb3JtLndvcmxkUG9zaXRpb24sXG4gICAgICB0aGlzLl92aWV3TWF0cml4LFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdNYXRyaXg7XG4gIH1cblxuICBzZXQgcHJvamVjdGlvbk1hdHJpeCh2YWx1ZTogTWF0cml4NCkge1xuICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXggPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBwcm9qZWN0aW9uTWF0cml4KCk6IE1hdHJpeDQge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX2VuZ2luZS5jYW52YXM7XG4gICAgdGhpcy5fbGFzdEFzcGVjdFNpemUueCA9IGNhbnZhcy53aWR0aDtcbiAgICB0aGlzLl9sYXN0QXNwZWN0U2l6ZS55ID0gY2FudmFzLmhlaWdodDtcbiAgICBjb25zdCBhc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgaWYgKCF0aGlzLl9pc09ydGhvZ3JhcGhpYykge1xuICAgICAgTWF0cml4NC5wZXJzcGVjdGl2ZShcbiAgICAgICAgTWF0aFV0aWwuZGVncmVlVG9SYWRpYW4odGhpcy5fZmllbGRPZlZpZXcpLFxuICAgICAgICBhc3BlY3RSYXRpbyxcbiAgICAgICAgdGhpcy5fbmVhckNsaXBQbGFuZSxcbiAgICAgICAgdGhpcy5fZmFyQ2xpcFBsYW5lLFxuICAgICAgICB0aGlzLl9wcm9qZWN0aW9uTWF0cml4LFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9vcnRob2dyYXBoaWNTaXplICogYXNwZWN0UmF0aW87XG4gICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLl9vcnRob2dyYXBoaWNTaXplO1xuICAgICAgTWF0cml4NC5vcnRobygtd2lkdGgsIHdpZHRoLCAtaGVpZ2h0LCBoZWlnaHQsIHRoaXMuX25lYXJDbGlwUGxhbmUsIHRoaXMuX2ZhckNsaXBQbGFuZSwgdGhpcy5fcHJvamVjdGlvbk1hdHJpeCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcm9qZWN0aW9uTWF0cml4O1xuICB9XG5cbiAgLyoqXG4gICAqIE5lYXIgY2xpcCBwbGFuZSAtIHRoZSBjbG9zZXN0IHBvaW50IHRvIHRoZSBjYW1lcmEgd2hlbiByZW5kZXJpbmcgb2NjdXJzLlxuICAgKi9cbiAgZ2V0IG5lYXJDbGlwUGxhbmUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbmVhckNsaXBQbGFuZTtcbiAgfVxuXG4gIHNldCBuZWFyQ2xpcFBsYW5lKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9uZWFyQ2xpcFBsYW5lID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRmFyIGNsaXAgcGxhbmUgLSB0aGUgZnVydGhlc3QgcG9pbnQgdG8gdGhlIGNhbWVyYSB3aGVuIHJlbmRlcmluZyBvY2N1cnMuXG4gICAqL1xuICBnZXQgZmFyQ2xpcFBsYW5lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhckNsaXBQbGFuZTtcbiAgfVxuXG4gIHNldCBmYXJDbGlwUGxhbmUodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2ZhckNsaXBQbGFuZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjYW1lcmEncyB2aWV3IGFuZ2xlLiBhY3RpdmF0aW5nIHdoZW4gY2FtZXJhIHVzZSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uLlxuICAgKi9cbiAgZ2V0IGZpZWxkT2ZWaWV3KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkT2ZWaWV3O1xuICB9XG5cbiAgc2V0IGZpZWxkT2ZWaWV3KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9maWVsZE9mVmlldyA9IHZhbHVlO1xuICB9XG5cbiAgLy8g6I635Y+W5a696auY5q+UXG4gIGdldCBhc3BlY3RSYXRpbygpOiBudW1iZXIge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX2VuZ2luZS5jYW52YXM7XG4gICAgLy8gVE9ETzog6ICD6JmR6KeG5Y+jXG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUFzcGVjdFJhdGlvID8/IChjYW52YXMud2lkdGggKiB0aGlzLl92aWV3cG9ydC56KSAvIChjYW52YXMuaGVpZ2h0ICogdGhpcy5fdmlld3BvcnQudyk7XG4gIH1cblxuICBzZXQgYXNwZWN0UmF0aW8odmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2N1c3RvbUFzcGVjdFJhdGlvID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVmlld3BvcnQsIG5vcm1hbGl6ZWQgZXhwcmVzc2lvbiwgdGhlIHVwcGVyIGxlZnQgY29ybmVyIGlzICgwLCAwKSwgYW5kIHRoZSBsb3dlciByaWdodCBjb3JuZXIgaXMgKDEsIDEpLlxuICAgKiBAcmVtYXJrcyBSZS1hc3NpZ25tZW50IGlzIHJlcXVpcmVkIGFmdGVyIG1vZGlmaWNhdGlvbiB0byBlbnN1cmUgdGhhdCB0aGUgbW9kaWZpY2F0aW9uIHRha2VzIGVmZmVjdC5cbiAgICovXG4gIGdldCB2aWV3cG9ydCgpOiBWZWN0b3I0IHtcbiAgICByZXR1cm4gdGhpcy5fdmlld3BvcnQ7XG4gIH1cblxuICBzZXQgdmlld3BvcnQodmFsdWU6IFZlY3RvcjQpIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuX3ZpZXdwb3J0KSB7XG4gICAgICB2YWx1ZS5jbG9uZVRvKHRoaXMuX3ZpZXdwb3J0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciBpdCBpcyBvcnRob2dvbmFsLCB0aGUgZGVmYXVsdCBpcyBmYWxzZS4gVHJ1ZSB3aWxsIHVzZSBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiwgZmFsc2Ugd2lsbCB1c2UgcGVyc3BlY3RpdmUgcHJvamVjdGlvbi5cbiAgICovXG4gIGdldCBpc09ydGhvZ3JhcGhpYygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNPcnRob2dyYXBoaWM7XG4gIH1cblxuICBzZXQgaXNPcnRob2dyYXBoaWModmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc09ydGhvZ3JhcGhpYyA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG9ydGhvZ3JhcGhpY1NpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fb3J0aG9ncmFwaGljU2l6ZTtcbiAgfVxuXG4gIHNldCBvcnRob2dyYXBoaWNTaXplKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9vcnRob2dyYXBoaWNTaXplID0gdmFsdWU7XG4gIH1cblxuICAvLyBUT0RP77yaIOWFtuWunkVudGl0eeWSjENhbWVyYeW6lOivpeWGjeaKveixoeS4iuS4gOWxgkNvbXBvbmVudFxuICBjb25zdHJ1Y3RvcihlbmdpbmU6IEVuZ2luZSkge1xuICAgIHRoaXMuX2VuZ2luZSA9IGVuZ2luZTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0oKTtcbiAgICB0aGlzLm9yYml0Q29udHJvbCA9IG5ldyBPcmJpdENvbnRyb2wodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkIGNhbWVyYS1yZWxhdGVkIHNoYWRlciBkYXRhLlxuICAgKi9cbiAgcHJpdmF0ZSBfdXBkYXRlU2hhZGVyRGF0YSgpOiB2b2lkIHtcbiAgICBjb25zdCBzaGFkZXJEYXRhID0gdGhpcy5zaGFkZXJEYXRhO1xuXG4gICAgY29uc3QgdnBNYXQgPSBuZXcgTWF0cml4NCgpO1xuICAgIC8vIOmcgOimgeaKiumAhuefqemYteWNleeLrOaQnuS4gOS4quWPmOmHj++8jOWboOS4uuaYr+W8leeUqOexu+Wei++8jOi1i+WAvOW5tuayoeacieW8gOi+n+aWsOWvueixoVxuICAgIGNvbnN0IGludlZwTWF0ID0gbmV3IE1hdHJpeDQoKTtcbiAgICBjb25zdCBjYW1lcmFQb3MgPSB0aGlzLnRyYW5zZm9ybS53b3JsZFBvc2l0aW9uO1xuICAgIGNvbnN0IGNhbWVyYVBvc1NxdWFyZWQgPSBuZXcgVmVjdG9yMygpO1xuXG4gICAgLy8g5rOo5oSP6aG65bqP77yacGVyc3BlY3QgKiB2aWV3ICogbW9kZWxcbiAgICBNYXRyaXg0Lm11bHRpcGx5KHRoaXMucHJvamVjdGlvbk1hdHJpeCwgdGhpcy52aWV3TWF0cml4LCB2cE1hdCk7XG4gICAgTWF0cml4NC5pbnZlcnQodnBNYXQsIGludlZwTWF0KTtcbiAgICBWZWN0b3IzLm11bHRpcGx5KGNhbWVyYVBvcywgY2FtZXJhUG9zLCBjYW1lcmFQb3NTcXVhcmVkKTtcblxuICAgIC8vIFRPRE86IOW6lOivpeaKilZQ55+p6Zi16YO95oiQ5aW95YaN5Lyg57uZZ2zvvIzlsIHoo4Vjb21tb24gc2hhZGVy55qE5pe25YCZ5YaN5YGaXG4gICAgc2hhZGVyRGF0YS5zZXRNYXRyaXgoQ2FtZXJhLl92aWV3TWF0cml4UHJvcGVydHksIHRoaXMudmlld01hdHJpeCk7XG4gICAgc2hhZGVyRGF0YS5zZXRNYXRyaXgoQ2FtZXJhLl9wcm9qZWN0aW9uTWF0cml4UHJvcGVydHksIHRoaXMucHJvamVjdGlvbk1hdHJpeCk7XG4gICAgc2hhZGVyRGF0YS5zZXRNYXRyaXgoQ2FtZXJhLl92cE1hdHJpeFByb3BlcnR5LCB2cE1hdCk7XG4gICAgc2hhZGVyRGF0YS5zZXRNYXRyaXgoQ2FtZXJhLl9pbnZlcnNlVlBNYXRyaXhQcm9wZXJ0eSwgaW52VnBNYXQpO1xuICAgIHNoYWRlckRhdGEuc2V0VmVjdG9yMyhDYW1lcmEuX2NhbWVyYVBvc2l0aW9uUHJvcGVydHksIGNhbWVyYVBvcyk7XG4gICAgc2hhZGVyRGF0YS5zZXRWZWN0b3IzKENhbWVyYS5fY2FtZXJhUG9zU3F1YXJlZFByb3BlcnR5LCBjYW1lcmFQb3NTcXVhcmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdXBsb2FkIG1ldGhvZCBpcyB0cmlnZ2VyZWQgYnkgcmVuZGVyLlxuICAgKi9cbiAgcmVuZGVyKCk6IHZvaWQge1xuICAgIHRoaXMuX3VwZGF0ZVNoYWRlckRhdGEoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uLy4uL21hdGgnO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi4vVHJhbnNmb3JtJztcblxuLyoqXG4gKiBMaWdodGluZyBtb2RlbCBiYXNlIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgTGlnaHQge1xuICAvLyBUT0RPOiDov5nkuKrmir3nmoTkuI3lpb3vvIzlj6rmnInngrnlhYnmupDpnIDopoHkvY1cbiAgLyoqIExpZ2h0IHNvdXJjZSBwb3NpdGlvbi4gKi9cbiAgcHJvdGVjdGVkIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuXG4gIHByaXZhdGUgX3ZpZXdNYXQ6IE1hdHJpeDQ7XG4gIHByaXZhdGUgX2ludmVyc2VWaWV3TWF0OiBNYXRyaXg0O1xuXG4gIC8vIOi/meS4quaaguaXtuayoeS7gOS5iOeUqFxuICAvLyDlm6DkuLrmiJHku6znmoTngrnlhYnmupDph4fnlKjnmoTmmK/kuJbnlYzlnZDmoIfns7tcbiAgLyoqXG4gICAqIEdldCB0aGUgdmlldyBtYXRyaXggb2YgdGhlIGxpZ2h0IHNvdXJjZSBwb3NpdGlvbi5cbiAgICovXG4gIGdldCB2aWV3TWF0cml4KCkge1xuICAgIGlmICghdGhpcy5fdmlld01hdCkgdGhpcy5fdmlld01hdCA9IG5ldyBNYXRyaXg0KCk7XG4gICAgTWF0cml4NC5pbnZlcnQodGhpcy50cmFuc2Zvcm0ud29ybGRNYXRyaXgsIHRoaXMuX3ZpZXdNYXQpO1xuICAgIHJldHVybiB0aGlzLl92aWV3TWF0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaW52ZXJzZSBvZiB0aGUgdmlldyBtYXRyaXggZm9yIHRoZSBsaWdodCBzb3VyY2UgcG9zaXRpb24uXG4gICAqL1xuICBnZXQgaW52ZXJzZVZpZXdNYXRyaXgoKSB7XG4gICAgaWYgKCF0aGlzLl9pbnZlcnNlVmlld01hdCkgdGhpcy5faW52ZXJzZVZpZXdNYXQgPSBuZXcgTWF0cml4NCgpO1xuICAgIE1hdHJpeDQuaW52ZXJ0KHRoaXMudmlld01hdHJpeCwgdGhpcy5faW52ZXJzZVZpZXdNYXQpO1xuICAgIHJldHVybiB0aGlzLl9pbnZlcnNlVmlld01hdDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aCc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21hdGgvQ29sb3InO1xuaW1wb3J0IHsgU2hhZGVyLCBTaGFkZXJEYXRhLCBTaGFkZXJQcm9wZXJ0eSB9IGZyb20gJy4uL3NoYWRlcic7XG5pbXBvcnQgeyBMaWdodCB9IGZyb20gJy4vTGlnaHQnO1xuXG4vKipcbiAqIFBvaW50IGxpZ2h0LlxuICovXG5leHBvcnQgY2xhc3MgUG9pbnRMaWdodCBleHRlbmRzIExpZ2h0IHtcbiAgLy8g5Zug5Li65Y+v6IO95pyJ5aSa5Liq54K55YWJ5rqQXG4gIC8qKiBHZXQgdGhlIGFkZHJlc3Mgb2YgdGhlIHBvaW50IGxpZ2h0IGNvbG9yIHVuaWZvcm0gdmFyaWFibGUgaW4gdGhlIHNoYWRlci4gKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX2NvbG9yUHJvcGVydHk6IFNoYWRlclByb3BlcnR5ID0gU2hhZGVyLmdldFByb3BlcnR5QnlOYW1lKCd1X3BvaW50TGlnaHRDb2xvcicpO1xuICAvKiogR2V0IHRoZSBhZGRyZXNzIG9mIHRoZSB1bmlmb3JtIHZhcmlhYmxlIG9mIHRoZSBwb2ludCBsaWdodCBwb3NpdGlvbiBpbiB0aGUgc2hhZGVyLiAqL1xuICBwcml2YXRlIHN0YXRpYyBfcG9zaXRpb25Qcm9wZXJ0eTogU2hhZGVyUHJvcGVydHkgPSBTaGFkZXIuZ2V0UHJvcGVydHlCeU5hbWUoJ3VfcG9pbnRMaWdodFBvc2l0aW9uJyk7XG4gIC8qKiBCbGVuZCBvYmplY3Qgb2YgY29sb3IgYW5kIHBvc2l0aW9uLiAqL1xuICBwcml2YXRlIHN0YXRpYyBfY29tYmluZWREYXRhID0ge1xuICAgIGNvbG9yOiBuZXcgRmxvYXQzMkFycmF5KDMpLFxuICAgIHBvc2l0aW9uOiBuZXcgRmxvYXQzMkFycmF5KDMpLFxuICB9O1xuXG4gIC8vIOeZveWFieS4jeeuoeWSjOS7gOS5iOWFieebuOS5mO+8jOmDveS/neeVmeminOiJslxuICAvKiogVGhlIGNvbG9yIG9mIHRoZSBsaWdodCwgdGhlIGRlZmF1bHQgaXMgd2hpdGUgbGlnaHQuICovXG4gIGNvbG9yOiBDb2xvciA9IG5ldyBDb2xvcigxLCAxLCAxLCAxKTtcbiAgLyoqIEludGVuc2l0eSBvZiBsaWdodC4gKi9cbiAgaW50ZW5zaXR5OiBudW1iZXIgPSAxLjA7XG5cbiAgLyoqIEZpbmFsIGxpZ2h0IGNvbG9yLiAqL1xuICBwcml2YXRlIF9saWdodENvbG9yOiBDb2xvciA9IG5ldyBDb2xvcigxLCAxLCAxLCAxKTtcblxuICAvKiogR2V0IHRoZSBwb3NpdGlvbiBvZiBhIHBvaW50IGxpZ2h0LiAqL1xuICBnZXQgcG9zaXRpb24oKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLndvcmxkUG9zaXRpb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBmaW5hbCBsaWdodCBjb2xvci5cbiAgICovXG4gIGdldCBsaWdodENvbG9yKCk6IENvbG9yIHtcbiAgICB0aGlzLl9saWdodENvbG9yLnIgPSB0aGlzLmNvbG9yLnIgKiB0aGlzLmludGVuc2l0eTtcbiAgICB0aGlzLl9saWdodENvbG9yLmcgPSB0aGlzLmNvbG9yLmcgKiB0aGlzLmludGVuc2l0eTtcbiAgICB0aGlzLl9saWdodENvbG9yLmIgPSB0aGlzLmNvbG9yLmIgKiB0aGlzLmludGVuc2l0eTtcbiAgICB0aGlzLl9saWdodENvbG9yLmEgPSB0aGlzLmNvbG9yLmEgKiB0aGlzLmludGVuc2l0eTtcbiAgICByZXR1cm4gdGhpcy5fbGlnaHRDb2xvcjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBvc2l0aW9uOiBWZWN0b3IzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRyYW5zZm9ybS53b3JsZFBvc2l0aW9uID0gcG9zaXRpb247XG4gIH1cblxuICAvKipcbiAgICogU2V0IHZhcmlhYmxlIHZhbHVlIGluIHNoYWRlci5cbiAgICogQHBhcmFtIHNoYWRlckRhdGEgU2hhZGVyIGRhdGEuXG4gICAqL1xuICBfdXBkYXRlU2hhZGVyRGF0YShzaGFkZXJEYXRhOiBTaGFkZXJEYXRhKTogdm9pZCB7XG4gICAgdGhpcy5fYXBwZW5kRGF0YSgpO1xuICAgIGNvbnN0IGRhdGEgPSBQb2ludExpZ2h0Ll9jb21iaW5lZERhdGE7XG5cbiAgICBzaGFkZXJEYXRhLnNldEZsb2F0QXJyYXkoUG9pbnRMaWdodC5fY29sb3JQcm9wZXJ0eSwgZGF0YS5jb2xvcik7XG4gICAgc2hhZGVyRGF0YS5zZXRGbG9hdEFycmF5KFBvaW50TGlnaHQuX3Bvc2l0aW9uUHJvcGVydHksIGRhdGEucG9zaXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvcHVsYXRlIGZlZGVyYXRlZCBkYXRhLlxuICAgKi9cbiAgX2FwcGVuZERhdGEoKTogdm9pZCB7XG4gICAgY29uc3QgZGF0YSA9IFBvaW50TGlnaHQuX2NvbWJpbmVkRGF0YTtcbiAgICBjb25zdCBsaWdodENvbG9yID0gdGhpcy5saWdodENvbG9yO1xuICAgIGNvbnN0IGxpZ2h0UG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uO1xuXG4gICAgZGF0YS5jb2xvclswXSA9IGxpZ2h0Q29sb3IucjtcbiAgICBkYXRhLmNvbG9yWzFdID0gbGlnaHRDb2xvci5nO1xuICAgIGRhdGEuY29sb3JbMl0gPSBsaWdodENvbG9yLmI7XG4gICAgZGF0YS5wb3NpdGlvblswXSA9IGxpZ2h0UG9zaXRpb24ueDtcbiAgICBkYXRhLnBvc2l0aW9uWzFdID0gbGlnaHRQb3NpdGlvbi55O1xuICAgIGRhdGEucG9zaXRpb25bMl0gPSBsaWdodFBvc2l0aW9uLno7XG4gIH1cbn1cbiIsImltcG9ydCB7IFNoYWRlciwgU2hhZGVyRGF0YSwgU2hhZGVyUHJvcGVydHkgfSBmcm9tICcuLi9zaGFkZXInO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoJztcblxuLy8g6L+Z5Liq5LiN55So57un5om/TGlnaHTvvIzlm6DkuLrlj6rpnIDopoHpopzoibJcbi8qKlxuICogQW1iaWVudCBsaWdodC5cbiAqL1xuZXhwb3J0IGNsYXNzIEFtYmllbnRMaWdodCB7XG4gIC8qKiBHZXQgdGhlIGFkZHJlc3Mgb2YgdGhlIHBvaW50IGFtYmllbnQgY29sb3IgdW5pZm9ybSB2YXJpYWJsZSBpbiB0aGUgc2hhZGVyLiAqL1xuICBwcml2YXRlIHN0YXRpYyBfY29sb3JQcm9wZXJ0eTogU2hhZGVyUHJvcGVydHkgPSBTaGFkZXIuZ2V0UHJvcGVydHlCeU5hbWUoJ3VfZGlmZnVzZVNwZWN1bGFyQW1iaWVudFNoaW5pbmVzcycpO1xuICAvKiogVGhlIGNvbG9yIG9mIHRoZSBsaWdodC4gKi9cbiAgY29sb3I6IENvbG9yO1xuXG4gIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvcikge1xuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdmFyaWFibGUgdmFsdWUgaW4gc2hhZGVyLlxuICAgKiBAcGFyYW0gc2hhZGVyRGF0YSBTaGFkZXIgZGF0YS5cbiAgICovXG4gIF91cGRhdGVTaGFkZXJEYXRhKHNoYWRlckRhdGE6IFNoYWRlckRhdGEpOiB2b2lkIHtcbiAgICBjb25zdCBjb2xvciA9IHRoaXMuY29sb3I7XG4gICAgY29uc3QgYW1iaWVudENvbG9yID0gbmV3IEZsb2F0MzJBcnJheShbY29sb3IuciwgY29sb3IuZywgY29sb3IuYiwgY29sb3IuYV0pO1xuICAgIHNoYWRlckRhdGEuc2V0RmxvYXRBcnJheShBbWJpZW50TGlnaHQuX2NvbG9yUHJvcGVydHksIGFtYmllbnRDb2xvcik7XG4gIH1cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoJztcblxuZXhwb3J0IGNsYXNzIEVsbGlwc29pZCB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgV2dzODQ6IEVsbGlwc29pZCA9IG5ldyBFbGxpcHNvaWQoNjM3ODEzNy4wLCA2Mzc4MTM3LjAsIDYzNTY3NTIuMzE0MjQ1KTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBTY2FsZWRXZ3M4NDogRWxsaXBzb2lkID0gbmV3IEVsbGlwc29pZCgxLjAsIDEuMCwgNjM1Njc1Mi4zMTQyNDUgLyA2Mzc4MTM3LjApO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFVuaXRTcGhlcmU6IEVsbGlwc29pZCA9IG5ldyBFbGxpcHNvaWQoMS4wLCAxLjAsIDEuMCk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfcmFkaWk6IFZlY3RvcjM7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3JhZGlpU3F1YXJlZDogVmVjdG9yMztcbiAgcHJpdmF0ZSByZWFkb25seSBfb25lT3ZlclJhZGlpU3F1YXJlZDogVmVjdG9yMztcblxuICAvKiogVGhlIHRyZWUgcmFkaWkgb2YgdGhlIGVsbGlwc29pZC4gKi9cbiAgZ2V0IHJhZGlpKCk6IFZlY3RvcjMge1xuICAgIHJldHVybiB0aGlzLl9yYWRpaTtcbiAgfVxuXG4gIC8qKiBUaGUgc3F1YXJlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSB0aHJlZSByYWRpaSBvZiB0aGUgZWxsaXBzb2lkLiAqL1xuICBnZXQgcmFkaWlTcXVhcmVkKCk6IFZlY3RvcjMge1xuICAgIHJldHVybiB0aGlzLl9yYWRpaVNxdWFyZWQ7XG4gIH1cblxuICAvKiogVGhlIGludmVyc2Ugb2YgdGhlIHNxdWFyZSBjb3JyZXNwb25kaW5nIHRvIHRoZSB0aHJlZSByYWRpaSBvZiB0aGUgZWxsaXBzb2lkLiAqL1xuICBnZXQgb25lT3ZlclJhZGlpU3F1YXJlZCgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5fb25lT3ZlclJhZGlpU3F1YXJlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIpIHtcbiAgICBpZiAoYSA8PSAwIHx8IGIgPD0gMCB8fCBjIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRWxsaXBzb2lkIHBhcmFtZXRlcnMgYXJlIG5vdCBhbGxvd2VkIHRvIGJlIHNldCB0byBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gMC4nKTtcbiAgICB9XG4gICAgdGhpcy5fcmFkaWkgPSBuZXcgVmVjdG9yMyhhLCBiLCBjKTtcbiAgICB0aGlzLl9yYWRpaVNxdWFyZWQgPSBuZXcgVmVjdG9yMyhhICogYSwgYiAqIGIsIGMgKiBjKTtcbiAgICB0aGlzLl9vbmVPdmVyUmFkaWlTcXVhcmVkID0gbmV3IFZlY3RvcjMoXG4gICAgICAxIC8gKHRoaXMuX3JhZGlpLnggKiB0aGlzLl9yYWRpaS54KSxcbiAgICAgIDEgLyAodGhpcy5fcmFkaWkueSAqIHRoaXMuX3JhZGlpLnkpLFxuICAgICAgMSAvICh0aGlzLl9yYWRpaS56ICogdGhpcy5fcmFkaWkueiksXG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTW9kZWxNZXNoLCBQcmltaXRpdmVNZXNoIH0gZnJvbSAnLi4vY29yZS9tZXNoJztcbmltcG9ydCB7IEVsbGlwc29pZCB9IGZyb20gJy4vRWxsaXBzb2lkJztcbmltcG9ydCB7IEltYWdlTWF0ZXJpYWwsIE1hdGVyaWFsIH0gZnJvbSAnLi4vY29yZS9tYXRlcmlhbCc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuLi9jb3JlL3NoYWRlcic7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9jb3JlL0VuZ2luZSc7XG5pbXBvcnQgeyBlYXJ0aFVybCB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9jb3JlL0VudGl0eSc7XG5cbmV4cG9ydCBjbGFzcyBSYXlDYXN0ZWRHbG9iZSB7XG4gIHByaXZhdGUgX3NoYXBlOiBFbGxpcHNvaWQgPSBFbGxpcHNvaWQuU2NhbGVkV2dzODQ7XG4gIHByaXZhdGUgX3NoYWRlcjogU2hhZGVyID0gU2hhZGVyLmZpbmQoJ3JheUNhc3RlZEdsb2JlJyk7XG4gIHByaXZhdGUgX21lc2g6IE1vZGVsTWVzaDtcbiAgcHJpdmF0ZSBfbWF0ZXJpYWw6IE1hdGVyaWFsO1xuXG4gIC8qKiBUaGUgY29sbGVjdGlvbiBvZiBlbnRpdGllcyB1bmRlciB0aGUgZWFydGguICovXG4gIGVudGl0aWVzOiBFbnRpdHlbXSA9IFtdO1xuXG4gIC8qKiBUaGUgZWxsaXBzb2lkIHBhcmFtZXRlcnMgY29ycmVzcG9uZGluZyB0byB0aGUgc3BoZXJlLiAqL1xuICBnZXQgc2hhcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NoYXBlO1xuICB9XG5cbiAgLyoqIEN1YmUgbWVzaCBmb3IgR1BVIHJheSB0cmFjaW5nLiAqL1xuICBnZXQgbWVzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzaDtcbiAgfVxuXG4gIC8qKiBUaGUgbWF0ZXJpYWwgb2YgdGhlIHNwaGVyZSBzZWxlY3Rpb24uICovXG4gIGdldCBtYXRlcmlhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWF0ZXJpYWw7XG4gIH1cblxuICAvKiogVGhlIHNoYWRlciBvZiB0aGUgc3BoZXJlLiAqL1xuICBnZXQgc2hhZGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9zaGFkZXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihlbmdpbmU6IEVuZ2luZSkge1xuICAgIHRoaXMuX21lc2ggPSBQcmltaXRpdmVNZXNoLmNyZWF0ZUN1Ym9pZChlbmdpbmUpO1xuICAgIHRoaXMuX21hdGVyaWFsID0gbmV3IEltYWdlTWF0ZXJpYWwoZW5naW5lLCB0aGlzLnNoYWRlciwgZWFydGhVcmwpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuL0VuZ2luZSc7XG5pbXBvcnQgeyBCYWNrZ3JvdW5kIH0gZnJvbSAnLi9CYWNrZ3JvdW5kJztcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vQ2FtZXJhJztcbmltcG9ydCB7IENvbG9yLCBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aCc7XG5pbXBvcnQgeyBTaGFkZXJEYXRhLCBTaGFkZXJEYXRhR3JvdXAgfSBmcm9tICcuL3NoYWRlcic7XG5pbXBvcnQgeyBBbWJpZW50TGlnaHQsIFBvaW50TGlnaHQgfSBmcm9tICcuL2xpZ2h0aW5nJztcbmltcG9ydCB7IFJheUNhc3RlZEdsb2JlIH0gZnJvbSAnLi4vZ2VvZ3JhcGhpYy9SYXlDYXN0ZWRHbG9iZSc7XG5cbi8vIFRPRE86IOaKveixoeWHuuadpeS4gOS4qkVuZ2luZU9iamVjdCEhISFcbmV4cG9ydCBjbGFzcyBTY2VuZSB7XG4gIHJlYWRvbmx5IHNoYWRlckRhdGE6IFNoYWRlckRhdGEgPSBuZXcgU2hhZGVyRGF0YShTaGFkZXJEYXRhR3JvdXAuU2NlbmUpO1xuICAvKiogVGhlIGVuZ2luZSB0aGUgc2NlbmUgYmVsb25ncyB0by4gKi9cbiAgZW5naW5lOiBFbmdpbmU7XG4gIC8qKiBDYW1lcmFzIGluIHRoZSBzY2VuZSwgd2Ugb25seSBjb25zaWRlciB0aGUgY2FzZSB3aGVyZSB0aGVyZSBpcyBvbmx5IG9uZSBjYW1lcmEgaW4gdGhlIHNjZW5lLiAqL1xuICBjYW1lcmE6IENhbWVyYTtcbiAgLy8gVE9ETzog6KaB5oOz5Zyo6L+Z6YeM5L2/55So5L2g5bCx55qE5YWI5oq96LGh5Ye65p2lXG4gIC8qKiBUaGUgYmFja2dyb3VuZCBvZiB0aGUgc2NlbmUsIHRoZSBkZWZhdWx0IGlzIHRoZSBza3lib3guICovXG4gIGJhY2tncm91bmQ6IEJhY2tncm91bmQ7XG4gIC8vIFRPRE86IOWPr+iDveacieWkmuS4queCueWFiea6kFxuICAvKiogUG9pbnQgbGlnaHRzIGluIHRoZSBzY2VuZS4gKi9cbiAgcG9pbnRMaWdodDogUG9pbnRMaWdodDtcbiAgLyoqIEFtYmllbnQgbGlnaHQgaW4gdGhlIHNjZW5lLiAqL1xuICBhbWJpZW50TGlnaHQ6IEFtYmllbnRMaWdodDtcbiAgLyoqIEVhcnRoIGlzIHRoZSByb290IGVudGl0eSBpbiB0aGUgc2NlbmUuICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2dsb2JlOiBSYXlDYXN0ZWRHbG9iZTtcblxuICBnZXQgZ2xvYmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dsb2JlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjYW1lcmEgYW5kIHRoZSBlYXJ0aCBhcmUgbG9hZGVkIGJ5IGRlZmF1bHQgaW5zaWRlIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICogQHBhcmFtIGVuZ2luZSBUaGUgZW5naW5lIHRoZSBzY2VuZSBiZWxvbmdzIHRvLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUpIHtcbiAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcblxuICAgIC8vIOWIneWni+WMluWcuuaZr+ebuOaculxuICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYShlbmdpbmUpO1xuICAgIHRoaXMuY2FtZXJhLnRyYW5zZm9ybS5wb3NpdGlvbiA9IG5ldyBWZWN0b3IzKDAsIDAsIDMpO1xuICAgIHRoaXMuY2FtZXJhLnRyYW5zZm9ybS5sb29rQXQobmV3IFZlY3RvcjMoMCwgMCwgMCkpO1xuXG4gICAgLy8g5Yid5aeL5YyW5Zy65pmv5Zyw55CDXG4gICAgdGhpcy5fZ2xvYmUgPSBuZXcgUmF5Q2FzdGVkR2xvYmUoZW5naW5lKTtcbiAgICAvLyDliJ3lp4vljJbog4zmma/vvIzljbPlpKnnqbrnm5JcbiAgICB0aGlzLmJhY2tncm91bmQgPSBuZXcgQmFja2dyb3VuZCh0aGlzLmVuZ2luZSk7XG5cbiAgICAvLyDliJ3lp4vljJblnLrmma/ngrnlhYnmupBcbiAgICB0aGlzLnBvaW50TGlnaHQgPSBuZXcgUG9pbnRMaWdodChuZXcgVmVjdG9yMygwLCAwLCAxMCkpO1xuICAgIHRoaXMucG9pbnRMaWdodC5fdXBkYXRlU2hhZGVyRGF0YSh0aGlzLnNoYWRlckRhdGEpO1xuXG4gICAgLy8g5Yid5aeL5YyW5Zy65pmv546v5aKD5YWJXG4gICAgdGhpcy5hbWJpZW50TGlnaHQgPSBuZXcgQW1iaWVudExpZ2h0KG5ldyBDb2xvcigwLjIsIDAuMiwgMC4yLCAxKSk7XG4gICAgdGhpcy5hbWJpZW50TGlnaHQuX3VwZGF0ZVNoYWRlckRhdGEodGhpcy5zaGFkZXJEYXRhKTtcbiAgfVxuXG4gIC8vICEg5ZCM57qn5LiN5pSv5oyB5re75Yqg5YW25LuW5a6e5L2T77yM5ZCO57ut5Y+v5L+u5pS5XG59XG4iLCJpbXBvcnQgeyBNZXNoIH0gZnJvbSAnLi9ncmFwaGljJztcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9tYXRlcmlhbCc7XG5pbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybSc7XG5cbi8qKlxuICogRW50aXR5IGNsYXNzZXMgaW4gdGhlIHNjZW5lLlxuICovXG5leHBvcnQgY2xhc3MgRW50aXR5IHtcbiAgLyoqIEVudGl0eSBjb3VudC4gKi9cbiAgc3RhdGljIF9jb3VudDogbnVtYmVyID0gMTtcbiAgLyoqIEVudGl0eSBjb3VudC4gKi9cbiAgaWQ6IG51bWJlcjtcbiAgLyoqIEVudGl0eSBuYW1lLiAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiBFbnRpdHkgbWVzaC4gKi9cbiAgbWVzaDogTWVzaDtcbiAgLyoqIEVudGl0eSBtYXRlcmlhbC4gKi9cbiAgbWF0ZXJpYWw6IE1hdGVyaWFsO1xuICAvKiogUGFyZW50IGVudGl0eSBpZC4gKi9cbiAgcGFyZW50OiBFbnRpdHk7XG4gIC8qKiBFbnRpdHkgY2hpbGRyZW5zLiAqL1xuICBfY2hpbGRyZW46IEVudGl0eVtdO1xuXG4gIC8qKiBFbnRpdHkgcmFuc2Zvcm0uICovXG4gIHJlYWRvbmx5IHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuXG4gIC8qKlxuICAgKiBBbiBlbnRpdHkgY29uc2lzdHMgb2YgbWVzaGVzIGFuZCBtYXRlcmlhbHMuXG4gICAqIEBwYXJhbSBuYW1lIEVudGl0eSBuYW1lLlxuICAgKiBAcGFyYW0gbWVzaCBFbnRpdHkgbWVzaC5cbiAgICogQHBhcmFtIG1hdGVyaWFsIEVudGl0eSBtYXRlcmlhbC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgbWVzaDogTWVzaCwgbWF0ZXJpYWw6IE1hdGVyaWFsKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmlkID0gRW50aXR5Ll9jb3VudCsrO1xuICAgIHRoaXMubWVzaCA9IG1lc2g7XG4gICAgdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgIHRoaXMudHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgY2hpbGQgZW50aXRpZXMuXG4gICAqIEBwYXJhbSBlbnRpdHkgQ2hpbGQgZW50aXRpZXMgdG8gYmUgbG9hZGVkLlxuICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoaWxkIGVudGl0aWVzLlxuICAgKi9cbiAgYWRkRW50aXR5KGVudGl0eTogRW50aXR5KTogbnVtYmVyIHtcbiAgICBpZiAoZW50aXR5IGluc3RhbmNlb2YgRW50aXR5KSB7XG4gICAgICBpZiAodGhpcy5fY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5fY2hpbGRyZW4ucHVzaChlbnRpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4ubGVuZ3RoO1xuICB9XG59XG4iLCIvKipcbiAqIEVuY2Fwc3VsYXRlIGNhbnZhcyB0YWcuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYW52YXMge1xuICAvKiogSFRNTCBjYW52YXMgZWxlbWVudC4gKi9cbiAgX2NhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcjtcbiAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7XG5cbiAgLyoqIENhbnZhcyBlbGVtZW50IHdpZHRoLiAqL1xuICBnZXQgd2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fd2lkdGg7XG4gIH1cblxuICBzZXQgd2lkdGgodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl93aWR0aCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2NhbnZhcy53aWR0aCA9IHZhbHVlO1xuICAgICAgdGhpcy5fd2lkdGggPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogQ2FudmFzIGVsZW1lbnQgaGVpZ2h0LiAqL1xuICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIHNldCBoZWlnaHQodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9oZWlnaHQgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gdmFsdWU7XG4gICAgICB0aGlzLl9oZWlnaHQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVzaXplIGJ5IGNsaWVudCBzaXplLlxuICAgKiBAcGFyYW0gcGl4ZWxSYXRpbyBEZXZpY2UgcGl4ZWwgcmF0aW8uXG4gICAqL1xuICByZXNpemVCeUNsaWVudFNpemUocGl4ZWxSYXRpbzogbnVtYmVyID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8pOiB2b2lkIHtcbiAgICBjb25zdCB3ZWJDYW52YXMgPSB0aGlzLl9jYW52YXM7XG4gICAgaWYgKHdlYkNhbnZhcyBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICB0aGlzLndpZHRoID0gd2ViQ2FudmFzLmNsaWVudFdpZHRoICogcGl4ZWxSYXRpbztcbiAgICAgIHRoaXMuaGVpZ2h0ID0gd2ViQ2FudmFzLmNsaWVudEhlaWdodCAqIHBpeGVsUmF0aW87XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdyYXAgdGhlIGNhbnZhcyBlbGVtZW50LlxuICAgKiBAcGFyYW0gY2FudmFzIEhUTUwgY2FudmFzIGVsZW1lbnQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgY29uc3Qgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICB0aGlzLl9jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgLy8gVE9ETzog5YGa55qE5LiN5aW977yM5bqU6K+l5oOz5Liq5LyY6ZuF55qE5pa55rOVXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgIHRoaXMucmVzaXplQnlDbGllbnRTaXplKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKlxuICogVG9vbHMgZm9yIGNhbGN1bGF0aW5nIHRoZSB0aW1lIHBlciBmcmFtZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRpbWUge1xuICBwcml2YXRlIF9jbG9jazogeyBub3c6ICgpID0+IG51bWJlciB9O1xuXG4gIHByaXZhdGUgX3RpbWVTY2FsZTogbnVtYmVyO1xuXG4gIHByaXZhdGUgX2RlbHRhVGltZTogbnVtYmVyO1xuXG4gIHByaXZhdGUgX3N0YXJ0VGltZTogbnVtYmVyO1xuXG4gIHByaXZhdGUgX2xhc3RUaWNrVGltZTogbnVtYmVyO1xuICAvKipcbiAgICogQ29uc3RydWN0b3Igb2YgdGhlIFRpbWUuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9jbG9jayA9IHBlcmZvcm1hbmNlID8gcGVyZm9ybWFuY2UgOiBEYXRlO1xuXG4gICAgdGhpcy5fdGltZVNjYWxlID0gMS4wO1xuICAgIHRoaXMuX2RlbHRhVGltZSA9IDAuMDAwMTtcblxuICAgIGNvbnN0IG5vdyA9IHRoaXMuX2Nsb2NrLm5vdygpO1xuICAgIHRoaXMuX3N0YXJ0VGltZSA9IG5vdztcbiAgICB0aGlzLl9sYXN0VGlja1RpbWUgPSBub3c7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjdXJyZW50IHRpbWUgYXMgdGhlIGVuZCBvZiByZW5kZXJpbmcgbWFya2VyLlxuICAgKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5fbGFzdFRpY2tUaW1lID0gdGhpcy5fY2xvY2subm93KCk7XG4gIH1cblxuICAvKipcbiAgICogQ3VycmVudCBUaW1lXG4gICAqL1xuICBnZXQgbm93VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9jbG9jay5ub3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaW1lIGJldHdlZW4gdHdvIHRpY2tzXG4gICAqL1xuICBnZXQgZGVsdGFUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbHRhVGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZWQgZGVsdGEgdGltZS5cbiAgICovXG4gIGdldCB0aW1lU2NhbGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdGltZVNjYWxlO1xuICB9XG4gIHNldCB0aW1lU2NhbGUocykge1xuICAgIHRoaXMuX3RpbWVTY2FsZSA9IHM7XG4gIH1cblxuICAvKipcbiAgICogVW5zY2FsZWQgZGVsdGEgdGltZS5cbiAgICovXG4gIGdldCB1bnNjYWxlZERlbHRhVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVRpbWUgLyB0aGlzLl90aW1lU2NhbGU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGVsYXBzZWQgdGltZSwgYWZ0ZXIgdGhlIGNsb2NrIGlzIGluaXRpYWxpemVkLlxuICAgKi9cbiAgZ2V0IHRpbWVTaW5jZVN0YXJ0dXAoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5ub3dUaW1lIC0gdGhpcy5fc3RhcnRUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgZXZlcnkgZnJhbWUsIHVwZGF0ZSBkZWx0YSB0aW1lIGFuZCBvdGhlciBkYXRhLlxuICAgKi9cbiAgcHVibGljIHRpY2soKTogdm9pZCB7XG4gICAgY29uc3Qgbm93ID0gdGhpcy5ub3dUaW1lO1xuICAgIHRoaXMuX2RlbHRhVGltZSA9IChub3cgLSB0aGlzLl9sYXN0VGlja1RpbWUpICogdGhpcy5fdGltZVNjYWxlO1xuICAgIHRoaXMuX2xhc3RUaWNrVGltZSA9IG5vdztcbiAgfVxufVxuIiwiaW1wb3J0IHNreWJveEZzIGZyb20gJy4uL3NoYWRlcmxpYi9leHRyYS9za3lib3guZnMuZ2xzbCc7XG5pbXBvcnQgc2t5Ym94VnMgZnJvbSAnLi4vc2hhZGVybGliL2V4dHJhL3NreWJveC52cy5nbHNsJztcbmltcG9ydCByYXlDYXN0ZWRHbG9iZUZzIGZyb20gJy4uL3NoYWRlcmxpYi9leHRyYS9yYXlDYXN0ZWRHbG9iZS5mcy5nbHNsJztcbmltcG9ydCByYXlDYXN0ZWRHbG9iZVZzIGZyb20gJy4uL3NoYWRlcmxpYi9leHRyYS9yYXlDYXN0ZWRHbG9iZS52cy5nbHNsJztcbmltcG9ydCBjb21tb25GcyBmcm9tICcuLi9zaGFkZXJsaWIvY29tbW9uLmZzLmdsc2wnO1xuaW1wb3J0IGNvbW1vblZzIGZyb20gJy4uL3NoYWRlcmxpYi9jb21tb24udnMuZ2xzbCc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuL1NoYWRlcic7XG5cbi8qKlxuICogRW5naW5lIGJ1aWx0LWluIHNoYWRlciBwb29sLlxuICovXG5leHBvcnQgY2xhc3MgU2hhZGVyUG9vbCB7XG4gIC8qKlxuICAgKiBDcmVhdGVkIGJ5IFNoYWRlciBiYXNlZCBvbiBmcmFnbWVudCBhbmQgdmVydGV4IHNoYWRlciBjb2RlLlxuICAgKi9cbiAgc3RhdGljIGluaXQoKTogdm9pZCB7XG4gICAgU2hhZGVyLmNyZWF0ZSgnc2t5Ym94Jywgc2t5Ym94VnMsIHNreWJveEZzKTtcbiAgICBTaGFkZXIuY3JlYXRlKCdjb21tb24nLCBjb21tb25WcywgY29tbW9uRnMpO1xuICAgIFNoYWRlci5jcmVhdGUoJ3JheUNhc3RlZEdsb2JlJywgcmF5Q2FzdGVkR2xvYmVWcywgcmF5Q2FzdGVkR2xvYmVGcyk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENhbnZhcyB9IGZyb20gJy4vQ2FudmFzJztcbmltcG9ydCB7IFNjZW5lIH0gZnJvbSAnLi9TY2VuZSc7XG5pbXBvcnQgeyBUaW1lIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFRleHR1cmUyRCwgVGV4dHVyZUN1YmVGYWNlLCBUZXh0dXJlRm9ybWF0IH0gZnJvbSAnLi90ZXh0dXJlJztcbmltcG9ydCB7IFNoYWRlclBvb2wgfSBmcm9tICcuL3NoYWRlci9TaGFkZXJQb29sJztcbmltcG9ydCB7IFRleHR1cmVDdWJlIH0gZnJvbSAnLi90ZXh0dXJlL1RleHR1cmVDdWJlJztcblxuLy8g5byV5YWl5byV5pOO55qE5pe25YCZ5bCx5bCGU2hhZGVyUG9vbOi/m+ihjOWIneWni+WMllxuU2hhZGVyUG9vbC5pbml0KCk7XG5cbi8qKlxuICogVGhlIGVuZ2luZSBpcyB0aGUgYmlnIHN0ZXdhcmQgb2YgYWxsIGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBFbmdpbmUge1xuICAvKiogVGhlIGNhbnZhcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbmdpbmUuICovXG4gIHByb3RlY3RlZCBfY2FudmFzOiBDYW52YXM7XG4gIC8vIFRPRE86IOiAg+iZkeaOpeWFpVdlYkdMMi5cbiAgLyoqIFdlYkdMIHJlbmRlcmluZyBjb250ZXh0LiAqL1xuICBwcm90ZWN0ZWQgX2dsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG5cbiAgLyoqIEN1cnJlbnQgYWN0aXZlIHNjZW5lLiAqL1xuICBwcml2YXRlIGFjdGl2ZVNjZW5lOiBTY2VuZTtcbiAgLyoqIFVzZWQgdG8gY2FsY3VsYXRlIHRoZSBpbnRlcnZhbCBiZXR3ZWVuIGVhY2ggZnJhbWUgcmVuZGVyaW5nLiAqL1xuICBwcml2YXRlIF90aW1lOiBUaW1lID0gbmV3IFRpbWUoKTtcbiAgLyoqIEVhc3kgdG8gZGVzdHJveSBSQUYuICovXG4gIHByaXZhdGUgX3JlcXVlc3RJZDogbnVtYmVyO1xuXG4gIC8qKiBSZW5kZXJlZCAyRCB0ZXh0dXJlIHdoZW4gdGhlIGltYWdlIGhhcyBub3QgYmVlbiBsb2FkZWQgeWV0LiAqL1xuICBfd2hpdGVUZXh0dXJlMkQ6IFRleHR1cmUyRDtcbiAgLyoqIFJlbmRlcmVkIGN1YmUgdGV4dHVyZSB3aGVuIHRoZSBpbWFnZSBoYXMgbm90IGJlZW4gbG9hZGVkIHlldC4gKi9cbiAgX3doaXRlVGV4dHVyZUN1YmU6IFRleHR1cmVDdWJlO1xuXG4gIGdldCBjYW52YXMoKTogQ2FudmFzIHtcbiAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICB9XG5cbiAgZ2V0IGdsKCk6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB7XG4gICAgcmV0dXJuIHRoaXMuX2dsO1xuICB9XG5cbiAgZ2V0IHRpbWUoKTogVGltZSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWU7XG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0aW9uIHJlbmRlcmluZy5cbiAgICovXG4gIHByaXZhdGUgX2FuaW1hdGUgPSAoKSA9PiB7XG4gICAgdGhpcy5fcmVxdWVzdElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGUpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEVuZ2luZSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIGNhbnZhc0lkIEhUTUwgY2FudmFzIGlkLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY2FudmFzSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNhbnZhc0lkKTtcbiAgICBpZiAoY2FudmFzIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2NhbnZhcyA9IG5ldyBDYW52YXMoY2FudmFzKTtcbiAgICAgIHRoaXMuX2NhbnZhcy5yZXNpemVCeUNsaWVudFNpemUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgYGNhbnZhcyBpcyBub3QgYSBIVE1MQ2FudmFzRWxlbWVudCFgO1xuICAgIH1cbiAgICBjb25zdCBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIHt9KTtcbiAgICBpZiAoIWdsKSB0aHJvdyBgaW5pdCB3ZWJnbCByZW5kZXJpbmcgY29udGV4dCBmYWlsdXJlIWA7XG4gICAgdGhpcy5fZ2wgPSBnbDtcbiAgICAvLyAhIOi/meagt+WunuS+i+WMluWcuuaZr+WlveWQl++8n++8n++8n1xuICAgIHRoaXMuYWN0aXZlU2NlbmUgPSBuZXcgU2NlbmUodGhpcyk7XG5cbiAgICBjb25zdCB3aGl0ZVBpeGVsID0gbmV3IFVpbnQ4QXJyYXkoWzI1NSwgMjU1LCAyNTUsIDI1NV0pO1xuICAgIGNvbnN0IHdoaXRlVGV4dHVyZTJEID0gbmV3IFRleHR1cmUyRCh0aGlzLCAxLCAxLCBUZXh0dXJlRm9ybWF0LlI4RzhCOEE4LCBmYWxzZSk7XG4gICAgd2hpdGVUZXh0dXJlMkQuc2V0UGl4ZWxCdWZmZXIod2hpdGVQaXhlbCk7XG5cbiAgICBjb25zdCB3aGl0ZVRleHR1cmVDdWJlID0gbmV3IFRleHR1cmVDdWJlKHRoaXMsIDEsIFRleHR1cmVGb3JtYXQuUjhHOEI4QTgsIGZhbHNlKTtcbiAgICB3aGl0ZVRleHR1cmVDdWJlLnNldFBpeGVsQnVmZmVyKFRleHR1cmVDdWJlRmFjZS5Qb3NpdGl2ZVgsIHdoaXRlUGl4ZWwpO1xuICAgIHdoaXRlVGV4dHVyZUN1YmUuc2V0UGl4ZWxCdWZmZXIoVGV4dHVyZUN1YmVGYWNlLk5lZ2F0aXZlWCwgd2hpdGVQaXhlbCk7XG4gICAgd2hpdGVUZXh0dXJlQ3ViZS5zZXRQaXhlbEJ1ZmZlcihUZXh0dXJlQ3ViZUZhY2UuUG9zaXRpdmVZLCB3aGl0ZVBpeGVsKTtcbiAgICB3aGl0ZVRleHR1cmVDdWJlLnNldFBpeGVsQnVmZmVyKFRleHR1cmVDdWJlRmFjZS5OZWdhdGl2ZVksIHdoaXRlUGl4ZWwpO1xuICAgIHdoaXRlVGV4dHVyZUN1YmUuc2V0UGl4ZWxCdWZmZXIoVGV4dHVyZUN1YmVGYWNlLlBvc2l0aXZlWiwgd2hpdGVQaXhlbCk7XG4gICAgd2hpdGVUZXh0dXJlQ3ViZS5zZXRQaXhlbEJ1ZmZlcihUZXh0dXJlQ3ViZUZhY2UuTmVnYXRpdmVaLCB3aGl0ZVBpeGVsKTtcblxuICAgIHRoaXMuX3doaXRlVGV4dHVyZTJEID0gd2hpdGVUZXh0dXJlMkQ7XG4gICAgdGhpcy5fd2hpdGVUZXh0dXJlQ3ViZSA9IHdoaXRlVGV4dHVyZUN1YmU7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGFsbCBkYXRhLlxuICAgKi9cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IHRpbWUgPSB0aGlzLl90aW1lO1xuICAgIGNvbnN0IGRlbHRhVGltZSA9IHRpbWUuZGVsdGFUaW1lO1xuICAgIGNvbnN0IGNhbWVyYSA9IHRoaXMuYWN0aXZlU2NlbmUuY2FtZXJhO1xuICAgIC8vIOabtOaWsOebuOacuuS9jee9ruS/oeaBr1xuICAgIGNhbWVyYS5vcmJpdENvbnRyb2wub25VcGRhdGUoZGVsdGFUaW1lKTtcblxuICAgIHRpbWUudGljaygpO1xuXG4gICAgdGhpcy5fcmVuZGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIGJhc2VkIG9uIHVwZGF0ZWQgZGF0YS5cbiAgICovXG4gIF9yZW5kZXIoKTogdm9pZCB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBnbC52aWV3cG9ydCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICAvLyDov5nkuKrmlL7ov5nmsqHpl67popjvvIzkuI3nhLbog4zmma/nlLvkuI3lh7rmnaVcbiAgICBnbC5kZXB0aEZ1bmMoZ2wuTEVTUyk7XG4gICAgLy8gVE9ETzog6L+Z5Lqb54q25oCB5LiN5bqU6K+l5q+P5qyh6YO96L+b6KGM6I635Y+WXG4gICAgY29uc3Qgc2NlbmUgPSB0aGlzLmFjdGl2ZVNjZW5lO1xuICAgIGNvbnN0IGdsb2JlID0gc2NlbmUuZ2xvYmU7XG4gICAgY29uc3QgY2FtZXJhID0gc2NlbmUuY2FtZXJhO1xuICAgIGNhbWVyYSAmJiBjYW1lcmEucmVuZGVyKCk7XG5cbiAgICAvLyDpppblhYjmuLLmn5PlnLDnkINcbiAgICBjb25zdCB7IG1lc2gsIG1hdGVyaWFsIH0gPSBnbG9iZTtcbiAgICBjb25zdCBnbG9iZVByb2dyYW0gPSBtYXRlcmlhbC5zaGFkZXIuX2dldFNoYWRlclByb2dyYW0odGhpcyk7XG4gICAgZ2xvYmVQcm9ncmFtLnVwbG9hZEFsbChnbG9iZVByb2dyYW0uc2NlbmVVbmlmb3JtQmxvY2ssIHNjZW5lLnNoYWRlckRhdGEpO1xuICAgIGdsb2JlUHJvZ3JhbS51cGxvYWRBbGwoZ2xvYmVQcm9ncmFtLmNhbWVyYVVuaWZvcm1CbG9jaywgY2FtZXJhLnNoYWRlckRhdGEpO1xuICAgIGdsb2JlUHJvZ3JhbS51cGxvYWRBbGwoZ2xvYmVQcm9ncmFtLm1hdGVyaWFsVW5pZm9ybUJsb2NrLCBtYXRlcmlhbC5zaGFkZXJEYXRhKTtcbiAgICBtZXNoLl9kcmF3KGdsb2JlUHJvZ3JhbSwgbWVzaC5zdWJNZXNoKTtcblxuICAgIC8vIFRPRE86IOi/memHjOimgeaUueaIkOmAkuW9kuWcuuaZr+agkea4suafk1xuICAgIC8vIGVudGl0aWVzLmZvckVhY2goKGVudGl0eSkgPT4ge1xuICAgIC8vICAgY29uc3QgeyBtZXNoLCBtYXRlcmlhbCB9ID0gZW50aXR5O1xuICAgIC8vICAgLy8gISDov5nph4zmr4/mrKHpg73opoHljrvnvJbor5FzaGFkZXLku6PnoIHvvIHvvIHvvIFcbiAgICAvLyAgIC8vIFRPRE86IFNoYWRlclByb2dyYW1Qb29sXG4gICAgLy8gICBjb25zdCBwcm9ncmFtID0gbWF0ZXJpYWwuc2hhZGVyLl9nZXRTaGFkZXJQcm9ncmFtKHRoaXMpO1xuICAgIC8vICAgLy8g5LiK5Lyg55u45py655qE5pWw5o2u77yM6L+Z6YeM6L+Y6ZyA6KaB5LiK5Lyg5YW25LuW5qih5Z2X55qE5pWw5o2u77yM5q+U5aaC77ya5Zy65pmv77yM5p2Q6LSo562JXG4gICAgLy8gICAvLyDlnLrmma/nmoRzaGFkZXJEYXRh5Li76KaB5piv5YWJ57q/XG4gICAgLy8gICAvLyAhIOi/memHjOavj+S4quWunuS9k+mDveimgVxuICAgIC8vICAgcHJvZ3JhbS51cGxvYWRBbGwocHJvZ3JhbS5zY2VuZVVuaWZvcm1CbG9jaywgc2NlbmUuc2hhZGVyRGF0YSk7XG4gICAgLy8gICBwcm9ncmFtLnVwbG9hZEFsbChwcm9ncmFtLmNhbWVyYVVuaWZvcm1CbG9jaywgY2FtZXJhLnNoYWRlckRhdGEpO1xuICAgIC8vICAgcHJvZ3JhbS51cGxvYWRBbGwocHJvZ3JhbS5tYXRlcmlhbFVuaWZvcm1CbG9jaywgbWF0ZXJpYWwuc2hhZGVyRGF0YSk7XG4gICAgLy8gICBtZXNoLl9kcmF3KHByb2dyYW0sIG1lc2guc3ViTWVzaCk7XG4gICAgLy8gfSk7XG5cbiAgICAvLyDmnIDlkI7muLLmn5Pog4zmma9cbiAgICAvLyBnbC5kZXB0aEZ1bmMoZ2wuTEVRVUFMKTtcbiAgICAvLyBjb25zdCB7IF9tZXNoLCBfbWF0ZXJpYWwgfSA9IHNjZW5lLmJhY2tncm91bmQ7XG4gICAgLy8gLy8gISDmr4/mrKHmuLLmn5Ppg73ljrvlrp7kvovljJbkuI3lj6/ku6XvvIHogIzkuJRiaW5k5LiN5bqU6K+l5pS+5Zyo5p6E6YCg5Ye95pWw77yM5ZCm5YiZ5peg5rOV5YiH5o2icHJvZ3JhbVxuICAgIC8vIGNvbnN0IHNreVByb2dyYW0gPSBfbWF0ZXJpYWwuc2hhZGVyLl9nZXRTaGFkZXJQcm9ncmFtKHRoaXMpO1xuICAgIC8vIHNreVByb2dyYW0udXBsb2FkQWxsKHNreVByb2dyYW0uY2FtZXJhVW5pZm9ybUJsb2NrLCBjYW1lcmEuc2hhZGVyRGF0YSk7XG4gICAgLy8gc2t5UHJvZ3JhbS51cGxvYWRBbGwoc2t5UHJvZ3JhbS5tYXRlcmlhbFVuaWZvcm1CbG9jaywgX21hdGVyaWFsLnNoYWRlckRhdGEpO1xuICAgIC8vIF9tZXNoLl9kcmF3KHNreVByb2dyYW0sIF9tZXNoLnN1Yk1lc2gpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRpbWluZyBhbmQgcmVuZGVyaW5nLlxuICAgKi9cbiAgcmVzdW1lKCk6IHZvaWQge1xuICAgIHRoaXMudGltZS5yZXNldCgpO1xuICAgIHRoaXMuX3JlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmdpbmUgcnVuLlxuICAgKi9cbiAgcnVuKCkge1xuICAgIHRoaXMucmVzdW1lKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFRztNQUNVLFFBQVEsQ0FBQTs7QUFFbkIsSUFBQSxPQUFnQixhQUFhLEdBQVcsSUFBSSxDQUFDOztJQUU3QyxPQUFnQixpQkFBaUIsR0FBVyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQzs7SUFFMUQsT0FBZ0IsaUJBQWlCLEdBQVcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFFMUQ7Ozs7OztBQU1HO0FBQ0gsSUFBQSxPQUFPLEtBQUssQ0FBQyxDQUFTLEVBQUUsR0FBVyxFQUFFLEdBQVcsRUFBQTtBQUM5QyxRQUFBLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4QztBQUVEOzs7Ozs7QUFNRztBQUNILElBQUEsT0FBTyxNQUFNLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBQTtBQUNoQyxRQUFBLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQztLQUNsRDtBQUVEOzs7O0FBSUc7SUFDSCxPQUFPLFVBQVUsQ0FBQyxDQUFTLEVBQUE7UUFDekIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFD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LENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxlQUFlLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxHQUFZLEVBQUE7UUFDekQsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUVyQixRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25ELFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkQsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVB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QztRQUM1QixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUM1QixRQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzlDO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sTUFBTSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsR0FBWSxFQUFBO1FBQ3ZELEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVCLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxHQUFHLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBQTtBQUN0QyxRQUFBLE9BQU8sSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0tBQzFGO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sUUFBUSxDQUFDLENBQVUsRUFBRSxDQUFVLEVBQUE7UUFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDakQ7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxlQUFlLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBQTtRQUMzQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDdEIsUUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDdEM7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxNQUFNLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBQTtBQUN6QyxRQUFBLFFBQ0UsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDbEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDbEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDbEMsWUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUNsQztLQUNIO0FBRUQ7Ozs7OztBQU1HO0lBQ0gsT0FBTyxJQUFJLENBQUMsS0FBYyxFQUFFLEdBQVksRUFBRSxDQUFTLEVBQUUsR0FBWSxFQUFBO1FBQy9ELE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDakMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDaEMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoQyxRQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0tBQzlDO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sR0FBRyxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsR0FBWSxFQUFBO0FBQ3BELFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxHQUFHLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxHQUFZLEVBQUE7QUFDcEQsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sTUFBTSxDQUFDLENBQVUsRUFBRSxHQUFZLEVBQUE7QUFDcEMsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNmLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDZixRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2YsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNmLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLFNBQVMsQ0FBQyxDQUFVLEVBQUUsR0FBWSxFQUFBO1FBQ3ZDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDM0QsUUFBQSxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxFQUFFO0FBQ2hDLFlBQUEsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDZCxZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUNsQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUNsQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUNsQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUNsQixZQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQzlDLFNBQUE7S0FDRjtBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLEtBQUssQ0FBQyxDQUFVLEVBQUUsQ0FBUyxFQUFFLEdBQVksRUFBQTtRQUM5QyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxTQUFTLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxHQUFZLEVBQUE7UUFDbkQsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM3QixRQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDckIsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEQsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEQsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekQsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekQsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLGVBQWUsQ0FBQyxDQUFVLEVBQUUsQ0FBYSxFQUFFLEdBQVksRUFBQTtBQUM1RCxRQUFBLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNoQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDaEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7QUFHaEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNwQyxRQUFBLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEMsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUdyQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUMvQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUMvQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUMvQyxRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5Qzs7QUFHRCxJQUFBLEVBQUUsQ0FBUzs7QUFFWCxJQUFBLEVBQUUsQ0FBUzs7QUFFWCxJQUFBLEVBQUUsQ0FBUzs7QUFFWCxJQUFBLEVBQUUsQ0FBUzs7SUFFWCxlQUFlLEdBQWUsSUFBSSxDQUFDO0FBRW5DOztBQUVHO0FBQ0gsSUFBQSxJQUFXLENBQUMsR0FBQTtRQUNWLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztLQUNoQjtJQUVELElBQVcsQ0FBQyxDQUFDLEtBQWEs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QUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXRCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXRCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZCO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sUUFBUSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsR0FBWSxFQUFBO0FBQ3pELFFBQUEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN6QixRQUFBLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDMUIsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBRXhCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVkLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRTFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRTFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzFDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0tBQzNDO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sTUFBTSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUE7QUFDekMsUUFBQSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUUxQixRQUFBLFFBQ0UsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFlBQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzdCO0tBQ0g7QUFFRDs7Ozs7O0FBTUc7SUFDSCxPQUFPLElBQUksQ0FBQyxLQUFjLEVBQUUsR0FBWSxFQUFFLENBQVMsRUFBRSxHQUFZLEVBQUE7QUFDL0QsUUFBQSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQzFCLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDeEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBRXBCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRWhDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRWhDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2pDO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsT0FBTyxrQkFBa0IsQ0FBQyxVQUFzQixFQUFFLEdBQVksRUFBQTtBQUM1RCxRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDeEIsUUFBQSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQztBQUNsRCxRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNsQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNsQixRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVsQixFQUFF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R0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNaLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ2hCLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ1osR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWYsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFFbEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEYsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNSLFlBQUEsT0FBTyxJQUFJLENBQUM7QUFDYixTQUFBO0FBQ0QsUUFBQSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUVoQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUNsRCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUNsRCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUVsRCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUNsRCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUNsRCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUVsRCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUNsRCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUNsRCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztLQUNuRDtBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLE1BQU0sQ0FBQyxDQUFVLEVBQUUsQ0FBUyxFQUFFLEdBQVksRUFBQTtBQUMvQyxRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDdEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUUxQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUUxQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDYjtBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLEtBQUssQ0FBQyxDQUFVLEVBQUUsQ0FBVSxFQUFFLEdBQVksRUFBQTtRQUMvQyxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN0QixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFFeEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2Y7QUFFRDs7Ozs7QUFLRztBQUNILElBQUEsT0FBTyxTQUFTLENBQUMsQ0FBVSxFQUFFLFdBQW9CLEVBQUUsR0FBWSxFQUFBO1FBQzdELE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUM7QUFDckMsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUV4QixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFZCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFFWixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFFWixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztLQUNqQztBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sU0FBUyxDQUFDLENBQVUsRUFBRSxHQUFZLEVBQUE7QUFDdkMsUUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUV4QixJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7QUFDYixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixZQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLFlBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNaLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxZQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixZQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDYixTQUFBO0FBQU0sYUFBQTtZQUNMLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNmLFNBQUE7S0FDRjtBQUVEOzs7Ozs7OztBQVFHO0FBQ0gsSUFBQSxRQUFRLEdBQWlCLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdDOzs7Ozs7Ozs7OztBQVdHO0lBQ0gsV0FDRSxDQUFBLEdBQUEsR0FBYyxDQUFDLEVBQ2YsR0FBYyxHQUFBLENBQUMsRUFDZixHQUFjLEdBQUEsQ0FBQyxFQUNmLEdBQUEsR0FBYyxDQUFDLEVBQ2YsTUFBYyxDQUFDLEVBQ2YsR0FBYyxHQUFBLENBQUMsRUFDZixHQUFBLEdBQWMsQ0FBQyxFQUNmLEdBQWMsR0FBQSxDQUFDLEVBQ2YsR0FBQSxHQUFjLENBQUMsRUFBQTtBQUVmLFFBQUEsTUFBTSxDQUFDLEdBQWlCLElBQUksQ0FBQyxRQUFRLENBQUM7QUFFdEMsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBRVgsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ1gsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBRVgsUUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcs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QUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0I7QUFFRDs7O0FBR0c7SUFDSCxLQUFLLEdBQUE7QUFDSCxRQUFBLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDeEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFD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QUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFDWixFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNmLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEVBQ2pCLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUNiLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUNiLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRWhCLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQy9DLFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDOUM7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLFNBQVMsQ0FBQyxDQUFhLEVBQUUsR0FBZSxFQUFBO0FBQzdDLFFBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDZixRQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2YsUUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMs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LENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7WUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQztBQUM3QixTQUFBO2FBQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxFQUFFO0FBQ3BCLFlBQUEsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDeEMsWUFBQSxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztZQUVsQixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7QUFDNUIsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7WUFDcEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQztBQUM3QixTQUFBO0FBQU0sYUFBQTtBQUNMLFlBQUEsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDeEMsWUFBQSxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztZQUVsQixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7WUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO0FBQzVCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQztBQUM3QixTQUFBO0FBQ0QsUUFBQSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUM5QztBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sTUFBTSxDQUFDLENBQWEsRUFBRSxHQUFlLEVBQUE7QUFDMUMsUUFBQSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6QyxRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUMsUUFBQSxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxFQUFFO0FBQ2hDLFlBQUEsTUFBTSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN6QixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7QUFDckIsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUNyQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUNwQixZQUFBLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQzlDLFNBQUE7S0FDRjtBQUVEOzs7Ozs7QUFNRztJQUNILE9BQU8sSUFBSSxDQUFDLEtBQWlCLEVBQUUsR0FBZSxFQUFFLENBQVMsRUFBRSxHQUFlLEVBQUE7QUFDeEUsUUFBQSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ25DLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQyxZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckMsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0QyxTQUFBO0FBQU0sYUFBQTtBQUNMLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQyxZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckMsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0QyxTQUFBO1FBRUQsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQ2pCO0FBRUQ7Ozs7OztBQU1HO0lBQ0gsT0FBTyxL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QyxFQUNaLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFZixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNaLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ2hCLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ1osR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRWYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN0RCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3RELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUV0RCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3RELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN0RCxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRXRELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdEQsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN0RCxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3ZELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFFdkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN2RCxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3ZELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdkQsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztLQUN4RDtBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxPQUFPLE1BQU0sQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFBO0FBQ3pDLFFBQUEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN6QixRQUFBLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFFMUIsUUFBQSxRQUNFLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvQixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvQixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvQixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvQixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvQixZQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUMvQjtLQUNIO0FBRUQ7Ozs7OztBQU1HO0lBQ0gsT0FBTyxJQUFJLENBQUMsS0FBYyxFQUFFLEdBQVksRUFBRSxDQUFTLEVBQUUsR0FBWSxFQUFBO0FBQy9ELFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUMxQixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDeEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUVwQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRWhDLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVuQyxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQyxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEM7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLGtCQUFrQixDQUFDLFVBQXNCLEVBQUUsR0FBWSxFQUFBO0FBQzVELFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsVUFBVSxDQUFDO0FBQ2xELFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVmLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWhCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNwQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDcEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFVixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDaEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNaO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8saUJBQWlCLENBQUMsSUFBYSxFQUFFLENBQVMsRUFBRSxHQUFZLEVBQUE7QUFDN0QsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ25DLFFBQUEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzNDLFFBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVaLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxFQUFFO1lBQzFDLE9BQU87QUFDUixTQUFBO0FBRUQsUUFBQSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNkLENBQUMsSUFBSSxHQUFHLENBQUM7UUFDVCxDQUFDLElBQUksR0FBRyxDQUFDO1FBQ1QsQ0FBQyxJQUFJLEdBQUcsQ0FBQztBQUVULFFBQUEsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsUUFBQSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixRQUFBLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztRQUdWLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNaO0FBRUQ7Ozs7O0FBS0c7QUFDSCxJQUFBLE9BQU8sbUJBQW1CLENBQUMsVUFBc0IsRUFBRSxXQUFvQixFQUFFLEdBQVksRUFBQTtBQUNuRixRQUFBLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFNUMsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUM7QUFDeEIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQztBQUN4QixRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDO0tBQ3pCO0FBRUQ7Ozs7OztBQU1HO0lBQ0gsT0FBTyxvQkFBb0IsQ0FBQyxLQUFjLEVBQUUsUUFBb0IsRUFBRSxXQUFvQixFQUFFLEdBQVksRUFBQTtBQUNsRyxRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDeEIsUUFBQSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQztBQUNoRCxRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFZixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDbEIsUUFBQSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ2xCLFFBQUEsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUVsQixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3ZCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ3ZCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVWLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ3ZCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDdkIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDdkIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QixRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFWCxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDO0FBQ3hCLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUM7QUFDeEIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQztBQUN4QixRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDWjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLE9BQU8sT0FBTyxDQUFDLENBQVUsRUFBRSxHQUFZLEVBQUE7QUFDckMsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDYixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFVixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2IsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1YsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1YsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1YsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNkLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNaO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsT0FBTyxXQUFXLENBQUMsV0FBb0IsRUFBRSxHQUFZLEVBQUE7QUFDbkQsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVYLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUM7QUFDeEIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQztBQUN4QixRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDO0FBQ3hCLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNaO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsT0FBTyxNQUFNLENBQUMsQ0FBVSxFQUFFLEdBQVksRUFBQTtBQUNwQyxRQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDdEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBRXhCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNYLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ1osR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNmLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDaEIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNaLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFZixNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUVsQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoRixJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ1IsWUFBQSxPQUFPLElBQUksQ0FBQztBQUNiLFNBQUE7QUFDRCxRQUFBLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRWhCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBRWxELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBRWxELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ2xELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ25ELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBRW5ELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ25ELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ25ELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ25ELFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0tBQ3BEO0FBRUQ7Ozs7OztBQU1HO0lBQ0gsT0FBTyxNQUFNLENBQUMsR0FBWSxFQUFFLE1BQWUsRUFBRSxFQUFXLEVBQUUsR0FBWSxFQUFBO0FBQ3BFLFFBQUEsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sS0FBSyxHQUFZLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDMUMsUUFBQSxNQUFNLEtBQUssR0FBWSxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzFDLFFBQUEsTUFBTSxLQUFLLEdBQVksT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUUxQyxPQUFP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QyxFQUNiLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztRQUdmLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUd4QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUUxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUUxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUMzQyxRQUFBLEVBQUUsQ0FBQyxF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LEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFO0FBQ2IsWUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BELFlBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwRCxZQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckQsWUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELFNBQUE7QUFBTSxhQUFBO1lBQ0wsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDWCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRWYsWUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUMzRCxZQUFBLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzNELFlBQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFFN0QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5QyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvQyxTQUFBO0tBQ0Y7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLFNBQVMsQ0FBQyxDQUFVLEVBQUUsR0FBWSxFQUFBO0FBQ3ZDLFFBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN0QixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFFeEIsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO0FBQ2IsWUFBQSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsWUFBQSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsWUFBQSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsWUFBQSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsWUFBQSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsWUFBQSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFbkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRWYsWUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ1osRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFZixZQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixZQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDWixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRWhCLFlBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNiLFlBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNiLFlBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNkLFNBQUE7QUFBTSxhQUFBO1lBQ0wsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVmLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFZixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVoQixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNmLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqQixTQUFBO0tBQ0Y7QUFFRDs7Ozs7Ozs7O0FBU0c7QUFDSCxJQUFBLFFBQVEsR0FBaUIsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFOUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCRztJQUNILFdBQ0UsQ0FBQSxHQUFBLEdBQWMsQ0FBQyxFQUNmLEdBQUEsR0FBYyxDQUFDLEVBQ2YsR0FBQSxHQUFjLENBQUMsRUFDZixHQUFBLEdBQWMsQ0FBQyxFQUNmLEdBQUEsR0FBYyxDQUFDLEVBQ2YsR0FBQSxHQUFjLENBQUMsRUFDZixHQUFBLEdBQWMsQ0FBQyxFQUNmLEdBQWMsR0FBQSxDQUFDLEVBQ2YsR0FBYyxHQUFBLENBQUMsRUFDZixHQUFjLEdBQUEsQ0FBQyxFQUNmLEdBQWMsR0FBQSxDQUFDLEVBQ2YsR0FBYyxHQUFBLENBQUMsRUFDZixHQUFjLEdBQUEsQ0FBQyxFQUNmLEdBQWMsR0FBQSxDQUFDLEVBQ2YsR0FBYyxHQUFBLENBQUMsRUFDZixHQUFBLEdBQWMsQ0FBQyxFQUFBO0FBRWYsUUFBQSxNQUFNLENBQUMsR0FBaUIsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUV0QyxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFFWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFFWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWCxRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7QUFFWixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDWixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDYjtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJHO0FBQ0gsSUFBQSxRQUFRLENBQ04sR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUNYLEdBQVcsRUFDWCxHQUFXLEVBQ1gsR0FBVyxFQUFBO0FBRVgsUUFBQSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBRXhCLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNYLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNaLFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVaLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7OztBQUtHO0FBQ0gsSUFBQSxlQUFlLENBQUMsS0FBd0IsRUFBRSxNQUFBLEdBQWlCLENBQUMsRUFBQTtBQUMxRCxRQUFBLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztBQUM3QixTQUFBO0FBQ0QsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsT0FBTyxDQUFDLEdBQTJDLEVBQUUsU0FBQSxHQUFvQixDQUFDLEVBQUE7QUFDeEUsUUFBQSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRXhCLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDN0I7QUFFRDs7O0FBR0c7SUFDSCxLQUFLLEdBQUE7QUFDSCxRQUFBLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDeEIsUUFBQSxJQUFJLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNKLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNKLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNKLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNKLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNMLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUNOLENBQUM7QUFDRixRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxPQUFPLENBQUMsR0FBWSxFQUFBO0FBQ2xCLFFBQUEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFFeEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUViLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWYsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNmLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2YsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUVmLFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLFFBQVEsQ0FBQyxLQUFjLEVBQUE7UUFDckIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVEOzs7QUFHRztJQUNILFdBQVcsR0FBQTtBQUNULFFBQUEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUV4QixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2QsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2QsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2QsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZCxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ2YsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFZCxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQzs7UUFHbEMsT0FBTyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztLQUM5RTtBQUVEOzs7Ozs7QUFNRztBQUNILElBQUEsU0FBUyxDQUFDLFdBQW9CLEVBQUUsUUFBb0IsRUFBRSxLQUFjLEVBQUE7QUFDbEUsUUFBQSxNQUFNLEVBQUUsR0FBWSxPQUFPLENBQUMsVUFBVSxDQUFDO0FBRXZDLFFBQUEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFFeEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEIsUUFBQSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFMUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6RCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFekQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUM3RCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzdELE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDN0QsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTNCLElBQ0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYTtZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhO1lBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLGFBQWEsRUFDckM7WUFDQSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDcEIsWUFBQSxPQUFPLEtBQUssQ0FBQztBQUNkLFNBQUE7QUFBTSxhQUFBO0FBQ0wsWUFBQSxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLFlBQUEsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNyQixZQUFBLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFckIsWUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNyQixZQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLFlBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDckIsWUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNyQixZQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLFlBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDckIsWUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNyQixZQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLFlBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDckIsWUFBQSxVQUFVLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzNDLFlBQUEsT0FBTyxJQUFJLENBQUM7QUFDYixTQUFBO0tBQ0Y7QUFFRDs7OztBQUlHO0FBQ0gsSUFBQSxXQUFXLENBQUMsR0FBZSxFQUFBO0FBQ3pCLFFBQUEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN4QixRQUFBLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRWhDLFFBQUEsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsRUFBRTtBQUNsQyxZQUFBLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQyxZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNsQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixTQUFBO0FBQU0sYUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqRCxZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNsQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixZQUFBLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixTQUFBO2FBQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pELFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLFlBQUEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLFNBQUE7QUFBTSxhQUFBO1lBQ0wsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsWUFBQSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7QUFDbkIsU0FBQTtBQUVELFFBQUEsR0FBRyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDN0MsUUFBQSxPQUFPLEdBQUcsQ0FBQztLQUNaO0FBRUQ7Ozs7QUFJRztBQUNILElBQUEsVUFBVSxDQUFDLEdBQVksRUFBQTs7QUFFckIsUUFBQSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDZCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2QsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNkLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVkLEdBQUcsQ0FBQyxRQUFRLENBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FDN0MsQ0FBQztBQUVGLFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUVEOzs7O0FBSUc7QUFDSCxJQUFBLGNBQWMsQ0FBQyxHQUFZLEVBQUE7QUFDekIsUUFBQSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFFBQUEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUVEOzs7QUFHRztJQUNILFFBQVEsR0FBQTtBQUNOLFFBQUEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUV4QixRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFVixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixRQUFBLENB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O0FBRVIsSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLFVBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLFVBQVEsQ0FBQTs7QUFFUixJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsWUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsWUFBVSxDQUFBOztBQUVWLElBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxZQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsR0FBQSxZQUFVLENBQUE7O0FBRVYsSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLFlBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLFlBQVUsQ0FBQTs7QUFFVixJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsYUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsYUFBVyxDQUFBOztBQUVYLElBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxZQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsR0FBQSxZQUFVLENBQUE7O0FBRVYsSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLGFBQVcsQ0FBQTs7QUFFWCxJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsVUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsVUFBUSxDQUFBOztBQUVSLElBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsR0FBQSxVQUFRLENBQUE7O0FBRVIsSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLFVBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLFVBQVEsQ0FBQTs7QUFFUixJQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsVUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsVUFBUSxDQUFBOztBQUVSLElBQUEsYUFBQSxDQUFBLGFBQUEsQ0FBQSxZQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsR0FBQSxZQUFVLENBQUE7O0FBRVYsSUFBQSxhQUFBLENBQUEsYUFBQSxDQUFBLFlBQUEsQ0FBQSxHQUFBLEVB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QyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlELFFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFM0IsUUFBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRSxRQUFBLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvRCxRQUFBLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUQsUUFBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBRTNCLFFBQUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9ELFFBQUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5RCxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoRSxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pFLFFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUU1QixRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5RCxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEUsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUU1QixRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5RCxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDaEUsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUU1QixRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRSxRQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0QsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEUsUUFBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqRSxRQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsUUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQyxRQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUU1QixRQUFBLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7QUFJcEMsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7O0FBRTlGLFlBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDOztBQUVoRyxZQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRTs7QUFFdkcsWUFBQSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUU7O0FBRTFHLFlBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFOztBQUUxRyxZQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTNHLFFBQUEsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8s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Q0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVoQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRVYsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVWLFFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoQixFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN2QixRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFWCxRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENB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
